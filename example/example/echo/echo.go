// Code generated by Kitex v1.4.1. DO NOT EDIT.

package echo

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/teamgram/proto/bin"

	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/teamgram/proto/example/example"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServiceInfo
}

var echoServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Echo"
	handlerType := (*example.RPCEcho)(nil)
	methods := map[string]kitex.MethodInfo{
		"echo": kitex.NewMethodInfo(echoHandler, newEchoArgs, newEchoResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v1.4.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*EchoArgs)
	realResult := result.(*EchoResult)
	success, err := handler.(example.RPCEcho).ExampleEcho(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEchoArgs() interface{} {
	return &EchoArgs{}
}

func newEchoResult() interface{} {
	return &EchoResult{}
}

type EchoArgs struct {
	Req *example.TLExampleEcho
}

func (p *EchoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in EchoArgs")
	}
	return json.Marshal(p.Req)
}

func (p *EchoArgs) Unmarshal(in []byte) error {
	msg := new(example.TLExampleEcho)
	if err := json.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *EchoArgs) Encode(x *bin.Encoder, layer int32) []byte {
	if !p.IsSetReq() {
		return nil
	}
	// return json.Marshal(p.Req)

	return nil
}

func (p *EchoArgs) Decode(in []byte) error {
	msg := new(example.TLExampleEcho)
	if err := json.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoArgs_Req_DEFAULT *example.TLExampleEcho

func (p *EchoArgs) GetReq() *example.TLExampleEcho {
	if !p.IsSetReq() {
		return EchoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoArgs) IsSetReq() bool {
	return p.Req != nil
}

type EchoResult struct {
	Success *example.Echo `json:"success"`
}

var EchoResult_Success_DEFAULT *example.Echo

func (p *EchoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in EchoResult")
	}
	return json.Marshal(p.Success)
}

func (p *EchoResult) Unmarshal(in []byte) error {
	var (
		msg = &example.Echo{
			ClazzName: "Echo",
			Clazz:     &example.TLEcho{},
		}
	)
	if err := json.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoResult) GetSuccess() *example.Echo {
	if !p.IsSetSuccess() {
		return EchoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*example.Echo)
}

func (p *EchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *example.TLExampleEcho) (r *example.Echo, err error) {
	var _args EchoArgs
	_args.Req = req
	var (
		_result = EchoResult{
			Success: &example.Echo{
				ClazzName: "Echo",
				Clazz:     &example.TLEcho{},
			},
		}
	)
	if err = p.c.Call(ctx, "echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
