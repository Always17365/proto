/*
 * WARNING! All changes made in this file will be lost!
 * Created from 'scheme.tl' by 'mtprotoc'
 *
 * Copyright (c) 2021-present,  NebulaChat Studio (https://nebula.chat).
 *  All rights reserved.
 *
 * Author: Benqi (wubenqi@gmail.com)
 */

// ConstructorList
// RequestList

package mtproto

import (
	"fmt"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/types"
)

///////////////////////////////////////////////////////////////////////////////
// FutureSalts <--
//  + TL_FutureSalts
//

func (m *FutureSalts) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}
	switch predicateName {
	case Predicate_future_salts:
		t := m.To_FutureSalts()
		return t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s", m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}
}

func (m *FutureSalts) CalcByteSize(layer int32) int {
	return 0
}

func (m *FutureSalts) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xae500895:
		m2 := MakeTLFutureSalts(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *FutureSalts) DebugString() string {
	switch m.PredicateName {
	case Predicate_future_salts:
		t := m.To_FutureSalts()
		return t.DebugString()

	default:
		return "{}"
	}
}

// To_FutureSalts
// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func (m *FutureSalts) To_FutureSalts() *TLFutureSalts {
	m.PredicateName = Predicate_future_salts
	return &TLFutureSalts{
		Data2: m,
	}
}

// MakeTLFutureSalts
// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func MakeTLFutureSalts(data2 *FutureSalts) *TLFutureSalts {
	if data2 == nil {
		return &TLFutureSalts{Data2: &FutureSalts{
			PredicateName: Predicate_future_salts,
		}}
	} else {
		data2.PredicateName = Predicate_future_salts
		return &TLFutureSalts{Data2: data2}
	}
}

func (m *TLFutureSalts) To_FutureSalts() *FutureSalts {
	m.Data2.PredicateName = Predicate_future_salts
	return m.Data2
}

func (m *TLFutureSalts) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLFutureSalts) GetReqMsgId() int64  { return m.Data2.ReqMsgId }

func (m *TLFutureSalts) SetNow(v int32) { m.Data2.Now = v }
func (m *TLFutureSalts) GetNow() int32  { return m.Data2.Now }

func (m *TLFutureSalts) SetSalts(v []*TLFutureSalt) { m.Data2.Salts = v }
func (m *TLFutureSalts) GetSalts() []*TLFutureSalt  { return m.Data2.Salts }

func (m *TLFutureSalts) GetPredicateName() string {
	return Predicate_future_salts
}

func (m *TLFutureSalts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xae500895: func() []byte {
			// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
			x.UInt(0xae500895)
			// no flags

			x.Long(m.GetReqMsgId())
			x.Int(m.GetNow())
			// x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSalts())))
			for _, v := range m.GetSalts() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_future_salts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_future_salts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLFutureSalts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFutureSalts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xae500895: func() error {
			// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
			// not has flags

			m.SetReqMsgId(dBuf.Long())
			m.SetNow(dBuf.Int())
			// c2 := dBuf.Int()
			// if c2 != int32(CRC32_vector) {
			//     dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			//     return dBuf.err
			// }
			l2 := dBuf.Int()
			v2 := make([]*TLFutureSalt, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &TLFutureSalt{}
				v2[i].Decode(dBuf)
			}
			m.SetSalts(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLFutureSalts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// FutureSalt <--
//  + TL_FutureSalt
//

func (m *FutureSalt) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}
	switch predicateName {
	case Predicate_future_salt:
		t := m.To_FutureSalt()
		return t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s", m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}
}

func (m *FutureSalt) CalcByteSize(layer int32) int {
	return 0
}

func (m *FutureSalt) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x949d9dc:
		m2 := MakeTLFutureSalt(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *FutureSalt) DebugString() string {
	switch m.PredicateName {
	case Predicate_future_salt:
		t := m.To_FutureSalt()
		return t.DebugString()

	default:
		return "{}"
	}
}

// To_FutureSalt
// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func (m *FutureSalt) To_FutureSalt() *TLFutureSalt {
	m.PredicateName = Predicate_future_salt
	return &TLFutureSalt{
		Data2: m,
	}
}

// MakeTLFutureSalt
// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func MakeTLFutureSalt(data2 *FutureSalt) *TLFutureSalt {
	if data2 == nil {
		return &TLFutureSalt{Data2: &FutureSalt{
			PredicateName: Predicate_future_salt,
		}}
	} else {
		data2.PredicateName = Predicate_future_salt
		return &TLFutureSalt{Data2: data2}
	}
}

func (m *TLFutureSalt) To_FutureSalt() *FutureSalt {
	m.Data2.PredicateName = Predicate_future_salt
	return m.Data2
}

func (m *TLFutureSalt) SetValidSince(v int32) { m.Data2.ValidSince = v }
func (m *TLFutureSalt) GetValidSince() int32  { return m.Data2.ValidSince }

func (m *TLFutureSalt) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLFutureSalt) GetValidUntil() int32  { return m.Data2.ValidUntil }

func (m *TLFutureSalt) SetSalt(v int64) { m.Data2.Salt = v }
func (m *TLFutureSalt) GetSalt() int64  { return m.Data2.Salt }

func (m *TLFutureSalt) GetPredicateName() string {
	return Predicate_future_salt
}

func (m *TLFutureSalt) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x949d9dc: func() []byte {
			// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
			// FIXME(@benqi)
			// x.UInt(0x949d9dc)
			// no flags

			x.Int(m.GetValidSince())
			x.Int(m.GetValidUntil())
			x.Long(m.GetSalt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_future_salt, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_future_salt, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLFutureSalt) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFutureSalt) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x949d9dc: func() error {
			// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
			// not has flags

			m.SetValidSince(dBuf.Int())
			m.SetValidUntil(dBuf.Int())
			m.SetSalt(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLFutureSalt) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Server_DHInnerData <--
//  + TL_Server_DHInnerData
//

func (m *Server_DHInnerData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_server_DH_inner_data:
		t := m.To_Server_DHInnerData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Server_DHInnerData) CalcByteSize(layer int32) int {
	return 0
}

func (m *Server_DHInnerData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb5890dba:
		m2 := MakeTLServer_DHInnerData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Server_DHInnerData) DebugString() string {
	switch m.PredicateName {
	case Predicate_server_DH_inner_data:
		t := m.To_Server_DHInnerData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Server_DHInnerData
func (m *Server_DHInnerData) To_Server_DHInnerData() *TLServer_DHInnerData {
	m.PredicateName = Predicate_server_DH_inner_data
	return &TLServer_DHInnerData{
		Data2: m,
	}
}

// MakeTLServer_DHInnerData
func MakeTLServer_DHInnerData(data2 *Server_DHInnerData) *TLServer_DHInnerData {
	if data2 == nil {
		return &TLServer_DHInnerData{Data2: &Server_DHInnerData{
			PredicateName: Predicate_server_DH_inner_data,
		}}
	} else {
		data2.PredicateName = Predicate_server_DH_inner_data
		return &TLServer_DHInnerData{Data2: data2}
	}
}

func (m *TLServer_DHInnerData) To_Server_DHInnerData() *Server_DHInnerData {
	m.Data2.PredicateName = Predicate_server_DH_inner_data
	return m.Data2
}

func (m *TLServer_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHInnerData) SetG(v int32) { m.Data2.G = v }
func (m *TLServer_DHInnerData) GetG() int32  { return m.Data2.G }

func (m *TLServer_DHInnerData) SetDhPrime(v string) { m.Data2.DhPrime = v }
func (m *TLServer_DHInnerData) GetDhPrime() string  { return m.Data2.DhPrime }

func (m *TLServer_DHInnerData) SetGA(v string) { m.Data2.GA = v }
func (m *TLServer_DHInnerData) GetGA() string  { return m.Data2.GA }

func (m *TLServer_DHInnerData) SetServerTime(v int32) { m.Data2.ServerTime = v }
func (m *TLServer_DHInnerData) GetServerTime() int32  { return m.Data2.ServerTime }

func (m *TLServer_DHInnerData) GetPredicateName() string {
	return Predicate_server_DH_inner_data
}

func (m *TLServer_DHInnerData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb5890dba: func() []byte {
			x.UInt(0xb5890dba)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Int(m.GetG())
			x.String(m.GetDhPrime())
			x.String(m.GetGA())
			x.Int(m.GetServerTime())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_server_DH_inner_data, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_server_DH_inner_data, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLServer_DHInnerData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLServer_DHInnerData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb5890dba: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetG(dBuf.Int())
			m.SetDhPrime(dBuf.String())
			m.SetGA(dBuf.String())
			m.SetServerTime(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLServer_DHInnerData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Client_DH_Inner_Data <--
//  + TL_Client_DHInnerData
//

func (m *Client_DH_Inner_Data) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_client_DH_inner_data:
		t := m.To_Client_DHInnerData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Client_DH_Inner_Data) CalcByteSize(layer int32) int {
	return 0
}

func (m *Client_DH_Inner_Data) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6643b654:
		m2 := MakeTLClient_DHInnerData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Client_DH_Inner_Data) DebugString() string {
	switch m.PredicateName {
	case Predicate_client_DH_inner_data:
		t := m.To_Client_DHInnerData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Client_DHInnerData
func (m *Client_DH_Inner_Data) To_Client_DHInnerData() *TLClient_DHInnerData {
	m.PredicateName = Predicate_client_DH_inner_data
	return &TLClient_DHInnerData{
		Data2: m,
	}
}

// MakeTLClient_DHInnerData
func MakeTLClient_DHInnerData(data2 *Client_DH_Inner_Data) *TLClient_DHInnerData {
	if data2 == nil {
		return &TLClient_DHInnerData{Data2: &Client_DH_Inner_Data{
			PredicateName: Predicate_client_DH_inner_data,
		}}
	} else {
		data2.PredicateName = Predicate_client_DH_inner_data
		return &TLClient_DHInnerData{Data2: data2}
	}
}

func (m *TLClient_DHInnerData) To_Client_DH_Inner_Data() *Client_DH_Inner_Data {
	m.Data2.PredicateName = Predicate_client_DH_inner_data
	return m.Data2
}

func (m *TLClient_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLClient_DHInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLClient_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLClient_DHInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLClient_DHInnerData) SetRetryId(v int64) { m.Data2.RetryId = v }
func (m *TLClient_DHInnerData) GetRetryId() int64  { return m.Data2.RetryId }

func (m *TLClient_DHInnerData) SetGB(v string) { m.Data2.GB = v }
func (m *TLClient_DHInnerData) GetGB() string  { return m.Data2.GB }

func (m *TLClient_DHInnerData) GetPredicateName() string {
	return Predicate_client_DH_inner_data
}

func (m *TLClient_DHInnerData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6643b654: func() []byte {
			x.UInt(0x6643b654)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Long(m.GetRetryId())
			x.String(m.GetGB())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_client_DH_inner_data, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_client_DH_inner_data, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLClient_DHInnerData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLClient_DHInnerData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6643b654: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetRetryId(dBuf.Long())
			m.SetGB(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLClient_DHInnerData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SetClient_DHParamsAnswer <--
//  + TL_DhGenOk
//  + TL_DhGenRetry
//  + TL_DhGenFail
//

func (m *SetClient_DHParamsAnswer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dh_gen_ok:
		t := m.To_DhGenOk()
		xBuf = t.Encode(layer)
	case Predicate_dh_gen_retry:
		t := m.To_DhGenRetry()
		xBuf = t.Encode(layer)
	case Predicate_dh_gen_fail:
		t := m.To_DhGenFail()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SetClient_DHParamsAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *SetClient_DHParamsAnswer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3bcbf734:
		m2 := MakeTLDhGenOk(m)
		m2.Decode(dBuf)
	case 0x46dc1fb9:
		m2 := MakeTLDhGenRetry(m)
		m2.Decode(dBuf)
	case 0xa69dae02:
		m2 := MakeTLDhGenFail(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SetClient_DHParamsAnswer) DebugString() string {
	switch m.PredicateName {
	case Predicate_dh_gen_ok:
		t := m.To_DhGenOk()
		return t.DebugString()
	case Predicate_dh_gen_retry:
		t := m.To_DhGenRetry()
		return t.DebugString()
	case Predicate_dh_gen_fail:
		t := m.To_DhGenFail()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DhGenOk
func (m *SetClient_DHParamsAnswer) To_DhGenOk() *TLDhGenOk {
	m.PredicateName = Predicate_dh_gen_ok
	return &TLDhGenOk{
		Data2: m,
	}
}

// To_DhGenRetry
func (m *SetClient_DHParamsAnswer) To_DhGenRetry() *TLDhGenRetry {
	m.PredicateName = Predicate_dh_gen_retry
	return &TLDhGenRetry{
		Data2: m,
	}
}

// To_DhGenFail
func (m *SetClient_DHParamsAnswer) To_DhGenFail() *TLDhGenFail {
	m.PredicateName = Predicate_dh_gen_fail
	return &TLDhGenFail{
		Data2: m,
	}
}

// MakeTLDhGenOk
func MakeTLDhGenOk(data2 *SetClient_DHParamsAnswer) *TLDhGenOk {
	if data2 == nil {
		return &TLDhGenOk{Data2: &SetClient_DHParamsAnswer{
			PredicateName: Predicate_dh_gen_ok,
		}}
	} else {
		data2.PredicateName = Predicate_dh_gen_ok
		return &TLDhGenOk{Data2: data2}
	}
}

func (m *TLDhGenOk) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	m.Data2.PredicateName = Predicate_dh_gen_ok
	return m.Data2
}

func (m *TLDhGenOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenOk) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenOk) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenOk) SetNewNonceHash1(v []byte) { m.Data2.NewNonceHash1 = v }
func (m *TLDhGenOk) GetNewNonceHash1() []byte  { return m.Data2.NewNonceHash1 }

func (m *TLDhGenOk) GetPredicateName() string {
	return Predicate_dh_gen_ok
}

func (m *TLDhGenOk) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3bcbf734: func() []byte {
			x.UInt(0x3bcbf734)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonceHash1())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dh_gen_ok, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dh_gen_ok, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDhGenOk) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDhGenOk) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3bcbf734: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonceHash1(dBuf.Bytes(16))
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDhGenOk) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDhGenRetry
func MakeTLDhGenRetry(data2 *SetClient_DHParamsAnswer) *TLDhGenRetry {
	if data2 == nil {
		return &TLDhGenRetry{Data2: &SetClient_DHParamsAnswer{
			PredicateName: Predicate_dh_gen_retry,
		}}
	} else {
		data2.PredicateName = Predicate_dh_gen_retry
		return &TLDhGenRetry{Data2: data2}
	}
}

func (m *TLDhGenRetry) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	m.Data2.PredicateName = Predicate_dh_gen_retry
	return m.Data2
}

func (m *TLDhGenRetry) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenRetry) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenRetry) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenRetry) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenRetry) SetNewNonceHash2(v []byte) { m.Data2.NewNonceHash2 = v }
func (m *TLDhGenRetry) GetNewNonceHash2() []byte  { return m.Data2.NewNonceHash2 }

func (m *TLDhGenRetry) GetPredicateName() string {
	return Predicate_dh_gen_retry
}

func (m *TLDhGenRetry) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x46dc1fb9: func() []byte {
			x.UInt(0x46dc1fb9)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonceHash2())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dh_gen_retry, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dh_gen_retry, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDhGenRetry) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDhGenRetry) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x46dc1fb9: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonceHash2(dBuf.Bytes(16))
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDhGenRetry) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDhGenFail
func MakeTLDhGenFail(data2 *SetClient_DHParamsAnswer) *TLDhGenFail {
	if data2 == nil {
		return &TLDhGenFail{Data2: &SetClient_DHParamsAnswer{
			PredicateName: Predicate_dh_gen_fail,
		}}
	} else {
		data2.PredicateName = Predicate_dh_gen_fail
		return &TLDhGenFail{Data2: data2}
	}
}

func (m *TLDhGenFail) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
	m.Data2.PredicateName = Predicate_dh_gen_fail
	return m.Data2
}

func (m *TLDhGenFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenFail) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLDhGenFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenFail) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLDhGenFail) SetNewNonceHash3(v []byte) { m.Data2.NewNonceHash3 = v }
func (m *TLDhGenFail) GetNewNonceHash3() []byte  { return m.Data2.NewNonceHash3 }

func (m *TLDhGenFail) GetPredicateName() string {
	return Predicate_dh_gen_fail
}

func (m *TLDhGenFail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa69dae02: func() []byte {
			x.UInt(0xa69dae02)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonceHash3())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dh_gen_fail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dh_gen_fail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDhGenFail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDhGenFail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa69dae02: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonceHash3(dBuf.Bytes(16))
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDhGenFail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DestroyAuthKeyRes <--
//  + TL_DestroyAuthKeyOk
//  + TL_DestroyAuthKeyNone
//  + TL_DestroyAuthKeyFail
//

func (m *DestroyAuthKeyRes) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_destroy_auth_key_ok:
		t := m.To_DestroyAuthKeyOk()
		xBuf = t.Encode(layer)
	case Predicate_destroy_auth_key_none:
		t := m.To_DestroyAuthKeyNone()
		xBuf = t.Encode(layer)
	case Predicate_destroy_auth_key_fail:
		t := m.To_DestroyAuthKeyFail()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DestroyAuthKeyRes) CalcByteSize(layer int32) int {
	return 0
}

func (m *DestroyAuthKeyRes) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf660e1d4:
		m2 := MakeTLDestroyAuthKeyOk(m)
		m2.Decode(dBuf)
	case 0xa9f2259:
		m2 := MakeTLDestroyAuthKeyNone(m)
		m2.Decode(dBuf)
	case 0xea109b13:
		m2 := MakeTLDestroyAuthKeyFail(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DestroyAuthKeyRes) DebugString() string {
	switch m.PredicateName {
	case Predicate_destroy_auth_key_ok:
		t := m.To_DestroyAuthKeyOk()
		return t.DebugString()
	case Predicate_destroy_auth_key_none:
		t := m.To_DestroyAuthKeyNone()
		return t.DebugString()
	case Predicate_destroy_auth_key_fail:
		t := m.To_DestroyAuthKeyFail()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DestroyAuthKeyOk
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyOk() *TLDestroyAuthKeyOk {
	m.PredicateName = Predicate_destroy_auth_key_ok
	return &TLDestroyAuthKeyOk{
		Data2: m,
	}
}

// To_DestroyAuthKeyNone
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyNone() *TLDestroyAuthKeyNone {
	m.PredicateName = Predicate_destroy_auth_key_none
	return &TLDestroyAuthKeyNone{
		Data2: m,
	}
}

// To_DestroyAuthKeyFail
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyFail() *TLDestroyAuthKeyFail {
	m.PredicateName = Predicate_destroy_auth_key_fail
	return &TLDestroyAuthKeyFail{
		Data2: m,
	}
}

// MakeTLDestroyAuthKeyOk
func MakeTLDestroyAuthKeyOk(data2 *DestroyAuthKeyRes) *TLDestroyAuthKeyOk {
	if data2 == nil {
		return &TLDestroyAuthKeyOk{Data2: &DestroyAuthKeyRes{
			PredicateName: Predicate_destroy_auth_key_ok,
		}}
	} else {
		data2.PredicateName = Predicate_destroy_auth_key_ok
		return &TLDestroyAuthKeyOk{Data2: data2}
	}
}

func (m *TLDestroyAuthKeyOk) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	m.Data2.PredicateName = Predicate_destroy_auth_key_ok
	return m.Data2
}

func (m *TLDestroyAuthKeyOk) GetPredicateName() string {
	return Predicate_destroy_auth_key_ok
}

func (m *TLDestroyAuthKeyOk) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf660e1d4: func() []byte {
			x.UInt(0xf660e1d4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_destroy_auth_key_ok, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_destroy_auth_key_ok, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDestroyAuthKeyOk) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroyAuthKeyOk) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf660e1d4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDestroyAuthKeyOk) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDestroyAuthKeyNone
func MakeTLDestroyAuthKeyNone(data2 *DestroyAuthKeyRes) *TLDestroyAuthKeyNone {
	if data2 == nil {
		return &TLDestroyAuthKeyNone{Data2: &DestroyAuthKeyRes{
			PredicateName: Predicate_destroy_auth_key_none,
		}}
	} else {
		data2.PredicateName = Predicate_destroy_auth_key_none
		return &TLDestroyAuthKeyNone{Data2: data2}
	}
}

func (m *TLDestroyAuthKeyNone) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	m.Data2.PredicateName = Predicate_destroy_auth_key_none
	return m.Data2
}

func (m *TLDestroyAuthKeyNone) GetPredicateName() string {
	return Predicate_destroy_auth_key_none
}

func (m *TLDestroyAuthKeyNone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa9f2259: func() []byte {
			x.UInt(0xa9f2259)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_destroy_auth_key_none, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_destroy_auth_key_none, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDestroyAuthKeyNone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroyAuthKeyNone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa9f2259: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDestroyAuthKeyNone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDestroyAuthKeyFail
func MakeTLDestroyAuthKeyFail(data2 *DestroyAuthKeyRes) *TLDestroyAuthKeyFail {
	if data2 == nil {
		return &TLDestroyAuthKeyFail{Data2: &DestroyAuthKeyRes{
			PredicateName: Predicate_destroy_auth_key_fail,
		}}
	} else {
		data2.PredicateName = Predicate_destroy_auth_key_fail
		return &TLDestroyAuthKeyFail{Data2: data2}
	}
}

func (m *TLDestroyAuthKeyFail) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
	m.Data2.PredicateName = Predicate_destroy_auth_key_fail
	return m.Data2
}

func (m *TLDestroyAuthKeyFail) GetPredicateName() string {
	return Predicate_destroy_auth_key_fail
}

func (m *TLDestroyAuthKeyFail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xea109b13: func() []byte {
			x.UInt(0xea109b13)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_destroy_auth_key_fail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_destroy_auth_key_fail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDestroyAuthKeyFail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroyAuthKeyFail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xea109b13: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDestroyAuthKeyFail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ResPQ <--
//  + TL_ResPQ
//

func (m *ResPQ) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_resPQ:
		t := m.To_ResPQ()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ResPQ) CalcByteSize(layer int32) int {
	return 0
}

func (m *ResPQ) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5162463:
		m2 := MakeTLResPQ(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ResPQ) DebugString() string {
	switch m.PredicateName {
	case Predicate_resPQ:
		t := m.To_ResPQ()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ResPQ
func (m *ResPQ) To_ResPQ() *TLResPQ {
	m.PredicateName = Predicate_resPQ
	return &TLResPQ{
		Data2: m,
	}
}

// MakeTLResPQ
func MakeTLResPQ(data2 *ResPQ) *TLResPQ {
	if data2 == nil {
		return &TLResPQ{Data2: &ResPQ{
			PredicateName: Predicate_resPQ,
		}}
	} else {
		data2.PredicateName = Predicate_resPQ
		return &TLResPQ{Data2: data2}
	}
}

func (m *TLResPQ) To_ResPQ() *ResPQ {
	m.Data2.PredicateName = Predicate_resPQ
	return m.Data2
}

func (m *TLResPQ) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLResPQ) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLResPQ) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLResPQ) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLResPQ) SetPq(v string) { m.Data2.Pq = v }
func (m *TLResPQ) GetPq() string  { return m.Data2.Pq }

func (m *TLResPQ) SetServerPublicKeyFingerprints(v []int64) { m.Data2.ServerPublicKeyFingerprints = v }
func (m *TLResPQ) GetServerPublicKeyFingerprints() []int64 {
	return m.Data2.ServerPublicKeyFingerprints
}

func (m *TLResPQ) GetPredicateName() string {
	return Predicate_resPQ
}

func (m *TLResPQ) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5162463: func() []byte {
			x.UInt(0x5162463)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.String(m.GetPq())

			x.VectorLong(m.GetServerPublicKeyFingerprints())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_resPQ, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_resPQ, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLResPQ) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLResPQ) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5162463: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetPq(dBuf.String())

			m.SetServerPublicKeyFingerprints(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLResPQ) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// P_QInnerData <--
//  + TL_PQInnerData
//  + TL_PQInnerDataDc
//  + TL_PQInnerDataTemp
//  + TL_PQInnerDataTempDc
//

func (m *P_QInnerData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_p_q_inner_data:
		t := m.To_PQInnerData()
		xBuf = t.Encode(layer)
	case Predicate_p_q_inner_data_dc:
		t := m.To_PQInnerDataDc()
		xBuf = t.Encode(layer)
	case Predicate_p_q_inner_data_temp:
		t := m.To_PQInnerDataTemp()
		xBuf = t.Encode(layer)
	case Predicate_p_q_inner_data_temp_dc:
		t := m.To_PQInnerDataTempDc()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *P_QInnerData) CalcByteSize(layer int32) int {
	return 0
}

func (m *P_QInnerData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x83c95aec:
		m2 := MakeTLPQInnerData(m)
		m2.Decode(dBuf)
	case 0xa9f55f95:
		m2 := MakeTLPQInnerDataDc(m)
		m2.Decode(dBuf)
	case 0x3c6a84d4:
		m2 := MakeTLPQInnerDataTemp(m)
		m2.Decode(dBuf)
	case 0x56fddf88:
		m2 := MakeTLPQInnerDataTempDc(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *P_QInnerData) DebugString() string {
	switch m.PredicateName {
	case Predicate_p_q_inner_data:
		t := m.To_PQInnerData()
		return t.DebugString()
	case Predicate_p_q_inner_data_dc:
		t := m.To_PQInnerDataDc()
		return t.DebugString()
	case Predicate_p_q_inner_data_temp:
		t := m.To_PQInnerDataTemp()
		return t.DebugString()
	case Predicate_p_q_inner_data_temp_dc:
		t := m.To_PQInnerDataTempDc()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PQInnerData
func (m *P_QInnerData) To_PQInnerData() *TLPQInnerData {
	m.PredicateName = Predicate_p_q_inner_data
	return &TLPQInnerData{
		Data2: m,
	}
}

// To_PQInnerDataDc
func (m *P_QInnerData) To_PQInnerDataDc() *TLPQInnerDataDc {
	m.PredicateName = Predicate_p_q_inner_data_dc
	return &TLPQInnerDataDc{
		Data2: m,
	}
}

// To_PQInnerDataTemp
func (m *P_QInnerData) To_PQInnerDataTemp() *TLPQInnerDataTemp {
	m.PredicateName = Predicate_p_q_inner_data_temp
	return &TLPQInnerDataTemp{
		Data2: m,
	}
}

// To_PQInnerDataTempDc
func (m *P_QInnerData) To_PQInnerDataTempDc() *TLPQInnerDataTempDc {
	m.PredicateName = Predicate_p_q_inner_data_temp_dc
	return &TLPQInnerDataTempDc{
		Data2: m,
	}
}

// MakeTLPQInnerData
func MakeTLPQInnerData(data2 *P_QInnerData) *TLPQInnerData {
	if data2 == nil {
		return &TLPQInnerData{Data2: &P_QInnerData{
			PredicateName: Predicate_p_q_inner_data,
		}}
	} else {
		data2.PredicateName = Predicate_p_q_inner_data
		return &TLPQInnerData{Data2: data2}
	}
}

func (m *TLPQInnerData) To_P_QInnerData() *P_QInnerData {
	m.Data2.PredicateName = Predicate_p_q_inner_data
	return m.Data2
}

func (m *TLPQInnerData) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerData) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerData) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerData) GetP() string  { return m.Data2.P }

func (m *TLPQInnerData) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerData) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerData) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerData) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerData) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerData) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerData) GetPredicateName() string {
	return Predicate_p_q_inner_data
}

func (m *TLPQInnerData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x83c95aec: func() []byte {
			x.UInt(0x83c95aec)

			x.String(m.GetPq())
			x.String(m.GetP())
			x.String(m.GetQ())
			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonce())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_p_q_inner_data, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_p_q_inner_data, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPQInnerData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPQInnerData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x83c95aec: func() error {
			m.SetPq(dBuf.String())
			m.SetP(dBuf.String())
			m.SetQ(dBuf.String())
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonce(dBuf.Bytes(32))
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPQInnerData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPQInnerDataDc
func MakeTLPQInnerDataDc(data2 *P_QInnerData) *TLPQInnerDataDc {
	if data2 == nil {
		return &TLPQInnerDataDc{Data2: &P_QInnerData{
			PredicateName: Predicate_p_q_inner_data_dc,
		}}
	} else {
		data2.PredicateName = Predicate_p_q_inner_data_dc
		return &TLPQInnerDataDc{Data2: data2}
	}
}

func (m *TLPQInnerDataDc) To_P_QInnerData() *P_QInnerData {
	m.Data2.PredicateName = Predicate_p_q_inner_data_dc
	return m.Data2
}

func (m *TLPQInnerDataDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataDc) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataDc) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataDc) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataDc) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataDc) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataDc) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataDc) GetDc() int32  { return m.Data2.Dc }

func (m *TLPQInnerDataDc) GetPredicateName() string {
	return Predicate_p_q_inner_data_dc
}

func (m *TLPQInnerDataDc) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa9f55f95: func() []byte {
			x.UInt(0xa9f55f95)

			x.String(m.GetPq())
			x.String(m.GetP())
			x.String(m.GetQ())
			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonce())
			x.Int(m.GetDc())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_p_q_inner_data_dc, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_p_q_inner_data_dc, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPQInnerDataDc) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPQInnerDataDc) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa9f55f95: func() error {
			m.SetPq(dBuf.String())
			m.SetP(dBuf.String())
			m.SetQ(dBuf.String())
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonce(dBuf.Bytes(32))
			m.SetDc(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPQInnerDataDc) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPQInnerDataTemp
func MakeTLPQInnerDataTemp(data2 *P_QInnerData) *TLPQInnerDataTemp {
	if data2 == nil {
		return &TLPQInnerDataTemp{Data2: &P_QInnerData{
			PredicateName: Predicate_p_q_inner_data_temp,
		}}
	} else {
		data2.PredicateName = Predicate_p_q_inner_data_temp
		return &TLPQInnerDataTemp{Data2: data2}
	}
}

func (m *TLPQInnerDataTemp) To_P_QInnerData() *P_QInnerData {
	m.Data2.PredicateName = Predicate_p_q_inner_data_temp
	return m.Data2
}

func (m *TLPQInnerDataTemp) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTemp) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataTemp) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTemp) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataTemp) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTemp) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataTemp) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTemp) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataTemp) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTemp) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTemp) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTemp) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataTemp) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTemp) GetExpiresIn() int32  { return m.Data2.ExpiresIn }

func (m *TLPQInnerDataTemp) GetPredicateName() string {
	return Predicate_p_q_inner_data_temp
}

func (m *TLPQInnerDataTemp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3c6a84d4: func() []byte {
			x.UInt(0x3c6a84d4)

			x.String(m.GetPq())
			x.String(m.GetP())
			x.String(m.GetQ())
			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonce())
			x.Int(m.GetExpiresIn())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_p_q_inner_data_temp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_p_q_inner_data_temp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPQInnerDataTemp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPQInnerDataTemp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3c6a84d4: func() error {
			m.SetPq(dBuf.String())
			m.SetP(dBuf.String())
			m.SetQ(dBuf.String())
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonce(dBuf.Bytes(32))
			m.SetExpiresIn(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPQInnerDataTemp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPQInnerDataTempDc
func MakeTLPQInnerDataTempDc(data2 *P_QInnerData) *TLPQInnerDataTempDc {
	if data2 == nil {
		return &TLPQInnerDataTempDc{Data2: &P_QInnerData{
			PredicateName: Predicate_p_q_inner_data_temp_dc,
		}}
	} else {
		data2.PredicateName = Predicate_p_q_inner_data_temp_dc
		return &TLPQInnerDataTempDc{Data2: data2}
	}
}

func (m *TLPQInnerDataTempDc) To_P_QInnerData() *P_QInnerData {
	m.Data2.PredicateName = Predicate_p_q_inner_data_temp_dc
	return m.Data2
}

func (m *TLPQInnerDataTempDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTempDc) GetPq() string  { return m.Data2.Pq }

func (m *TLPQInnerDataTempDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTempDc) GetP() string  { return m.Data2.P }

func (m *TLPQInnerDataTempDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTempDc) GetQ() string  { return m.Data2.Q }

func (m *TLPQInnerDataTempDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTempDc) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLPQInnerDataTempDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTempDc) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTempDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTempDc) GetNewNonce() []byte  { return m.Data2.NewNonce }

func (m *TLPQInnerDataTempDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataTempDc) GetDc() int32  { return m.Data2.Dc }

func (m *TLPQInnerDataTempDc) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTempDc) GetExpiresIn() int32  { return m.Data2.ExpiresIn }

func (m *TLPQInnerDataTempDc) GetPredicateName() string {
	return Predicate_p_q_inner_data_temp_dc
}

func (m *TLPQInnerDataTempDc) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56fddf88: func() []byte {
			x.UInt(0x56fddf88)

			x.String(m.GetPq())
			x.String(m.GetP())
			x.String(m.GetQ())
			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonce())
			x.Int(m.GetDc())
			x.Int(m.GetExpiresIn())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_p_q_inner_data_temp_dc, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_p_q_inner_data_temp_dc, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPQInnerDataTempDc) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPQInnerDataTempDc) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56fddf88: func() error {
			m.SetPq(dBuf.String())
			m.SetP(dBuf.String())
			m.SetQ(dBuf.String())
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonce(dBuf.Bytes(32))
			m.SetDc(dBuf.Int())
			m.SetExpiresIn(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPQInnerDataTempDc) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BindAuthKeyInner <--
//  + TL_BindAuthKeyInner
//

func (m *BindAuthKeyInner) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_bind_auth_key_inner:
		t := m.To_BindAuthKeyInner()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BindAuthKeyInner) CalcByteSize(layer int32) int {
	return 0
}

func (m *BindAuthKeyInner) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x75a3f765:
		m2 := MakeTLBindAuthKeyInner(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BindAuthKeyInner) DebugString() string {
	switch m.PredicateName {
	case Predicate_bind_auth_key_inner:
		t := m.To_BindAuthKeyInner()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BindAuthKeyInner
func (m *BindAuthKeyInner) To_BindAuthKeyInner() *TLBindAuthKeyInner {
	m.PredicateName = Predicate_bind_auth_key_inner
	return &TLBindAuthKeyInner{
		Data2: m,
	}
}

// MakeTLBindAuthKeyInner
func MakeTLBindAuthKeyInner(data2 *BindAuthKeyInner) *TLBindAuthKeyInner {
	if data2 == nil {
		return &TLBindAuthKeyInner{Data2: &BindAuthKeyInner{
			PredicateName: Predicate_bind_auth_key_inner,
		}}
	} else {
		data2.PredicateName = Predicate_bind_auth_key_inner
		return &TLBindAuthKeyInner{Data2: data2}
	}
}

func (m *TLBindAuthKeyInner) To_BindAuthKeyInner() *BindAuthKeyInner {
	m.Data2.PredicateName = Predicate_bind_auth_key_inner
	return m.Data2
}

func (m *TLBindAuthKeyInner) SetNonce(v int64) { m.Data2.Nonce = v }
func (m *TLBindAuthKeyInner) GetNonce() int64  { return m.Data2.Nonce }

func (m *TLBindAuthKeyInner) SetTempAuthKeyId(v int64) { m.Data2.TempAuthKeyId = v }
func (m *TLBindAuthKeyInner) GetTempAuthKeyId() int64  { return m.Data2.TempAuthKeyId }

func (m *TLBindAuthKeyInner) SetPermAuthKeyId(v int64) { m.Data2.PermAuthKeyId = v }
func (m *TLBindAuthKeyInner) GetPermAuthKeyId() int64  { return m.Data2.PermAuthKeyId }

func (m *TLBindAuthKeyInner) SetTempSessionId(v int64) { m.Data2.TempSessionId = v }
func (m *TLBindAuthKeyInner) GetTempSessionId() int64  { return m.Data2.TempSessionId }

func (m *TLBindAuthKeyInner) SetExpiresAt(v int32) { m.Data2.ExpiresAt = v }
func (m *TLBindAuthKeyInner) GetExpiresAt() int32  { return m.Data2.ExpiresAt }

func (m *TLBindAuthKeyInner) GetPredicateName() string {
	return Predicate_bind_auth_key_inner
}

func (m *TLBindAuthKeyInner) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x75a3f765: func() []byte {
			x.UInt(0x75a3f765)

			x.Long(m.GetNonce())
			x.Long(m.GetTempAuthKeyId())
			x.Long(m.GetPermAuthKeyId())
			x.Long(m.GetTempSessionId())
			x.Int(m.GetExpiresAt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_bind_auth_key_inner, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_bind_auth_key_inner, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBindAuthKeyInner) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBindAuthKeyInner) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x75a3f765: func() error {
			m.SetNonce(dBuf.Long())
			m.SetTempAuthKeyId(dBuf.Long())
			m.SetPermAuthKeyId(dBuf.Long())
			m.SetTempSessionId(dBuf.Long())
			m.SetExpiresAt(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBindAuthKeyInner) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Server_DH_Params <--
//  + TL_Server_DHParamsFail
//  + TL_Server_DHParamsOk
//

func (m *Server_DH_Params) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_server_DH_params_fail:
		t := m.To_Server_DHParamsFail()
		xBuf = t.Encode(layer)
	case Predicate_server_DH_params_ok:
		t := m.To_Server_DHParamsOk()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Server_DH_Params) CalcByteSize(layer int32) int {
	return 0
}

func (m *Server_DH_Params) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x79cb045d:
		m2 := MakeTLServer_DHParamsFail(m)
		m2.Decode(dBuf)
	case 0xd0e8075c:
		m2 := MakeTLServer_DHParamsOk(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Server_DH_Params) DebugString() string {
	switch m.PredicateName {
	case Predicate_server_DH_params_fail:
		t := m.To_Server_DHParamsFail()
		return t.DebugString()
	case Predicate_server_DH_params_ok:
		t := m.To_Server_DHParamsOk()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Server_DHParamsFail
func (m *Server_DH_Params) To_Server_DHParamsFail() *TLServer_DHParamsFail {
	m.PredicateName = Predicate_server_DH_params_fail
	return &TLServer_DHParamsFail{
		Data2: m,
	}
}

// To_Server_DHParamsOk
func (m *Server_DH_Params) To_Server_DHParamsOk() *TLServer_DHParamsOk {
	m.PredicateName = Predicate_server_DH_params_ok
	return &TLServer_DHParamsOk{
		Data2: m,
	}
}

// MakeTLServer_DHParamsFail
func MakeTLServer_DHParamsFail(data2 *Server_DH_Params) *TLServer_DHParamsFail {
	if data2 == nil {
		return &TLServer_DHParamsFail{Data2: &Server_DH_Params{
			PredicateName: Predicate_server_DH_params_fail,
		}}
	} else {
		data2.PredicateName = Predicate_server_DH_params_fail
		return &TLServer_DHParamsFail{Data2: data2}
	}
}

func (m *TLServer_DHParamsFail) To_Server_DH_Params() *Server_DH_Params {
	m.Data2.PredicateName = Predicate_server_DH_params_fail
	return m.Data2
}

func (m *TLServer_DHParamsFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsFail) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHParamsFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsFail) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsFail) SetNewNonceHash(v []byte) { m.Data2.NewNonceHash = v }
func (m *TLServer_DHParamsFail) GetNewNonceHash() []byte  { return m.Data2.NewNonceHash }

func (m *TLServer_DHParamsFail) GetPredicateName() string {
	return Predicate_server_DH_params_fail
}

func (m *TLServer_DHParamsFail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x79cb045d: func() []byte {
			x.UInt(0x79cb045d)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.Bytes(m.GetNewNonceHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_server_DH_params_fail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_server_DH_params_fail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLServer_DHParamsFail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLServer_DHParamsFail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x79cb045d: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetNewNonceHash(dBuf.Bytes(16))
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLServer_DHParamsFail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLServer_DHParamsOk
func MakeTLServer_DHParamsOk(data2 *Server_DH_Params) *TLServer_DHParamsOk {
	if data2 == nil {
		return &TLServer_DHParamsOk{Data2: &Server_DH_Params{
			PredicateName: Predicate_server_DH_params_ok,
		}}
	} else {
		data2.PredicateName = Predicate_server_DH_params_ok
		return &TLServer_DHParamsOk{Data2: data2}
	}
}

func (m *TLServer_DHParamsOk) To_Server_DH_Params() *Server_DH_Params {
	m.Data2.PredicateName = Predicate_server_DH_params_ok
	return m.Data2
}

func (m *TLServer_DHParamsOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsOk) GetNonce() []byte  { return m.Data2.Nonce }

func (m *TLServer_DHParamsOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsOk) GetServerNonce() []byte  { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsOk) SetEncryptedAnswer(v string) { m.Data2.EncryptedAnswer = v }
func (m *TLServer_DHParamsOk) GetEncryptedAnswer() string  { return m.Data2.EncryptedAnswer }

func (m *TLServer_DHParamsOk) GetPredicateName() string {
	return Predicate_server_DH_params_ok
}

func (m *TLServer_DHParamsOk) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd0e8075c: func() []byte {
			x.UInt(0xd0e8075c)

			x.Bytes(m.GetNonce())
			x.Bytes(m.GetServerNonce())
			x.String(m.GetEncryptedAnswer())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_server_DH_params_ok, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_server_DH_params_ok, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLServer_DHParamsOk) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLServer_DHParamsOk) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd0e8075c: func() error {
			m.SetNonce(dBuf.Bytes(16))
			m.SetServerNonce(dBuf.Bytes(16))
			m.SetEncryptedAnswer(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLServer_DHParamsOk) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgDetailedInfo <--
//  + TL_MsgDetailedInfo
//  + TL_MsgNewDetailedInfo
//

func (m *MsgDetailedInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msg_detailed_info:
		t := m.To_MsgDetailedInfo()
		xBuf = t.Encode(layer)
	case Predicate_msg_new_detailed_info:
		t := m.To_MsgNewDetailedInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgDetailedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgDetailedInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x276d3ec6:
		m2 := MakeTLMsgDetailedInfo(m)
		m2.Decode(dBuf)
	case 0x809db6df:
		m2 := MakeTLMsgNewDetailedInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgDetailedInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_msg_detailed_info:
		t := m.To_MsgDetailedInfo()
		return t.DebugString()
	case Predicate_msg_new_detailed_info:
		t := m.To_MsgNewDetailedInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgDetailedInfo
func (m *MsgDetailedInfo) To_MsgDetailedInfo() *TLMsgDetailedInfo {
	m.PredicateName = Predicate_msg_detailed_info
	return &TLMsgDetailedInfo{
		Data2: m,
	}
}

// To_MsgNewDetailedInfo
func (m *MsgDetailedInfo) To_MsgNewDetailedInfo() *TLMsgNewDetailedInfo {
	m.PredicateName = Predicate_msg_new_detailed_info
	return &TLMsgNewDetailedInfo{
		Data2: m,
	}
}

// MakeTLMsgDetailedInfo
func MakeTLMsgDetailedInfo(data2 *MsgDetailedInfo) *TLMsgDetailedInfo {
	if data2 == nil {
		return &TLMsgDetailedInfo{Data2: &MsgDetailedInfo{
			PredicateName: Predicate_msg_detailed_info,
		}}
	} else {
		data2.PredicateName = Predicate_msg_detailed_info
		return &TLMsgDetailedInfo{Data2: data2}
	}
}

func (m *TLMsgDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
	m.Data2.PredicateName = Predicate_msg_detailed_info
	return m.Data2
}

func (m *TLMsgDetailedInfo) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLMsgDetailedInfo) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLMsgDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgDetailedInfo) GetAnswerMsgId() int64  { return m.Data2.AnswerMsgId }

func (m *TLMsgDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgDetailedInfo) GetBytes() int32  { return m.Data2.Bytes }

func (m *TLMsgDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgDetailedInfo) GetStatus() int32  { return m.Data2.Status }

func (m *TLMsgDetailedInfo) GetPredicateName() string {
	return Predicate_msg_detailed_info
}

func (m *TLMsgDetailedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x276d3ec6: func() []byte {
			x.UInt(0x276d3ec6)

			x.Long(m.GetMsgId())
			x.Long(m.GetAnswerMsgId())
			x.Int(m.GetBytes())
			x.Int(m.GetStatus())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msg_detailed_info, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msg_detailed_info, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgDetailedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgDetailedInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x276d3ec6: func() error {
			m.SetMsgId(dBuf.Long())
			m.SetAnswerMsgId(dBuf.Long())
			m.SetBytes(dBuf.Int())
			m.SetStatus(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgDetailedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMsgNewDetailedInfo
func MakeTLMsgNewDetailedInfo(data2 *MsgDetailedInfo) *TLMsgNewDetailedInfo {
	if data2 == nil {
		return &TLMsgNewDetailedInfo{Data2: &MsgDetailedInfo{
			PredicateName: Predicate_msg_new_detailed_info,
		}}
	} else {
		data2.PredicateName = Predicate_msg_new_detailed_info
		return &TLMsgNewDetailedInfo{Data2: data2}
	}
}

func (m *TLMsgNewDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
	m.Data2.PredicateName = Predicate_msg_new_detailed_info
	return m.Data2
}

func (m *TLMsgNewDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgNewDetailedInfo) GetAnswerMsgId() int64  { return m.Data2.AnswerMsgId }

func (m *TLMsgNewDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgNewDetailedInfo) GetBytes() int32  { return m.Data2.Bytes }

func (m *TLMsgNewDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgNewDetailedInfo) GetStatus() int32  { return m.Data2.Status }

func (m *TLMsgNewDetailedInfo) GetPredicateName() string {
	return Predicate_msg_new_detailed_info
}

func (m *TLMsgNewDetailedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x809db6df: func() []byte {
			x.UInt(0x809db6df)

			x.Long(m.GetAnswerMsgId())
			x.Int(m.GetBytes())
			x.Int(m.GetStatus())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msg_new_detailed_info, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msg_new_detailed_info, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgNewDetailedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgNewDetailedInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x809db6df: func() error {
			m.SetAnswerMsgId(dBuf.Long())
			m.SetBytes(dBuf.Int())
			m.SetStatus(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgNewDetailedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// RpcError <--
//  + TL_RpcError
//

func (m *RpcError) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_rpc_error:
		t := m.To_RpcError()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *RpcError) CalcByteSize(layer int32) int {
	return 0
}

func (m *RpcError) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x2144ca19:
		m2 := MakeTLRpcError(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *RpcError) DebugString() string {
	switch m.PredicateName {
	case Predicate_rpc_error:
		t := m.To_RpcError()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_RpcError
func (m *RpcError) To_RpcError() *TLRpcError {
	m.PredicateName = Predicate_rpc_error
	return &TLRpcError{
		Data2: m,
	}
}

// MakeTLRpcError
func MakeTLRpcError(data2 *RpcError) *TLRpcError {
	if data2 == nil {
		return &TLRpcError{Data2: &RpcError{
			PredicateName: Predicate_rpc_error,
		}}
	} else {
		data2.PredicateName = Predicate_rpc_error
		return &TLRpcError{Data2: data2}
	}
}

func (m *TLRpcError) To_RpcError() *RpcError {
	m.Data2.PredicateName = Predicate_rpc_error
	return m.Data2
}

func (m *TLRpcError) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLRpcError) GetErrorCode() int32  { return m.Data2.ErrorCode }

func (m *TLRpcError) SetErrorMessage(v string) { m.Data2.ErrorMessage = v }
func (m *TLRpcError) GetErrorMessage() string  { return m.Data2.ErrorMessage }

func (m *TLRpcError) GetPredicateName() string {
	return Predicate_rpc_error
}

func (m *TLRpcError) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2144ca19: func() []byte {
			x.UInt(0x2144ca19)

			x.Int(m.GetErrorCode())
			x.String(m.GetErrorMessage())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_rpc_error, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_rpc_error, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRpcError) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRpcError) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2144ca19: func() error {
			m.SetErrorCode(dBuf.Int())
			m.SetErrorMessage(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRpcError) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Pong <--
//  + TL_Pong
//

func (m *Pong) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pong:
		t := m.To_Pong()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Pong) CalcByteSize(layer int32) int {
	return 0
}

func (m *Pong) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x347773c5:
		m2 := MakeTLPong(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Pong) DebugString() string {
	switch m.PredicateName {
	case Predicate_pong:
		t := m.To_Pong()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Pong
func (m *Pong) To_Pong() *TLPong {
	m.PredicateName = Predicate_pong
	return &TLPong{
		Data2: m,
	}
}

// MakeTLPong
func MakeTLPong(data2 *Pong) *TLPong {
	if data2 == nil {
		return &TLPong{Data2: &Pong{
			PredicateName: Predicate_pong,
		}}
	} else {
		data2.PredicateName = Predicate_pong
		return &TLPong{Data2: data2}
	}
}

func (m *TLPong) To_Pong() *Pong {
	m.Data2.PredicateName = Predicate_pong
	return m.Data2
}

func (m *TLPong) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLPong) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLPong) SetPingId(v int64) { m.Data2.PingId = v }
func (m *TLPong) GetPingId() int64  { return m.Data2.PingId }

func (m *TLPong) GetPredicateName() string {
	return Predicate_pong
}

func (m *TLPong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x347773c5: func() []byte {
			x.UInt(0x347773c5)

			x.Long(m.GetMsgId())
			x.Long(m.GetPingId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x347773c5: func() error {
			m.SetMsgId(dBuf.Long())
			m.SetPingId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgsAck <--
//  + TL_MsgsAck
//

func (m *MsgsAck) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msgs_ack:
		t := m.To_MsgsAck()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgsAck) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgsAck) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x62d6b459:
		m2 := MakeTLMsgsAck(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgsAck) DebugString() string {
	switch m.PredicateName {
	case Predicate_msgs_ack:
		t := m.To_MsgsAck()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgsAck
func (m *MsgsAck) To_MsgsAck() *TLMsgsAck {
	m.PredicateName = Predicate_msgs_ack
	return &TLMsgsAck{
		Data2: m,
	}
}

// MakeTLMsgsAck
func MakeTLMsgsAck(data2 *MsgsAck) *TLMsgsAck {
	if data2 == nil {
		return &TLMsgsAck{Data2: &MsgsAck{
			PredicateName: Predicate_msgs_ack,
		}}
	} else {
		data2.PredicateName = Predicate_msgs_ack
		return &TLMsgsAck{Data2: data2}
	}
}

func (m *TLMsgsAck) To_MsgsAck() *MsgsAck {
	m.Data2.PredicateName = Predicate_msgs_ack
	return m.Data2
}

func (m *TLMsgsAck) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAck) GetMsgIds() []int64  { return m.Data2.MsgIds }

func (m *TLMsgsAck) GetPredicateName() string {
	return Predicate_msgs_ack
}

func (m *TLMsgsAck) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x62d6b459: func() []byte {
			x.UInt(0x62d6b459)

			x.VectorLong(m.GetMsgIds())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msgs_ack, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msgs_ack, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgsAck) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgsAck) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x62d6b459: func() error {

			m.SetMsgIds(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgsAck) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BadMsgNotification <--
//  + TL_BadMsgNotification
//  + TL_BadServerSalt
//

func (m *BadMsgNotification) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_bad_msg_notification:
		t := m.To_BadMsgNotification()
		xBuf = t.Encode(layer)
	case Predicate_bad_server_salt:
		t := m.To_BadServerSalt()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BadMsgNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *BadMsgNotification) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa7eff811:
		m2 := MakeTLBadMsgNotification(m)
		m2.Decode(dBuf)
	case 0xedab447b:
		m2 := MakeTLBadServerSalt(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BadMsgNotification) DebugString() string {
	switch m.PredicateName {
	case Predicate_bad_msg_notification:
		t := m.To_BadMsgNotification()
		return t.DebugString()
	case Predicate_bad_server_salt:
		t := m.To_BadServerSalt()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BadMsgNotification
func (m *BadMsgNotification) To_BadMsgNotification() *TLBadMsgNotification {
	m.PredicateName = Predicate_bad_msg_notification
	return &TLBadMsgNotification{
		Data2: m,
	}
}

// To_BadServerSalt
func (m *BadMsgNotification) To_BadServerSalt() *TLBadServerSalt {
	m.PredicateName = Predicate_bad_server_salt
	return &TLBadServerSalt{
		Data2: m,
	}
}

// MakeTLBadMsgNotification
func MakeTLBadMsgNotification(data2 *BadMsgNotification) *TLBadMsgNotification {
	if data2 == nil {
		return &TLBadMsgNotification{Data2: &BadMsgNotification{
			PredicateName: Predicate_bad_msg_notification,
		}}
	} else {
		data2.PredicateName = Predicate_bad_msg_notification
		return &TLBadMsgNotification{Data2: data2}
	}
}

func (m *TLBadMsgNotification) To_BadMsgNotification() *BadMsgNotification {
	m.Data2.PredicateName = Predicate_bad_msg_notification
	return m.Data2
}

func (m *TLBadMsgNotification) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadMsgNotification) GetBadMsgId() int64  { return m.Data2.BadMsgId }

func (m *TLBadMsgNotification) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadMsgNotification) GetBadMsgSeqno() int32  { return m.Data2.BadMsgSeqno }

func (m *TLBadMsgNotification) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadMsgNotification) GetErrorCode() int32  { return m.Data2.ErrorCode }

func (m *TLBadMsgNotification) GetPredicateName() string {
	return Predicate_bad_msg_notification
}

func (m *TLBadMsgNotification) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa7eff811: func() []byte {
			x.UInt(0xa7eff811)

			x.Long(m.GetBadMsgId())
			x.Int(m.GetBadMsgSeqno())
			x.Int(m.GetErrorCode())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_bad_msg_notification, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_bad_msg_notification, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBadMsgNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBadMsgNotification) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa7eff811: func() error {
			m.SetBadMsgId(dBuf.Long())
			m.SetBadMsgSeqno(dBuf.Int())
			m.SetErrorCode(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBadMsgNotification) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBadServerSalt
func MakeTLBadServerSalt(data2 *BadMsgNotification) *TLBadServerSalt {
	if data2 == nil {
		return &TLBadServerSalt{Data2: &BadMsgNotification{
			PredicateName: Predicate_bad_server_salt,
		}}
	} else {
		data2.PredicateName = Predicate_bad_server_salt
		return &TLBadServerSalt{Data2: data2}
	}
}

func (m *TLBadServerSalt) To_BadMsgNotification() *BadMsgNotification {
	m.Data2.PredicateName = Predicate_bad_server_salt
	return m.Data2
}

func (m *TLBadServerSalt) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadServerSalt) GetBadMsgId() int64  { return m.Data2.BadMsgId }

func (m *TLBadServerSalt) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadServerSalt) GetBadMsgSeqno() int32  { return m.Data2.BadMsgSeqno }

func (m *TLBadServerSalt) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadServerSalt) GetErrorCode() int32  { return m.Data2.ErrorCode }

func (m *TLBadServerSalt) SetNewServerSalt(v int64) { m.Data2.NewServerSalt = v }
func (m *TLBadServerSalt) GetNewServerSalt() int64  { return m.Data2.NewServerSalt }

func (m *TLBadServerSalt) GetPredicateName() string {
	return Predicate_bad_server_salt
}

func (m *TLBadServerSalt) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xedab447b: func() []byte {
			x.UInt(0xedab447b)

			x.Long(m.GetBadMsgId())
			x.Int(m.GetBadMsgSeqno())
			x.Int(m.GetErrorCode())
			x.Long(m.GetNewServerSalt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_bad_server_salt, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_bad_server_salt, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBadServerSalt) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBadServerSalt) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xedab447b: func() error {
			m.SetBadMsgId(dBuf.Long())
			m.SetBadMsgSeqno(dBuf.Int())
			m.SetErrorCode(dBuf.Int())
			m.SetNewServerSalt(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBadServerSalt) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// TlsClientHello <--
//  + TL_TlsClientHello
//

func (m *TlsClientHello) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_tlsClientHello:
		t := m.To_TlsClientHello()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *TlsClientHello) CalcByteSize(layer int32) int {
	return 0
}

func (m *TlsClientHello) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6c52c484:
		m2 := MakeTLTlsClientHello(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *TlsClientHello) DebugString() string {
	switch m.PredicateName {
	case Predicate_tlsClientHello:
		t := m.To_TlsClientHello()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TlsClientHello
func (m *TlsClientHello) To_TlsClientHello() *TLTlsClientHello {
	m.PredicateName = Predicate_tlsClientHello
	return &TLTlsClientHello{
		Data2: m,
	}
}

// MakeTLTlsClientHello
func MakeTLTlsClientHello(data2 *TlsClientHello) *TLTlsClientHello {
	if data2 == nil {
		return &TLTlsClientHello{Data2: &TlsClientHello{
			PredicateName: Predicate_tlsClientHello,
		}}
	} else {
		data2.PredicateName = Predicate_tlsClientHello
		return &TLTlsClientHello{Data2: data2}
	}
}

func (m *TLTlsClientHello) To_TlsClientHello() *TlsClientHello {
	m.Data2.PredicateName = Predicate_tlsClientHello
	return m.Data2
}

func (m *TLTlsClientHello) SetBlocks(v []*TlsBlock) { m.Data2.Blocks = v }
func (m *TLTlsClientHello) GetBlocks() []*TlsBlock  { return m.Data2.Blocks }

func (m *TLTlsClientHello) GetPredicateName() string {
	return Predicate_tlsClientHello
}

func (m *TLTlsClientHello) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6c52c484: func() []byte {
			x.UInt(0x6c52c484)

			// x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsClientHello, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsClientHello, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsClientHello) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsClientHello) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6c52c484: func() error {
			// c0 := dBuf.Int()
			// if c0 != int32(CRC32_vector) {
			//     dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
			//     return dBuf.err
			// }
			l0 := dBuf.Int()
			v0 := make([]*TlsBlock, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &TlsBlock{}
				v0[i].Decode(dBuf)
			}
			m.SetBlocks(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsClientHello) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DestroySessionRes <--
//  + TL_DestroySessionOk
//  + TL_DestroySessionNone
//

func (m *DestroySessionRes) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_destroy_session_ok:
		t := m.To_DestroySessionOk()
		xBuf = t.Encode(layer)
	case Predicate_destroy_session_none:
		t := m.To_DestroySessionNone()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DestroySessionRes) CalcByteSize(layer int32) int {
	return 0
}

func (m *DestroySessionRes) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe22045fc:
		m2 := MakeTLDestroySessionOk(m)
		m2.Decode(dBuf)
	case 0x62d350c9:
		m2 := MakeTLDestroySessionNone(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DestroySessionRes) DebugString() string {
	switch m.PredicateName {
	case Predicate_destroy_session_ok:
		t := m.To_DestroySessionOk()
		return t.DebugString()
	case Predicate_destroy_session_none:
		t := m.To_DestroySessionNone()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DestroySessionOk
func (m *DestroySessionRes) To_DestroySessionOk() *TLDestroySessionOk {
	m.PredicateName = Predicate_destroy_session_ok
	return &TLDestroySessionOk{
		Data2: m,
	}
}

// To_DestroySessionNone
func (m *DestroySessionRes) To_DestroySessionNone() *TLDestroySessionNone {
	m.PredicateName = Predicate_destroy_session_none
	return &TLDestroySessionNone{
		Data2: m,
	}
}

// MakeTLDestroySessionOk
func MakeTLDestroySessionOk(data2 *DestroySessionRes) *TLDestroySessionOk {
	if data2 == nil {
		return &TLDestroySessionOk{Data2: &DestroySessionRes{
			PredicateName: Predicate_destroy_session_ok,
		}}
	} else {
		data2.PredicateName = Predicate_destroy_session_ok
		return &TLDestroySessionOk{Data2: data2}
	}
}

func (m *TLDestroySessionOk) To_DestroySessionRes() *DestroySessionRes {
	m.Data2.PredicateName = Predicate_destroy_session_ok
	return m.Data2
}

func (m *TLDestroySessionOk) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionOk) GetSessionId() int64  { return m.Data2.SessionId }

func (m *TLDestroySessionOk) GetPredicateName() string {
	return Predicate_destroy_session_ok
}

func (m *TLDestroySessionOk) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe22045fc: func() []byte {
			x.UInt(0xe22045fc)

			x.Long(m.GetSessionId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_destroy_session_ok, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_destroy_session_ok, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDestroySessionOk) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroySessionOk) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe22045fc: func() error {
			m.SetSessionId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDestroySessionOk) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDestroySessionNone
func MakeTLDestroySessionNone(data2 *DestroySessionRes) *TLDestroySessionNone {
	if data2 == nil {
		return &TLDestroySessionNone{Data2: &DestroySessionRes{
			PredicateName: Predicate_destroy_session_none,
		}}
	} else {
		data2.PredicateName = Predicate_destroy_session_none
		return &TLDestroySessionNone{Data2: data2}
	}
}

func (m *TLDestroySessionNone) To_DestroySessionRes() *DestroySessionRes {
	m.Data2.PredicateName = Predicate_destroy_session_none
	return m.Data2
}

func (m *TLDestroySessionNone) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionNone) GetSessionId() int64  { return m.Data2.SessionId }

func (m *TLDestroySessionNone) GetPredicateName() string {
	return Predicate_destroy_session_none
}

func (m *TLDestroySessionNone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x62d350c9: func() []byte {
			x.UInt(0x62d350c9)

			x.Long(m.GetSessionId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_destroy_session_none, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_destroy_session_none, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDestroySessionNone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroySessionNone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x62d350c9: func() error {
			m.SetSessionId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDestroySessionNone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_ConfigSimple <--
//  + TL_HelpConfigSimple
//

func (m *Help_ConfigSimple) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_configSimple:
		t := m.To_HelpConfigSimple()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_ConfigSimple) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_ConfigSimple) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5a592a6c:
		m2 := MakeTLHelpConfigSimple(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_ConfigSimple) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_configSimple:
		t := m.To_HelpConfigSimple()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpConfigSimple
func (m *Help_ConfigSimple) To_HelpConfigSimple() *TLHelpConfigSimple {
	m.PredicateName = Predicate_help_configSimple
	return &TLHelpConfigSimple{
		Data2: m,
	}
}

// MakeTLHelpConfigSimple
func MakeTLHelpConfigSimple(data2 *Help_ConfigSimple) *TLHelpConfigSimple {
	if data2 == nil {
		return &TLHelpConfigSimple{Data2: &Help_ConfigSimple{
			PredicateName: Predicate_help_configSimple,
		}}
	} else {
		data2.PredicateName = Predicate_help_configSimple
		return &TLHelpConfigSimple{Data2: data2}
	}
}

func (m *TLHelpConfigSimple) To_Help_ConfigSimple() *Help_ConfigSimple {
	m.Data2.PredicateName = Predicate_help_configSimple
	return m.Data2
}

func (m *TLHelpConfigSimple) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpConfigSimple) GetDate() int32  { return m.Data2.Date }

func (m *TLHelpConfigSimple) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpConfigSimple) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpConfigSimple) SetRules(v []*AccessPointRule) { m.Data2.Rules = v }
func (m *TLHelpConfigSimple) GetRules() []*AccessPointRule  { return m.Data2.Rules }

func (m *TLHelpConfigSimple) GetPredicateName() string {
	return Predicate_help_configSimple
}

func (m *TLHelpConfigSimple) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5a592a6c: func() []byte {
			x.UInt(0x5a592a6c)

			x.Int(m.GetDate())
			x.Int(m.GetExpires())
			// x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRules())))
			for _, v := range m.GetRules() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_configSimple, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_configSimple, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpConfigSimple) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpConfigSimple) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5a592a6c: func() error {
			m.SetDate(dBuf.Int())
			m.SetExpires(dBuf.Int())
			// c2 := dBuf.Int()
			// if c2 != int32(CRC32_vector) {
			//     dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			//     return dBuf.err
			// }
			l2 := dBuf.Int()
			v2 := make([]*AccessPointRule, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &AccessPointRule{}
				v2[i].Decode(dBuf)
			}
			m.SetRules(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpConfigSimple) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// HttpWait <--
//  + TL_HttpWait
//

func (m *HttpWait) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_http_wait:
		t := m.To_HttpWait()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *HttpWait) CalcByteSize(layer int32) int {
	return 0
}

func (m *HttpWait) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9299359f:
		m2 := MakeTLHttpWait(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *HttpWait) DebugString() string {
	switch m.PredicateName {
	case Predicate_http_wait:
		t := m.To_HttpWait()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HttpWait
func (m *HttpWait) To_HttpWait() *TLHttpWait {
	m.PredicateName = Predicate_http_wait
	return &TLHttpWait{
		Data2: m,
	}
}

// MakeTLHttpWait
func MakeTLHttpWait(data2 *HttpWait) *TLHttpWait {
	if data2 == nil {
		return &TLHttpWait{Data2: &HttpWait{
			PredicateName: Predicate_http_wait,
		}}
	} else {
		data2.PredicateName = Predicate_http_wait
		return &TLHttpWait{Data2: data2}
	}
}

func (m *TLHttpWait) To_HttpWait() *HttpWait {
	m.Data2.PredicateName = Predicate_http_wait
	return m.Data2
}

func (m *TLHttpWait) SetMaxDelay(v int32) { m.Data2.MaxDelay = v }
func (m *TLHttpWait) GetMaxDelay() int32  { return m.Data2.MaxDelay }

func (m *TLHttpWait) SetWaitAfter(v int32) { m.Data2.WaitAfter = v }
func (m *TLHttpWait) GetWaitAfter() int32  { return m.Data2.WaitAfter }

func (m *TLHttpWait) SetMaxWait(v int32) { m.Data2.MaxWait = v }
func (m *TLHttpWait) GetMaxWait() int32  { return m.Data2.MaxWait }

func (m *TLHttpWait) GetPredicateName() string {
	return Predicate_http_wait
}

func (m *TLHttpWait) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9299359f: func() []byte {
			x.UInt(0x9299359f)

			x.Int(m.GetMaxDelay())
			x.Int(m.GetWaitAfter())
			x.Int(m.GetMaxWait())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_http_wait, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_http_wait, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHttpWait) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHttpWait) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9299359f: func() error {
			m.SetMaxDelay(dBuf.Int())
			m.SetWaitAfter(dBuf.Int())
			m.SetMaxWait(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHttpWait) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// AccessPointRule <--
//  + TL_AccessPointRule
//

func (m *AccessPointRule) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_accessPointRule:
		t := m.To_AccessPointRule()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *AccessPointRule) CalcByteSize(layer int32) int {
	return 0
}

func (m *AccessPointRule) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4679b65f:
		m2 := MakeTLAccessPointRule(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *AccessPointRule) DebugString() string {
	switch m.PredicateName {
	case Predicate_accessPointRule:
		t := m.To_AccessPointRule()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccessPointRule
func (m *AccessPointRule) To_AccessPointRule() *TLAccessPointRule {
	m.PredicateName = Predicate_accessPointRule
	return &TLAccessPointRule{
		Data2: m,
	}
}

// MakeTLAccessPointRule
func MakeTLAccessPointRule(data2 *AccessPointRule) *TLAccessPointRule {
	if data2 == nil {
		return &TLAccessPointRule{Data2: &AccessPointRule{
			PredicateName: Predicate_accessPointRule,
		}}
	} else {
		data2.PredicateName = Predicate_accessPointRule
		return &TLAccessPointRule{Data2: data2}
	}
}

func (m *TLAccessPointRule) To_AccessPointRule() *AccessPointRule {
	m.Data2.PredicateName = Predicate_accessPointRule
	return m.Data2
}

func (m *TLAccessPointRule) SetPhonePrefixRules(v string) { m.Data2.PhonePrefixRules = v }
func (m *TLAccessPointRule) GetPhonePrefixRules() string  { return m.Data2.PhonePrefixRules }

func (m *TLAccessPointRule) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLAccessPointRule) GetDcId() int32  { return m.Data2.DcId }

func (m *TLAccessPointRule) SetIps(v []*IpPort) { m.Data2.Ips = v }
func (m *TLAccessPointRule) GetIps() []*IpPort  { return m.Data2.Ips }

func (m *TLAccessPointRule) GetPredicateName() string {
	return Predicate_accessPointRule
}

func (m *TLAccessPointRule) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4679b65f: func() []byte {
			x.UInt(0x4679b65f)

			x.String(m.GetPhonePrefixRules())
			x.Int(m.GetDcId())
			// x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetIps())))
			for _, v := range m.GetIps() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_accessPointRule, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_accessPointRule, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccessPointRule) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccessPointRule) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4679b65f: func() error {
			m.SetPhonePrefixRules(dBuf.String())
			m.SetDcId(dBuf.Int())
			// c2 := dBuf.Int()
			// if c2 != int32(CRC32_vector) {
			//     dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			//     return dBuf.err
			// }
			l2 := dBuf.Int()
			v2 := make([]*IpPort, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &IpPort{}
				v2[i].Decode(dBuf)
			}
			m.SetIps(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccessPointRule) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgsStateInfo <--
//  + TL_MsgsStateInfo
//

func (m *MsgsStateInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msgs_state_info:
		t := m.To_MsgsStateInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgsStateInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgsStateInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4deb57d:
		m2 := MakeTLMsgsStateInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgsStateInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_msgs_state_info:
		t := m.To_MsgsStateInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgsStateInfo
func (m *MsgsStateInfo) To_MsgsStateInfo() *TLMsgsStateInfo {
	m.PredicateName = Predicate_msgs_state_info
	return &TLMsgsStateInfo{
		Data2: m,
	}
}

// MakeTLMsgsStateInfo
func MakeTLMsgsStateInfo(data2 *MsgsStateInfo) *TLMsgsStateInfo {
	if data2 == nil {
		return &TLMsgsStateInfo{Data2: &MsgsStateInfo{
			PredicateName: Predicate_msgs_state_info,
		}}
	} else {
		data2.PredicateName = Predicate_msgs_state_info
		return &TLMsgsStateInfo{Data2: data2}
	}
}

func (m *TLMsgsStateInfo) To_MsgsStateInfo() *MsgsStateInfo {
	m.Data2.PredicateName = Predicate_msgs_state_info
	return m.Data2
}

func (m *TLMsgsStateInfo) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLMsgsStateInfo) GetReqMsgId() int64  { return m.Data2.ReqMsgId }

func (m *TLMsgsStateInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsStateInfo) GetInfo() string  { return m.Data2.Info }

func (m *TLMsgsStateInfo) GetPredicateName() string {
	return Predicate_msgs_state_info
}

func (m *TLMsgsStateInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4deb57d: func() []byte {
			x.UInt(0x4deb57d)

			x.Long(m.GetReqMsgId())
			x.String(m.GetInfo())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msgs_state_info, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msgs_state_info, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgsStateInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgsStateInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4deb57d: func() error {
			m.SetReqMsgId(dBuf.Long())
			m.SetInfo(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgsStateInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgResendReq <--
//  + TL_MsgResendReq
//

func (m *MsgResendReq) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msg_resend_req:
		t := m.To_MsgResendReq()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgResendReq) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgResendReq) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7d861a08:
		m2 := MakeTLMsgResendReq(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgResendReq) DebugString() string {
	switch m.PredicateName {
	case Predicate_msg_resend_req:
		t := m.To_MsgResendReq()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgResendReq
func (m *MsgResendReq) To_MsgResendReq() *TLMsgResendReq {
	m.PredicateName = Predicate_msg_resend_req
	return &TLMsgResendReq{
		Data2: m,
	}
}

// MakeTLMsgResendReq
func MakeTLMsgResendReq(data2 *MsgResendReq) *TLMsgResendReq {
	if data2 == nil {
		return &TLMsgResendReq{Data2: &MsgResendReq{
			PredicateName: Predicate_msg_resend_req,
		}}
	} else {
		data2.PredicateName = Predicate_msg_resend_req
		return &TLMsgResendReq{Data2: data2}
	}
}

func (m *TLMsgResendReq) To_MsgResendReq() *MsgResendReq {
	m.Data2.PredicateName = Predicate_msg_resend_req
	return m.Data2
}

func (m *TLMsgResendReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgResendReq) GetMsgIds() []int64  { return m.Data2.MsgIds }

func (m *TLMsgResendReq) GetPredicateName() string {
	return Predicate_msg_resend_req
}

func (m *TLMsgResendReq) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7d861a08: func() []byte {
			x.UInt(0x7d861a08)

			x.VectorLong(m.GetMsgIds())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msg_resend_req, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msg_resend_req, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgResendReq) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgResendReq) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7d861a08: func() error {

			m.SetMsgIds(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgResendReq) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// RpcDropAnswer <--
//  + TL_RpcAnswerUnknown
//  + TL_RpcAnswerDroppedRunning
//  + TL_RpcAnswerDropped
//

func (m *RpcDropAnswer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_rpc_answer_unknown:
		t := m.To_RpcAnswerUnknown()
		xBuf = t.Encode(layer)
	case Predicate_rpc_answer_dropped_running:
		t := m.To_RpcAnswerDroppedRunning()
		xBuf = t.Encode(layer)
	case Predicate_rpc_answer_dropped:
		t := m.To_RpcAnswerDropped()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *RpcDropAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *RpcDropAnswer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5e2ad36e:
		m2 := MakeTLRpcAnswerUnknown(m)
		m2.Decode(dBuf)
	case 0xcd78e586:
		m2 := MakeTLRpcAnswerDroppedRunning(m)
		m2.Decode(dBuf)
	case 0xa43ad8b7:
		m2 := MakeTLRpcAnswerDropped(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *RpcDropAnswer) DebugString() string {
	switch m.PredicateName {
	case Predicate_rpc_answer_unknown:
		t := m.To_RpcAnswerUnknown()
		return t.DebugString()
	case Predicate_rpc_answer_dropped_running:
		t := m.To_RpcAnswerDroppedRunning()
		return t.DebugString()
	case Predicate_rpc_answer_dropped:
		t := m.To_RpcAnswerDropped()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_RpcAnswerUnknown
func (m *RpcDropAnswer) To_RpcAnswerUnknown() *TLRpcAnswerUnknown {
	m.PredicateName = Predicate_rpc_answer_unknown
	return &TLRpcAnswerUnknown{
		Data2: m,
	}
}

// To_RpcAnswerDroppedRunning
func (m *RpcDropAnswer) To_RpcAnswerDroppedRunning() *TLRpcAnswerDroppedRunning {
	m.PredicateName = Predicate_rpc_answer_dropped_running
	return &TLRpcAnswerDroppedRunning{
		Data2: m,
	}
}

// To_RpcAnswerDropped
func (m *RpcDropAnswer) To_RpcAnswerDropped() *TLRpcAnswerDropped {
	m.PredicateName = Predicate_rpc_answer_dropped
	return &TLRpcAnswerDropped{
		Data2: m,
	}
}

// MakeTLRpcAnswerUnknown
func MakeTLRpcAnswerUnknown(data2 *RpcDropAnswer) *TLRpcAnswerUnknown {
	if data2 == nil {
		return &TLRpcAnswerUnknown{Data2: &RpcDropAnswer{
			PredicateName: Predicate_rpc_answer_unknown,
		}}
	} else {
		data2.PredicateName = Predicate_rpc_answer_unknown
		return &TLRpcAnswerUnknown{Data2: data2}
	}
}

func (m *TLRpcAnswerUnknown) To_RpcDropAnswer() *RpcDropAnswer {
	m.Data2.PredicateName = Predicate_rpc_answer_unknown
	return m.Data2
}

func (m *TLRpcAnswerUnknown) GetPredicateName() string {
	return Predicate_rpc_answer_unknown
}

func (m *TLRpcAnswerUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5e2ad36e: func() []byte {
			x.UInt(0x5e2ad36e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_rpc_answer_unknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_rpc_answer_unknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRpcAnswerUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRpcAnswerUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5e2ad36e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRpcAnswerUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRpcAnswerDroppedRunning
func MakeTLRpcAnswerDroppedRunning(data2 *RpcDropAnswer) *TLRpcAnswerDroppedRunning {
	if data2 == nil {
		return &TLRpcAnswerDroppedRunning{Data2: &RpcDropAnswer{
			PredicateName: Predicate_rpc_answer_dropped_running,
		}}
	} else {
		data2.PredicateName = Predicate_rpc_answer_dropped_running
		return &TLRpcAnswerDroppedRunning{Data2: data2}
	}
}

func (m *TLRpcAnswerDroppedRunning) To_RpcDropAnswer() *RpcDropAnswer {
	m.Data2.PredicateName = Predicate_rpc_answer_dropped_running
	return m.Data2
}

func (m *TLRpcAnswerDroppedRunning) GetPredicateName() string {
	return Predicate_rpc_answer_dropped_running
}

func (m *TLRpcAnswerDroppedRunning) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcd78e586: func() []byte {
			x.UInt(0xcd78e586)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_rpc_answer_dropped_running, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_rpc_answer_dropped_running, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRpcAnswerDroppedRunning) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRpcAnswerDroppedRunning) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcd78e586: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRpcAnswerDroppedRunning) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRpcAnswerDropped
func MakeTLRpcAnswerDropped(data2 *RpcDropAnswer) *TLRpcAnswerDropped {
	if data2 == nil {
		return &TLRpcAnswerDropped{Data2: &RpcDropAnswer{
			PredicateName: Predicate_rpc_answer_dropped,
		}}
	} else {
		data2.PredicateName = Predicate_rpc_answer_dropped
		return &TLRpcAnswerDropped{Data2: data2}
	}
}

func (m *TLRpcAnswerDropped) To_RpcDropAnswer() *RpcDropAnswer {
	m.Data2.PredicateName = Predicate_rpc_answer_dropped
	return m.Data2
}

func (m *TLRpcAnswerDropped) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLRpcAnswerDropped) GetMsgId() int64  { return m.Data2.MsgId }

func (m *TLRpcAnswerDropped) SetSeqNo(v int32) { m.Data2.SeqNo = v }
func (m *TLRpcAnswerDropped) GetSeqNo() int32  { return m.Data2.SeqNo }

func (m *TLRpcAnswerDropped) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLRpcAnswerDropped) GetBytes() int32  { return m.Data2.Bytes }

func (m *TLRpcAnswerDropped) GetPredicateName() string {
	return Predicate_rpc_answer_dropped
}

func (m *TLRpcAnswerDropped) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa43ad8b7: func() []byte {
			x.UInt(0xa43ad8b7)

			x.Long(m.GetMsgId())
			x.Int(m.GetSeqNo())
			x.Int(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_rpc_answer_dropped, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_rpc_answer_dropped, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRpcAnswerDropped) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRpcAnswerDropped) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa43ad8b7: func() error {
			m.SetMsgId(dBuf.Long())
			m.SetSeqNo(dBuf.Int())
			m.SetBytes(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRpcAnswerDropped) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// NewSession <--
//  + TL_NewSessionCreated
//

func (m *NewSession) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_new_session_created:
		t := m.To_NewSessionCreated()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *NewSession) CalcByteSize(layer int32) int {
	return 0
}

func (m *NewSession) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9ec20908:
		m2 := MakeTLNewSessionCreated(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *NewSession) DebugString() string {
	switch m.PredicateName {
	case Predicate_new_session_created:
		t := m.To_NewSessionCreated()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_NewSessionCreated
func (m *NewSession) To_NewSessionCreated() *TLNewSessionCreated {
	m.PredicateName = Predicate_new_session_created
	return &TLNewSessionCreated{
		Data2: m,
	}
}

// MakeTLNewSessionCreated
func MakeTLNewSessionCreated(data2 *NewSession) *TLNewSessionCreated {
	if data2 == nil {
		return &TLNewSessionCreated{Data2: &NewSession{
			PredicateName: Predicate_new_session_created,
		}}
	} else {
		data2.PredicateName = Predicate_new_session_created
		return &TLNewSessionCreated{Data2: data2}
	}
}

func (m *TLNewSessionCreated) To_NewSession() *NewSession {
	m.Data2.PredicateName = Predicate_new_session_created
	return m.Data2
}

func (m *TLNewSessionCreated) SetFirstMsgId(v int64) { m.Data2.FirstMsgId = v }
func (m *TLNewSessionCreated) GetFirstMsgId() int64  { return m.Data2.FirstMsgId }

func (m *TLNewSessionCreated) SetUniqueId(v int64) { m.Data2.UniqueId = v }
func (m *TLNewSessionCreated) GetUniqueId() int64  { return m.Data2.UniqueId }

func (m *TLNewSessionCreated) SetServerSalt(v int64) { m.Data2.ServerSalt = v }
func (m *TLNewSessionCreated) GetServerSalt() int64  { return m.Data2.ServerSalt }

func (m *TLNewSessionCreated) GetPredicateName() string {
	return Predicate_new_session_created
}

func (m *TLNewSessionCreated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9ec20908: func() []byte {
			x.UInt(0x9ec20908)

			x.Long(m.GetFirstMsgId())
			x.Long(m.GetUniqueId())
			x.Long(m.GetServerSalt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_new_session_created, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_new_session_created, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNewSessionCreated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNewSessionCreated) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9ec20908: func() error {
			m.SetFirstMsgId(dBuf.Long())
			m.SetUniqueId(dBuf.Long())
			m.SetServerSalt(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNewSessionCreated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// IpPort <--
//  + TL_IpPort
//  + TL_IpPortSecret
//

func (m *IpPort) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_ipPort:
		t := m.To_IpPort()
		xBuf = t.Encode(layer)
	case Predicate_ipPortSecret:
		t := m.To_IpPortSecret()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *IpPort) CalcByteSize(layer int32) int {
	return 0
}

func (m *IpPort) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd433ad73:
		m2 := MakeTLIpPort(m)
		m2.Decode(dBuf)
	case 0x37982646:
		m2 := MakeTLIpPortSecret(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *IpPort) DebugString() string {
	switch m.PredicateName {
	case Predicate_ipPort:
		t := m.To_IpPort()
		return t.DebugString()
	case Predicate_ipPortSecret:
		t := m.To_IpPortSecret()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_IpPort
func (m *IpPort) To_IpPort() *TLIpPort {
	m.PredicateName = Predicate_ipPort
	return &TLIpPort{
		Data2: m,
	}
}

// To_IpPortSecret
func (m *IpPort) To_IpPortSecret() *TLIpPortSecret {
	m.PredicateName = Predicate_ipPortSecret
	return &TLIpPortSecret{
		Data2: m,
	}
}

// MakeTLIpPort
func MakeTLIpPort(data2 *IpPort) *TLIpPort {
	if data2 == nil {
		return &TLIpPort{Data2: &IpPort{
			PredicateName: Predicate_ipPort,
		}}
	} else {
		data2.PredicateName = Predicate_ipPort
		return &TLIpPort{Data2: data2}
	}
}

func (m *TLIpPort) To_IpPort() *IpPort {
	m.Data2.PredicateName = Predicate_ipPort
	return m.Data2
}

func (m *TLIpPort) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPort) GetIpv4() int32  { return m.Data2.Ipv4 }

func (m *TLIpPort) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPort) GetPort() int32  { return m.Data2.Port }

func (m *TLIpPort) GetPredicateName() string {
	return Predicate_ipPort
}

func (m *TLIpPort) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd433ad73: func() []byte {
			x.UInt(0xd433ad73)

			x.Int(m.GetIpv4())
			x.Int(m.GetPort())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_ipPort, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_ipPort, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLIpPort) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLIpPort) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd433ad73: func() error {
			m.SetIpv4(dBuf.Int())
			m.SetPort(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLIpPort) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLIpPortSecret
func MakeTLIpPortSecret(data2 *IpPort) *TLIpPortSecret {
	if data2 == nil {
		return &TLIpPortSecret{Data2: &IpPort{
			PredicateName: Predicate_ipPortSecret,
		}}
	} else {
		data2.PredicateName = Predicate_ipPortSecret
		return &TLIpPortSecret{Data2: data2}
	}
}

func (m *TLIpPortSecret) To_IpPort() *IpPort {
	m.Data2.PredicateName = Predicate_ipPortSecret
	return m.Data2
}

func (m *TLIpPortSecret) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPortSecret) GetIpv4() int32  { return m.Data2.Ipv4 }

func (m *TLIpPortSecret) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPortSecret) GetPort() int32  { return m.Data2.Port }

func (m *TLIpPortSecret) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLIpPortSecret) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLIpPortSecret) GetPredicateName() string {
	return Predicate_ipPortSecret
}

func (m *TLIpPortSecret) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x37982646: func() []byte {
			x.UInt(0x37982646)

			x.Int(m.GetIpv4())
			x.Int(m.GetPort())
			x.StringBytes(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_ipPortSecret, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_ipPortSecret, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLIpPortSecret) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLIpPortSecret) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x37982646: func() error {
			m.SetIpv4(dBuf.Int())
			m.SetPort(dBuf.Int())
			m.SetSecret(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLIpPortSecret) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// TlsBlock <--
//  + TL_TlsBlockString
//  + TL_TlsBlockRandom
//  + TL_TlsBlockZero
//  + TL_TlsBlockDomain
//  + TL_TlsBlockGrease
//  + TL_TlsBlockPublicKey
//  + TL_TlsBlockScope
//

func (m *TlsBlock) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_tlsBlockString:
		t := m.To_TlsBlockString()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockRandom:
		t := m.To_TlsBlockRandom()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockZero:
		t := m.To_TlsBlockZero()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockDomain:
		t := m.To_TlsBlockDomain()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockGrease:
		t := m.To_TlsBlockGrease()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockPublicKey:
		t := m.To_TlsBlockPublicKey()
		xBuf = t.Encode(layer)
	case Predicate_tlsBlockScope:
		t := m.To_TlsBlockScope()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *TlsBlock) CalcByteSize(layer int32) int {
	return 0
}

func (m *TlsBlock) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4218a164:
		m2 := MakeTLTlsBlockString(m)
		m2.Decode(dBuf)
	case 0x4d4dc41e:
		m2 := MakeTLTlsBlockRandom(m)
		m2.Decode(dBuf)
	case 0x9333afb:
		m2 := MakeTLTlsBlockZero(m)
		m2.Decode(dBuf)
	case 0x10e8636f:
		m2 := MakeTLTlsBlockDomain(m)
		m2.Decode(dBuf)
	case 0xe675a1c1:
		m2 := MakeTLTlsBlockGrease(m)
		m2.Decode(dBuf)
	case 0x9eb95b5c:
		m2 := MakeTLTlsBlockPublicKey(m)
		m2.Decode(dBuf)
	case 0xe725d44f:
		m2 := MakeTLTlsBlockScope(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *TlsBlock) DebugString() string {
	switch m.PredicateName {
	case Predicate_tlsBlockString:
		t := m.To_TlsBlockString()
		return t.DebugString()
	case Predicate_tlsBlockRandom:
		t := m.To_TlsBlockRandom()
		return t.DebugString()
	case Predicate_tlsBlockZero:
		t := m.To_TlsBlockZero()
		return t.DebugString()
	case Predicate_tlsBlockDomain:
		t := m.To_TlsBlockDomain()
		return t.DebugString()
	case Predicate_tlsBlockGrease:
		t := m.To_TlsBlockGrease()
		return t.DebugString()
	case Predicate_tlsBlockPublicKey:
		t := m.To_TlsBlockPublicKey()
		return t.DebugString()
	case Predicate_tlsBlockScope:
		t := m.To_TlsBlockScope()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TlsBlockString
func (m *TlsBlock) To_TlsBlockString() *TLTlsBlockString {
	m.PredicateName = Predicate_tlsBlockString
	return &TLTlsBlockString{
		Data2: m,
	}
}

// To_TlsBlockRandom
func (m *TlsBlock) To_TlsBlockRandom() *TLTlsBlockRandom {
	m.PredicateName = Predicate_tlsBlockRandom
	return &TLTlsBlockRandom{
		Data2: m,
	}
}

// To_TlsBlockZero
func (m *TlsBlock) To_TlsBlockZero() *TLTlsBlockZero {
	m.PredicateName = Predicate_tlsBlockZero
	return &TLTlsBlockZero{
		Data2: m,
	}
}

// To_TlsBlockDomain
func (m *TlsBlock) To_TlsBlockDomain() *TLTlsBlockDomain {
	m.PredicateName = Predicate_tlsBlockDomain
	return &TLTlsBlockDomain{
		Data2: m,
	}
}

// To_TlsBlockGrease
func (m *TlsBlock) To_TlsBlockGrease() *TLTlsBlockGrease {
	m.PredicateName = Predicate_tlsBlockGrease
	return &TLTlsBlockGrease{
		Data2: m,
	}
}

// To_TlsBlockPublicKey
func (m *TlsBlock) To_TlsBlockPublicKey() *TLTlsBlockPublicKey {
	m.PredicateName = Predicate_tlsBlockPublicKey
	return &TLTlsBlockPublicKey{
		Data2: m,
	}
}

// To_TlsBlockScope
func (m *TlsBlock) To_TlsBlockScope() *TLTlsBlockScope {
	m.PredicateName = Predicate_tlsBlockScope
	return &TLTlsBlockScope{
		Data2: m,
	}
}

// MakeTLTlsBlockString
func MakeTLTlsBlockString(data2 *TlsBlock) *TLTlsBlockString {
	if data2 == nil {
		return &TLTlsBlockString{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockString,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockString
		return &TLTlsBlockString{Data2: data2}
	}
}

func (m *TLTlsBlockString) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockString
	return m.Data2
}

func (m *TLTlsBlockString) SetData(v string) { m.Data2.Data = v }
func (m *TLTlsBlockString) GetData() string  { return m.Data2.Data }

func (m *TLTlsBlockString) GetPredicateName() string {
	return Predicate_tlsBlockString
}

func (m *TLTlsBlockString) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4218a164: func() []byte {
			x.UInt(0x4218a164)

			x.String(m.GetData())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockString, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockString, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockString) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockString) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4218a164: func() error {
			m.SetData(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockString) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockRandom
func MakeTLTlsBlockRandom(data2 *TlsBlock) *TLTlsBlockRandom {
	if data2 == nil {
		return &TLTlsBlockRandom{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockRandom,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockRandom
		return &TLTlsBlockRandom{Data2: data2}
	}
}

func (m *TLTlsBlockRandom) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockRandom
	return m.Data2
}

func (m *TLTlsBlockRandom) SetLength(v int32) { m.Data2.Length = v }
func (m *TLTlsBlockRandom) GetLength() int32  { return m.Data2.Length }

func (m *TLTlsBlockRandom) GetPredicateName() string {
	return Predicate_tlsBlockRandom
}

func (m *TLTlsBlockRandom) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4d4dc41e: func() []byte {
			x.UInt(0x4d4dc41e)

			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockRandom, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockRandom, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockRandom) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockRandom) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4d4dc41e: func() error {
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockRandom) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockZero
func MakeTLTlsBlockZero(data2 *TlsBlock) *TLTlsBlockZero {
	if data2 == nil {
		return &TLTlsBlockZero{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockZero,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockZero
		return &TLTlsBlockZero{Data2: data2}
	}
}

func (m *TLTlsBlockZero) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockZero
	return m.Data2
}

func (m *TLTlsBlockZero) SetLength(v int32) { m.Data2.Length = v }
func (m *TLTlsBlockZero) GetLength() int32  { return m.Data2.Length }

func (m *TLTlsBlockZero) GetPredicateName() string {
	return Predicate_tlsBlockZero
}

func (m *TLTlsBlockZero) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9333afb: func() []byte {
			x.UInt(0x9333afb)

			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockZero, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockZero, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockZero) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockZero) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9333afb: func() error {
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockZero) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockDomain
func MakeTLTlsBlockDomain(data2 *TlsBlock) *TLTlsBlockDomain {
	if data2 == nil {
		return &TLTlsBlockDomain{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockDomain,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockDomain
		return &TLTlsBlockDomain{Data2: data2}
	}
}

func (m *TLTlsBlockDomain) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockDomain
	return m.Data2
}

func (m *TLTlsBlockDomain) GetPredicateName() string {
	return Predicate_tlsBlockDomain
}

func (m *TLTlsBlockDomain) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x10e8636f: func() []byte {
			x.UInt(0x10e8636f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockDomain, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockDomain, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockDomain) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockDomain) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x10e8636f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockDomain) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockGrease
func MakeTLTlsBlockGrease(data2 *TlsBlock) *TLTlsBlockGrease {
	if data2 == nil {
		return &TLTlsBlockGrease{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockGrease,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockGrease
		return &TLTlsBlockGrease{Data2: data2}
	}
}

func (m *TLTlsBlockGrease) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockGrease
	return m.Data2
}

func (m *TLTlsBlockGrease) SetSeed(v int32) { m.Data2.Seed = v }
func (m *TLTlsBlockGrease) GetSeed() int32  { return m.Data2.Seed }

func (m *TLTlsBlockGrease) GetPredicateName() string {
	return Predicate_tlsBlockGrease
}

func (m *TLTlsBlockGrease) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe675a1c1: func() []byte {
			x.UInt(0xe675a1c1)

			x.Int(m.GetSeed())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockGrease, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockGrease, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockGrease) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockGrease) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe675a1c1: func() error {
			m.SetSeed(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockGrease) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockPublicKey
func MakeTLTlsBlockPublicKey(data2 *TlsBlock) *TLTlsBlockPublicKey {
	if data2 == nil {
		return &TLTlsBlockPublicKey{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockPublicKey,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockPublicKey
		return &TLTlsBlockPublicKey{Data2: data2}
	}
}

func (m *TLTlsBlockPublicKey) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockPublicKey
	return m.Data2
}

func (m *TLTlsBlockPublicKey) GetPredicateName() string {
	return Predicate_tlsBlockPublicKey
}

func (m *TLTlsBlockPublicKey) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9eb95b5c: func() []byte {
			x.UInt(0x9eb95b5c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockPublicKey, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockPublicKey, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockPublicKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockPublicKey) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9eb95b5c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockPublicKey) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTlsBlockScope
func MakeTLTlsBlockScope(data2 *TlsBlock) *TLTlsBlockScope {
	if data2 == nil {
		return &TLTlsBlockScope{Data2: &TlsBlock{
			PredicateName: Predicate_tlsBlockScope,
		}}
	} else {
		data2.PredicateName = Predicate_tlsBlockScope
		return &TLTlsBlockScope{Data2: data2}
	}
}

func (m *TLTlsBlockScope) To_TlsBlock() *TlsBlock {
	m.Data2.PredicateName = Predicate_tlsBlockScope
	return m.Data2
}

func (m *TLTlsBlockScope) SetEntries(v []*TlsBlock) { m.Data2.Entries = v }
func (m *TLTlsBlockScope) GetEntries() []*TlsBlock  { return m.Data2.Entries }

func (m *TLTlsBlockScope) GetPredicateName() string {
	return Predicate_tlsBlockScope
}

func (m *TLTlsBlockScope) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe725d44f: func() []byte {
			x.UInt(0xe725d44f)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntries())))
			for _, v := range m.GetEntries() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_tlsBlockScope, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_tlsBlockScope, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTlsBlockScope) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTlsBlockScope) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe725d44f: func() error {
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*TlsBlock, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &TlsBlock{}
				v3[i].Decode(dBuf)
			}
			m.SetEntries(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTlsBlockScope) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgsStateReq <--
//  + TL_MsgsStateReq
//

func (m *MsgsStateReq) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msgs_state_req:
		t := m.To_MsgsStateReq()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgsStateReq) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgsStateReq) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xda69fb52:
		m2 := MakeTLMsgsStateReq(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgsStateReq) DebugString() string {
	switch m.PredicateName {
	case Predicate_msgs_state_req:
		t := m.To_MsgsStateReq()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgsStateReq
func (m *MsgsStateReq) To_MsgsStateReq() *TLMsgsStateReq {
	m.PredicateName = Predicate_msgs_state_req
	return &TLMsgsStateReq{
		Data2: m,
	}
}

// MakeTLMsgsStateReq
func MakeTLMsgsStateReq(data2 *MsgsStateReq) *TLMsgsStateReq {
	if data2 == nil {
		return &TLMsgsStateReq{Data2: &MsgsStateReq{
			PredicateName: Predicate_msgs_state_req,
		}}
	} else {
		data2.PredicateName = Predicate_msgs_state_req
		return &TLMsgsStateReq{Data2: data2}
	}
}

func (m *TLMsgsStateReq) To_MsgsStateReq() *MsgsStateReq {
	m.Data2.PredicateName = Predicate_msgs_state_req
	return m.Data2
}

func (m *TLMsgsStateReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsStateReq) GetMsgIds() []int64  { return m.Data2.MsgIds }

func (m *TLMsgsStateReq) GetPredicateName() string {
	return Predicate_msgs_state_req
}

func (m *TLMsgsStateReq) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xda69fb52: func() []byte {
			x.UInt(0xda69fb52)

			x.VectorLong(m.GetMsgIds())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msgs_state_req, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msgs_state_req, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgsStateReq) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgsStateReq) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xda69fb52: func() error {

			m.SetMsgIds(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgsStateReq) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MsgsAllInfo <--
//  + TL_MsgsAllInfo
//

func (m *MsgsAllInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_msgs_all_info:
		t := m.To_MsgsAllInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MsgsAllInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *MsgsAllInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8cc0d131:
		m2 := MakeTLMsgsAllInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MsgsAllInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_msgs_all_info:
		t := m.To_MsgsAllInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MsgsAllInfo
func (m *MsgsAllInfo) To_MsgsAllInfo() *TLMsgsAllInfo {
	m.PredicateName = Predicate_msgs_all_info
	return &TLMsgsAllInfo{
		Data2: m,
	}
}

// MakeTLMsgsAllInfo
func MakeTLMsgsAllInfo(data2 *MsgsAllInfo) *TLMsgsAllInfo {
	if data2 == nil {
		return &TLMsgsAllInfo{Data2: &MsgsAllInfo{
			PredicateName: Predicate_msgs_all_info,
		}}
	} else {
		data2.PredicateName = Predicate_msgs_all_info
		return &TLMsgsAllInfo{Data2: data2}
	}
}

func (m *TLMsgsAllInfo) To_MsgsAllInfo() *MsgsAllInfo {
	m.Data2.PredicateName = Predicate_msgs_all_info
	return m.Data2
}

func (m *TLMsgsAllInfo) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAllInfo) GetMsgIds() []int64  { return m.Data2.MsgIds }

func (m *TLMsgsAllInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsAllInfo) GetInfo() string  { return m.Data2.Info }

func (m *TLMsgsAllInfo) GetPredicateName() string {
	return Predicate_msgs_all_info
}

func (m *TLMsgsAllInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8cc0d131: func() []byte {
			x.UInt(0x8cc0d131)

			x.VectorLong(m.GetMsgIds())

			x.String(m.GetInfo())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_msgs_all_info, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_msgs_all_info, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMsgsAllInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMsgsAllInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8cc0d131: func() error {

			m.SetMsgIds(dBuf.VectorLong())

			m.SetInfo(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMsgsAllInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatBannedRights <--
//  + TL_ChatBannedRights
//

func (m *ChatBannedRights) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatBannedRights:
		t := m.To_ChatBannedRights()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatBannedRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatBannedRights) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9f120418:
		m2 := MakeTLChatBannedRights(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatBannedRights) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatBannedRights:
		t := m.To_ChatBannedRights()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatBannedRights
func (m *ChatBannedRights) To_ChatBannedRights() *TLChatBannedRights {
	m.PredicateName = Predicate_chatBannedRights
	return &TLChatBannedRights{
		Data2: m,
	}
}

// MakeTLChatBannedRights
func MakeTLChatBannedRights(data2 *ChatBannedRights) *TLChatBannedRights {
	if data2 == nil {
		return &TLChatBannedRights{Data2: &ChatBannedRights{
			PredicateName: Predicate_chatBannedRights,
		}}
	} else {
		data2.PredicateName = Predicate_chatBannedRights
		return &TLChatBannedRights{Data2: data2}
	}
}

func (m *TLChatBannedRights) To_ChatBannedRights() *ChatBannedRights {
	m.Data2.PredicateName = Predicate_chatBannedRights
	return m.Data2
}

//// flags
func (m *TLChatBannedRights) SetViewMessages(v bool) { m.Data2.ViewMessages = v }
func (m *TLChatBannedRights) GetViewMessages() bool  { return m.Data2.ViewMessages }

func (m *TLChatBannedRights) SetSendMessages(v bool) { m.Data2.SendMessages = v }
func (m *TLChatBannedRights) GetSendMessages() bool  { return m.Data2.SendMessages }

func (m *TLChatBannedRights) SetSendMedia(v bool) { m.Data2.SendMedia = v }
func (m *TLChatBannedRights) GetSendMedia() bool  { return m.Data2.SendMedia }

func (m *TLChatBannedRights) SetSendStickers(v bool) { m.Data2.SendStickers = v }
func (m *TLChatBannedRights) GetSendStickers() bool  { return m.Data2.SendStickers }

func (m *TLChatBannedRights) SetSendGifs(v bool) { m.Data2.SendGifs = v }
func (m *TLChatBannedRights) GetSendGifs() bool  { return m.Data2.SendGifs }

func (m *TLChatBannedRights) SetSendGames(v bool) { m.Data2.SendGames = v }
func (m *TLChatBannedRights) GetSendGames() bool  { return m.Data2.SendGames }

func (m *TLChatBannedRights) SetSendInline(v bool) { m.Data2.SendInline = v }
func (m *TLChatBannedRights) GetSendInline() bool  { return m.Data2.SendInline }

func (m *TLChatBannedRights) SetEmbedLinks(v bool) { m.Data2.EmbedLinks = v }
func (m *TLChatBannedRights) GetEmbedLinks() bool  { return m.Data2.EmbedLinks }

func (m *TLChatBannedRights) SetSendPolls(v bool) { m.Data2.SendPolls = v }
func (m *TLChatBannedRights) GetSendPolls() bool  { return m.Data2.SendPolls }

func (m *TLChatBannedRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChatBannedRights) GetChangeInfo() bool  { return m.Data2.ChangeInfo }

func (m *TLChatBannedRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChatBannedRights) GetInviteUsers() bool  { return m.Data2.InviteUsers }

func (m *TLChatBannedRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChatBannedRights) GetPinMessages() bool  { return m.Data2.PinMessages }

func (m *TLChatBannedRights) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChatBannedRights) GetUntilDate() int32  { return m.Data2.UntilDate }

func (m *TLChatBannedRights) GetPredicateName() string {
	return Predicate_chatBannedRights
}

func (m *TLChatBannedRights) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9f120418: func() []byte {
			x.UInt(0x9f120418)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetViewMessages() == true {
					flags |= 1 << 0
				}
				if m.GetSendMessages() == true {
					flags |= 1 << 1
				}
				if m.GetSendMedia() == true {
					flags |= 1 << 2
				}
				if m.GetSendStickers() == true {
					flags |= 1 << 3
				}
				if m.GetSendGifs() == true {
					flags |= 1 << 4
				}
				if m.GetSendGames() == true {
					flags |= 1 << 5
				}
				if m.GetSendInline() == true {
					flags |= 1 << 6
				}
				if m.GetEmbedLinks() == true {
					flags |= 1 << 7
				}
				if m.GetSendPolls() == true {
					flags |= 1 << 8
				}
				if m.GetChangeInfo() == true {
					flags |= 1 << 10
				}
				if m.GetInviteUsers() == true {
					flags |= 1 << 15
				}
				if m.GetPinMessages() == true {
					flags |= 1 << 17
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetUntilDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatBannedRights, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatBannedRights, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatBannedRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatBannedRights) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9f120418: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetViewMessages(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSendMessages(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetSendMedia(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetSendStickers(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetSendGifs(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetSendGames(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetSendInline(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetEmbedLinks(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetSendPolls(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetChangeInfo(true)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetInviteUsers(true)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetPinMessages(true)
			}
			m.SetUntilDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatBannedRights) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_Country <--
//  + TL_HelpCountry
//

func (m *Help_Country) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_country:
		t := m.To_HelpCountry()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_Country) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_Country) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc3878e23:
		m2 := MakeTLHelpCountry(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_Country) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_country:
		t := m.To_HelpCountry()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpCountry
func (m *Help_Country) To_HelpCountry() *TLHelpCountry {
	m.PredicateName = Predicate_help_country
	return &TLHelpCountry{
		Data2: m,
	}
}

// MakeTLHelpCountry
func MakeTLHelpCountry(data2 *Help_Country) *TLHelpCountry {
	if data2 == nil {
		return &TLHelpCountry{Data2: &Help_Country{
			PredicateName: Predicate_help_country,
		}}
	} else {
		data2.PredicateName = Predicate_help_country
		return &TLHelpCountry{Data2: data2}
	}
}

func (m *TLHelpCountry) To_Help_Country() *Help_Country {
	m.Data2.PredicateName = Predicate_help_country
	return m.Data2
}

//// flags
func (m *TLHelpCountry) SetHidden(v bool) { m.Data2.Hidden = v }
func (m *TLHelpCountry) GetHidden() bool  { return m.Data2.Hidden }

func (m *TLHelpCountry) SetIso2(v string) { m.Data2.Iso2 = v }
func (m *TLHelpCountry) GetIso2() string  { return m.Data2.Iso2 }

func (m *TLHelpCountry) SetDefaultName(v string) { m.Data2.DefaultName = v }
func (m *TLHelpCountry) GetDefaultName() string  { return m.Data2.DefaultName }

func (m *TLHelpCountry) SetName(v *types.StringValue) { m.Data2.Name = v }
func (m *TLHelpCountry) GetName() *types.StringValue  { return m.Data2.Name }

func (m *TLHelpCountry) SetCountryCodes(v []*Help_CountryCode) { m.Data2.CountryCodes = v }
func (m *TLHelpCountry) GetCountryCodes() []*Help_CountryCode  { return m.Data2.CountryCodes }

func (m *TLHelpCountry) GetPredicateName() string {
	return Predicate_help_country
}

func (m *TLHelpCountry) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc3878e23: func() []byte {
			x.UInt(0xc3878e23)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHidden() == true {
					flags |= 1 << 0
				}

				if m.GetName() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetIso2())
			x.String(m.GetDefaultName())
			if m.GetName() != nil {
				x.String(m.GetName().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCountryCodes())))
			for _, v := range m.GetCountryCodes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_country, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_country, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpCountry) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpCountry) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc3878e23: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHidden(true)
			}
			m.SetIso2(dBuf.String())
			m.SetDefaultName(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetName(&types.StringValue{Value: dBuf.String()})
			}

			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*Help_CountryCode, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &Help_CountryCode{}
				v5[i].Decode(dBuf)
			}
			m.SetCountryCodes(v5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpCountry) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_CountryCode <--
//  + TL_HelpCountryCode
//

func (m *Help_CountryCode) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_countryCode:
		t := m.To_HelpCountryCode()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_CountryCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_CountryCode) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4203c5ef:
		m2 := MakeTLHelpCountryCode(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_CountryCode) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_countryCode:
		t := m.To_HelpCountryCode()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpCountryCode
func (m *Help_CountryCode) To_HelpCountryCode() *TLHelpCountryCode {
	m.PredicateName = Predicate_help_countryCode
	return &TLHelpCountryCode{
		Data2: m,
	}
}

// MakeTLHelpCountryCode
func MakeTLHelpCountryCode(data2 *Help_CountryCode) *TLHelpCountryCode {
	if data2 == nil {
		return &TLHelpCountryCode{Data2: &Help_CountryCode{
			PredicateName: Predicate_help_countryCode,
		}}
	} else {
		data2.PredicateName = Predicate_help_countryCode
		return &TLHelpCountryCode{Data2: data2}
	}
}

func (m *TLHelpCountryCode) To_Help_CountryCode() *Help_CountryCode {
	m.Data2.PredicateName = Predicate_help_countryCode
	return m.Data2
}

//// flags
func (m *TLHelpCountryCode) SetCountryCode(v string) { m.Data2.CountryCode = v }
func (m *TLHelpCountryCode) GetCountryCode() string  { return m.Data2.CountryCode }

func (m *TLHelpCountryCode) SetPrefixes(v []string) { m.Data2.Prefixes = v }
func (m *TLHelpCountryCode) GetPrefixes() []string  { return m.Data2.Prefixes }

func (m *TLHelpCountryCode) SetPatterns(v []string) { m.Data2.Patterns = v }
func (m *TLHelpCountryCode) GetPatterns() []string  { return m.Data2.Patterns }

func (m *TLHelpCountryCode) GetPredicateName() string {
	return Predicate_help_countryCode
}

func (m *TLHelpCountryCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4203c5ef: func() []byte {
			x.UInt(0x4203c5ef)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPrefixes() != nil {
					flags |= 1 << 0
				}
				if m.GetPatterns() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetCountryCode())
			if m.GetPrefixes() != nil {
				x.VectorString(m.GetPrefixes())
			}
			if m.GetPatterns() != nil {
				x.VectorString(m.GetPatterns())
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_countryCode, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_countryCode, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpCountryCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpCountryCode) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4203c5ef: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetCountryCode(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetPrefixes(dBuf.VectorString())
			}
			if (flags & (1 << 1)) != 0 {
				m.SetPatterns(dBuf.VectorString())
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpCountryCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_ExportedGroupCallInvite <--
//  + TL_PhoneExportedGroupCallInvite
//

func (m *Phone_ExportedGroupCallInvite) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_exportedGroupCallInvite:
		t := m.To_PhoneExportedGroupCallInvite()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_ExportedGroupCallInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_ExportedGroupCallInvite) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x204bd158:
		m2 := MakeTLPhoneExportedGroupCallInvite(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_ExportedGroupCallInvite) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_exportedGroupCallInvite:
		t := m.To_PhoneExportedGroupCallInvite()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneExportedGroupCallInvite
func (m *Phone_ExportedGroupCallInvite) To_PhoneExportedGroupCallInvite() *TLPhoneExportedGroupCallInvite {
	m.PredicateName = Predicate_phone_exportedGroupCallInvite
	return &TLPhoneExportedGroupCallInvite{
		Data2: m,
	}
}

// MakeTLPhoneExportedGroupCallInvite
func MakeTLPhoneExportedGroupCallInvite(data2 *Phone_ExportedGroupCallInvite) *TLPhoneExportedGroupCallInvite {
	if data2 == nil {
		return &TLPhoneExportedGroupCallInvite{Data2: &Phone_ExportedGroupCallInvite{
			PredicateName: Predicate_phone_exportedGroupCallInvite,
		}}
	} else {
		data2.PredicateName = Predicate_phone_exportedGroupCallInvite
		return &TLPhoneExportedGroupCallInvite{Data2: data2}
	}
}

func (m *TLPhoneExportedGroupCallInvite) To_Phone_ExportedGroupCallInvite() *Phone_ExportedGroupCallInvite {
	m.Data2.PredicateName = Predicate_phone_exportedGroupCallInvite
	return m.Data2
}

func (m *TLPhoneExportedGroupCallInvite) SetLink(v string) { m.Data2.Link = v }
func (m *TLPhoneExportedGroupCallInvite) GetLink() string  { return m.Data2.Link }

func (m *TLPhoneExportedGroupCallInvite) GetPredicateName() string {
	return Predicate_phone_exportedGroupCallInvite
}

func (m *TLPhoneExportedGroupCallInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x204bd158: func() []byte {
			x.UInt(0x204bd158)

			x.String(m.GetLink())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_exportedGroupCallInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_exportedGroupCallInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneExportedGroupCallInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneExportedGroupCallInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x204bd158: func() error {
			m.SetLink(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneExportedGroupCallInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// TopPeerCategory <--
//  + TL_TopPeerCategoryBotsPM
//  + TL_TopPeerCategoryBotsInline
//  + TL_TopPeerCategoryCorrespondents
//  + TL_TopPeerCategoryGroups
//  + TL_TopPeerCategoryChannels
//  + TL_TopPeerCategoryPhoneCalls
//  + TL_TopPeerCategoryForwardUsers
//  + TL_TopPeerCategoryForwardChats
//

func (m *TopPeerCategory) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_topPeerCategoryBotsPM:
		t := m.To_TopPeerCategoryBotsPM()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryBotsInline:
		t := m.To_TopPeerCategoryBotsInline()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryCorrespondents:
		t := m.To_TopPeerCategoryCorrespondents()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryGroups:
		t := m.To_TopPeerCategoryGroups()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryChannels:
		t := m.To_TopPeerCategoryChannels()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryPhoneCalls:
		t := m.To_TopPeerCategoryPhoneCalls()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryForwardUsers:
		t := m.To_TopPeerCategoryForwardUsers()
		xBuf = t.Encode(layer)
	case Predicate_topPeerCategoryForwardChats:
		t := m.To_TopPeerCategoryForwardChats()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *TopPeerCategory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TopPeerCategory) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xab661b5b:
		m2 := MakeTLTopPeerCategoryBotsPM(m)
		m2.Decode(dBuf)
	case 0x148677e2:
		m2 := MakeTLTopPeerCategoryBotsInline(m)
		m2.Decode(dBuf)
	case 0x637b7ed:
		m2 := MakeTLTopPeerCategoryCorrespondents(m)
		m2.Decode(dBuf)
	case 0xbd17a14a:
		m2 := MakeTLTopPeerCategoryGroups(m)
		m2.Decode(dBuf)
	case 0x161d9628:
		m2 := MakeTLTopPeerCategoryChannels(m)
		m2.Decode(dBuf)
	case 0x1e76a78c:
		m2 := MakeTLTopPeerCategoryPhoneCalls(m)
		m2.Decode(dBuf)
	case 0xa8406ca9:
		m2 := MakeTLTopPeerCategoryForwardUsers(m)
		m2.Decode(dBuf)
	case 0xfbeec0f0:
		m2 := MakeTLTopPeerCategoryForwardChats(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *TopPeerCategory) DebugString() string {
	switch m.PredicateName {
	case Predicate_topPeerCategoryBotsPM:
		t := m.To_TopPeerCategoryBotsPM()
		return t.DebugString()
	case Predicate_topPeerCategoryBotsInline:
		t := m.To_TopPeerCategoryBotsInline()
		return t.DebugString()
	case Predicate_topPeerCategoryCorrespondents:
		t := m.To_TopPeerCategoryCorrespondents()
		return t.DebugString()
	case Predicate_topPeerCategoryGroups:
		t := m.To_TopPeerCategoryGroups()
		return t.DebugString()
	case Predicate_topPeerCategoryChannels:
		t := m.To_TopPeerCategoryChannels()
		return t.DebugString()
	case Predicate_topPeerCategoryPhoneCalls:
		t := m.To_TopPeerCategoryPhoneCalls()
		return t.DebugString()
	case Predicate_topPeerCategoryForwardUsers:
		t := m.To_TopPeerCategoryForwardUsers()
		return t.DebugString()
	case Predicate_topPeerCategoryForwardChats:
		t := m.To_TopPeerCategoryForwardChats()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TopPeerCategoryBotsPM
func (m *TopPeerCategory) To_TopPeerCategoryBotsPM() *TLTopPeerCategoryBotsPM {
	m.PredicateName = Predicate_topPeerCategoryBotsPM
	return &TLTopPeerCategoryBotsPM{
		Data2: m,
	}
}

// To_TopPeerCategoryBotsInline
func (m *TopPeerCategory) To_TopPeerCategoryBotsInline() *TLTopPeerCategoryBotsInline {
	m.PredicateName = Predicate_topPeerCategoryBotsInline
	return &TLTopPeerCategoryBotsInline{
		Data2: m,
	}
}

// To_TopPeerCategoryCorrespondents
func (m *TopPeerCategory) To_TopPeerCategoryCorrespondents() *TLTopPeerCategoryCorrespondents {
	m.PredicateName = Predicate_topPeerCategoryCorrespondents
	return &TLTopPeerCategoryCorrespondents{
		Data2: m,
	}
}

// To_TopPeerCategoryGroups
func (m *TopPeerCategory) To_TopPeerCategoryGroups() *TLTopPeerCategoryGroups {
	m.PredicateName = Predicate_topPeerCategoryGroups
	return &TLTopPeerCategoryGroups{
		Data2: m,
	}
}

// To_TopPeerCategoryChannels
func (m *TopPeerCategory) To_TopPeerCategoryChannels() *TLTopPeerCategoryChannels {
	m.PredicateName = Predicate_topPeerCategoryChannels
	return &TLTopPeerCategoryChannels{
		Data2: m,
	}
}

// To_TopPeerCategoryPhoneCalls
func (m *TopPeerCategory) To_TopPeerCategoryPhoneCalls() *TLTopPeerCategoryPhoneCalls {
	m.PredicateName = Predicate_topPeerCategoryPhoneCalls
	return &TLTopPeerCategoryPhoneCalls{
		Data2: m,
	}
}

// To_TopPeerCategoryForwardUsers
func (m *TopPeerCategory) To_TopPeerCategoryForwardUsers() *TLTopPeerCategoryForwardUsers {
	m.PredicateName = Predicate_topPeerCategoryForwardUsers
	return &TLTopPeerCategoryForwardUsers{
		Data2: m,
	}
}

// To_TopPeerCategoryForwardChats
func (m *TopPeerCategory) To_TopPeerCategoryForwardChats() *TLTopPeerCategoryForwardChats {
	m.PredicateName = Predicate_topPeerCategoryForwardChats
	return &TLTopPeerCategoryForwardChats{
		Data2: m,
	}
}

// MakeTLTopPeerCategoryBotsPM
func MakeTLTopPeerCategoryBotsPM(data2 *TopPeerCategory) *TLTopPeerCategoryBotsPM {
	if data2 == nil {
		return &TLTopPeerCategoryBotsPM{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryBotsPM,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryBotsPM
		return &TLTopPeerCategoryBotsPM{Data2: data2}
	}
}

func (m *TLTopPeerCategoryBotsPM) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryBotsPM
	return m.Data2
}

func (m *TLTopPeerCategoryBotsPM) GetPredicateName() string {
	return Predicate_topPeerCategoryBotsPM
}

func (m *TLTopPeerCategoryBotsPM) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xab661b5b: func() []byte {
			x.UInt(0xab661b5b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryBotsPM, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryBotsPM, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryBotsPM) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryBotsPM) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xab661b5b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryBotsPM) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryBotsInline
func MakeTLTopPeerCategoryBotsInline(data2 *TopPeerCategory) *TLTopPeerCategoryBotsInline {
	if data2 == nil {
		return &TLTopPeerCategoryBotsInline{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryBotsInline,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryBotsInline
		return &TLTopPeerCategoryBotsInline{Data2: data2}
	}
}

func (m *TLTopPeerCategoryBotsInline) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryBotsInline
	return m.Data2
}

func (m *TLTopPeerCategoryBotsInline) GetPredicateName() string {
	return Predicate_topPeerCategoryBotsInline
}

func (m *TLTopPeerCategoryBotsInline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x148677e2: func() []byte {
			x.UInt(0x148677e2)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryBotsInline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryBotsInline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryBotsInline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryBotsInline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x148677e2: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryBotsInline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryCorrespondents
func MakeTLTopPeerCategoryCorrespondents(data2 *TopPeerCategory) *TLTopPeerCategoryCorrespondents {
	if data2 == nil {
		return &TLTopPeerCategoryCorrespondents{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryCorrespondents,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryCorrespondents
		return &TLTopPeerCategoryCorrespondents{Data2: data2}
	}
}

func (m *TLTopPeerCategoryCorrespondents) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryCorrespondents
	return m.Data2
}

func (m *TLTopPeerCategoryCorrespondents) GetPredicateName() string {
	return Predicate_topPeerCategoryCorrespondents
}

func (m *TLTopPeerCategoryCorrespondents) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x637b7ed: func() []byte {
			x.UInt(0x637b7ed)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryCorrespondents, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryCorrespondents, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryCorrespondents) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryCorrespondents) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x637b7ed: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryCorrespondents) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryGroups
func MakeTLTopPeerCategoryGroups(data2 *TopPeerCategory) *TLTopPeerCategoryGroups {
	if data2 == nil {
		return &TLTopPeerCategoryGroups{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryGroups,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryGroups
		return &TLTopPeerCategoryGroups{Data2: data2}
	}
}

func (m *TLTopPeerCategoryGroups) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryGroups
	return m.Data2
}

func (m *TLTopPeerCategoryGroups) GetPredicateName() string {
	return Predicate_topPeerCategoryGroups
}

func (m *TLTopPeerCategoryGroups) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbd17a14a: func() []byte {
			x.UInt(0xbd17a14a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryGroups, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryGroups, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryGroups) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryGroups) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbd17a14a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryGroups) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryChannels
func MakeTLTopPeerCategoryChannels(data2 *TopPeerCategory) *TLTopPeerCategoryChannels {
	if data2 == nil {
		return &TLTopPeerCategoryChannels{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryChannels,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryChannels
		return &TLTopPeerCategoryChannels{Data2: data2}
	}
}

func (m *TLTopPeerCategoryChannels) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryChannels
	return m.Data2
}

func (m *TLTopPeerCategoryChannels) GetPredicateName() string {
	return Predicate_topPeerCategoryChannels
}

func (m *TLTopPeerCategoryChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x161d9628: func() []byte {
			x.UInt(0x161d9628)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryChannels, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryChannels, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryChannels) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x161d9628: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryPhoneCalls
func MakeTLTopPeerCategoryPhoneCalls(data2 *TopPeerCategory) *TLTopPeerCategoryPhoneCalls {
	if data2 == nil {
		return &TLTopPeerCategoryPhoneCalls{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryPhoneCalls,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryPhoneCalls
		return &TLTopPeerCategoryPhoneCalls{Data2: data2}
	}
}

func (m *TLTopPeerCategoryPhoneCalls) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryPhoneCalls
	return m.Data2
}

func (m *TLTopPeerCategoryPhoneCalls) GetPredicateName() string {
	return Predicate_topPeerCategoryPhoneCalls
}

func (m *TLTopPeerCategoryPhoneCalls) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e76a78c: func() []byte {
			x.UInt(0x1e76a78c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryPhoneCalls, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryPhoneCalls, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryPhoneCalls) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryPhoneCalls) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e76a78c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryPhoneCalls) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryForwardUsers
func MakeTLTopPeerCategoryForwardUsers(data2 *TopPeerCategory) *TLTopPeerCategoryForwardUsers {
	if data2 == nil {
		return &TLTopPeerCategoryForwardUsers{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryForwardUsers,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryForwardUsers
		return &TLTopPeerCategoryForwardUsers{Data2: data2}
	}
}

func (m *TLTopPeerCategoryForwardUsers) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryForwardUsers
	return m.Data2
}

func (m *TLTopPeerCategoryForwardUsers) GetPredicateName() string {
	return Predicate_topPeerCategoryForwardUsers
}

func (m *TLTopPeerCategoryForwardUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8406ca9: func() []byte {
			x.UInt(0xa8406ca9)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryForwardUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryForwardUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryForwardUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryForwardUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8406ca9: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryForwardUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTopPeerCategoryForwardChats
func MakeTLTopPeerCategoryForwardChats(data2 *TopPeerCategory) *TLTopPeerCategoryForwardChats {
	if data2 == nil {
		return &TLTopPeerCategoryForwardChats{Data2: &TopPeerCategory{
			PredicateName: Predicate_topPeerCategoryForwardChats,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryForwardChats
		return &TLTopPeerCategoryForwardChats{Data2: data2}
	}
}

func (m *TLTopPeerCategoryForwardChats) To_TopPeerCategory() *TopPeerCategory {
	m.Data2.PredicateName = Predicate_topPeerCategoryForwardChats
	return m.Data2
}

func (m *TLTopPeerCategoryForwardChats) GetPredicateName() string {
	return Predicate_topPeerCategoryForwardChats
}

func (m *TLTopPeerCategoryForwardChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfbeec0f0: func() []byte {
			x.UInt(0xfbeec0f0)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryForwardChats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryForwardChats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryForwardChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryForwardChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfbeec0f0: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryForwardChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCallDiscardReason <--
//  + TL_PhoneCallDiscardReasonMissed
//  + TL_PhoneCallDiscardReasonDisconnect
//  + TL_PhoneCallDiscardReasonHangup
//  + TL_PhoneCallDiscardReasonBusy
//

func (m *PhoneCallDiscardReason) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phoneCallDiscardReasonMissed:
		t := m.To_PhoneCallDiscardReasonMissed()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallDiscardReasonDisconnect:
		t := m.To_PhoneCallDiscardReasonDisconnect()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallDiscardReasonHangup:
		t := m.To_PhoneCallDiscardReasonHangup()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallDiscardReasonBusy:
		t := m.To_PhoneCallDiscardReasonBusy()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PhoneCallDiscardReason) CalcByteSize(layer int32) int {
	return 0
}

func (m *PhoneCallDiscardReason) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x85e42301:
		m2 := MakeTLPhoneCallDiscardReasonMissed(m)
		m2.Decode(dBuf)
	case 0xe095c1a0:
		m2 := MakeTLPhoneCallDiscardReasonDisconnect(m)
		m2.Decode(dBuf)
	case 0x57adc690:
		m2 := MakeTLPhoneCallDiscardReasonHangup(m)
		m2.Decode(dBuf)
	case 0xfaf7e8c9:
		m2 := MakeTLPhoneCallDiscardReasonBusy(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PhoneCallDiscardReason) DebugString() string {
	switch m.PredicateName {
	case Predicate_phoneCallDiscardReasonMissed:
		t := m.To_PhoneCallDiscardReasonMissed()
		return t.DebugString()
	case Predicate_phoneCallDiscardReasonDisconnect:
		t := m.To_PhoneCallDiscardReasonDisconnect()
		return t.DebugString()
	case Predicate_phoneCallDiscardReasonHangup:
		t := m.To_PhoneCallDiscardReasonHangup()
		return t.DebugString()
	case Predicate_phoneCallDiscardReasonBusy:
		t := m.To_PhoneCallDiscardReasonBusy()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneCallDiscardReasonMissed
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonMissed() *TLPhoneCallDiscardReasonMissed {
	m.PredicateName = Predicate_phoneCallDiscardReasonMissed
	return &TLPhoneCallDiscardReasonMissed{
		Data2: m,
	}
}

// To_PhoneCallDiscardReasonDisconnect
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonDisconnect() *TLPhoneCallDiscardReasonDisconnect {
	m.PredicateName = Predicate_phoneCallDiscardReasonDisconnect
	return &TLPhoneCallDiscardReasonDisconnect{
		Data2: m,
	}
}

// To_PhoneCallDiscardReasonHangup
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonHangup() *TLPhoneCallDiscardReasonHangup {
	m.PredicateName = Predicate_phoneCallDiscardReasonHangup
	return &TLPhoneCallDiscardReasonHangup{
		Data2: m,
	}
}

// To_PhoneCallDiscardReasonBusy
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonBusy() *TLPhoneCallDiscardReasonBusy {
	m.PredicateName = Predicate_phoneCallDiscardReasonBusy
	return &TLPhoneCallDiscardReasonBusy{
		Data2: m,
	}
}

// MakeTLPhoneCallDiscardReasonMissed
func MakeTLPhoneCallDiscardReasonMissed(data2 *PhoneCallDiscardReason) *TLPhoneCallDiscardReasonMissed {
	if data2 == nil {
		return &TLPhoneCallDiscardReasonMissed{Data2: &PhoneCallDiscardReason{
			PredicateName: Predicate_phoneCallDiscardReasonMissed,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallDiscardReasonMissed
		return &TLPhoneCallDiscardReasonMissed{Data2: data2}
	}
}

func (m *TLPhoneCallDiscardReasonMissed) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	m.Data2.PredicateName = Predicate_phoneCallDiscardReasonMissed
	return m.Data2
}

func (m *TLPhoneCallDiscardReasonMissed) GetPredicateName() string {
	return Predicate_phoneCallDiscardReasonMissed
}

func (m *TLPhoneCallDiscardReasonMissed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x85e42301: func() []byte {
			x.UInt(0x85e42301)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallDiscardReasonMissed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallDiscardReasonMissed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallDiscardReasonMissed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallDiscardReasonMissed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x85e42301: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallDiscardReasonMissed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallDiscardReasonDisconnect
func MakeTLPhoneCallDiscardReasonDisconnect(data2 *PhoneCallDiscardReason) *TLPhoneCallDiscardReasonDisconnect {
	if data2 == nil {
		return &TLPhoneCallDiscardReasonDisconnect{Data2: &PhoneCallDiscardReason{
			PredicateName: Predicate_phoneCallDiscardReasonDisconnect,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallDiscardReasonDisconnect
		return &TLPhoneCallDiscardReasonDisconnect{Data2: data2}
	}
}

func (m *TLPhoneCallDiscardReasonDisconnect) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	m.Data2.PredicateName = Predicate_phoneCallDiscardReasonDisconnect
	return m.Data2
}

func (m *TLPhoneCallDiscardReasonDisconnect) GetPredicateName() string {
	return Predicate_phoneCallDiscardReasonDisconnect
}

func (m *TLPhoneCallDiscardReasonDisconnect) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe095c1a0: func() []byte {
			x.UInt(0xe095c1a0)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallDiscardReasonDisconnect, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallDiscardReasonDisconnect, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallDiscardReasonDisconnect) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallDiscardReasonDisconnect) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe095c1a0: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallDiscardReasonDisconnect) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallDiscardReasonHangup
func MakeTLPhoneCallDiscardReasonHangup(data2 *PhoneCallDiscardReason) *TLPhoneCallDiscardReasonHangup {
	if data2 == nil {
		return &TLPhoneCallDiscardReasonHangup{Data2: &PhoneCallDiscardReason{
			PredicateName: Predicate_phoneCallDiscardReasonHangup,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallDiscardReasonHangup
		return &TLPhoneCallDiscardReasonHangup{Data2: data2}
	}
}

func (m *TLPhoneCallDiscardReasonHangup) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	m.Data2.PredicateName = Predicate_phoneCallDiscardReasonHangup
	return m.Data2
}

func (m *TLPhoneCallDiscardReasonHangup) GetPredicateName() string {
	return Predicate_phoneCallDiscardReasonHangup
}

func (m *TLPhoneCallDiscardReasonHangup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x57adc690: func() []byte {
			x.UInt(0x57adc690)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallDiscardReasonHangup, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallDiscardReasonHangup, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallDiscardReasonHangup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallDiscardReasonHangup) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x57adc690: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallDiscardReasonHangup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallDiscardReasonBusy
func MakeTLPhoneCallDiscardReasonBusy(data2 *PhoneCallDiscardReason) *TLPhoneCallDiscardReasonBusy {
	if data2 == nil {
		return &TLPhoneCallDiscardReasonBusy{Data2: &PhoneCallDiscardReason{
			PredicateName: Predicate_phoneCallDiscardReasonBusy,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallDiscardReasonBusy
		return &TLPhoneCallDiscardReasonBusy{Data2: data2}
	}
}

func (m *TLPhoneCallDiscardReasonBusy) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
	m.Data2.PredicateName = Predicate_phoneCallDiscardReasonBusy
	return m.Data2
}

func (m *TLPhoneCallDiscardReasonBusy) GetPredicateName() string {
	return Predicate_phoneCallDiscardReasonBusy
}

func (m *TLPhoneCallDiscardReasonBusy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfaf7e8c9: func() []byte {
			x.UInt(0xfaf7e8c9)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallDiscardReasonBusy, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallDiscardReasonBusy, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallDiscardReasonBusy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallDiscardReasonBusy) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfaf7e8c9: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallDiscardReasonBusy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DataJSON <--
//  + TL_DataJSON
//

func (m *DataJSON) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dataJSON:
		t := m.To_DataJSON()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DataJSON) CalcByteSize(layer int32) int {
	return 0
}

func (m *DataJSON) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7d748d04:
		m2 := MakeTLDataJSON(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DataJSON) DebugString() string {
	switch m.PredicateName {
	case Predicate_dataJSON:
		t := m.To_DataJSON()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DataJSON
func (m *DataJSON) To_DataJSON() *TLDataJSON {
	m.PredicateName = Predicate_dataJSON
	return &TLDataJSON{
		Data2: m,
	}
}

// MakeTLDataJSON
func MakeTLDataJSON(data2 *DataJSON) *TLDataJSON {
	if data2 == nil {
		return &TLDataJSON{Data2: &DataJSON{
			PredicateName: Predicate_dataJSON,
		}}
	} else {
		data2.PredicateName = Predicate_dataJSON
		return &TLDataJSON{Data2: data2}
	}
}

func (m *TLDataJSON) To_DataJSON() *DataJSON {
	m.Data2.PredicateName = Predicate_dataJSON
	return m.Data2
}

func (m *TLDataJSON) SetData(v string) { m.Data2.Data = v }
func (m *TLDataJSON) GetData() string  { return m.Data2.Data }

func (m *TLDataJSON) GetPredicateName() string {
	return Predicate_dataJSON
}

func (m *TLDataJSON) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7d748d04: func() []byte {
			x.UInt(0x7d748d04)

			x.String(m.GetData())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dataJSON, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dataJSON, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDataJSON) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDataJSON) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7d748d04: func() error {
			m.SetData(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDataJSON) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_WebAuthorizations <--
//  + TL_AccountWebAuthorizations
//

func (m *Account_WebAuthorizations) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_webAuthorizations:
		t := m.To_AccountWebAuthorizations()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_WebAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_WebAuthorizations) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xed56c9fc:
		m2 := MakeTLAccountWebAuthorizations(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_WebAuthorizations) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_webAuthorizations:
		t := m.To_AccountWebAuthorizations()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountWebAuthorizations
func (m *Account_WebAuthorizations) To_AccountWebAuthorizations() *TLAccountWebAuthorizations {
	m.PredicateName = Predicate_account_webAuthorizations
	return &TLAccountWebAuthorizations{
		Data2: m,
	}
}

// MakeTLAccountWebAuthorizations
func MakeTLAccountWebAuthorizations(data2 *Account_WebAuthorizations) *TLAccountWebAuthorizations {
	if data2 == nil {
		return &TLAccountWebAuthorizations{Data2: &Account_WebAuthorizations{
			PredicateName: Predicate_account_webAuthorizations,
		}}
	} else {
		data2.PredicateName = Predicate_account_webAuthorizations
		return &TLAccountWebAuthorizations{Data2: data2}
	}
}

func (m *TLAccountWebAuthorizations) To_Account_WebAuthorizations() *Account_WebAuthorizations {
	m.Data2.PredicateName = Predicate_account_webAuthorizations
	return m.Data2
}

func (m *TLAccountWebAuthorizations) SetAuthorizations(v []*WebAuthorization) {
	m.Data2.Authorizations = v
}
func (m *TLAccountWebAuthorizations) GetAuthorizations() []*WebAuthorization {
	return m.Data2.Authorizations
}

func (m *TLAccountWebAuthorizations) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountWebAuthorizations) GetUsers() []*User  { return m.Data2.Users }

func (m *TLAccountWebAuthorizations) GetPredicateName() string {
	return Predicate_account_webAuthorizations
}

func (m *TLAccountWebAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed56c9fc: func() []byte {
			x.UInt(0xed56c9fc)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAuthorizations())))
			for _, v := range m.GetAuthorizations() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_webAuthorizations, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_webAuthorizations, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountWebAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountWebAuthorizations) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed56c9fc: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*WebAuthorization, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &WebAuthorization{}
				v0[i].Decode(dBuf)
			}
			m.SetAuthorizations(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountWebAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PasswordKdfAlgo <--
//  + TL_PasswordKdfAlgoUnknown
//  + TL_PasswordKdfAlgoModPow
//

func (m *PasswordKdfAlgo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_passwordKdfAlgoUnknown:
		t := m.To_PasswordKdfAlgoUnknown()
		xBuf = t.Encode(layer)
	case Predicate_passwordKdfAlgoModPow:
		t := m.To_PasswordKdfAlgoModPow()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PasswordKdfAlgo) CalcByteSize(layer int32) int {
	return 0
}

func (m *PasswordKdfAlgo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd45ab096:
		m2 := MakeTLPasswordKdfAlgoUnknown(m)
		m2.Decode(dBuf)
	case 0x3a912d4a:
		m2 := MakeTLPasswordKdfAlgoModPow(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PasswordKdfAlgo) DebugString() string {
	switch m.PredicateName {
	case Predicate_passwordKdfAlgoUnknown:
		t := m.To_PasswordKdfAlgoUnknown()
		return t.DebugString()
	case Predicate_passwordKdfAlgoModPow:
		t := m.To_PasswordKdfAlgoModPow()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PasswordKdfAlgoUnknown
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoUnknown() *TLPasswordKdfAlgoUnknown {
	m.PredicateName = Predicate_passwordKdfAlgoUnknown
	return &TLPasswordKdfAlgoUnknown{
		Data2: m,
	}
}

// To_PasswordKdfAlgoModPow
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoModPow() *TLPasswordKdfAlgoModPow {
	m.PredicateName = Predicate_passwordKdfAlgoModPow
	return &TLPasswordKdfAlgoModPow{
		Data2: m,
	}
}

// MakeTLPasswordKdfAlgoUnknown
func MakeTLPasswordKdfAlgoUnknown(data2 *PasswordKdfAlgo) *TLPasswordKdfAlgoUnknown {
	if data2 == nil {
		return &TLPasswordKdfAlgoUnknown{Data2: &PasswordKdfAlgo{
			PredicateName: Predicate_passwordKdfAlgoUnknown,
		}}
	} else {
		data2.PredicateName = Predicate_passwordKdfAlgoUnknown
		return &TLPasswordKdfAlgoUnknown{Data2: data2}
	}
}

func (m *TLPasswordKdfAlgoUnknown) To_PasswordKdfAlgo() *PasswordKdfAlgo {
	m.Data2.PredicateName = Predicate_passwordKdfAlgoUnknown
	return m.Data2
}

func (m *TLPasswordKdfAlgoUnknown) GetPredicateName() string {
	return Predicate_passwordKdfAlgoUnknown
}

func (m *TLPasswordKdfAlgoUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd45ab096: func() []byte {
			x.UInt(0xd45ab096)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_passwordKdfAlgoUnknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_passwordKdfAlgoUnknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPasswordKdfAlgoUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPasswordKdfAlgoUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd45ab096: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPasswordKdfAlgoUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPasswordKdfAlgoModPow
func MakeTLPasswordKdfAlgoModPow(data2 *PasswordKdfAlgo) *TLPasswordKdfAlgoModPow {
	if data2 == nil {
		return &TLPasswordKdfAlgoModPow{Data2: &PasswordKdfAlgo{
			PredicateName: Predicate_passwordKdfAlgoModPow,
		}}
	} else {
		data2.PredicateName = Predicate_passwordKdfAlgoModPow
		return &TLPasswordKdfAlgoModPow{Data2: data2}
	}
}

func (m *TLPasswordKdfAlgoModPow) To_PasswordKdfAlgo() *PasswordKdfAlgo {
	m.Data2.PredicateName = Predicate_passwordKdfAlgoModPow
	return m.Data2
}

func (m *TLPasswordKdfAlgoModPow) SetSalt1(v []byte) { m.Data2.Salt1 = v }
func (m *TLPasswordKdfAlgoModPow) GetSalt1() []byte  { return m.Data2.Salt1 }

func (m *TLPasswordKdfAlgoModPow) SetSalt2(v []byte) { m.Data2.Salt2 = v }
func (m *TLPasswordKdfAlgoModPow) GetSalt2() []byte  { return m.Data2.Salt2 }

func (m *TLPasswordKdfAlgoModPow) SetG(v int32) { m.Data2.G = v }
func (m *TLPasswordKdfAlgoModPow) GetG() int32  { return m.Data2.G }

func (m *TLPasswordKdfAlgoModPow) SetP(v []byte) { m.Data2.P = v }
func (m *TLPasswordKdfAlgoModPow) GetP() []byte  { return m.Data2.P }

func (m *TLPasswordKdfAlgoModPow) GetPredicateName() string {
	return Predicate_passwordKdfAlgoModPow
}

func (m *TLPasswordKdfAlgoModPow) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3a912d4a: func() []byte {
			x.UInt(0x3a912d4a)

			x.StringBytes(m.GetSalt1())
			x.StringBytes(m.GetSalt2())
			x.Int(m.GetG())
			x.StringBytes(m.GetP())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_passwordKdfAlgoModPow, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_passwordKdfAlgoModPow, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPasswordKdfAlgoModPow) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPasswordKdfAlgoModPow) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3a912d4a: func() error {
			m.SetSalt1(dBuf.StringBytes())
			m.SetSalt2(dBuf.StringBytes())
			m.SetG(dBuf.Int())
			m.SetP(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPasswordKdfAlgoModPow) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Poll <--
//  + TL_Poll
//

func (m *Poll) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_poll:
		t := m.To_Poll()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Poll) CalcByteSize(layer int32) int {
	return 0
}

func (m *Poll) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x86e18161:
		m2 := MakeTLPoll(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Poll) DebugString() string {
	switch m.PredicateName {
	case Predicate_poll:
		t := m.To_Poll()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Poll
func (m *Poll) To_Poll() *TLPoll {
	m.PredicateName = Predicate_poll
	return &TLPoll{
		Data2: m,
	}
}

// MakeTLPoll
func MakeTLPoll(data2 *Poll) *TLPoll {
	if data2 == nil {
		return &TLPoll{Data2: &Poll{
			PredicateName: Predicate_poll,
		}}
	} else {
		data2.PredicateName = Predicate_poll
		return &TLPoll{Data2: data2}
	}
}

func (m *TLPoll) To_Poll() *Poll {
	m.Data2.PredicateName = Predicate_poll
	return m.Data2
}

func (m *TLPoll) SetId(v int64) { m.Data2.Id = v }
func (m *TLPoll) GetId() int64  { return m.Data2.Id }

//// flags
func (m *TLPoll) SetClosed(v bool) { m.Data2.Closed = v }
func (m *TLPoll) GetClosed() bool  { return m.Data2.Closed }

func (m *TLPoll) SetPublicVoters(v bool) { m.Data2.PublicVoters = v }
func (m *TLPoll) GetPublicVoters() bool  { return m.Data2.PublicVoters }

func (m *TLPoll) SetMultipleChoice(v bool) { m.Data2.MultipleChoice = v }
func (m *TLPoll) GetMultipleChoice() bool  { return m.Data2.MultipleChoice }

func (m *TLPoll) SetQuiz(v bool) { m.Data2.Quiz = v }
func (m *TLPoll) GetQuiz() bool  { return m.Data2.Quiz }

func (m *TLPoll) SetQuestion(v string) { m.Data2.Question = v }
func (m *TLPoll) GetQuestion() string  { return m.Data2.Question }

func (m *TLPoll) SetAnswers(v []*PollAnswer) { m.Data2.Answers = v }
func (m *TLPoll) GetAnswers() []*PollAnswer  { return m.Data2.Answers }

func (m *TLPoll) SetClosePeriod(v *types.Int32Value) { m.Data2.ClosePeriod = v }
func (m *TLPoll) GetClosePeriod() *types.Int32Value  { return m.Data2.ClosePeriod }

func (m *TLPoll) SetCloseDate(v *types.Int32Value) { m.Data2.CloseDate = v }
func (m *TLPoll) GetCloseDate() *types.Int32Value  { return m.Data2.CloseDate }

func (m *TLPoll) GetPredicateName() string {
	return Predicate_poll
}

func (m *TLPoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x86e18161: func() []byte {
			x.UInt(0x86e18161)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetClosed() == true {
					flags |= 1 << 0
				}
				if m.GetPublicVoters() == true {
					flags |= 1 << 1
				}
				if m.GetMultipleChoice() == true {
					flags |= 1 << 2
				}
				if m.GetQuiz() == true {
					flags |= 1 << 3
				}

				if m.GetClosePeriod() != nil {
					flags |= 1 << 4
				}
				if m.GetCloseDate() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			x.Long(m.GetId())
			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetQuestion())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAnswers())))
			for _, v := range m.GetAnswers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetClosePeriod() != nil {
				x.Int(m.GetClosePeriod().Value)
			}

			if m.GetCloseDate() != nil {
				x.Int(m.GetCloseDate().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_poll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_poll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x86e18161: func() error {
			m.SetId(dBuf.Long())
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetClosed(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetPublicVoters(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetMultipleChoice(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetQuiz(true)
			}
			m.SetQuestion(dBuf.String())
			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*PollAnswer, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &PollAnswer{}
				v7[i].Decode(dBuf)
			}
			m.SetAnswers(v7)

			if (flags & (1 << 4)) != 0 {
				m.SetClosePeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetCloseDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessagePeerReaction <--
//  + TL_MessagePeerReaction
//

func (m *MessagePeerReaction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messagePeerReaction:
		t := m.To_MessagePeerReaction()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessagePeerReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessagePeerReaction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x51b67eff:
		m2 := MakeTLMessagePeerReaction(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessagePeerReaction) DebugString() string {
	switch m.PredicateName {
	case Predicate_messagePeerReaction:
		t := m.To_MessagePeerReaction()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagePeerReaction
func (m *MessagePeerReaction) To_MessagePeerReaction() *TLMessagePeerReaction {
	m.PredicateName = Predicate_messagePeerReaction
	return &TLMessagePeerReaction{
		Data2: m,
	}
}

// MakeTLMessagePeerReaction
func MakeTLMessagePeerReaction(data2 *MessagePeerReaction) *TLMessagePeerReaction {
	if data2 == nil {
		return &TLMessagePeerReaction{Data2: &MessagePeerReaction{
			PredicateName: Predicate_messagePeerReaction,
		}}
	} else {
		data2.PredicateName = Predicate_messagePeerReaction
		return &TLMessagePeerReaction{Data2: data2}
	}
}

func (m *TLMessagePeerReaction) To_MessagePeerReaction() *MessagePeerReaction {
	m.Data2.PredicateName = Predicate_messagePeerReaction
	return m.Data2
}

//// flags
func (m *TLMessagePeerReaction) SetBig(v bool) { m.Data2.Big = v }
func (m *TLMessagePeerReaction) GetBig() bool  { return m.Data2.Big }

func (m *TLMessagePeerReaction) SetUnread(v bool) { m.Data2.Unread = v }
func (m *TLMessagePeerReaction) GetUnread() bool  { return m.Data2.Unread }

func (m *TLMessagePeerReaction) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLMessagePeerReaction) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLMessagePeerReaction) SetReaction(v string) { m.Data2.Reaction = v }
func (m *TLMessagePeerReaction) GetReaction() string  { return m.Data2.Reaction }

func (m *TLMessagePeerReaction) GetPredicateName() string {
	return Predicate_messagePeerReaction
}

func (m *TLMessagePeerReaction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x51b67eff: func() []byte {
			x.UInt(0x51b67eff)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBig() == true {
					flags |= 1 << 0
				}
				if m.GetUnread() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeerId().Encode(layer))
			x.String(m.GetReaction())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messagePeerReaction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messagePeerReaction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagePeerReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagePeerReaction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x51b67eff: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetBig(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetUnread(true)
			}

			m3 := &Peer{}
			m3.Decode(dBuf)
			m.SetPeerId(m3)

			m.SetReaction(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagePeerReaction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StickerPack <--
//  + TL_StickerPack
//

func (m *StickerPack) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stickerPack:
		t := m.To_StickerPack()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StickerPack) CalcByteSize(layer int32) int {
	return 0
}

func (m *StickerPack) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x12b299d4:
		m2 := MakeTLStickerPack(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StickerPack) DebugString() string {
	switch m.PredicateName {
	case Predicate_stickerPack:
		t := m.To_StickerPack()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StickerPack
func (m *StickerPack) To_StickerPack() *TLStickerPack {
	m.PredicateName = Predicate_stickerPack
	return &TLStickerPack{
		Data2: m,
	}
}

// MakeTLStickerPack
func MakeTLStickerPack(data2 *StickerPack) *TLStickerPack {
	if data2 == nil {
		return &TLStickerPack{Data2: &StickerPack{
			PredicateName: Predicate_stickerPack,
		}}
	} else {
		data2.PredicateName = Predicate_stickerPack
		return &TLStickerPack{Data2: data2}
	}
}

func (m *TLStickerPack) To_StickerPack() *StickerPack {
	m.Data2.PredicateName = Predicate_stickerPack
	return m.Data2
}

func (m *TLStickerPack) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLStickerPack) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLStickerPack) SetDocuments(v []int64) { m.Data2.Documents = v }
func (m *TLStickerPack) GetDocuments() []int64  { return m.Data2.Documents }

func (m *TLStickerPack) GetPredicateName() string {
	return Predicate_stickerPack
}

func (m *TLStickerPack) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x12b299d4: func() []byte {
			x.UInt(0x12b299d4)

			x.String(m.GetEmoticon())

			x.VectorLong(m.GetDocuments())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stickerPack, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stickerPack, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStickerPack) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickerPack) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x12b299d4: func() error {
			m.SetEmoticon(dBuf.String())

			m.SetDocuments(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStickerPack) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// HighScore <--
//  + TL_HighScore
//

func (m *HighScore) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_highScore:
		t := m.To_HighScore()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *HighScore) CalcByteSize(layer int32) int {
	return 0
}

func (m *HighScore) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x73a379eb:
		m2 := MakeTLHighScore(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *HighScore) DebugString() string {
	switch m.PredicateName {
	case Predicate_highScore:
		t := m.To_HighScore()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HighScore
func (m *HighScore) To_HighScore() *TLHighScore {
	m.PredicateName = Predicate_highScore
	return &TLHighScore{
		Data2: m,
	}
}

// MakeTLHighScore
func MakeTLHighScore(data2 *HighScore) *TLHighScore {
	if data2 == nil {
		return &TLHighScore{Data2: &HighScore{
			PredicateName: Predicate_highScore,
		}}
	} else {
		data2.PredicateName = Predicate_highScore
		return &TLHighScore{Data2: data2}
	}
}

func (m *TLHighScore) To_HighScore() *HighScore {
	m.Data2.PredicateName = Predicate_highScore
	return m.Data2
}

func (m *TLHighScore) SetPos(v int32) { m.Data2.Pos = v }
func (m *TLHighScore) GetPos() int32  { return m.Data2.Pos }

func (m *TLHighScore) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLHighScore) GetUserId() int64  { return m.Data2.UserId }

func (m *TLHighScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLHighScore) GetScore() int32  { return m.Data2.Score }

func (m *TLHighScore) GetPredicateName() string {
	return Predicate_highScore
}

func (m *TLHighScore) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x73a379eb: func() []byte {
			x.UInt(0x73a379eb)

			x.Int(m.GetPos())
			x.Long(m.GetUserId())
			x.Int(m.GetScore())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_highScore, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_highScore, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHighScore) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHighScore) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x73a379eb: func() error {
			m.SetPos(dBuf.Int())
			m.SetUserId(dBuf.Long())
			m.SetScore(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHighScore) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputTheme <--
//  + TL_InputTheme
//  + TL_InputThemeSlug
//

func (m *InputTheme) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputTheme:
		t := m.To_InputTheme()
		xBuf = t.Encode(layer)
	case Predicate_inputThemeSlug:
		t := m.To_InputThemeSlug()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputTheme) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3c5693e9:
		m2 := MakeTLInputTheme(m)
		m2.Decode(dBuf)
	case 0xf5890df1:
		m2 := MakeTLInputThemeSlug(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputTheme) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputTheme:
		t := m.To_InputTheme()
		return t.DebugString()
	case Predicate_inputThemeSlug:
		t := m.To_InputThemeSlug()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputTheme
func (m *InputTheme) To_InputTheme() *TLInputTheme {
	m.PredicateName = Predicate_inputTheme
	return &TLInputTheme{
		Data2: m,
	}
}

// To_InputThemeSlug
func (m *InputTheme) To_InputThemeSlug() *TLInputThemeSlug {
	m.PredicateName = Predicate_inputThemeSlug
	return &TLInputThemeSlug{
		Data2: m,
	}
}

// MakeTLInputTheme
func MakeTLInputTheme(data2 *InputTheme) *TLInputTheme {
	if data2 == nil {
		return &TLInputTheme{Data2: &InputTheme{
			PredicateName: Predicate_inputTheme,
		}}
	} else {
		data2.PredicateName = Predicate_inputTheme
		return &TLInputTheme{Data2: data2}
	}
}

func (m *TLInputTheme) To_InputTheme() *InputTheme {
	m.Data2.PredicateName = Predicate_inputTheme
	return m.Data2
}

func (m *TLInputTheme) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputTheme) GetId() int64  { return m.Data2.Id }

func (m *TLInputTheme) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputTheme) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputTheme) GetPredicateName() string {
	return Predicate_inputTheme
}

func (m *TLInputTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3c5693e9: func() []byte {
			x.UInt(0x3c5693e9)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputTheme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputTheme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3c5693e9: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputThemeSlug
func MakeTLInputThemeSlug(data2 *InputTheme) *TLInputThemeSlug {
	if data2 == nil {
		return &TLInputThemeSlug{Data2: &InputTheme{
			PredicateName: Predicate_inputThemeSlug,
		}}
	} else {
		data2.PredicateName = Predicate_inputThemeSlug
		return &TLInputThemeSlug{Data2: data2}
	}
}

func (m *TLInputThemeSlug) To_InputTheme() *InputTheme {
	m.Data2.PredicateName = Predicate_inputThemeSlug
	return m.Data2
}

func (m *TLInputThemeSlug) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLInputThemeSlug) GetSlug() string  { return m.Data2.Slug }

func (m *TLInputThemeSlug) GetPredicateName() string {
	return Predicate_inputThemeSlug
}

func (m *TLInputThemeSlug) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf5890df1: func() []byte {
			x.UInt(0xf5890df1)

			x.String(m.GetSlug())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputThemeSlug, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputThemeSlug, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputThemeSlug) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputThemeSlug) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf5890df1: func() error {
			m.SetSlug(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputThemeSlug) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ThemeSettings <--
//  + TL_ThemeSettings
//

func (m *ThemeSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_themeSettings:
		t := m.To_ThemeSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ThemeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *ThemeSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfa58b6d4:
		m2 := MakeTLThemeSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ThemeSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_themeSettings:
		t := m.To_ThemeSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ThemeSettings
func (m *ThemeSettings) To_ThemeSettings() *TLThemeSettings {
	m.PredicateName = Predicate_themeSettings
	return &TLThemeSettings{
		Data2: m,
	}
}

// MakeTLThemeSettings
func MakeTLThemeSettings(data2 *ThemeSettings) *TLThemeSettings {
	if data2 == nil {
		return &TLThemeSettings{Data2: &ThemeSettings{
			PredicateName: Predicate_themeSettings,
		}}
	} else {
		data2.PredicateName = Predicate_themeSettings
		return &TLThemeSettings{Data2: data2}
	}
}

func (m *TLThemeSettings) To_ThemeSettings() *ThemeSettings {
	m.Data2.PredicateName = Predicate_themeSettings
	return m.Data2
}

//// flags
func (m *TLThemeSettings) SetMessageColorsAnimated(v bool) { m.Data2.MessageColorsAnimated = v }
func (m *TLThemeSettings) GetMessageColorsAnimated() bool  { return m.Data2.MessageColorsAnimated }

func (m *TLThemeSettings) SetBaseTheme(v *BaseTheme) { m.Data2.BaseTheme = v }
func (m *TLThemeSettings) GetBaseTheme() *BaseTheme  { return m.Data2.BaseTheme }

func (m *TLThemeSettings) SetAccentColor(v int32) { m.Data2.AccentColor = v }
func (m *TLThemeSettings) GetAccentColor() int32  { return m.Data2.AccentColor }

func (m *TLThemeSettings) SetOutboxAccentColor(v *types.Int32Value) { m.Data2.OutboxAccentColor = v }
func (m *TLThemeSettings) GetOutboxAccentColor() *types.Int32Value  { return m.Data2.OutboxAccentColor }

func (m *TLThemeSettings) SetMessageColors(v []int32) { m.Data2.MessageColors = v }
func (m *TLThemeSettings) GetMessageColors() []int32  { return m.Data2.MessageColors }

func (m *TLThemeSettings) SetWallpaper(v *WallPaper) { m.Data2.Wallpaper = v }
func (m *TLThemeSettings) GetWallpaper() *WallPaper  { return m.Data2.Wallpaper }

func (m *TLThemeSettings) GetPredicateName() string {
	return Predicate_themeSettings
}

func (m *TLThemeSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfa58b6d4: func() []byte {
			x.UInt(0xfa58b6d4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMessageColorsAnimated() == true {
					flags |= 1 << 2
				}

				if m.GetOutboxAccentColor() != nil {
					flags |= 1 << 3
				}
				if m.GetMessageColors() != nil {
					flags |= 1 << 0
				}
				if m.GetWallpaper() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetBaseTheme().Encode(layer))
			x.Int(m.GetAccentColor())
			if m.GetOutboxAccentColor() != nil {
				x.Int(m.GetOutboxAccentColor().Value)
			}

			if m.GetMessageColors() != nil {
				x.VectorInt(m.GetMessageColors())
			}
			if m.GetWallpaper() != nil {
				x.Bytes(m.GetWallpaper().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_themeSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_themeSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLThemeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLThemeSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfa58b6d4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetMessageColorsAnimated(true)
			}

			m2 := &BaseTheme{}
			m2.Decode(dBuf)
			m.SetBaseTheme(m2)

			m.SetAccentColor(dBuf.Int())
			if (flags & (1 << 3)) != 0 {
				m.SetOutboxAccentColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetMessageColors(dBuf.VectorInt())
			}
			if (flags & (1 << 1)) != 0 {
				m6 := &WallPaper{}
				m6.Decode(dBuf)
				m.SetWallpaper(m6)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLThemeSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageReplies <--
//  + TL_MessageReplies
//

func (m *MessageReplies) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageReplies:
		t := m.To_MessageReplies()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageReplies) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageReplies) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x83d60fc2:
		m2 := MakeTLMessageReplies(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageReplies) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageReplies:
		t := m.To_MessageReplies()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageReplies
func (m *MessageReplies) To_MessageReplies() *TLMessageReplies {
	m.PredicateName = Predicate_messageReplies
	return &TLMessageReplies{
		Data2: m,
	}
}

// MakeTLMessageReplies
func MakeTLMessageReplies(data2 *MessageReplies) *TLMessageReplies {
	if data2 == nil {
		return &TLMessageReplies{Data2: &MessageReplies{
			PredicateName: Predicate_messageReplies,
		}}
	} else {
		data2.PredicateName = Predicate_messageReplies
		return &TLMessageReplies{Data2: data2}
	}
}

func (m *TLMessageReplies) To_MessageReplies() *MessageReplies {
	m.Data2.PredicateName = Predicate_messageReplies
	return m.Data2
}

//// flags
func (m *TLMessageReplies) SetComments(v bool) { m.Data2.Comments = v }
func (m *TLMessageReplies) GetComments() bool  { return m.Data2.Comments }

func (m *TLMessageReplies) SetReplies(v int32) { m.Data2.Replies = v }
func (m *TLMessageReplies) GetReplies() int32  { return m.Data2.Replies }

func (m *TLMessageReplies) SetRepliesPts(v int32) { m.Data2.RepliesPts = v }
func (m *TLMessageReplies) GetRepliesPts() int32  { return m.Data2.RepliesPts }

func (m *TLMessageReplies) SetRecentRepliers(v []*Peer) { m.Data2.RecentRepliers = v }
func (m *TLMessageReplies) GetRecentRepliers() []*Peer  { return m.Data2.RecentRepliers }

func (m *TLMessageReplies) SetChannelId(v *types.Int64Value) { m.Data2.ChannelId = v }
func (m *TLMessageReplies) GetChannelId() *types.Int64Value  { return m.Data2.ChannelId }

func (m *TLMessageReplies) SetMaxId(v *types.Int32Value) { m.Data2.MaxId = v }
func (m *TLMessageReplies) GetMaxId() *types.Int32Value  { return m.Data2.MaxId }

func (m *TLMessageReplies) SetReadMaxId(v *types.Int32Value) { m.Data2.ReadMaxId = v }
func (m *TLMessageReplies) GetReadMaxId() *types.Int32Value  { return m.Data2.ReadMaxId }

func (m *TLMessageReplies) GetPredicateName() string {
	return Predicate_messageReplies
}

func (m *TLMessageReplies) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x83d60fc2: func() []byte {
			x.UInt(0x83d60fc2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetComments() == true {
					flags |= 1 << 0
				}

				if m.GetRecentRepliers() != nil {
					flags |= 1 << 1
				}
				if m.GetChannelId() != nil {
					flags |= 1 << 0
				}
				if m.GetMaxId() != nil {
					flags |= 1 << 2
				}
				if m.GetReadMaxId() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetReplies())
			x.Int(m.GetRepliesPts())
			if m.GetRecentRepliers() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRecentRepliers())))
				for _, v := range m.GetRecentRepliers() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetChannelId() != nil {
				x.Long(m.GetChannelId().Value)
			}

			if m.GetMaxId() != nil {
				x.Int(m.GetMaxId().Value)
			}

			if m.GetReadMaxId() != nil {
				x.Int(m.GetReadMaxId().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageReplies, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageReplies, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageReplies) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageReplies) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x83d60fc2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetComments(true)
			}
			m.SetReplies(dBuf.Int())
			m.SetRepliesPts(dBuf.Int())
			if (flags & (1 << 1)) != 0 {
				c4 := dBuf.Int()
				if c4 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
					return dBuf.GetError()
				}
				l4 := dBuf.Int()
				v4 := make([]*Peer, l4)
				for i := int32(0); i < l4; i++ {
					v4[i] = &Peer{}
					v4[i].Decode(dBuf)
				}
				m.SetRecentRepliers(v4)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetChannelId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetReadMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageReplies) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Updates_Difference <--
//  + TL_UpdatesDifferenceEmpty
//  + TL_UpdatesDifference
//  + TL_UpdatesDifferenceSlice
//  + TL_UpdatesDifferenceTooLong
//

func (m *Updates_Difference) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updates_differenceEmpty:
		t := m.To_UpdatesDifferenceEmpty()
		xBuf = t.Encode(layer)
	case Predicate_updates_difference:
		t := m.To_UpdatesDifference()
		xBuf = t.Encode(layer)
	case Predicate_updates_differenceSlice:
		t := m.To_UpdatesDifferenceSlice()
		xBuf = t.Encode(layer)
	case Predicate_updates_differenceTooLong:
		t := m.To_UpdatesDifferenceTooLong()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Updates_Difference) CalcByteSize(layer int32) int {
	return 0
}

func (m *Updates_Difference) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5d75a138:
		m2 := MakeTLUpdatesDifferenceEmpty(m)
		m2.Decode(dBuf)
	case 0xf49ca0:
		m2 := MakeTLUpdatesDifference(m)
		m2.Decode(dBuf)
	case 0xa8fb1981:
		m2 := MakeTLUpdatesDifferenceSlice(m)
		m2.Decode(dBuf)
	case 0x4afe8f6d:
		m2 := MakeTLUpdatesDifferenceTooLong(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Updates_Difference) DebugString() string {
	switch m.PredicateName {
	case Predicate_updates_differenceEmpty:
		t := m.To_UpdatesDifferenceEmpty()
		return t.DebugString()
	case Predicate_updates_difference:
		t := m.To_UpdatesDifference()
		return t.DebugString()
	case Predicate_updates_differenceSlice:
		t := m.To_UpdatesDifferenceSlice()
		return t.DebugString()
	case Predicate_updates_differenceTooLong:
		t := m.To_UpdatesDifferenceTooLong()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdatesDifferenceEmpty
func (m *Updates_Difference) To_UpdatesDifferenceEmpty() *TLUpdatesDifferenceEmpty {
	m.PredicateName = Predicate_updates_differenceEmpty
	return &TLUpdatesDifferenceEmpty{
		Data2: m,
	}
}

// To_UpdatesDifference
func (m *Updates_Difference) To_UpdatesDifference() *TLUpdatesDifference {
	m.PredicateName = Predicate_updates_difference
	return &TLUpdatesDifference{
		Data2: m,
	}
}

// To_UpdatesDifferenceSlice
func (m *Updates_Difference) To_UpdatesDifferenceSlice() *TLUpdatesDifferenceSlice {
	m.PredicateName = Predicate_updates_differenceSlice
	return &TLUpdatesDifferenceSlice{
		Data2: m,
	}
}

// To_UpdatesDifferenceTooLong
func (m *Updates_Difference) To_UpdatesDifferenceTooLong() *TLUpdatesDifferenceTooLong {
	m.PredicateName = Predicate_updates_differenceTooLong
	return &TLUpdatesDifferenceTooLong{
		Data2: m,
	}
}

// MakeTLUpdatesDifferenceEmpty
func MakeTLUpdatesDifferenceEmpty(data2 *Updates_Difference) *TLUpdatesDifferenceEmpty {
	if data2 == nil {
		return &TLUpdatesDifferenceEmpty{Data2: &Updates_Difference{
			PredicateName: Predicate_updates_differenceEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_updates_differenceEmpty
		return &TLUpdatesDifferenceEmpty{Data2: data2}
	}
}

func (m *TLUpdatesDifferenceEmpty) To_Updates_Difference() *Updates_Difference {
	m.Data2.PredicateName = Predicate_updates_differenceEmpty
	return m.Data2
}

func (m *TLUpdatesDifferenceEmpty) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesDifferenceEmpty) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesDifferenceEmpty) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesDifferenceEmpty) GetSeq() int32  { return m.Data2.Seq }

func (m *TLUpdatesDifferenceEmpty) GetPredicateName() string {
	return Predicate_updates_differenceEmpty
}

func (m *TLUpdatesDifferenceEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5d75a138: func() []byte {
			x.UInt(0x5d75a138)

			x.Int(m.GetDate())
			x.Int(m.GetSeq())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_differenceEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_differenceEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesDifferenceEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesDifferenceEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5d75a138: func() error {
			m.SetDate(dBuf.Int())
			m.SetSeq(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesDifferenceEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesDifference
func MakeTLUpdatesDifference(data2 *Updates_Difference) *TLUpdatesDifference {
	if data2 == nil {
		return &TLUpdatesDifference{Data2: &Updates_Difference{
			PredicateName: Predicate_updates_difference,
		}}
	} else {
		data2.PredicateName = Predicate_updates_difference
		return &TLUpdatesDifference{Data2: data2}
	}
}

func (m *TLUpdatesDifference) To_Updates_Difference() *Updates_Difference {
	m.Data2.PredicateName = Predicate_updates_difference
	return m.Data2
}

func (m *TLUpdatesDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifference) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesDifference) SetNewEncryptedMessages(v []*EncryptedMessage) {
	m.Data2.NewEncryptedMessages = v
}
func (m *TLUpdatesDifference) GetNewEncryptedMessages() []*EncryptedMessage {
	return m.Data2.NewEncryptedMessages
}

func (m *TLUpdatesDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifference) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifference) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifference) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesDifference) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLUpdatesDifference) GetState() *Updates_State  { return m.Data2.State }

func (m *TLUpdatesDifference) GetPredicateName() string {
	return Predicate_updates_difference
}

func (m *TLUpdatesDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf49ca0: func() []byte {
			x.UInt(0xf49ca0)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetNewMessages())))
			for _, v := range m.GetNewMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetNewEncryptedMessages())))
			for _, v := range m.GetNewEncryptedMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetOtherUpdates())))
			for _, v := range m.GetOtherUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetState().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_difference, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_difference, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesDifference) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf49ca0: func() error {
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Message, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Message{}
				v2[i].Decode(dBuf)
			}
			m.SetNewMessages(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*EncryptedMessage, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &EncryptedMessage{}
				v3[i].Decode(dBuf)
			}
			m.SetNewEncryptedMessages(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*Update, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &Update{}
				v4[i].Decode(dBuf)
			}
			m.SetOtherUpdates(v4)

			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*Chat, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &Chat{}
				v5[i].Decode(dBuf)
			}
			m.SetChats(v5)

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*User, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &User{}
				v6[i].Decode(dBuf)
			}
			m.SetUsers(v6)

			m7 := &Updates_State{}
			m7.Decode(dBuf)
			m.SetState(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesDifferenceSlice
func MakeTLUpdatesDifferenceSlice(data2 *Updates_Difference) *TLUpdatesDifferenceSlice {
	if data2 == nil {
		return &TLUpdatesDifferenceSlice{Data2: &Updates_Difference{
			PredicateName: Predicate_updates_differenceSlice,
		}}
	} else {
		data2.PredicateName = Predicate_updates_differenceSlice
		return &TLUpdatesDifferenceSlice{Data2: data2}
	}
}

func (m *TLUpdatesDifferenceSlice) To_Updates_Difference() *Updates_Difference {
	m.Data2.PredicateName = Predicate_updates_differenceSlice
	return m.Data2
}

func (m *TLUpdatesDifferenceSlice) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifferenceSlice) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesDifferenceSlice) SetNewEncryptedMessages(v []*EncryptedMessage) {
	m.Data2.NewEncryptedMessages = v
}
func (m *TLUpdatesDifferenceSlice) GetNewEncryptedMessages() []*EncryptedMessage {
	return m.Data2.NewEncryptedMessages
}

func (m *TLUpdatesDifferenceSlice) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifferenceSlice) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifferenceSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifferenceSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesDifferenceSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifferenceSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesDifferenceSlice) SetIntermediateState(v *Updates_State) {
	m.Data2.IntermediateState = v
}
func (m *TLUpdatesDifferenceSlice) GetIntermediateState() *Updates_State {
	return m.Data2.IntermediateState
}

func (m *TLUpdatesDifferenceSlice) GetPredicateName() string {
	return Predicate_updates_differenceSlice
}

func (m *TLUpdatesDifferenceSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8fb1981: func() []byte {
			x.UInt(0xa8fb1981)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetNewMessages())))
			for _, v := range m.GetNewMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetNewEncryptedMessages())))
			for _, v := range m.GetNewEncryptedMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetOtherUpdates())))
			for _, v := range m.GetOtherUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetIntermediateState().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_differenceSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_differenceSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesDifferenceSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesDifferenceSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8fb1981: func() error {
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Message, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Message{}
				v2[i].Decode(dBuf)
			}
			m.SetNewMessages(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*EncryptedMessage, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &EncryptedMessage{}
				v3[i].Decode(dBuf)
			}
			m.SetNewEncryptedMessages(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*Update, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &Update{}
				v4[i].Decode(dBuf)
			}
			m.SetOtherUpdates(v4)

			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*Chat, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &Chat{}
				v5[i].Decode(dBuf)
			}
			m.SetChats(v5)

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*User, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &User{}
				v6[i].Decode(dBuf)
			}
			m.SetUsers(v6)

			m8 := &Updates_State{}
			m8.Decode(dBuf)
			m.SetIntermediateState(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesDifferenceSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesDifferenceTooLong
func MakeTLUpdatesDifferenceTooLong(data2 *Updates_Difference) *TLUpdatesDifferenceTooLong {
	if data2 == nil {
		return &TLUpdatesDifferenceTooLong{Data2: &Updates_Difference{
			PredicateName: Predicate_updates_differenceTooLong,
		}}
	} else {
		data2.PredicateName = Predicate_updates_differenceTooLong
		return &TLUpdatesDifferenceTooLong{Data2: data2}
	}
}

func (m *TLUpdatesDifferenceTooLong) To_Updates_Difference() *Updates_Difference {
	m.Data2.PredicateName = Predicate_updates_differenceTooLong
	return m.Data2
}

func (m *TLUpdatesDifferenceTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesDifferenceTooLong) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesDifferenceTooLong) GetPredicateName() string {
	return Predicate_updates_differenceTooLong
}

func (m *TLUpdatesDifferenceTooLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4afe8f6d: func() []byte {
			x.UInt(0x4afe8f6d)

			x.Int(m.GetPts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_differenceTooLong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_differenceTooLong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesDifferenceTooLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesDifferenceTooLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4afe8f6d: func() error {
			m.SetPts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesDifferenceTooLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_PasswordInputSettings <--
//  + TL_AccountPasswordInputSettings
//

func (m *Account_PasswordInputSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_passwordInputSettings:
		t := m.To_AccountPasswordInputSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_PasswordInputSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_PasswordInputSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc23727c9:
		m2 := MakeTLAccountPasswordInputSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_PasswordInputSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_passwordInputSettings:
		t := m.To_AccountPasswordInputSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountPasswordInputSettings
func (m *Account_PasswordInputSettings) To_AccountPasswordInputSettings() *TLAccountPasswordInputSettings {
	m.PredicateName = Predicate_account_passwordInputSettings
	return &TLAccountPasswordInputSettings{
		Data2: m,
	}
}

// MakeTLAccountPasswordInputSettings
func MakeTLAccountPasswordInputSettings(data2 *Account_PasswordInputSettings) *TLAccountPasswordInputSettings {
	if data2 == nil {
		return &TLAccountPasswordInputSettings{Data2: &Account_PasswordInputSettings{
			PredicateName: Predicate_account_passwordInputSettings,
		}}
	} else {
		data2.PredicateName = Predicate_account_passwordInputSettings
		return &TLAccountPasswordInputSettings{Data2: data2}
	}
}

func (m *TLAccountPasswordInputSettings) To_Account_PasswordInputSettings() *Account_PasswordInputSettings {
	m.Data2.PredicateName = Predicate_account_passwordInputSettings
	return m.Data2
}

//// flags
func (m *TLAccountPasswordInputSettings) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPasswordInputSettings) GetNewAlgo() *PasswordKdfAlgo  { return m.Data2.NewAlgo }

func (m *TLAccountPasswordInputSettings) SetNewPasswordHash(v []byte) { m.Data2.NewPasswordHash = v }
func (m *TLAccountPasswordInputSettings) GetNewPasswordHash() []byte  { return m.Data2.NewPasswordHash }

func (m *TLAccountPasswordInputSettings) SetHint(v *types.StringValue) { m.Data2.Hint = v }
func (m *TLAccountPasswordInputSettings) GetHint() *types.StringValue  { return m.Data2.Hint }

func (m *TLAccountPasswordInputSettings) SetEmail(v *types.StringValue) { m.Data2.Email = v }
func (m *TLAccountPasswordInputSettings) GetEmail() *types.StringValue  { return m.Data2.Email }

func (m *TLAccountPasswordInputSettings) SetNewSecureSettings(v *SecureSecretSettings) {
	m.Data2.NewSecureSettings = v
}
func (m *TLAccountPasswordInputSettings) GetNewSecureSettings() *SecureSecretSettings {
	return m.Data2.NewSecureSettings
}

func (m *TLAccountPasswordInputSettings) GetPredicateName() string {
	return Predicate_account_passwordInputSettings
}

func (m *TLAccountPasswordInputSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc23727c9: func() []byte {
			x.UInt(0xc23727c9)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNewAlgo() != nil {
					flags |= 1 << 0
				}
				if m.GetNewPasswordHash() != nil {
					flags |= 1 << 0
				}
				if m.GetHint() != nil {
					flags |= 1 << 0
				}
				if m.GetEmail() != nil {
					flags |= 1 << 1
				}
				if m.GetNewSecureSettings() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetNewAlgo() != nil {
				x.Bytes(m.GetNewAlgo().Encode(layer))
			}

			if m.GetNewPasswordHash() != nil {
				x.StringBytes(m.GetNewPasswordHash())
			}

			if m.GetHint() != nil {
				x.String(m.GetHint().Value)
			}

			if m.GetEmail() != nil {
				x.String(m.GetEmail().Value)
			}

			if m.GetNewSecureSettings() != nil {
				x.Bytes(m.GetNewSecureSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_passwordInputSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_passwordInputSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountPasswordInputSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountPasswordInputSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc23727c9: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &PasswordKdfAlgo{}
				m1.Decode(dBuf)
				m.SetNewAlgo(m1)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetNewPasswordHash(dBuf.StringBytes())
			}

			if (flags & (1 << 0)) != 0 {
				m.SetHint(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetEmail(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m5 := &SecureSecretSettings{}
				m5.Decode(dBuf)
				m.SetNewSecureSettings(m5)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountPasswordInputSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureFile <--
//  + TL_SecureFileEmpty
//  + TL_SecureFile
//

func (m *SecureFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureFileEmpty:
		t := m.To_SecureFileEmpty()
		xBuf = t.Encode(layer)
	case Predicate_secureFile:
		t := m.To_SecureFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x64199744:
		m2 := MakeTLSecureFileEmpty(m)
		m2.Decode(dBuf)
	case 0xe0277a62:
		m2 := MakeTLSecureFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureFileEmpty:
		t := m.To_SecureFileEmpty()
		return t.DebugString()
	case Predicate_secureFile:
		t := m.To_SecureFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureFileEmpty
func (m *SecureFile) To_SecureFileEmpty() *TLSecureFileEmpty {
	m.PredicateName = Predicate_secureFileEmpty
	return &TLSecureFileEmpty{
		Data2: m,
	}
}

// To_SecureFile
func (m *SecureFile) To_SecureFile() *TLSecureFile {
	m.PredicateName = Predicate_secureFile
	return &TLSecureFile{
		Data2: m,
	}
}

// MakeTLSecureFileEmpty
func MakeTLSecureFileEmpty(data2 *SecureFile) *TLSecureFileEmpty {
	if data2 == nil {
		return &TLSecureFileEmpty{Data2: &SecureFile{
			PredicateName: Predicate_secureFileEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_secureFileEmpty
		return &TLSecureFileEmpty{Data2: data2}
	}
}

func (m *TLSecureFileEmpty) To_SecureFile() *SecureFile {
	m.Data2.PredicateName = Predicate_secureFileEmpty
	return m.Data2
}

func (m *TLSecureFileEmpty) GetPredicateName() string {
	return Predicate_secureFileEmpty
}

func (m *TLSecureFileEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64199744: func() []byte {
			x.UInt(0x64199744)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureFileEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureFileEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureFileEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureFileEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64199744: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureFileEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureFile
func MakeTLSecureFile(data2 *SecureFile) *TLSecureFile {
	if data2 == nil {
		return &TLSecureFile{Data2: &SecureFile{
			PredicateName: Predicate_secureFile,
		}}
	} else {
		data2.PredicateName = Predicate_secureFile
		return &TLSecureFile{Data2: data2}
	}
}

func (m *TLSecureFile) To_SecureFile() *SecureFile {
	m.Data2.PredicateName = Predicate_secureFile
	return m.Data2
}

func (m *TLSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLSecureFile) GetId() int64  { return m.Data2.Id }

func (m *TLSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLSecureFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLSecureFile) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLSecureFile) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLSecureFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLSecureFile) GetDcId() int32  { return m.Data2.DcId }

func (m *TLSecureFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSecureFile) GetDate() int32  { return m.Data2.Date }

func (m *TLSecureFile) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLSecureFile) GetFileHash() []byte  { return m.Data2.FileHash }

func (m *TLSecureFile) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureFile) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLSecureFile) GetPredicateName() string {
	return Predicate_secureFile
}

func (m *TLSecureFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe0277a62: func() []byte {
			x.UInt(0xe0277a62)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetSize2())
			x.Int(m.GetDcId())
			x.Int(m.GetDate())
			x.StringBytes(m.GetFileHash())
			x.StringBytes(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe0277a62: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetSize2(dBuf.Int())
			m.SetDcId(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetFileHash(dBuf.StringBytes())
			m.SetSecret(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EmojiURL <--
//  + TL_EmojiURL
//

func (m *EmojiURL) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_emojiURL:
		t := m.To_EmojiURL()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EmojiURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *EmojiURL) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa575739d:
		m2 := MakeTLEmojiURL(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EmojiURL) DebugString() string {
	switch m.PredicateName {
	case Predicate_emojiURL:
		t := m.To_EmojiURL()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EmojiURL
func (m *EmojiURL) To_EmojiURL() *TLEmojiURL {
	m.PredicateName = Predicate_emojiURL
	return &TLEmojiURL{
		Data2: m,
	}
}

// MakeTLEmojiURL
func MakeTLEmojiURL(data2 *EmojiURL) *TLEmojiURL {
	if data2 == nil {
		return &TLEmojiURL{Data2: &EmojiURL{
			PredicateName: Predicate_emojiURL,
		}}
	} else {
		data2.PredicateName = Predicate_emojiURL
		return &TLEmojiURL{Data2: data2}
	}
}

func (m *TLEmojiURL) To_EmojiURL() *EmojiURL {
	m.Data2.PredicateName = Predicate_emojiURL
	return m.Data2
}

func (m *TLEmojiURL) SetUrl(v string) { m.Data2.Url = v }
func (m *TLEmojiURL) GetUrl() string  { return m.Data2.Url }

func (m *TLEmojiURL) GetPredicateName() string {
	return Predicate_emojiURL
}

func (m *TLEmojiURL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa575739d: func() []byte {
			x.UInt(0xa575739d)

			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_emojiURL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_emojiURL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEmojiURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEmojiURL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa575739d: func() error {
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEmojiURL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageInteractionCounters <--
//  + TL_MessageInteractionCounters
//

func (m *MessageInteractionCounters) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageInteractionCounters:
		t := m.To_MessageInteractionCounters()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageInteractionCounters) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageInteractionCounters) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xad4fc9bd:
		m2 := MakeTLMessageInteractionCounters(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageInteractionCounters) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageInteractionCounters:
		t := m.To_MessageInteractionCounters()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageInteractionCounters
func (m *MessageInteractionCounters) To_MessageInteractionCounters() *TLMessageInteractionCounters {
	m.PredicateName = Predicate_messageInteractionCounters
	return &TLMessageInteractionCounters{
		Data2: m,
	}
}

// MakeTLMessageInteractionCounters
func MakeTLMessageInteractionCounters(data2 *MessageInteractionCounters) *TLMessageInteractionCounters {
	if data2 == nil {
		return &TLMessageInteractionCounters{Data2: &MessageInteractionCounters{
			PredicateName: Predicate_messageInteractionCounters,
		}}
	} else {
		data2.PredicateName = Predicate_messageInteractionCounters
		return &TLMessageInteractionCounters{Data2: data2}
	}
}

func (m *TLMessageInteractionCounters) To_MessageInteractionCounters() *MessageInteractionCounters {
	m.Data2.PredicateName = Predicate_messageInteractionCounters
	return m.Data2
}

func (m *TLMessageInteractionCounters) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLMessageInteractionCounters) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLMessageInteractionCounters) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessageInteractionCounters) GetViews() int32  { return m.Data2.Views }

func (m *TLMessageInteractionCounters) SetForwards(v int32) { m.Data2.Forwards = v }
func (m *TLMessageInteractionCounters) GetForwards() int32  { return m.Data2.Forwards }

func (m *TLMessageInteractionCounters) GetPredicateName() string {
	return Predicate_messageInteractionCounters
}

func (m *TLMessageInteractionCounters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xad4fc9bd: func() []byte {
			x.UInt(0xad4fc9bd)

			x.Int(m.GetMsgId())
			x.Int(m.GetViews())
			x.Int(m.GetForwards())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageInteractionCounters, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageInteractionCounters, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageInteractionCounters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageInteractionCounters) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xad4fc9bd: func() error {
			m.SetMsgId(dBuf.Int())
			m.SetViews(dBuf.Int())
			m.SetForwards(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageInteractionCounters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SearchResultsPositions <--
//  + TL_MessagesSearchResultsPositions
//

func (m *Messages_SearchResultsPositions) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_searchResultsPositions:
		t := m.To_MessagesSearchResultsPositions()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SearchResultsPositions) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SearchResultsPositions) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x53b22baf:
		m2 := MakeTLMessagesSearchResultsPositions(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SearchResultsPositions) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_searchResultsPositions:
		t := m.To_MessagesSearchResultsPositions()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSearchResultsPositions
func (m *Messages_SearchResultsPositions) To_MessagesSearchResultsPositions() *TLMessagesSearchResultsPositions {
	m.PredicateName = Predicate_messages_searchResultsPositions
	return &TLMessagesSearchResultsPositions{
		Data2: m,
	}
}

// MakeTLMessagesSearchResultsPositions
func MakeTLMessagesSearchResultsPositions(data2 *Messages_SearchResultsPositions) *TLMessagesSearchResultsPositions {
	if data2 == nil {
		return &TLMessagesSearchResultsPositions{Data2: &Messages_SearchResultsPositions{
			PredicateName: Predicate_messages_searchResultsPositions,
		}}
	} else {
		data2.PredicateName = Predicate_messages_searchResultsPositions
		return &TLMessagesSearchResultsPositions{Data2: data2}
	}
}

func (m *TLMessagesSearchResultsPositions) To_Messages_SearchResultsPositions() *Messages_SearchResultsPositions {
	m.Data2.PredicateName = Predicate_messages_searchResultsPositions
	return m.Data2
}

func (m *TLMessagesSearchResultsPositions) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesSearchResultsPositions) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesSearchResultsPositions) SetPositions(v []*SearchResultsPosition) {
	m.Data2.Positions = v
}
func (m *TLMessagesSearchResultsPositions) GetPositions() []*SearchResultsPosition {
	return m.Data2.Positions
}

func (m *TLMessagesSearchResultsPositions) GetPredicateName() string {
	return Predicate_messages_searchResultsPositions
}

func (m *TLMessagesSearchResultsPositions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x53b22baf: func() []byte {
			x.UInt(0x53b22baf)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPositions())))
			for _, v := range m.GetPositions() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_searchResultsPositions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_searchResultsPositions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchResultsPositions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchResultsPositions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x53b22baf: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*SearchResultsPosition, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &SearchResultsPosition{}
				v1[i].Decode(dBuf)
			}
			m.SetPositions(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSearchResultsPositions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelParticipant <--
//  + TL_ChannelParticipant
//  + TL_ChannelParticipantSelf
//  + TL_ChannelParticipantCreator
//  + TL_ChannelParticipantAdmin
//  + TL_ChannelParticipantBanned
//  + TL_ChannelParticipantLeft
//

func (m *ChannelParticipant) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelParticipant:
		t := m.To_ChannelParticipant()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantSelf:
		t := m.To_ChannelParticipantSelf()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantCreator:
		t := m.To_ChannelParticipantCreator()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantAdmin:
		t := m.To_ChannelParticipantAdmin()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantBanned:
		t := m.To_ChannelParticipantBanned()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantLeft:
		t := m.To_ChannelParticipantLeft()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelParticipant) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc00c07c0:
		m2 := MakeTLChannelParticipant(m)
		m2.Decode(dBuf)
	case 0x35a8bfa7:
		m2 := MakeTLChannelParticipantSelf(m)
		m2.Decode(dBuf)
	case 0x28a8bc67:
		m2 := MakeTLChannelParticipantSelf(m)
		m2.Decode(dBuf)
	case 0x2fe601d3:
		m2 := MakeTLChannelParticipantCreator(m)
		m2.Decode(dBuf)
	case 0x34c3bb53:
		m2 := MakeTLChannelParticipantAdmin(m)
		m2.Decode(dBuf)
	case 0x6df8014e:
		m2 := MakeTLChannelParticipantBanned(m)
		m2.Decode(dBuf)
	case 0x1b03f006:
		m2 := MakeTLChannelParticipantLeft(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelParticipant) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelParticipant:
		t := m.To_ChannelParticipant()
		return t.DebugString()
	case Predicate_channelParticipantSelf:
		t := m.To_ChannelParticipantSelf()
		return t.DebugString()
	case Predicate_channelParticipantCreator:
		t := m.To_ChannelParticipantCreator()
		return t.DebugString()
	case Predicate_channelParticipantAdmin:
		t := m.To_ChannelParticipantAdmin()
		return t.DebugString()
	case Predicate_channelParticipantBanned:
		t := m.To_ChannelParticipantBanned()
		return t.DebugString()
	case Predicate_channelParticipantLeft:
		t := m.To_ChannelParticipantLeft()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelParticipant
func (m *ChannelParticipant) To_ChannelParticipant() *TLChannelParticipant {
	m.PredicateName = Predicate_channelParticipant
	return &TLChannelParticipant{
		Data2: m,
	}
}

// To_ChannelParticipantSelf
func (m *ChannelParticipant) To_ChannelParticipantSelf() *TLChannelParticipantSelf {
	m.PredicateName = Predicate_channelParticipantSelf
	return &TLChannelParticipantSelf{
		Data2: m,
	}
}

// To_ChannelParticipantCreator
func (m *ChannelParticipant) To_ChannelParticipantCreator() *TLChannelParticipantCreator {
	m.PredicateName = Predicate_channelParticipantCreator
	return &TLChannelParticipantCreator{
		Data2: m,
	}
}

// To_ChannelParticipantAdmin
func (m *ChannelParticipant) To_ChannelParticipantAdmin() *TLChannelParticipantAdmin {
	m.PredicateName = Predicate_channelParticipantAdmin
	return &TLChannelParticipantAdmin{
		Data2: m,
	}
}

// To_ChannelParticipantBanned
func (m *ChannelParticipant) To_ChannelParticipantBanned() *TLChannelParticipantBanned {
	m.PredicateName = Predicate_channelParticipantBanned
	return &TLChannelParticipantBanned{
		Data2: m,
	}
}

// To_ChannelParticipantLeft
func (m *ChannelParticipant) To_ChannelParticipantLeft() *TLChannelParticipantLeft {
	m.PredicateName = Predicate_channelParticipantLeft
	return &TLChannelParticipantLeft{
		Data2: m,
	}
}

// MakeTLChannelParticipant
func MakeTLChannelParticipant(data2 *ChannelParticipant) *TLChannelParticipant {
	if data2 == nil {
		return &TLChannelParticipant{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipant
		return &TLChannelParticipant{Data2: data2}
	}
}

func (m *TLChannelParticipant) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipant
	return m.Data2
}

func (m *TLChannelParticipant) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChannelParticipant) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChannelParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipant) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipant) GetPredicateName() string {
	return Predicate_channelParticipant
}

func (m *TLChannelParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc00c07c0: func() []byte {
			x.UInt(0xc00c07c0)

			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc00c07c0: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantSelf
func MakeTLChannelParticipantSelf(data2 *ChannelParticipant) *TLChannelParticipantSelf {
	if data2 == nil {
		return &TLChannelParticipantSelf{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipantSelf,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantSelf
		return &TLChannelParticipantSelf{Data2: data2}
	}
}

func (m *TLChannelParticipantSelf) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipantSelf
	return m.Data2
}

//// flags
func (m *TLChannelParticipantSelf) SetViaRequest(v bool) { m.Data2.ViaRequest = v }
func (m *TLChannelParticipantSelf) GetViaRequest() bool  { return m.Data2.ViaRequest }

func (m *TLChannelParticipantSelf) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChannelParticipantSelf) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChannelParticipantSelf) SetInviterId_INT64(v int64) { m.Data2.InviterId_INT64 = v }
func (m *TLChannelParticipantSelf) GetInviterId_INT64() int64  { return m.Data2.InviterId_INT64 }

func (m *TLChannelParticipantSelf) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantSelf) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipantSelf) GetPredicateName() string {
	return Predicate_channelParticipantSelf
}

func (m *TLChannelParticipantSelf) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x35a8bfa7: func() []byte {
			x.UInt(0x35a8bfa7)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetViaRequest() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			x.Long(m.GetInviterId_INT64())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
		0x28a8bc67: func() []byte {
			x.UInt(0x28a8bc67)

			x.Long(m.GetUserId())
			x.Long(m.GetInviterId_INT64())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantSelf, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantSelf, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantSelf) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantSelf) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x35a8bfa7: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetViaRequest(true)
			}
			m.SetUserId(dBuf.Long())
			m.SetInviterId_INT64(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
		0x28a8bc67: func() error {
			m.SetUserId(dBuf.Long())
			m.SetInviterId_INT64(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantSelf) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantCreator
func MakeTLChannelParticipantCreator(data2 *ChannelParticipant) *TLChannelParticipantCreator {
	if data2 == nil {
		return &TLChannelParticipantCreator{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipantCreator,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantCreator
		return &TLChannelParticipantCreator{Data2: data2}
	}
}

func (m *TLChannelParticipantCreator) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipantCreator
	return m.Data2
}

//// flags
func (m *TLChannelParticipantCreator) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChannelParticipantCreator) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChannelParticipantCreator) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights = v }
func (m *TLChannelParticipantCreator) GetAdminRights() *ChatAdminRights  { return m.Data2.AdminRights }

func (m *TLChannelParticipantCreator) SetRank(v *types.StringValue) { m.Data2.Rank = v }
func (m *TLChannelParticipantCreator) GetRank() *types.StringValue  { return m.Data2.Rank }

func (m *TLChannelParticipantCreator) GetPredicateName() string {
	return Predicate_channelParticipantCreator
}

func (m *TLChannelParticipantCreator) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2fe601d3: func() []byte {
			x.UInt(0x2fe601d3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRank() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			x.Bytes(m.GetAdminRights().Encode(layer))
			if m.GetRank() != nil {
				x.String(m.GetRank().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantCreator, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantCreator, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantCreator) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantCreator) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2fe601d3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUserId(dBuf.Long())

			m5 := &ChatAdminRights{}
			m5.Decode(dBuf)
			m.SetAdminRights(m5)

			if (flags & (1 << 0)) != 0 {
				m.SetRank(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantCreator) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantAdmin
func MakeTLChannelParticipantAdmin(data2 *ChannelParticipant) *TLChannelParticipantAdmin {
	if data2 == nil {
		return &TLChannelParticipantAdmin{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipantAdmin,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantAdmin
		return &TLChannelParticipantAdmin{Data2: data2}
	}
}

func (m *TLChannelParticipantAdmin) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipantAdmin
	return m.Data2
}

//// flags
func (m *TLChannelParticipantAdmin) SetCanEdit(v bool) { m.Data2.CanEdit = v }
func (m *TLChannelParticipantAdmin) GetCanEdit() bool  { return m.Data2.CanEdit }

func (m *TLChannelParticipantAdmin) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLChannelParticipantAdmin) GetSelf() bool  { return m.Data2.Self }

func (m *TLChannelParticipantAdmin) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChannelParticipantAdmin) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChannelParticipantAdmin) SetInviterId_FLAGINT64(v *types.Int64Value) {
	m.Data2.InviterId_FLAGINT64 = v
}
func (m *TLChannelParticipantAdmin) GetInviterId_FLAGINT64() *types.Int64Value {
	return m.Data2.InviterId_FLAGINT64
}

func (m *TLChannelParticipantAdmin) SetPromotedBy(v int64) { m.Data2.PromotedBy = v }
func (m *TLChannelParticipantAdmin) GetPromotedBy() int64  { return m.Data2.PromotedBy }

func (m *TLChannelParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantAdmin) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipantAdmin) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights = v }
func (m *TLChannelParticipantAdmin) GetAdminRights() *ChatAdminRights  { return m.Data2.AdminRights }

func (m *TLChannelParticipantAdmin) SetRank(v *types.StringValue) { m.Data2.Rank = v }
func (m *TLChannelParticipantAdmin) GetRank() *types.StringValue  { return m.Data2.Rank }

func (m *TLChannelParticipantAdmin) GetPredicateName() string {
	return Predicate_channelParticipantAdmin
}

func (m *TLChannelParticipantAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x34c3bb53: func() []byte {
			x.UInt(0x34c3bb53)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanEdit() == true {
					flags |= 1 << 0
				}
				if m.GetSelf() == true {
					flags |= 1 << 1
				}

				if m.GetInviterId_FLAGINT64() != nil {
					flags |= 1 << 1
				}

				if m.GetRank() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			if m.GetInviterId_FLAGINT64() != nil {
				x.Long(m.GetInviterId_FLAGINT64().Value)
			}

			x.Long(m.GetPromotedBy())
			x.Int(m.GetDate())
			x.Bytes(m.GetAdminRights().Encode(layer))
			if m.GetRank() != nil {
				x.String(m.GetRank().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantAdmin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantAdmin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantAdmin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x34c3bb53: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCanEdit(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSelf(true)
			}
			m.SetUserId(dBuf.Long())
			if (flags & (1 << 1)) != 0 {
				m.SetInviterId_FLAGINT64(&types.Int64Value{Value: dBuf.Long()})
			}

			m.SetPromotedBy(dBuf.Long())
			m.SetDate(dBuf.Int())

			m5 := &ChatAdminRights{}
			m5.Decode(dBuf)
			m.SetAdminRights(m5)

			if (flags & (1 << 2)) != 0 {
				m.SetRank(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantBanned
func MakeTLChannelParticipantBanned(data2 *ChannelParticipant) *TLChannelParticipantBanned {
	if data2 == nil {
		return &TLChannelParticipantBanned{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipantBanned,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantBanned
		return &TLChannelParticipantBanned{Data2: data2}
	}
}

func (m *TLChannelParticipantBanned) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipantBanned
	return m.Data2
}

//// flags
func (m *TLChannelParticipantBanned) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannelParticipantBanned) GetLeft() bool  { return m.Data2.Left }

func (m *TLChannelParticipantBanned) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLChannelParticipantBanned) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLChannelParticipantBanned) SetKickedBy(v int64) { m.Data2.KickedBy = v }
func (m *TLChannelParticipantBanned) GetKickedBy() int64  { return m.Data2.KickedBy }

func (m *TLChannelParticipantBanned) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantBanned) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelParticipantBanned) SetBannedRights(v *ChatBannedRights) { m.Data2.BannedRights = v }
func (m *TLChannelParticipantBanned) GetBannedRights() *ChatBannedRights  { return m.Data2.BannedRights }

func (m *TLChannelParticipantBanned) GetPredicateName() string {
	return Predicate_channelParticipantBanned
}

func (m *TLChannelParticipantBanned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6df8014e: func() []byte {
			x.UInt(0x6df8014e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetLeft() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer().Encode(layer))
			x.Long(m.GetKickedBy())
			x.Int(m.GetDate())
			x.Bytes(m.GetBannedRights().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantBanned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantBanned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantBanned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantBanned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6df8014e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetLeft(true)
			}

			m11 := &Peer{}
			m11.Decode(dBuf)
			m.SetPeer(m11)

			m.SetKickedBy(dBuf.Long())
			m.SetDate(dBuf.Int())

			m13 := &ChatBannedRights{}
			m13.Decode(dBuf)
			m.SetBannedRights(m13)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantBanned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantLeft
func MakeTLChannelParticipantLeft(data2 *ChannelParticipant) *TLChannelParticipantLeft {
	if data2 == nil {
		return &TLChannelParticipantLeft{Data2: &ChannelParticipant{
			PredicateName: Predicate_channelParticipantLeft,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantLeft
		return &TLChannelParticipantLeft{Data2: data2}
	}
}

func (m *TLChannelParticipantLeft) To_ChannelParticipant() *ChannelParticipant {
	m.Data2.PredicateName = Predicate_channelParticipantLeft
	return m.Data2
}

func (m *TLChannelParticipantLeft) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLChannelParticipantLeft) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLChannelParticipantLeft) GetPredicateName() string {
	return Predicate_channelParticipantLeft
}

func (m *TLChannelParticipantLeft) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b03f006: func() []byte {
			x.UInt(0x1b03f006)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantLeft, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantLeft, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantLeft) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantLeft) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b03f006: func() error {

			m11 := &Peer{}
			m11.Decode(dBuf)
			m.SetPeer(m11)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantLeft) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageCaption <--
//  + TL_PageCaption
//

func (m *PageCaption) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageCaption:
		t := m.To_PageCaption()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageCaption) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageCaption) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6f747657:
		m2 := MakeTLPageCaption(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageCaption) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageCaption:
		t := m.To_PageCaption()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageCaption
func (m *PageCaption) To_PageCaption() *TLPageCaption {
	m.PredicateName = Predicate_pageCaption
	return &TLPageCaption{
		Data2: m,
	}
}

// MakeTLPageCaption
func MakeTLPageCaption(data2 *PageCaption) *TLPageCaption {
	if data2 == nil {
		return &TLPageCaption{Data2: &PageCaption{
			PredicateName: Predicate_pageCaption,
		}}
	} else {
		data2.PredicateName = Predicate_pageCaption
		return &TLPageCaption{Data2: data2}
	}
}

func (m *TLPageCaption) To_PageCaption() *PageCaption {
	m.Data2.PredicateName = Predicate_pageCaption
	return m.Data2
}

func (m *TLPageCaption) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageCaption) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageCaption) SetCredit(v *RichText) { m.Data2.Credit = v }
func (m *TLPageCaption) GetCredit() *RichText  { return m.Data2.Credit }

func (m *TLPageCaption) GetPredicateName() string {
	return Predicate_pageCaption
}

func (m *TLPageCaption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6f747657: func() []byte {
			x.UInt(0x6f747657)

			x.Bytes(m.GetText().Encode(layer))
			x.Bytes(m.GetCredit().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageCaption, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageCaption, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageCaption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageCaption) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6f747657: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			m1 := &RichText{}
			m1.Decode(dBuf)
			m.SetCredit(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageCaption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_UserInfo <--
//  + TL_HelpUserInfoEmpty
//  + TL_HelpUserInfo
//

func (m *Help_UserInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_userInfoEmpty:
		t := m.To_HelpUserInfoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_help_userInfo:
		t := m.To_HelpUserInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_UserInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_UserInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf3ae2eed:
		m2 := MakeTLHelpUserInfoEmpty(m)
		m2.Decode(dBuf)
	case 0x1eb3758:
		m2 := MakeTLHelpUserInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_UserInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_userInfoEmpty:
		t := m.To_HelpUserInfoEmpty()
		return t.DebugString()
	case Predicate_help_userInfo:
		t := m.To_HelpUserInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpUserInfoEmpty
func (m *Help_UserInfo) To_HelpUserInfoEmpty() *TLHelpUserInfoEmpty {
	m.PredicateName = Predicate_help_userInfoEmpty
	return &TLHelpUserInfoEmpty{
		Data2: m,
	}
}

// To_HelpUserInfo
func (m *Help_UserInfo) To_HelpUserInfo() *TLHelpUserInfo {
	m.PredicateName = Predicate_help_userInfo
	return &TLHelpUserInfo{
		Data2: m,
	}
}

// MakeTLHelpUserInfoEmpty
func MakeTLHelpUserInfoEmpty(data2 *Help_UserInfo) *TLHelpUserInfoEmpty {
	if data2 == nil {
		return &TLHelpUserInfoEmpty{Data2: &Help_UserInfo{
			PredicateName: Predicate_help_userInfoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_help_userInfoEmpty
		return &TLHelpUserInfoEmpty{Data2: data2}
	}
}

func (m *TLHelpUserInfoEmpty) To_Help_UserInfo() *Help_UserInfo {
	m.Data2.PredicateName = Predicate_help_userInfoEmpty
	return m.Data2
}

func (m *TLHelpUserInfoEmpty) GetPredicateName() string {
	return Predicate_help_userInfoEmpty
}

func (m *TLHelpUserInfoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf3ae2eed: func() []byte {
			x.UInt(0xf3ae2eed)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_userInfoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_userInfoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpUserInfoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpUserInfoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf3ae2eed: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpUserInfoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpUserInfo
func MakeTLHelpUserInfo(data2 *Help_UserInfo) *TLHelpUserInfo {
	if data2 == nil {
		return &TLHelpUserInfo{Data2: &Help_UserInfo{
			PredicateName: Predicate_help_userInfo,
		}}
	} else {
		data2.PredicateName = Predicate_help_userInfo
		return &TLHelpUserInfo{Data2: data2}
	}
}

func (m *TLHelpUserInfo) To_Help_UserInfo() *Help_UserInfo {
	m.Data2.PredicateName = Predicate_help_userInfo
	return m.Data2
}

func (m *TLHelpUserInfo) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpUserInfo) GetMessage() string  { return m.Data2.Message }

func (m *TLHelpUserInfo) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpUserInfo) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpUserInfo) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLHelpUserInfo) GetAuthor() string  { return m.Data2.Author }

func (m *TLHelpUserInfo) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpUserInfo) GetDate() int32  { return m.Data2.Date }

func (m *TLHelpUserInfo) GetPredicateName() string {
	return Predicate_help_userInfo
}

func (m *TLHelpUserInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1eb3758: func() []byte {
			x.UInt(0x1eb3758)

			x.String(m.GetMessage())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}

			x.String(m.GetAuthor())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_userInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_userInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpUserInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpUserInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1eb3758: func() error {
			m.SetMessage(dBuf.String())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*MessageEntity, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &MessageEntity{}
				v1[i].Decode(dBuf)
			}
			m.SetEntities(v1)

			m.SetAuthor(dBuf.String())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpUserInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageBlock <--
//  + TL_PageBlockUnsupported
//  + TL_PageBlockTitle
//  + TL_PageBlockSubtitle
//  + TL_PageBlockAuthorDate
//  + TL_PageBlockHeader
//  + TL_PageBlockSubheader
//  + TL_PageBlockParagraph
//  + TL_PageBlockPreformatted
//  + TL_PageBlockFooter
//  + TL_PageBlockDivider
//  + TL_PageBlockAnchor
//  + TL_PageBlockList
//  + TL_PageBlockBlockquote
//  + TL_PageBlockPullquote
//  + TL_PageBlockPhoto
//  + TL_PageBlockVideo
//  + TL_PageBlockCover
//  + TL_PageBlockEmbed
//  + TL_PageBlockEmbedPost
//  + TL_PageBlockCollage
//  + TL_PageBlockSlideshow
//  + TL_PageBlockChannel
//  + TL_PageBlockAudio
//  + TL_PageBlockKicker
//  + TL_PageBlockTable
//  + TL_PageBlockOrderedList
//  + TL_PageBlockDetails
//  + TL_PageBlockRelatedArticles
//  + TL_PageBlockMap
//

func (m *PageBlock) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageBlockUnsupported:
		t := m.To_PageBlockUnsupported()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockTitle:
		t := m.To_PageBlockTitle()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockSubtitle:
		t := m.To_PageBlockSubtitle()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockAuthorDate:
		t := m.To_PageBlockAuthorDate()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockHeader:
		t := m.To_PageBlockHeader()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockSubheader:
		t := m.To_PageBlockSubheader()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockParagraph:
		t := m.To_PageBlockParagraph()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockPreformatted:
		t := m.To_PageBlockPreformatted()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockFooter:
		t := m.To_PageBlockFooter()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockDivider:
		t := m.To_PageBlockDivider()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockAnchor:
		t := m.To_PageBlockAnchor()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockList:
		t := m.To_PageBlockList()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockBlockquote:
		t := m.To_PageBlockBlockquote()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockPullquote:
		t := m.To_PageBlockPullquote()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockPhoto:
		t := m.To_PageBlockPhoto()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockVideo:
		t := m.To_PageBlockVideo()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockCover:
		t := m.To_PageBlockCover()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockEmbed:
		t := m.To_PageBlockEmbed()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockEmbedPost:
		t := m.To_PageBlockEmbedPost()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockCollage:
		t := m.To_PageBlockCollage()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockSlideshow:
		t := m.To_PageBlockSlideshow()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockChannel:
		t := m.To_PageBlockChannel()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockAudio:
		t := m.To_PageBlockAudio()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockKicker:
		t := m.To_PageBlockKicker()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockTable:
		t := m.To_PageBlockTable()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockOrderedList:
		t := m.To_PageBlockOrderedList()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockDetails:
		t := m.To_PageBlockDetails()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockRelatedArticles:
		t := m.To_PageBlockRelatedArticles()
		xBuf = t.Encode(layer)
	case Predicate_pageBlockMap:
		t := m.To_PageBlockMap()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageBlock) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageBlock) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x13567e8a:
		m2 := MakeTLPageBlockUnsupported(m)
		m2.Decode(dBuf)
	case 0x70abc3fd:
		m2 := MakeTLPageBlockTitle(m)
		m2.Decode(dBuf)
	case 0x8ffa9a1f:
		m2 := MakeTLPageBlockSubtitle(m)
		m2.Decode(dBuf)
	case 0xbaafe5e0:
		m2 := MakeTLPageBlockAuthorDate(m)
		m2.Decode(dBuf)
	case 0xbfd064ec:
		m2 := MakeTLPageBlockHeader(m)
		m2.Decode(dBuf)
	case 0xf12bb6e1:
		m2 := MakeTLPageBlockSubheader(m)
		m2.Decode(dBuf)
	case 0x467a0766:
		m2 := MakeTLPageBlockParagraph(m)
		m2.Decode(dBuf)
	case 0xc070d93e:
		m2 := MakeTLPageBlockPreformatted(m)
		m2.Decode(dBuf)
	case 0x48870999:
		m2 := MakeTLPageBlockFooter(m)
		m2.Decode(dBuf)
	case 0xdb20b188:
		m2 := MakeTLPageBlockDivider(m)
		m2.Decode(dBuf)
	case 0xce0d37b0:
		m2 := MakeTLPageBlockAnchor(m)
		m2.Decode(dBuf)
	case 0xe4e88011:
		m2 := MakeTLPageBlockList(m)
		m2.Decode(dBuf)
	case 0x263d7c26:
		m2 := MakeTLPageBlockBlockquote(m)
		m2.Decode(dBuf)
	case 0x4f4456d3:
		m2 := MakeTLPageBlockPullquote(m)
		m2.Decode(dBuf)
	case 0x1759c560:
		m2 := MakeTLPageBlockPhoto(m)
		m2.Decode(dBuf)
	case 0x7c8fe7b6:
		m2 := MakeTLPageBlockVideo(m)
		m2.Decode(dBuf)
	case 0x39f23300:
		m2 := MakeTLPageBlockCover(m)
		m2.Decode(dBuf)
	case 0xa8718dc5:
		m2 := MakeTLPageBlockEmbed(m)
		m2.Decode(dBuf)
	case 0xf259a80b:
		m2 := MakeTLPageBlockEmbedPost(m)
		m2.Decode(dBuf)
	case 0x65a0fa4d:
		m2 := MakeTLPageBlockCollage(m)
		m2.Decode(dBuf)
	case 0x31f9590:
		m2 := MakeTLPageBlockSlideshow(m)
		m2.Decode(dBuf)
	case 0xef1751b5:
		m2 := MakeTLPageBlockChannel(m)
		m2.Decode(dBuf)
	case 0x804361ea:
		m2 := MakeTLPageBlockAudio(m)
		m2.Decode(dBuf)
	case 0x1e148390:
		m2 := MakeTLPageBlockKicker(m)
		m2.Decode(dBuf)
	case 0xbf4dea82:
		m2 := MakeTLPageBlockTable(m)
		m2.Decode(dBuf)
	case 0x9a8ae1e1:
		m2 := MakeTLPageBlockOrderedList(m)
		m2.Decode(dBuf)
	case 0x76768bed:
		m2 := MakeTLPageBlockDetails(m)
		m2.Decode(dBuf)
	case 0x16115a96:
		m2 := MakeTLPageBlockRelatedArticles(m)
		m2.Decode(dBuf)
	case 0xa44f3ef6:
		m2 := MakeTLPageBlockMap(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageBlock) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageBlockUnsupported:
		t := m.To_PageBlockUnsupported()
		return t.DebugString()
	case Predicate_pageBlockTitle:
		t := m.To_PageBlockTitle()
		return t.DebugString()
	case Predicate_pageBlockSubtitle:
		t := m.To_PageBlockSubtitle()
		return t.DebugString()
	case Predicate_pageBlockAuthorDate:
		t := m.To_PageBlockAuthorDate()
		return t.DebugString()
	case Predicate_pageBlockHeader:
		t := m.To_PageBlockHeader()
		return t.DebugString()
	case Predicate_pageBlockSubheader:
		t := m.To_PageBlockSubheader()
		return t.DebugString()
	case Predicate_pageBlockParagraph:
		t := m.To_PageBlockParagraph()
		return t.DebugString()
	case Predicate_pageBlockPreformatted:
		t := m.To_PageBlockPreformatted()
		return t.DebugString()
	case Predicate_pageBlockFooter:
		t := m.To_PageBlockFooter()
		return t.DebugString()
	case Predicate_pageBlockDivider:
		t := m.To_PageBlockDivider()
		return t.DebugString()
	case Predicate_pageBlockAnchor:
		t := m.To_PageBlockAnchor()
		return t.DebugString()
	case Predicate_pageBlockList:
		t := m.To_PageBlockList()
		return t.DebugString()
	case Predicate_pageBlockBlockquote:
		t := m.To_PageBlockBlockquote()
		return t.DebugString()
	case Predicate_pageBlockPullquote:
		t := m.To_PageBlockPullquote()
		return t.DebugString()
	case Predicate_pageBlockPhoto:
		t := m.To_PageBlockPhoto()
		return t.DebugString()
	case Predicate_pageBlockVideo:
		t := m.To_PageBlockVideo()
		return t.DebugString()
	case Predicate_pageBlockCover:
		t := m.To_PageBlockCover()
		return t.DebugString()
	case Predicate_pageBlockEmbed:
		t := m.To_PageBlockEmbed()
		return t.DebugString()
	case Predicate_pageBlockEmbedPost:
		t := m.To_PageBlockEmbedPost()
		return t.DebugString()
	case Predicate_pageBlockCollage:
		t := m.To_PageBlockCollage()
		return t.DebugString()
	case Predicate_pageBlockSlideshow:
		t := m.To_PageBlockSlideshow()
		return t.DebugString()
	case Predicate_pageBlockChannel:
		t := m.To_PageBlockChannel()
		return t.DebugString()
	case Predicate_pageBlockAudio:
		t := m.To_PageBlockAudio()
		return t.DebugString()
	case Predicate_pageBlockKicker:
		t := m.To_PageBlockKicker()
		return t.DebugString()
	case Predicate_pageBlockTable:
		t := m.To_PageBlockTable()
		return t.DebugString()
	case Predicate_pageBlockOrderedList:
		t := m.To_PageBlockOrderedList()
		return t.DebugString()
	case Predicate_pageBlockDetails:
		t := m.To_PageBlockDetails()
		return t.DebugString()
	case Predicate_pageBlockRelatedArticles:
		t := m.To_PageBlockRelatedArticles()
		return t.DebugString()
	case Predicate_pageBlockMap:
		t := m.To_PageBlockMap()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageBlockUnsupported
func (m *PageBlock) To_PageBlockUnsupported() *TLPageBlockUnsupported {
	m.PredicateName = Predicate_pageBlockUnsupported
	return &TLPageBlockUnsupported{
		Data2: m,
	}
}

// To_PageBlockTitle
func (m *PageBlock) To_PageBlockTitle() *TLPageBlockTitle {
	m.PredicateName = Predicate_pageBlockTitle
	return &TLPageBlockTitle{
		Data2: m,
	}
}

// To_PageBlockSubtitle
func (m *PageBlock) To_PageBlockSubtitle() *TLPageBlockSubtitle {
	m.PredicateName = Predicate_pageBlockSubtitle
	return &TLPageBlockSubtitle{
		Data2: m,
	}
}

// To_PageBlockAuthorDate
func (m *PageBlock) To_PageBlockAuthorDate() *TLPageBlockAuthorDate {
	m.PredicateName = Predicate_pageBlockAuthorDate
	return &TLPageBlockAuthorDate{
		Data2: m,
	}
}

// To_PageBlockHeader
func (m *PageBlock) To_PageBlockHeader() *TLPageBlockHeader {
	m.PredicateName = Predicate_pageBlockHeader
	return &TLPageBlockHeader{
		Data2: m,
	}
}

// To_PageBlockSubheader
func (m *PageBlock) To_PageBlockSubheader() *TLPageBlockSubheader {
	m.PredicateName = Predicate_pageBlockSubheader
	return &TLPageBlockSubheader{
		Data2: m,
	}
}

// To_PageBlockParagraph
func (m *PageBlock) To_PageBlockParagraph() *TLPageBlockParagraph {
	m.PredicateName = Predicate_pageBlockParagraph
	return &TLPageBlockParagraph{
		Data2: m,
	}
}

// To_PageBlockPreformatted
func (m *PageBlock) To_PageBlockPreformatted() *TLPageBlockPreformatted {
	m.PredicateName = Predicate_pageBlockPreformatted
	return &TLPageBlockPreformatted{
		Data2: m,
	}
}

// To_PageBlockFooter
func (m *PageBlock) To_PageBlockFooter() *TLPageBlockFooter {
	m.PredicateName = Predicate_pageBlockFooter
	return &TLPageBlockFooter{
		Data2: m,
	}
}

// To_PageBlockDivider
func (m *PageBlock) To_PageBlockDivider() *TLPageBlockDivider {
	m.PredicateName = Predicate_pageBlockDivider
	return &TLPageBlockDivider{
		Data2: m,
	}
}

// To_PageBlockAnchor
func (m *PageBlock) To_PageBlockAnchor() *TLPageBlockAnchor {
	m.PredicateName = Predicate_pageBlockAnchor
	return &TLPageBlockAnchor{
		Data2: m,
	}
}

// To_PageBlockList
func (m *PageBlock) To_PageBlockList() *TLPageBlockList {
	m.PredicateName = Predicate_pageBlockList
	return &TLPageBlockList{
		Data2: m,
	}
}

// To_PageBlockBlockquote
func (m *PageBlock) To_PageBlockBlockquote() *TLPageBlockBlockquote {
	m.PredicateName = Predicate_pageBlockBlockquote
	return &TLPageBlockBlockquote{
		Data2: m,
	}
}

// To_PageBlockPullquote
func (m *PageBlock) To_PageBlockPullquote() *TLPageBlockPullquote {
	m.PredicateName = Predicate_pageBlockPullquote
	return &TLPageBlockPullquote{
		Data2: m,
	}
}

// To_PageBlockPhoto
func (m *PageBlock) To_PageBlockPhoto() *TLPageBlockPhoto {
	m.PredicateName = Predicate_pageBlockPhoto
	return &TLPageBlockPhoto{
		Data2: m,
	}
}

// To_PageBlockVideo
func (m *PageBlock) To_PageBlockVideo() *TLPageBlockVideo {
	m.PredicateName = Predicate_pageBlockVideo
	return &TLPageBlockVideo{
		Data2: m,
	}
}

// To_PageBlockCover
func (m *PageBlock) To_PageBlockCover() *TLPageBlockCover {
	m.PredicateName = Predicate_pageBlockCover
	return &TLPageBlockCover{
		Data2: m,
	}
}

// To_PageBlockEmbed
func (m *PageBlock) To_PageBlockEmbed() *TLPageBlockEmbed {
	m.PredicateName = Predicate_pageBlockEmbed
	return &TLPageBlockEmbed{
		Data2: m,
	}
}

// To_PageBlockEmbedPost
func (m *PageBlock) To_PageBlockEmbedPost() *TLPageBlockEmbedPost {
	m.PredicateName = Predicate_pageBlockEmbedPost
	return &TLPageBlockEmbedPost{
		Data2: m,
	}
}

// To_PageBlockCollage
func (m *PageBlock) To_PageBlockCollage() *TLPageBlockCollage {
	m.PredicateName = Predicate_pageBlockCollage
	return &TLPageBlockCollage{
		Data2: m,
	}
}

// To_PageBlockSlideshow
func (m *PageBlock) To_PageBlockSlideshow() *TLPageBlockSlideshow {
	m.PredicateName = Predicate_pageBlockSlideshow
	return &TLPageBlockSlideshow{
		Data2: m,
	}
}

// To_PageBlockChannel
func (m *PageBlock) To_PageBlockChannel() *TLPageBlockChannel {
	m.PredicateName = Predicate_pageBlockChannel
	return &TLPageBlockChannel{
		Data2: m,
	}
}

// To_PageBlockAudio
func (m *PageBlock) To_PageBlockAudio() *TLPageBlockAudio {
	m.PredicateName = Predicate_pageBlockAudio
	return &TLPageBlockAudio{
		Data2: m,
	}
}

// To_PageBlockKicker
func (m *PageBlock) To_PageBlockKicker() *TLPageBlockKicker {
	m.PredicateName = Predicate_pageBlockKicker
	return &TLPageBlockKicker{
		Data2: m,
	}
}

// To_PageBlockTable
func (m *PageBlock) To_PageBlockTable() *TLPageBlockTable {
	m.PredicateName = Predicate_pageBlockTable
	return &TLPageBlockTable{
		Data2: m,
	}
}

// To_PageBlockOrderedList
func (m *PageBlock) To_PageBlockOrderedList() *TLPageBlockOrderedList {
	m.PredicateName = Predicate_pageBlockOrderedList
	return &TLPageBlockOrderedList{
		Data2: m,
	}
}

// To_PageBlockDetails
func (m *PageBlock) To_PageBlockDetails() *TLPageBlockDetails {
	m.PredicateName = Predicate_pageBlockDetails
	return &TLPageBlockDetails{
		Data2: m,
	}
}

// To_PageBlockRelatedArticles
func (m *PageBlock) To_PageBlockRelatedArticles() *TLPageBlockRelatedArticles {
	m.PredicateName = Predicate_pageBlockRelatedArticles
	return &TLPageBlockRelatedArticles{
		Data2: m,
	}
}

// To_PageBlockMap
func (m *PageBlock) To_PageBlockMap() *TLPageBlockMap {
	m.PredicateName = Predicate_pageBlockMap
	return &TLPageBlockMap{
		Data2: m,
	}
}

// MakeTLPageBlockUnsupported
func MakeTLPageBlockUnsupported(data2 *PageBlock) *TLPageBlockUnsupported {
	if data2 == nil {
		return &TLPageBlockUnsupported{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockUnsupported,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockUnsupported
		return &TLPageBlockUnsupported{Data2: data2}
	}
}

func (m *TLPageBlockUnsupported) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockUnsupported
	return m.Data2
}

func (m *TLPageBlockUnsupported) GetPredicateName() string {
	return Predicate_pageBlockUnsupported
}

func (m *TLPageBlockUnsupported) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x13567e8a: func() []byte {
			x.UInt(0x13567e8a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockUnsupported, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockUnsupported, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockUnsupported) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockUnsupported) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x13567e8a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockUnsupported) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockTitle
func MakeTLPageBlockTitle(data2 *PageBlock) *TLPageBlockTitle {
	if data2 == nil {
		return &TLPageBlockTitle{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockTitle,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockTitle
		return &TLPageBlockTitle{Data2: data2}
	}
}

func (m *TLPageBlockTitle) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockTitle
	return m.Data2
}

func (m *TLPageBlockTitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockTitle) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockTitle) GetPredicateName() string {
	return Predicate_pageBlockTitle
}

func (m *TLPageBlockTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x70abc3fd: func() []byte {
			x.UInt(0x70abc3fd)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockTitle, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockTitle, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockTitle) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x70abc3fd: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockSubtitle
func MakeTLPageBlockSubtitle(data2 *PageBlock) *TLPageBlockSubtitle {
	if data2 == nil {
		return &TLPageBlockSubtitle{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockSubtitle,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockSubtitle
		return &TLPageBlockSubtitle{Data2: data2}
	}
}

func (m *TLPageBlockSubtitle) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockSubtitle
	return m.Data2
}

func (m *TLPageBlockSubtitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubtitle) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockSubtitle) GetPredicateName() string {
	return Predicate_pageBlockSubtitle
}

func (m *TLPageBlockSubtitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8ffa9a1f: func() []byte {
			x.UInt(0x8ffa9a1f)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockSubtitle, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockSubtitle, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockSubtitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockSubtitle) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8ffa9a1f: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockSubtitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockAuthorDate
func MakeTLPageBlockAuthorDate(data2 *PageBlock) *TLPageBlockAuthorDate {
	if data2 == nil {
		return &TLPageBlockAuthorDate{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockAuthorDate,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockAuthorDate
		return &TLPageBlockAuthorDate{Data2: data2}
	}
}

func (m *TLPageBlockAuthorDate) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockAuthorDate
	return m.Data2
}

func (m *TLPageBlockAuthorDate) SetAuthor_RICHTEXT(v *RichText) { m.Data2.Author_RICHTEXT = v }
func (m *TLPageBlockAuthorDate) GetAuthor_RICHTEXT() *RichText  { return m.Data2.Author_RICHTEXT }

func (m *TLPageBlockAuthorDate) SetPublishedDate(v int32) { m.Data2.PublishedDate = v }
func (m *TLPageBlockAuthorDate) GetPublishedDate() int32  { return m.Data2.PublishedDate }

func (m *TLPageBlockAuthorDate) GetPredicateName() string {
	return Predicate_pageBlockAuthorDate
}

func (m *TLPageBlockAuthorDate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbaafe5e0: func() []byte {
			x.UInt(0xbaafe5e0)

			x.Bytes(m.GetAuthor_RICHTEXT().Encode(layer))
			x.Int(m.GetPublishedDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockAuthorDate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockAuthorDate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockAuthorDate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockAuthorDate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbaafe5e0: func() error {

			m1 := &RichText{}
			m1.Decode(dBuf)
			m.SetAuthor_RICHTEXT(m1)

			m.SetPublishedDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockAuthorDate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockHeader
func MakeTLPageBlockHeader(data2 *PageBlock) *TLPageBlockHeader {
	if data2 == nil {
		return &TLPageBlockHeader{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockHeader,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockHeader
		return &TLPageBlockHeader{Data2: data2}
	}
}

func (m *TLPageBlockHeader) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockHeader
	return m.Data2
}

func (m *TLPageBlockHeader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockHeader) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockHeader) GetPredicateName() string {
	return Predicate_pageBlockHeader
}

func (m *TLPageBlockHeader) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbfd064ec: func() []byte {
			x.UInt(0xbfd064ec)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockHeader, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockHeader, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockHeader) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockHeader) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbfd064ec: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockHeader) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockSubheader
func MakeTLPageBlockSubheader(data2 *PageBlock) *TLPageBlockSubheader {
	if data2 == nil {
		return &TLPageBlockSubheader{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockSubheader,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockSubheader
		return &TLPageBlockSubheader{Data2: data2}
	}
}

func (m *TLPageBlockSubheader) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockSubheader
	return m.Data2
}

func (m *TLPageBlockSubheader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubheader) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockSubheader) GetPredicateName() string {
	return Predicate_pageBlockSubheader
}

func (m *TLPageBlockSubheader) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf12bb6e1: func() []byte {
			x.UInt(0xf12bb6e1)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockSubheader, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockSubheader, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockSubheader) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockSubheader) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf12bb6e1: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockSubheader) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockParagraph
func MakeTLPageBlockParagraph(data2 *PageBlock) *TLPageBlockParagraph {
	if data2 == nil {
		return &TLPageBlockParagraph{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockParagraph,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockParagraph
		return &TLPageBlockParagraph{Data2: data2}
	}
}

func (m *TLPageBlockParagraph) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockParagraph
	return m.Data2
}

func (m *TLPageBlockParagraph) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockParagraph) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockParagraph) GetPredicateName() string {
	return Predicate_pageBlockParagraph
}

func (m *TLPageBlockParagraph) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x467a0766: func() []byte {
			x.UInt(0x467a0766)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockParagraph, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockParagraph, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockParagraph) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockParagraph) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x467a0766: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockParagraph) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockPreformatted
func MakeTLPageBlockPreformatted(data2 *PageBlock) *TLPageBlockPreformatted {
	if data2 == nil {
		return &TLPageBlockPreformatted{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockPreformatted,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockPreformatted
		return &TLPageBlockPreformatted{Data2: data2}
	}
}

func (m *TLPageBlockPreformatted) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockPreformatted
	return m.Data2
}

func (m *TLPageBlockPreformatted) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPreformatted) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockPreformatted) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLPageBlockPreformatted) GetLanguage() string  { return m.Data2.Language }

func (m *TLPageBlockPreformatted) GetPredicateName() string {
	return Predicate_pageBlockPreformatted
}

func (m *TLPageBlockPreformatted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc070d93e: func() []byte {
			x.UInt(0xc070d93e)

			x.Bytes(m.GetText().Encode(layer))
			x.String(m.GetLanguage())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockPreformatted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockPreformatted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockPreformatted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockPreformatted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc070d93e: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			m.SetLanguage(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockPreformatted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockFooter
func MakeTLPageBlockFooter(data2 *PageBlock) *TLPageBlockFooter {
	if data2 == nil {
		return &TLPageBlockFooter{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockFooter,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockFooter
		return &TLPageBlockFooter{Data2: data2}
	}
}

func (m *TLPageBlockFooter) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockFooter
	return m.Data2
}

func (m *TLPageBlockFooter) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockFooter) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockFooter) GetPredicateName() string {
	return Predicate_pageBlockFooter
}

func (m *TLPageBlockFooter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x48870999: func() []byte {
			x.UInt(0x48870999)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockFooter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockFooter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockFooter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockFooter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x48870999: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockFooter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockDivider
func MakeTLPageBlockDivider(data2 *PageBlock) *TLPageBlockDivider {
	if data2 == nil {
		return &TLPageBlockDivider{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockDivider,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockDivider
		return &TLPageBlockDivider{Data2: data2}
	}
}

func (m *TLPageBlockDivider) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockDivider
	return m.Data2
}

func (m *TLPageBlockDivider) GetPredicateName() string {
	return Predicate_pageBlockDivider
}

func (m *TLPageBlockDivider) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb20b188: func() []byte {
			x.UInt(0xdb20b188)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockDivider, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockDivider, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockDivider) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockDivider) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb20b188: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockDivider) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockAnchor
func MakeTLPageBlockAnchor(data2 *PageBlock) *TLPageBlockAnchor {
	if data2 == nil {
		return &TLPageBlockAnchor{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockAnchor,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockAnchor
		return &TLPageBlockAnchor{Data2: data2}
	}
}

func (m *TLPageBlockAnchor) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockAnchor
	return m.Data2
}

func (m *TLPageBlockAnchor) SetName(v string) { m.Data2.Name = v }
func (m *TLPageBlockAnchor) GetName() string  { return m.Data2.Name }

func (m *TLPageBlockAnchor) GetPredicateName() string {
	return Predicate_pageBlockAnchor
}

func (m *TLPageBlockAnchor) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xce0d37b0: func() []byte {
			x.UInt(0xce0d37b0)

			x.String(m.GetName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockAnchor, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockAnchor, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockAnchor) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockAnchor) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xce0d37b0: func() error {
			m.SetName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockAnchor) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockList
func MakeTLPageBlockList(data2 *PageBlock) *TLPageBlockList {
	if data2 == nil {
		return &TLPageBlockList{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockList,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockList
		return &TLPageBlockList{Data2: data2}
	}
}

func (m *TLPageBlockList) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockList
	return m.Data2
}

func (m *TLPageBlockList) SetItems_VECTORPAGELISTITEM(v []*PageListItem) {
	m.Data2.Items_VECTORPAGELISTITEM = v
}
func (m *TLPageBlockList) GetItems_VECTORPAGELISTITEM() []*PageListItem {
	return m.Data2.Items_VECTORPAGELISTITEM
}

func (m *TLPageBlockList) GetPredicateName() string {
	return Predicate_pageBlockList
}

func (m *TLPageBlockList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe4e88011: func() []byte {
			x.UInt(0xe4e88011)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetItems_VECTORPAGELISTITEM())))
			for _, v := range m.GetItems_VECTORPAGELISTITEM() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe4e88011: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*PageListItem, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &PageListItem{}
				v5[i].Decode(dBuf)
			}
			m.SetItems_VECTORPAGELISTITEM(v5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockBlockquote
func MakeTLPageBlockBlockquote(data2 *PageBlock) *TLPageBlockBlockquote {
	if data2 == nil {
		return &TLPageBlockBlockquote{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockBlockquote,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockBlockquote
		return &TLPageBlockBlockquote{Data2: data2}
	}
}

func (m *TLPageBlockBlockquote) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockBlockquote
	return m.Data2
}

func (m *TLPageBlockBlockquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockBlockquote) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockBlockquote) SetCaption_RICHTEXT(v *RichText) { m.Data2.Caption_RICHTEXT = v }
func (m *TLPageBlockBlockquote) GetCaption_RICHTEXT() *RichText  { return m.Data2.Caption_RICHTEXT }

func (m *TLPageBlockBlockquote) GetPredicateName() string {
	return Predicate_pageBlockBlockquote
}

func (m *TLPageBlockBlockquote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x263d7c26: func() []byte {
			x.UInt(0x263d7c26)

			x.Bytes(m.GetText().Encode(layer))
			x.Bytes(m.GetCaption_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockBlockquote, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockBlockquote, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockBlockquote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockBlockquote) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x263d7c26: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			m6 := &RichText{}
			m6.Decode(dBuf)
			m.SetCaption_RICHTEXT(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockBlockquote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockPullquote
func MakeTLPageBlockPullquote(data2 *PageBlock) *TLPageBlockPullquote {
	if data2 == nil {
		return &TLPageBlockPullquote{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockPullquote,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockPullquote
		return &TLPageBlockPullquote{Data2: data2}
	}
}

func (m *TLPageBlockPullquote) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockPullquote
	return m.Data2
}

func (m *TLPageBlockPullquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPullquote) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockPullquote) SetCaption_RICHTEXT(v *RichText) { m.Data2.Caption_RICHTEXT = v }
func (m *TLPageBlockPullquote) GetCaption_RICHTEXT() *RichText  { return m.Data2.Caption_RICHTEXT }

func (m *TLPageBlockPullquote) GetPredicateName() string {
	return Predicate_pageBlockPullquote
}

func (m *TLPageBlockPullquote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4f4456d3: func() []byte {
			x.UInt(0x4f4456d3)

			x.Bytes(m.GetText().Encode(layer))
			x.Bytes(m.GetCaption_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockPullquote, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockPullquote, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockPullquote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockPullquote) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4f4456d3: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			m6 := &RichText{}
			m6.Decode(dBuf)
			m.SetCaption_RICHTEXT(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockPullquote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockPhoto
func MakeTLPageBlockPhoto(data2 *PageBlock) *TLPageBlockPhoto {
	if data2 == nil {
		return &TLPageBlockPhoto{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockPhoto
		return &TLPageBlockPhoto{Data2: data2}
	}
}

func (m *TLPageBlockPhoto) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockPhoto
	return m.Data2
}

//// flags
func (m *TLPageBlockPhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLPageBlockPhoto) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLPageBlockPhoto) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockPhoto) GetCaption_PAGECAPTION() *PageCaption  { return m.Data2.Caption_PAGECAPTION }

func (m *TLPageBlockPhoto) SetUrl_FLAGSTRING(v *types.StringValue) { m.Data2.Url_FLAGSTRING = v }
func (m *TLPageBlockPhoto) GetUrl_FLAGSTRING() *types.StringValue  { return m.Data2.Url_FLAGSTRING }

func (m *TLPageBlockPhoto) SetWebpageId_FLAGINT64(v *types.Int64Value) {
	m.Data2.WebpageId_FLAGINT64 = v
}
func (m *TLPageBlockPhoto) GetWebpageId_FLAGINT64() *types.Int64Value {
	return m.Data2.WebpageId_FLAGINT64
}

func (m *TLPageBlockPhoto) GetPredicateName() string {
	return Predicate_pageBlockPhoto
}

func (m *TLPageBlockPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1759c560: func() []byte {
			x.UInt(0x1759c560)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetUrl_FLAGSTRING() != nil {
					flags |= 1 << 0
				}
				if m.GetWebpageId_FLAGINT64() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetPhotoId())
			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			if m.GetUrl_FLAGSTRING() != nil {
				x.String(m.GetUrl_FLAGSTRING().Value)
			}

			if m.GetWebpageId_FLAGINT64() != nil {
				x.Long(m.GetWebpageId_FLAGINT64().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1759c560: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetPhotoId(dBuf.Long())

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			if (flags & (1 << 0)) != 0 {
				m.SetUrl_FLAGSTRING(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetWebpageId_FLAGINT64(&types.Int64Value{Value: dBuf.Long()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockVideo
func MakeTLPageBlockVideo(data2 *PageBlock) *TLPageBlockVideo {
	if data2 == nil {
		return &TLPageBlockVideo{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockVideo,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockVideo
		return &TLPageBlockVideo{Data2: data2}
	}
}

func (m *TLPageBlockVideo) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockVideo
	return m.Data2
}

//// flags
func (m *TLPageBlockVideo) SetAutoplay(v bool) { m.Data2.Autoplay = v }
func (m *TLPageBlockVideo) GetAutoplay() bool  { return m.Data2.Autoplay }

func (m *TLPageBlockVideo) SetLoop(v bool) { m.Data2.Loop = v }
func (m *TLPageBlockVideo) GetLoop() bool  { return m.Data2.Loop }

func (m *TLPageBlockVideo) SetVideoId(v int64) { m.Data2.VideoId = v }
func (m *TLPageBlockVideo) GetVideoId() int64  { return m.Data2.VideoId }

func (m *TLPageBlockVideo) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockVideo) GetCaption_PAGECAPTION() *PageCaption  { return m.Data2.Caption_PAGECAPTION }

func (m *TLPageBlockVideo) GetPredicateName() string {
	return Predicate_pageBlockVideo
}

func (m *TLPageBlockVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7c8fe7b6: func() []byte {
			x.UInt(0x7c8fe7b6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAutoplay() == true {
					flags |= 1 << 0
				}
				if m.GetLoop() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetVideoId())
			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7c8fe7b6: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetAutoplay(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetLoop(true)
			}
			m.SetVideoId(dBuf.Long())

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockCover
func MakeTLPageBlockCover(data2 *PageBlock) *TLPageBlockCover {
	if data2 == nil {
		return &TLPageBlockCover{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockCover,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockCover
		return &TLPageBlockCover{Data2: data2}
	}
}

func (m *TLPageBlockCover) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockCover
	return m.Data2
}

func (m *TLPageBlockCover) SetCover(v *PageBlock) { m.Data2.Cover = v }
func (m *TLPageBlockCover) GetCover() *PageBlock  { return m.Data2.Cover }

func (m *TLPageBlockCover) GetPredicateName() string {
	return Predicate_pageBlockCover
}

func (m *TLPageBlockCover) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x39f23300: func() []byte {
			x.UInt(0x39f23300)

			x.Bytes(m.GetCover().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockCover, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockCover, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockCover) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockCover) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x39f23300: func() error {

			m14 := &PageBlock{}
			m14.Decode(dBuf)
			m.SetCover(m14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockCover) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockEmbed
func MakeTLPageBlockEmbed(data2 *PageBlock) *TLPageBlockEmbed {
	if data2 == nil {
		return &TLPageBlockEmbed{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockEmbed,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockEmbed
		return &TLPageBlockEmbed{Data2: data2}
	}
}

func (m *TLPageBlockEmbed) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockEmbed
	return m.Data2
}

//// flags
func (m *TLPageBlockEmbed) SetFullWidth(v bool) { m.Data2.FullWidth = v }
func (m *TLPageBlockEmbed) GetFullWidth() bool  { return m.Data2.FullWidth }

func (m *TLPageBlockEmbed) SetAllowScrolling(v bool) { m.Data2.AllowScrolling = v }
func (m *TLPageBlockEmbed) GetAllowScrolling() bool  { return m.Data2.AllowScrolling }

func (m *TLPageBlockEmbed) SetUrl_FLAGSTRING(v *types.StringValue) { m.Data2.Url_FLAGSTRING = v }
func (m *TLPageBlockEmbed) GetUrl_FLAGSTRING() *types.StringValue  { return m.Data2.Url_FLAGSTRING }

func (m *TLPageBlockEmbed) SetHtml(v *types.StringValue) { m.Data2.Html = v }
func (m *TLPageBlockEmbed) GetHtml() *types.StringValue  { return m.Data2.Html }

func (m *TLPageBlockEmbed) SetPosterPhotoId(v *types.Int64Value) { m.Data2.PosterPhotoId = v }
func (m *TLPageBlockEmbed) GetPosterPhotoId() *types.Int64Value  { return m.Data2.PosterPhotoId }

func (m *TLPageBlockEmbed) SetW_FLAGINT32(v *types.Int32Value) { m.Data2.W_FLAGINT32 = v }
func (m *TLPageBlockEmbed) GetW_FLAGINT32() *types.Int32Value  { return m.Data2.W_FLAGINT32 }

func (m *TLPageBlockEmbed) SetH_FLAGINT32(v *types.Int32Value) { m.Data2.H_FLAGINT32 = v }
func (m *TLPageBlockEmbed) GetH_FLAGINT32() *types.Int32Value  { return m.Data2.H_FLAGINT32 }

func (m *TLPageBlockEmbed) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockEmbed) GetCaption_PAGECAPTION() *PageCaption  { return m.Data2.Caption_PAGECAPTION }

func (m *TLPageBlockEmbed) GetPredicateName() string {
	return Predicate_pageBlockEmbed
}

func (m *TLPageBlockEmbed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8718dc5: func() []byte {
			x.UInt(0xa8718dc5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFullWidth() == true {
					flags |= 1 << 0
				}
				if m.GetAllowScrolling() == true {
					flags |= 1 << 3
				}
				if m.GetUrl_FLAGSTRING() != nil {
					flags |= 1 << 1
				}
				if m.GetHtml() != nil {
					flags |= 1 << 2
				}
				if m.GetPosterPhotoId() != nil {
					flags |= 1 << 4
				}
				if m.GetW_FLAGINT32() != nil {
					flags |= 1 << 5
				}
				if m.GetH_FLAGINT32() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetUrl_FLAGSTRING() != nil {
				x.String(m.GetUrl_FLAGSTRING().Value)
			}

			if m.GetHtml() != nil {
				x.String(m.GetHtml().Value)
			}

			if m.GetPosterPhotoId() != nil {
				x.Long(m.GetPosterPhotoId().Value)
			}

			if m.GetW_FLAGINT32() != nil {
				x.Int(m.GetW_FLAGINT32().Value)
			}

			if m.GetH_FLAGINT32() != nil {
				x.Int(m.GetH_FLAGINT32().Value)
			}

			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockEmbed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockEmbed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockEmbed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockEmbed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8718dc5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFullWidth(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetAllowScrolling(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetUrl_FLAGSTRING(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetHtml(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetPosterPhotoId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetW_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetH_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockEmbed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockEmbedPost
func MakeTLPageBlockEmbedPost(data2 *PageBlock) *TLPageBlockEmbedPost {
	if data2 == nil {
		return &TLPageBlockEmbedPost{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockEmbedPost,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockEmbedPost
		return &TLPageBlockEmbedPost{Data2: data2}
	}
}

func (m *TLPageBlockEmbedPost) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockEmbedPost
	return m.Data2
}

func (m *TLPageBlockEmbedPost) SetUrl_STRING(v string) { m.Data2.Url_STRING = v }
func (m *TLPageBlockEmbedPost) GetUrl_STRING() string  { return m.Data2.Url_STRING }

func (m *TLPageBlockEmbedPost) SetWebpageId_INT64(v int64) { m.Data2.WebpageId_INT64 = v }
func (m *TLPageBlockEmbedPost) GetWebpageId_INT64() int64  { return m.Data2.WebpageId_INT64 }

func (m *TLPageBlockEmbedPost) SetAuthorPhotoId(v int64) { m.Data2.AuthorPhotoId = v }
func (m *TLPageBlockEmbedPost) GetAuthorPhotoId() int64  { return m.Data2.AuthorPhotoId }

func (m *TLPageBlockEmbedPost) SetAuthor_STRING(v string) { m.Data2.Author_STRING = v }
func (m *TLPageBlockEmbedPost) GetAuthor_STRING() string  { return m.Data2.Author_STRING }

func (m *TLPageBlockEmbedPost) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPageBlockEmbedPost) GetDate() int32  { return m.Data2.Date }

func (m *TLPageBlockEmbedPost) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockEmbedPost) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageBlockEmbedPost) SetCaption_PAGECAPTION(v *PageCaption) {
	m.Data2.Caption_PAGECAPTION = v
}
func (m *TLPageBlockEmbedPost) GetCaption_PAGECAPTION() *PageCaption {
	return m.Data2.Caption_PAGECAPTION
}

func (m *TLPageBlockEmbedPost) GetPredicateName() string {
	return Predicate_pageBlockEmbedPost
}

func (m *TLPageBlockEmbedPost) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf259a80b: func() []byte {
			x.UInt(0xf259a80b)

			x.String(m.GetUrl_STRING())
			x.Long(m.GetWebpageId_INT64())
			x.Long(m.GetAuthorPhotoId())
			x.String(m.GetAuthor_STRING())
			x.Int(m.GetDate())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockEmbedPost, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockEmbedPost, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockEmbedPost) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockEmbedPost) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf259a80b: func() error {
			m.SetUrl_STRING(dBuf.String())
			m.SetWebpageId_INT64(dBuf.Long())
			m.SetAuthorPhotoId(dBuf.Long())
			m.SetAuthor_STRING(dBuf.String())
			m.SetDate(dBuf.Int())
			c23 := dBuf.Int()
			if c23 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 23, c23)
				return dBuf.GetError()
			}
			l23 := dBuf.Int()
			v23 := make([]*PageBlock, l23)
			for i := int32(0); i < l23; i++ {
				v23[i] = &PageBlock{}
				v23[i].Decode(dBuf)
			}
			m.SetBlocks(v23)

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockEmbedPost) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockCollage
func MakeTLPageBlockCollage(data2 *PageBlock) *TLPageBlockCollage {
	if data2 == nil {
		return &TLPageBlockCollage{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockCollage,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockCollage
		return &TLPageBlockCollage{Data2: data2}
	}
}

func (m *TLPageBlockCollage) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockCollage
	return m.Data2
}

func (m *TLPageBlockCollage) SetItems_VECTORPAGEBLOCK(v []*PageBlock) {
	m.Data2.Items_VECTORPAGEBLOCK = v
}
func (m *TLPageBlockCollage) GetItems_VECTORPAGEBLOCK() []*PageBlock {
	return m.Data2.Items_VECTORPAGEBLOCK
}

func (m *TLPageBlockCollage) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockCollage) GetCaption_PAGECAPTION() *PageCaption {
	return m.Data2.Caption_PAGECAPTION
}

func (m *TLPageBlockCollage) GetPredicateName() string {
	return Predicate_pageBlockCollage
}

func (m *TLPageBlockCollage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x65a0fa4d: func() []byte {
			x.UInt(0x65a0fa4d)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetItems_VECTORPAGEBLOCK())))
			for _, v := range m.GetItems_VECTORPAGEBLOCK() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockCollage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockCollage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockCollage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockCollage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x65a0fa4d: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*PageBlock, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &PageBlock{}
				v5[i].Decode(dBuf)
			}
			m.SetItems_VECTORPAGEBLOCK(v5)

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockCollage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockSlideshow
func MakeTLPageBlockSlideshow(data2 *PageBlock) *TLPageBlockSlideshow {
	if data2 == nil {
		return &TLPageBlockSlideshow{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockSlideshow,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockSlideshow
		return &TLPageBlockSlideshow{Data2: data2}
	}
}

func (m *TLPageBlockSlideshow) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockSlideshow
	return m.Data2
}

func (m *TLPageBlockSlideshow) SetItems_VECTORPAGEBLOCK(v []*PageBlock) {
	m.Data2.Items_VECTORPAGEBLOCK = v
}
func (m *TLPageBlockSlideshow) GetItems_VECTORPAGEBLOCK() []*PageBlock {
	return m.Data2.Items_VECTORPAGEBLOCK
}

func (m *TLPageBlockSlideshow) SetCaption_PAGECAPTION(v *PageCaption) {
	m.Data2.Caption_PAGECAPTION = v
}
func (m *TLPageBlockSlideshow) GetCaption_PAGECAPTION() *PageCaption {
	return m.Data2.Caption_PAGECAPTION
}

func (m *TLPageBlockSlideshow) GetPredicateName() string {
	return Predicate_pageBlockSlideshow
}

func (m *TLPageBlockSlideshow) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x31f9590: func() []byte {
			x.UInt(0x31f9590)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetItems_VECTORPAGEBLOCK())))
			for _, v := range m.GetItems_VECTORPAGEBLOCK() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockSlideshow, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockSlideshow, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockSlideshow) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockSlideshow) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x31f9590: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*PageBlock, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &PageBlock{}
				v5[i].Decode(dBuf)
			}
			m.SetItems_VECTORPAGEBLOCK(v5)

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockSlideshow) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockChannel
func MakeTLPageBlockChannel(data2 *PageBlock) *TLPageBlockChannel {
	if data2 == nil {
		return &TLPageBlockChannel{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockChannel,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockChannel
		return &TLPageBlockChannel{Data2: data2}
	}
}

func (m *TLPageBlockChannel) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockChannel
	return m.Data2
}

func (m *TLPageBlockChannel) SetChannel(v *Chat) { m.Data2.Channel = v }
func (m *TLPageBlockChannel) GetChannel() *Chat  { return m.Data2.Channel }

func (m *TLPageBlockChannel) GetPredicateName() string {
	return Predicate_pageBlockChannel
}

func (m *TLPageBlockChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xef1751b5: func() []byte {
			x.UInt(0xef1751b5)

			x.Bytes(m.GetChannel().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xef1751b5: func() error {

			m24 := &Chat{}
			m24.Decode(dBuf)
			m.SetChannel(m24)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockAudio
func MakeTLPageBlockAudio(data2 *PageBlock) *TLPageBlockAudio {
	if data2 == nil {
		return &TLPageBlockAudio{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockAudio,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockAudio
		return &TLPageBlockAudio{Data2: data2}
	}
}

func (m *TLPageBlockAudio) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockAudio
	return m.Data2
}

func (m *TLPageBlockAudio) SetAudioId(v int64) { m.Data2.AudioId = v }
func (m *TLPageBlockAudio) GetAudioId() int64  { return m.Data2.AudioId }

func (m *TLPageBlockAudio) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockAudio) GetCaption_PAGECAPTION() *PageCaption  { return m.Data2.Caption_PAGECAPTION }

func (m *TLPageBlockAudio) GetPredicateName() string {
	return Predicate_pageBlockAudio
}

func (m *TLPageBlockAudio) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x804361ea: func() []byte {
			x.UInt(0x804361ea)

			x.Long(m.GetAudioId())
			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockAudio, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockAudio, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockAudio) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockAudio) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x804361ea: func() error {
			m.SetAudioId(dBuf.Long())

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockAudio) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockKicker
func MakeTLPageBlockKicker(data2 *PageBlock) *TLPageBlockKicker {
	if data2 == nil {
		return &TLPageBlockKicker{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockKicker,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockKicker
		return &TLPageBlockKicker{Data2: data2}
	}
}

func (m *TLPageBlockKicker) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockKicker
	return m.Data2
}

func (m *TLPageBlockKicker) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockKicker) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageBlockKicker) GetPredicateName() string {
	return Predicate_pageBlockKicker
}

func (m *TLPageBlockKicker) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e148390: func() []byte {
			x.UInt(0x1e148390)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockKicker, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockKicker, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockKicker) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockKicker) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e148390: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockKicker) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockTable
func MakeTLPageBlockTable(data2 *PageBlock) *TLPageBlockTable {
	if data2 == nil {
		return &TLPageBlockTable{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockTable,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockTable
		return &TLPageBlockTable{Data2: data2}
	}
}

func (m *TLPageBlockTable) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockTable
	return m.Data2
}

//// flags
func (m *TLPageBlockTable) SetBordered(v bool) { m.Data2.Bordered = v }
func (m *TLPageBlockTable) GetBordered() bool  { return m.Data2.Bordered }

func (m *TLPageBlockTable) SetStriped(v bool) { m.Data2.Striped = v }
func (m *TLPageBlockTable) GetStriped() bool  { return m.Data2.Striped }

func (m *TLPageBlockTable) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockTable) GetTitle() *RichText  { return m.Data2.Title }

func (m *TLPageBlockTable) SetRows(v []*PageTableRow) { m.Data2.Rows = v }
func (m *TLPageBlockTable) GetRows() []*PageTableRow  { return m.Data2.Rows }

func (m *TLPageBlockTable) GetPredicateName() string {
	return Predicate_pageBlockTable
}

func (m *TLPageBlockTable) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbf4dea82: func() []byte {
			x.UInt(0xbf4dea82)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBordered() == true {
					flags |= 1 << 0
				}
				if m.GetStriped() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetTitle().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRows())))
			for _, v := range m.GetRows() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockTable, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockTable, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockTable) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockTable) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbf4dea82: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetBordered(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetStriped(true)
			}

			m28 := &RichText{}
			m28.Decode(dBuf)
			m.SetTitle(m28)

			c29 := dBuf.Int()
			if c29 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 29, c29)
				return dBuf.GetError()
			}
			l29 := dBuf.Int()
			v29 := make([]*PageTableRow, l29)
			for i := int32(0); i < l29; i++ {
				v29[i] = &PageTableRow{}
				v29[i].Decode(dBuf)
			}
			m.SetRows(v29)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockTable) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockOrderedList
func MakeTLPageBlockOrderedList(data2 *PageBlock) *TLPageBlockOrderedList {
	if data2 == nil {
		return &TLPageBlockOrderedList{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockOrderedList,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockOrderedList
		return &TLPageBlockOrderedList{Data2: data2}
	}
}

func (m *TLPageBlockOrderedList) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockOrderedList
	return m.Data2
}

func (m *TLPageBlockOrderedList) SetItems_VECTORPAGELISTORDEREDITEM(v []*PageListOrderedItem) {
	m.Data2.Items_VECTORPAGELISTORDEREDITEM = v
}
func (m *TLPageBlockOrderedList) GetItems_VECTORPAGELISTORDEREDITEM() []*PageListOrderedItem {
	return m.Data2.Items_VECTORPAGELISTORDEREDITEM
}

func (m *TLPageBlockOrderedList) GetPredicateName() string {
	return Predicate_pageBlockOrderedList
}

func (m *TLPageBlockOrderedList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9a8ae1e1: func() []byte {
			x.UInt(0x9a8ae1e1)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetItems_VECTORPAGELISTORDEREDITEM())))
			for _, v := range m.GetItems_VECTORPAGELISTORDEREDITEM() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockOrderedList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockOrderedList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockOrderedList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockOrderedList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9a8ae1e1: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*PageListOrderedItem, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &PageListOrderedItem{}
				v5[i].Decode(dBuf)
			}
			m.SetItems_VECTORPAGELISTORDEREDITEM(v5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockOrderedList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockDetails
func MakeTLPageBlockDetails(data2 *PageBlock) *TLPageBlockDetails {
	if data2 == nil {
		return &TLPageBlockDetails{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockDetails,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockDetails
		return &TLPageBlockDetails{Data2: data2}
	}
}

func (m *TLPageBlockDetails) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockDetails
	return m.Data2
}

//// flags
func (m *TLPageBlockDetails) SetOpen(v bool) { m.Data2.Open = v }
func (m *TLPageBlockDetails) GetOpen() bool  { return m.Data2.Open }

func (m *TLPageBlockDetails) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockDetails) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageBlockDetails) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockDetails) GetTitle() *RichText  { return m.Data2.Title }

func (m *TLPageBlockDetails) GetPredicateName() string {
	return Predicate_pageBlockDetails
}

func (m *TLPageBlockDetails) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x76768bed: func() []byte {
			x.UInt(0x76768bed)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOpen() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetTitle().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockDetails, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockDetails, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockDetails) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockDetails) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x76768bed: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetOpen(true)
			}
			c23 := dBuf.Int()
			if c23 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 23, c23)
				return dBuf.GetError()
			}
			l23 := dBuf.Int()
			v23 := make([]*PageBlock, l23)
			for i := int32(0); i < l23; i++ {
				v23[i] = &PageBlock{}
				v23[i].Decode(dBuf)
			}
			m.SetBlocks(v23)

			m28 := &RichText{}
			m28.Decode(dBuf)
			m.SetTitle(m28)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockDetails) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockRelatedArticles
func MakeTLPageBlockRelatedArticles(data2 *PageBlock) *TLPageBlockRelatedArticles {
	if data2 == nil {
		return &TLPageBlockRelatedArticles{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockRelatedArticles,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockRelatedArticles
		return &TLPageBlockRelatedArticles{Data2: data2}
	}
}

func (m *TLPageBlockRelatedArticles) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockRelatedArticles
	return m.Data2
}

func (m *TLPageBlockRelatedArticles) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockRelatedArticles) GetTitle() *RichText  { return m.Data2.Title }

func (m *TLPageBlockRelatedArticles) SetArticles(v []*PageRelatedArticle) { m.Data2.Articles = v }
func (m *TLPageBlockRelatedArticles) GetArticles() []*PageRelatedArticle  { return m.Data2.Articles }

func (m *TLPageBlockRelatedArticles) GetPredicateName() string {
	return Predicate_pageBlockRelatedArticles
}

func (m *TLPageBlockRelatedArticles) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x16115a96: func() []byte {
			x.UInt(0x16115a96)

			x.Bytes(m.GetTitle().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetArticles())))
			for _, v := range m.GetArticles() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockRelatedArticles, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockRelatedArticles, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockRelatedArticles) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockRelatedArticles) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x16115a96: func() error {

			m28 := &RichText{}
			m28.Decode(dBuf)
			m.SetTitle(m28)

			c31 := dBuf.Int()
			if c31 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 31, c31)
				return dBuf.GetError()
			}
			l31 := dBuf.Int()
			v31 := make([]*PageRelatedArticle, l31)
			for i := int32(0); i < l31; i++ {
				v31[i] = &PageRelatedArticle{}
				v31[i].Decode(dBuf)
			}
			m.SetArticles(v31)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockRelatedArticles) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageBlockMap
func MakeTLPageBlockMap(data2 *PageBlock) *TLPageBlockMap {
	if data2 == nil {
		return &TLPageBlockMap{Data2: &PageBlock{
			PredicateName: Predicate_pageBlockMap,
		}}
	} else {
		data2.PredicateName = Predicate_pageBlockMap
		return &TLPageBlockMap{Data2: data2}
	}
}

func (m *TLPageBlockMap) To_PageBlock() *PageBlock {
	m.Data2.PredicateName = Predicate_pageBlockMap
	return m.Data2
}

func (m *TLPageBlockMap) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLPageBlockMap) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLPageBlockMap) SetZoom(v int32) { m.Data2.Zoom = v }
func (m *TLPageBlockMap) GetZoom() int32  { return m.Data2.Zoom }

func (m *TLPageBlockMap) SetW_INT32(v int32) { m.Data2.W_INT32 = v }
func (m *TLPageBlockMap) GetW_INT32() int32  { return m.Data2.W_INT32 }

func (m *TLPageBlockMap) SetH_INT32(v int32) { m.Data2.H_INT32 = v }
func (m *TLPageBlockMap) GetH_INT32() int32  { return m.Data2.H_INT32 }

func (m *TLPageBlockMap) SetCaption_PAGECAPTION(v *PageCaption) { m.Data2.Caption_PAGECAPTION = v }
func (m *TLPageBlockMap) GetCaption_PAGECAPTION() *PageCaption  { return m.Data2.Caption_PAGECAPTION }

func (m *TLPageBlockMap) GetPredicateName() string {
	return Predicate_pageBlockMap
}

func (m *TLPageBlockMap) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa44f3ef6: func() []byte {
			x.UInt(0xa44f3ef6)

			x.Bytes(m.GetGeo().Encode(layer))
			x.Int(m.GetZoom())
			x.Int(m.GetW_INT32())
			x.Int(m.GetH_INT32())
			x.Bytes(m.GetCaption_PAGECAPTION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageBlockMap, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageBlockMap, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageBlockMap) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageBlockMap) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa44f3ef6: func() error {

			m32 := &GeoPoint{}
			m32.Decode(dBuf)
			m.SetGeo(m32)

			m.SetZoom(dBuf.Int())
			m.SetW_INT32(dBuf.Int())
			m.SetH_INT32(dBuf.Int())

			m6 := &PageCaption{}
			m6.Decode(dBuf)
			m.SetCaption_PAGECAPTION(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageBlockMap) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Invoice <--
//  + TL_Invoice
//

func (m *Invoice) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_invoice:
		t := m.To_Invoice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Invoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *Invoice) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcd886e0:
		m2 := MakeTLInvoice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Invoice) DebugString() string {
	switch m.PredicateName {
	case Predicate_invoice:
		t := m.To_Invoice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Invoice
func (m *Invoice) To_Invoice() *TLInvoice {
	m.PredicateName = Predicate_invoice
	return &TLInvoice{
		Data2: m,
	}
}

// MakeTLInvoice
func MakeTLInvoice(data2 *Invoice) *TLInvoice {
	if data2 == nil {
		return &TLInvoice{Data2: &Invoice{
			PredicateName: Predicate_invoice,
		}}
	} else {
		data2.PredicateName = Predicate_invoice
		return &TLInvoice{Data2: data2}
	}
}

func (m *TLInvoice) To_Invoice() *Invoice {
	m.Data2.PredicateName = Predicate_invoice
	return m.Data2
}

//// flags
func (m *TLInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLInvoice) GetTest() bool  { return m.Data2.Test }

func (m *TLInvoice) SetNameRequested(v bool) { m.Data2.NameRequested = v }
func (m *TLInvoice) GetNameRequested() bool  { return m.Data2.NameRequested }

func (m *TLInvoice) SetPhoneRequested(v bool) { m.Data2.PhoneRequested = v }
func (m *TLInvoice) GetPhoneRequested() bool  { return m.Data2.PhoneRequested }

func (m *TLInvoice) SetEmailRequested(v bool) { m.Data2.EmailRequested = v }
func (m *TLInvoice) GetEmailRequested() bool  { return m.Data2.EmailRequested }

func (m *TLInvoice) SetShippingAddressRequested(v bool) { m.Data2.ShippingAddressRequested = v }
func (m *TLInvoice) GetShippingAddressRequested() bool  { return m.Data2.ShippingAddressRequested }

func (m *TLInvoice) SetFlexible(v bool) { m.Data2.Flexible = v }
func (m *TLInvoice) GetFlexible() bool  { return m.Data2.Flexible }

func (m *TLInvoice) SetPhoneToProvider(v bool) { m.Data2.PhoneToProvider = v }
func (m *TLInvoice) GetPhoneToProvider() bool  { return m.Data2.PhoneToProvider }

func (m *TLInvoice) SetEmailToProvider(v bool) { m.Data2.EmailToProvider = v }
func (m *TLInvoice) GetEmailToProvider() bool  { return m.Data2.EmailToProvider }

func (m *TLInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLInvoice) GetCurrency() string  { return m.Data2.Currency }

func (m *TLInvoice) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLInvoice) GetPrices() []*LabeledPrice  { return m.Data2.Prices }

func (m *TLInvoice) SetMaxTipAmount(v *types.Int64Value) { m.Data2.MaxTipAmount = v }
func (m *TLInvoice) GetMaxTipAmount() *types.Int64Value  { return m.Data2.MaxTipAmount }

func (m *TLInvoice) SetSuggestedTipAmounts(v []int64) { m.Data2.SuggestedTipAmounts = v }
func (m *TLInvoice) GetSuggestedTipAmounts() []int64  { return m.Data2.SuggestedTipAmounts }

func (m *TLInvoice) GetPredicateName() string {
	return Predicate_invoice
}

func (m *TLInvoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcd886e0: func() []byte {
			x.UInt(0xcd886e0)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTest() == true {
					flags |= 1 << 0
				}
				if m.GetNameRequested() == true {
					flags |= 1 << 1
				}
				if m.GetPhoneRequested() == true {
					flags |= 1 << 2
				}
				if m.GetEmailRequested() == true {
					flags |= 1 << 3
				}
				if m.GetShippingAddressRequested() == true {
					flags |= 1 << 4
				}
				if m.GetFlexible() == true {
					flags |= 1 << 5
				}
				if m.GetPhoneToProvider() == true {
					flags |= 1 << 6
				}
				if m.GetEmailToProvider() == true {
					flags |= 1 << 7
				}

				if m.GetMaxTipAmount() != nil {
					flags |= 1 << 8
				}
				if m.GetSuggestedTipAmounts() != nil {
					flags |= 1 << 8
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetCurrency())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPrices())))
			for _, v := range m.GetPrices() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMaxTipAmount() != nil {
				x.Long(m.GetMaxTipAmount().Value)
			}

			if m.GetSuggestedTipAmounts() != nil {
				x.VectorLong(m.GetSuggestedTipAmounts())
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_invoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_invoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInvoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcd886e0: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetTest(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetNameRequested(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetPhoneRequested(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetEmailRequested(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetShippingAddressRequested(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetFlexible(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPhoneToProvider(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetEmailToProvider(true)
			}
			m.SetCurrency(dBuf.String())
			c10 := dBuf.Int()
			if c10 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 10, c10)
				return dBuf.GetError()
			}
			l10 := dBuf.Int()
			v10 := make([]*LabeledPrice, l10)
			for i := int32(0); i < l10; i++ {
				v10[i] = &LabeledPrice{}
				v10[i].Decode(dBuf)
			}
			m.SetPrices(v10)

			if (flags & (1 << 8)) != 0 {
				m.SetMaxTipAmount(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 8)) != 0 {
				m.SetSuggestedTipAmounts(dBuf.VectorLong())
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInvoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Upload_WebFile <--
//  + TL_UploadWebFile
//

func (m *Upload_WebFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_upload_webFile:
		t := m.To_UploadWebFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Upload_WebFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *Upload_WebFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x21e753bc:
		m2 := MakeTLUploadWebFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Upload_WebFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_upload_webFile:
		t := m.To_UploadWebFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UploadWebFile
func (m *Upload_WebFile) To_UploadWebFile() *TLUploadWebFile {
	m.PredicateName = Predicate_upload_webFile
	return &TLUploadWebFile{
		Data2: m,
	}
}

// MakeTLUploadWebFile
func MakeTLUploadWebFile(data2 *Upload_WebFile) *TLUploadWebFile {
	if data2 == nil {
		return &TLUploadWebFile{Data2: &Upload_WebFile{
			PredicateName: Predicate_upload_webFile,
		}}
	} else {
		data2.PredicateName = Predicate_upload_webFile
		return &TLUploadWebFile{Data2: data2}
	}
}

func (m *TLUploadWebFile) To_Upload_WebFile() *Upload_WebFile {
	m.Data2.PredicateName = Predicate_upload_webFile
	return m.Data2
}

func (m *TLUploadWebFile) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLUploadWebFile) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLUploadWebFile) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLUploadWebFile) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLUploadWebFile) SetFileType(v *Storage_FileType) { m.Data2.FileType = v }
func (m *TLUploadWebFile) GetFileType() *Storage_FileType  { return m.Data2.FileType }

func (m *TLUploadWebFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadWebFile) GetMtime() int32  { return m.Data2.Mtime }

func (m *TLUploadWebFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadWebFile) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLUploadWebFile) GetPredicateName() string {
	return Predicate_upload_webFile
}

func (m *TLUploadWebFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x21e753bc: func() []byte {
			x.UInt(0x21e753bc)

			x.Int(m.GetSize2())
			x.String(m.GetMimeType())
			x.Bytes(m.GetFileType().Encode(layer))
			x.Int(m.GetMtime())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_upload_webFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_upload_webFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUploadWebFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadWebFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x21e753bc: func() error {
			m.SetSize2(dBuf.Int())
			m.SetMimeType(dBuf.String())

			m2 := &Storage_FileType{}
			m2.Decode(dBuf)
			m.SetFileType(m2)

			m.SetMtime(dBuf.Int())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUploadWebFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineResult <--
//  + TL_InputBotInlineResult
//  + TL_InputBotInlineResultPhoto
//  + TL_InputBotInlineResultDocument
//  + TL_InputBotInlineResultGame
//

func (m *InputBotInlineResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputBotInlineResult:
		t := m.To_InputBotInlineResult()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineResultPhoto:
		t := m.To_InputBotInlineResultPhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineResultDocument:
		t := m.To_InputBotInlineResultDocument()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineResultGame:
		t := m.To_InputBotInlineResultGame()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputBotInlineResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputBotInlineResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x88bf9319:
		m2 := MakeTLInputBotInlineResult(m)
		m2.Decode(dBuf)
	case 0xa8d864a7:
		m2 := MakeTLInputBotInlineResultPhoto(m)
		m2.Decode(dBuf)
	case 0xfff8fdc4:
		m2 := MakeTLInputBotInlineResultDocument(m)
		m2.Decode(dBuf)
	case 0x4fa417f2:
		m2 := MakeTLInputBotInlineResultGame(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputBotInlineResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputBotInlineResult:
		t := m.To_InputBotInlineResult()
		return t.DebugString()
	case Predicate_inputBotInlineResultPhoto:
		t := m.To_InputBotInlineResultPhoto()
		return t.DebugString()
	case Predicate_inputBotInlineResultDocument:
		t := m.To_InputBotInlineResultDocument()
		return t.DebugString()
	case Predicate_inputBotInlineResultGame:
		t := m.To_InputBotInlineResultGame()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputBotInlineResult
func (m *InputBotInlineResult) To_InputBotInlineResult() *TLInputBotInlineResult {
	m.PredicateName = Predicate_inputBotInlineResult
	return &TLInputBotInlineResult{
		Data2: m,
	}
}

// To_InputBotInlineResultPhoto
func (m *InputBotInlineResult) To_InputBotInlineResultPhoto() *TLInputBotInlineResultPhoto {
	m.PredicateName = Predicate_inputBotInlineResultPhoto
	return &TLInputBotInlineResultPhoto{
		Data2: m,
	}
}

// To_InputBotInlineResultDocument
func (m *InputBotInlineResult) To_InputBotInlineResultDocument() *TLInputBotInlineResultDocument {
	m.PredicateName = Predicate_inputBotInlineResultDocument
	return &TLInputBotInlineResultDocument{
		Data2: m,
	}
}

// To_InputBotInlineResultGame
func (m *InputBotInlineResult) To_InputBotInlineResultGame() *TLInputBotInlineResultGame {
	m.PredicateName = Predicate_inputBotInlineResultGame
	return &TLInputBotInlineResultGame{
		Data2: m,
	}
}

// MakeTLInputBotInlineResult
func MakeTLInputBotInlineResult(data2 *InputBotInlineResult) *TLInputBotInlineResult {
	if data2 == nil {
		return &TLInputBotInlineResult{Data2: &InputBotInlineResult{
			PredicateName: Predicate_inputBotInlineResult,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineResult
		return &TLInputBotInlineResult{Data2: data2}
	}
}

func (m *TLInputBotInlineResult) To_InputBotInlineResult() *InputBotInlineResult {
	m.Data2.PredicateName = Predicate_inputBotInlineResult
	return m.Data2
}

//// flags
func (m *TLInputBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResult) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResult) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResult) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLInputBotInlineResult) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLInputBotInlineResult) SetDescription(v *types.StringValue) { m.Data2.Description = v }
func (m *TLInputBotInlineResult) GetDescription() *types.StringValue  { return m.Data2.Description }

func (m *TLInputBotInlineResult) SetUrl(v *types.StringValue) { m.Data2.Url = v }
func (m *TLInputBotInlineResult) GetUrl() *types.StringValue  { return m.Data2.Url }

func (m *TLInputBotInlineResult) SetThumb(v *InputWebDocument) { m.Data2.Thumb = v }
func (m *TLInputBotInlineResult) GetThumb() *InputWebDocument  { return m.Data2.Thumb }

func (m *TLInputBotInlineResult) SetContent(v *InputWebDocument) { m.Data2.Content = v }
func (m *TLInputBotInlineResult) GetContent() *InputWebDocument  { return m.Data2.Content }

func (m *TLInputBotInlineResult) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResult) GetSendMessage() *InputBotInlineMessage  { return m.Data2.SendMessage }

func (m *TLInputBotInlineResult) GetPredicateName() string {
	return Predicate_inputBotInlineResult
}

func (m *TLInputBotInlineResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x88bf9319: func() []byte {
			x.UInt(0x88bf9319)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTitle() != nil {
					flags |= 1 << 1
				}
				if m.GetDescription() != nil {
					flags |= 1 << 2
				}
				if m.GetUrl() != nil {
					flags |= 1 << 3
				}
				if m.GetThumb() != nil {
					flags |= 1 << 4
				}
				if m.GetContent() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetId())
			x.String(m.GetType())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			if m.GetUrl() != nil {
				x.String(m.GetUrl().Value)
			}

			if m.GetThumb() != nil {
				x.Bytes(m.GetThumb().Encode(layer))
			}

			if m.GetContent() != nil {
				x.Bytes(m.GetContent().Encode(layer))
			}

			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineResult, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineResult, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineResult) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x88bf9319: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.String())
			m.SetType(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetUrl(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m6 := &InputWebDocument{}
				m6.Decode(dBuf)
				m.SetThumb(m6)
			}
			if (flags & (1 << 5)) != 0 {
				m7 := &InputWebDocument{}
				m7.Decode(dBuf)
				m.SetContent(m7)
			}

			m8 := &InputBotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineResultPhoto
func MakeTLInputBotInlineResultPhoto(data2 *InputBotInlineResult) *TLInputBotInlineResultPhoto {
	if data2 == nil {
		return &TLInputBotInlineResultPhoto{Data2: &InputBotInlineResult{
			PredicateName: Predicate_inputBotInlineResultPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineResultPhoto
		return &TLInputBotInlineResultPhoto{Data2: data2}
	}
}

func (m *TLInputBotInlineResultPhoto) To_InputBotInlineResult() *InputBotInlineResult {
	m.Data2.PredicateName = Predicate_inputBotInlineResultPhoto
	return m.Data2
}

func (m *TLInputBotInlineResultPhoto) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultPhoto) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultPhoto) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultPhoto) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResultPhoto) SetPhoto(v *InputPhoto) { m.Data2.Photo = v }
func (m *TLInputBotInlineResultPhoto) GetPhoto() *InputPhoto  { return m.Data2.Photo }

func (m *TLInputBotInlineResultPhoto) SetSendMessage(v *InputBotInlineMessage) {
	m.Data2.SendMessage = v
}
func (m *TLInputBotInlineResultPhoto) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func (m *TLInputBotInlineResultPhoto) GetPredicateName() string {
	return Predicate_inputBotInlineResultPhoto
}

func (m *TLInputBotInlineResultPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8d864a7: func() []byte {
			x.UInt(0xa8d864a7)

			x.String(m.GetId())
			x.String(m.GetType())
			x.Bytes(m.GetPhoto().Encode(layer))
			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineResultPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineResultPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineResultPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineResultPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8d864a7: func() error {
			m.SetId(dBuf.String())
			m.SetType(dBuf.String())

			m9 := &InputPhoto{}
			m9.Decode(dBuf)
			m.SetPhoto(m9)

			m8 := &InputBotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineResultPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineResultDocument
func MakeTLInputBotInlineResultDocument(data2 *InputBotInlineResult) *TLInputBotInlineResultDocument {
	if data2 == nil {
		return &TLInputBotInlineResultDocument{Data2: &InputBotInlineResult{
			PredicateName: Predicate_inputBotInlineResultDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineResultDocument
		return &TLInputBotInlineResultDocument{Data2: data2}
	}
}

func (m *TLInputBotInlineResultDocument) To_InputBotInlineResult() *InputBotInlineResult {
	m.Data2.PredicateName = Predicate_inputBotInlineResultDocument
	return m.Data2
}

//// flags
func (m *TLInputBotInlineResultDocument) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultDocument) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultDocument) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultDocument) GetType() string  { return m.Data2.Type }

func (m *TLInputBotInlineResultDocument) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLInputBotInlineResultDocument) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLInputBotInlineResultDocument) SetDescription(v *types.StringValue) {
	m.Data2.Description = v
}
func (m *TLInputBotInlineResultDocument) GetDescription() *types.StringValue {
	return m.Data2.Description
}

func (m *TLInputBotInlineResultDocument) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputBotInlineResultDocument) GetDocument() *InputDocument  { return m.Data2.Document }

func (m *TLInputBotInlineResultDocument) SetSendMessage(v *InputBotInlineMessage) {
	m.Data2.SendMessage = v
}
func (m *TLInputBotInlineResultDocument) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func (m *TLInputBotInlineResultDocument) GetPredicateName() string {
	return Predicate_inputBotInlineResultDocument
}

func (m *TLInputBotInlineResultDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfff8fdc4: func() []byte {
			x.UInt(0xfff8fdc4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTitle() != nil {
					flags |= 1 << 1
				}
				if m.GetDescription() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetId())
			x.String(m.GetType())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			x.Bytes(m.GetDocument().Encode(layer))
			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineResultDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineResultDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineResultDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineResultDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfff8fdc4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.String())
			m.SetType(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			m10 := &InputDocument{}
			m10.Decode(dBuf)
			m.SetDocument(m10)

			m8 := &InputBotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineResultDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineResultGame
func MakeTLInputBotInlineResultGame(data2 *InputBotInlineResult) *TLInputBotInlineResultGame {
	if data2 == nil {
		return &TLInputBotInlineResultGame{Data2: &InputBotInlineResult{
			PredicateName: Predicate_inputBotInlineResultGame,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineResultGame
		return &TLInputBotInlineResultGame{Data2: data2}
	}
}

func (m *TLInputBotInlineResultGame) To_InputBotInlineResult() *InputBotInlineResult {
	m.Data2.PredicateName = Predicate_inputBotInlineResultGame
	return m.Data2
}

func (m *TLInputBotInlineResultGame) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultGame) GetId() string  { return m.Data2.Id }

func (m *TLInputBotInlineResultGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputBotInlineResultGame) GetShortName() string  { return m.Data2.ShortName }

func (m *TLInputBotInlineResultGame) SetSendMessage(v *InputBotInlineMessage) {
	m.Data2.SendMessage = v
}
func (m *TLInputBotInlineResultGame) GetSendMessage() *InputBotInlineMessage {
	return m.Data2.SendMessage
}

func (m *TLInputBotInlineResultGame) GetPredicateName() string {
	return Predicate_inputBotInlineResultGame
}

func (m *TLInputBotInlineResultGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4fa417f2: func() []byte {
			x.UInt(0x4fa417f2)

			x.String(m.GetId())
			x.String(m.GetShortName())
			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineResultGame, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineResultGame, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineResultGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineResultGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4fa417f2: func() error {
			m.SetId(dBuf.String())
			m.SetShortName(dBuf.String())

			m8 := &InputBotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineResultGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputWebDocument <--
//  + TL_InputWebDocument
//

func (m *InputWebDocument) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputWebDocument:
		t := m.To_InputWebDocument()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputWebDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputWebDocument) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9bed434d:
		m2 := MakeTLInputWebDocument(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputWebDocument) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputWebDocument:
		t := m.To_InputWebDocument()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputWebDocument
func (m *InputWebDocument) To_InputWebDocument() *TLInputWebDocument {
	m.PredicateName = Predicate_inputWebDocument
	return &TLInputWebDocument{
		Data2: m,
	}
}

// MakeTLInputWebDocument
func MakeTLInputWebDocument(data2 *InputWebDocument) *TLInputWebDocument {
	if data2 == nil {
		return &TLInputWebDocument{Data2: &InputWebDocument{
			PredicateName: Predicate_inputWebDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputWebDocument
		return &TLInputWebDocument{Data2: data2}
	}
}

func (m *TLInputWebDocument) To_InputWebDocument() *InputWebDocument {
	m.Data2.PredicateName = Predicate_inputWebDocument
	return m.Data2
}

func (m *TLInputWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebDocument) GetUrl() string  { return m.Data2.Url }

func (m *TLInputWebDocument) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLInputWebDocument) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLInputWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputWebDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLInputWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputWebDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func (m *TLInputWebDocument) GetPredicateName() string {
	return Predicate_inputWebDocument
}

func (m *TLInputWebDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9bed434d: func() []byte {
			x.UInt(0x9bed434d)

			x.String(m.GetUrl())
			x.Int(m.GetSize2())
			x.String(m.GetMimeType())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAttributes())))
			for _, v := range m.GetAttributes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWebDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWebDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWebDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWebDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9bed434d: func() error {
			m.SetUrl(dBuf.String())
			m.SetSize2(dBuf.Int())
			m.SetMimeType(dBuf.String())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*DocumentAttribute, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &DocumentAttribute{}
				v3[i].Decode(dBuf)
			}
			m.SetAttributes(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWebDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_PhoneCall <--
//  + TL_PhonePhoneCall
//

func (m *Phone_PhoneCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_phoneCall:
		t := m.To_PhonePhoneCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_PhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_PhoneCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xec82e140:
		m2 := MakeTLPhonePhoneCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_PhoneCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_phoneCall:
		t := m.To_PhonePhoneCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhonePhoneCall
func (m *Phone_PhoneCall) To_PhonePhoneCall() *TLPhonePhoneCall {
	m.PredicateName = Predicate_phone_phoneCall
	return &TLPhonePhoneCall{
		Data2: m,
	}
}

// MakeTLPhonePhoneCall
func MakeTLPhonePhoneCall(data2 *Phone_PhoneCall) *TLPhonePhoneCall {
	if data2 == nil {
		return &TLPhonePhoneCall{Data2: &Phone_PhoneCall{
			PredicateName: Predicate_phone_phoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_phone_phoneCall
		return &TLPhonePhoneCall{Data2: data2}
	}
}

func (m *TLPhonePhoneCall) To_Phone_PhoneCall() *Phone_PhoneCall {
	m.Data2.PredicateName = Predicate_phone_phoneCall
	return m.Data2
}

func (m *TLPhonePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLPhonePhoneCall) GetPhoneCall() *PhoneCall  { return m.Data2.PhoneCall }

func (m *TLPhonePhoneCall) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhonePhoneCall) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhonePhoneCall) GetPredicateName() string {
	return Predicate_phone_phoneCall
}

func (m *TLPhonePhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xec82e140: func() []byte {
			x.UInt(0xec82e140)

			x.Bytes(m.GetPhoneCall().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_phoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_phoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhonePhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhonePhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xec82e140: func() error {

			m0 := &PhoneCall{}
			m0.Decode(dBuf)
			m.SetPhoneCall(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhonePhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PopularContact <--
//  + TL_PopularContact
//

func (m *PopularContact) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_popularContact:
		t := m.To_PopularContact()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PopularContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *PopularContact) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5ce14175:
		m2 := MakeTLPopularContact(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PopularContact) DebugString() string {
	switch m.PredicateName {
	case Predicate_popularContact:
		t := m.To_PopularContact()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PopularContact
func (m *PopularContact) To_PopularContact() *TLPopularContact {
	m.PredicateName = Predicate_popularContact
	return &TLPopularContact{
		Data2: m,
	}
}

// MakeTLPopularContact
func MakeTLPopularContact(data2 *PopularContact) *TLPopularContact {
	if data2 == nil {
		return &TLPopularContact{Data2: &PopularContact{
			PredicateName: Predicate_popularContact,
		}}
	} else {
		data2.PredicateName = Predicate_popularContact
		return &TLPopularContact{Data2: data2}
	}
}

func (m *TLPopularContact) To_PopularContact() *PopularContact {
	m.Data2.PredicateName = Predicate_popularContact
	return m.Data2
}

func (m *TLPopularContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLPopularContact) GetClientId() int64  { return m.Data2.ClientId }

func (m *TLPopularContact) SetImporters(v int32) { m.Data2.Importers = v }
func (m *TLPopularContact) GetImporters() int32  { return m.Data2.Importers }

func (m *TLPopularContact) GetPredicateName() string {
	return Predicate_popularContact
}

func (m *TLPopularContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5ce14175: func() []byte {
			x.UInt(0x5ce14175)

			x.Long(m.GetClientId())
			x.Int(m.GetImporters())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_popularContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_popularContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPopularContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPopularContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5ce14175: func() error {
			m.SetClientId(dBuf.Long())
			m.SetImporters(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPopularContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_HistoryImport <--
//  + TL_MessagesHistoryImport
//

func (m *Messages_HistoryImport) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_historyImport:
		t := m.To_MessagesHistoryImport()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_HistoryImport) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_HistoryImport) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1662af0b:
		m2 := MakeTLMessagesHistoryImport(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_HistoryImport) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_historyImport:
		t := m.To_MessagesHistoryImport()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesHistoryImport
func (m *Messages_HistoryImport) To_MessagesHistoryImport() *TLMessagesHistoryImport {
	m.PredicateName = Predicate_messages_historyImport
	return &TLMessagesHistoryImport{
		Data2: m,
	}
}

// MakeTLMessagesHistoryImport
func MakeTLMessagesHistoryImport(data2 *Messages_HistoryImport) *TLMessagesHistoryImport {
	if data2 == nil {
		return &TLMessagesHistoryImport{Data2: &Messages_HistoryImport{
			PredicateName: Predicate_messages_historyImport,
		}}
	} else {
		data2.PredicateName = Predicate_messages_historyImport
		return &TLMessagesHistoryImport{Data2: data2}
	}
}

func (m *TLMessagesHistoryImport) To_Messages_HistoryImport() *Messages_HistoryImport {
	m.Data2.PredicateName = Predicate_messages_historyImport
	return m.Data2
}

func (m *TLMessagesHistoryImport) SetId(v int64) { m.Data2.Id = v }
func (m *TLMessagesHistoryImport) GetId() int64  { return m.Data2.Id }

func (m *TLMessagesHistoryImport) GetPredicateName() string {
	return Predicate_messages_historyImport
}

func (m *TLMessagesHistoryImport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1662af0b: func() []byte {
			x.UInt(0x1662af0b)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_historyImport, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_historyImport, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesHistoryImport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHistoryImport) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1662af0b: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesHistoryImport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// NotifyPeer <--
//  + TL_NotifyPeer
//  + TL_NotifyUsers
//  + TL_NotifyChats
//  + TL_NotifyBroadcasts
//

func (m *NotifyPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_notifyPeer:
		t := m.To_NotifyPeer()
		xBuf = t.Encode(layer)
	case Predicate_notifyUsers:
		t := m.To_NotifyUsers()
		xBuf = t.Encode(layer)
	case Predicate_notifyChats:
		t := m.To_NotifyChats()
		xBuf = t.Encode(layer)
	case Predicate_notifyBroadcasts:
		t := m.To_NotifyBroadcasts()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *NotifyPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *NotifyPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9fd40bd8:
		m2 := MakeTLNotifyPeer(m)
		m2.Decode(dBuf)
	case 0xb4c83b4c:
		m2 := MakeTLNotifyUsers(m)
		m2.Decode(dBuf)
	case 0xc007cec3:
		m2 := MakeTLNotifyChats(m)
		m2.Decode(dBuf)
	case 0xd612e8ef:
		m2 := MakeTLNotifyBroadcasts(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *NotifyPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_notifyPeer:
		t := m.To_NotifyPeer()
		return t.DebugString()
	case Predicate_notifyUsers:
		t := m.To_NotifyUsers()
		return t.DebugString()
	case Predicate_notifyChats:
		t := m.To_NotifyChats()
		return t.DebugString()
	case Predicate_notifyBroadcasts:
		t := m.To_NotifyBroadcasts()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_NotifyPeer
func (m *NotifyPeer) To_NotifyPeer() *TLNotifyPeer {
	m.PredicateName = Predicate_notifyPeer
	return &TLNotifyPeer{
		Data2: m,
	}
}

// To_NotifyUsers
func (m *NotifyPeer) To_NotifyUsers() *TLNotifyUsers {
	m.PredicateName = Predicate_notifyUsers
	return &TLNotifyUsers{
		Data2: m,
	}
}

// To_NotifyChats
func (m *NotifyPeer) To_NotifyChats() *TLNotifyChats {
	m.PredicateName = Predicate_notifyChats
	return &TLNotifyChats{
		Data2: m,
	}
}

// To_NotifyBroadcasts
func (m *NotifyPeer) To_NotifyBroadcasts() *TLNotifyBroadcasts {
	m.PredicateName = Predicate_notifyBroadcasts
	return &TLNotifyBroadcasts{
		Data2: m,
	}
}

// MakeTLNotifyPeer
func MakeTLNotifyPeer(data2 *NotifyPeer) *TLNotifyPeer {
	if data2 == nil {
		return &TLNotifyPeer{Data2: &NotifyPeer{
			PredicateName: Predicate_notifyPeer,
		}}
	} else {
		data2.PredicateName = Predicate_notifyPeer
		return &TLNotifyPeer{Data2: data2}
	}
}

func (m *TLNotifyPeer) To_NotifyPeer() *NotifyPeer {
	m.Data2.PredicateName = Predicate_notifyPeer
	return m.Data2
}

func (m *TLNotifyPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLNotifyPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLNotifyPeer) GetPredicateName() string {
	return Predicate_notifyPeer
}

func (m *TLNotifyPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9fd40bd8: func() []byte {
			x.UInt(0x9fd40bd8)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_notifyPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_notifyPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNotifyPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNotifyPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9fd40bd8: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNotifyPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLNotifyUsers
func MakeTLNotifyUsers(data2 *NotifyPeer) *TLNotifyUsers {
	if data2 == nil {
		return &TLNotifyUsers{Data2: &NotifyPeer{
			PredicateName: Predicate_notifyUsers,
		}}
	} else {
		data2.PredicateName = Predicate_notifyUsers
		return &TLNotifyUsers{Data2: data2}
	}
}

func (m *TLNotifyUsers) To_NotifyPeer() *NotifyPeer {
	m.Data2.PredicateName = Predicate_notifyUsers
	return m.Data2
}

func (m *TLNotifyUsers) GetPredicateName() string {
	return Predicate_notifyUsers
}

func (m *TLNotifyUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb4c83b4c: func() []byte {
			x.UInt(0xb4c83b4c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_notifyUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_notifyUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNotifyUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNotifyUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb4c83b4c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNotifyUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLNotifyChats
func MakeTLNotifyChats(data2 *NotifyPeer) *TLNotifyChats {
	if data2 == nil {
		return &TLNotifyChats{Data2: &NotifyPeer{
			PredicateName: Predicate_notifyChats,
		}}
	} else {
		data2.PredicateName = Predicate_notifyChats
		return &TLNotifyChats{Data2: data2}
	}
}

func (m *TLNotifyChats) To_NotifyPeer() *NotifyPeer {
	m.Data2.PredicateName = Predicate_notifyChats
	return m.Data2
}

func (m *TLNotifyChats) GetPredicateName() string {
	return Predicate_notifyChats
}

func (m *TLNotifyChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc007cec3: func() []byte {
			x.UInt(0xc007cec3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_notifyChats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_notifyChats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNotifyChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNotifyChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc007cec3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNotifyChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLNotifyBroadcasts
func MakeTLNotifyBroadcasts(data2 *NotifyPeer) *TLNotifyBroadcasts {
	if data2 == nil {
		return &TLNotifyBroadcasts{Data2: &NotifyPeer{
			PredicateName: Predicate_notifyBroadcasts,
		}}
	} else {
		data2.PredicateName = Predicate_notifyBroadcasts
		return &TLNotifyBroadcasts{Data2: data2}
	}
}

func (m *TLNotifyBroadcasts) To_NotifyPeer() *NotifyPeer {
	m.Data2.PredicateName = Predicate_notifyBroadcasts
	return m.Data2
}

func (m *TLNotifyBroadcasts) GetPredicateName() string {
	return Predicate_notifyBroadcasts
}

func (m *TLNotifyBroadcasts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd612e8ef: func() []byte {
			x.UInt(0xd612e8ef)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_notifyBroadcasts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_notifyBroadcasts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNotifyBroadcasts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNotifyBroadcasts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd612e8ef: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNotifyBroadcasts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Authorization <--
//  + TL_Authorization
//

func (m *Authorization) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_authorization:
		t := m.To_Authorization()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Authorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *Authorization) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xad01d61d:
		m2 := MakeTLAuthorization(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Authorization) DebugString() string {
	switch m.PredicateName {
	case Predicate_authorization:
		t := m.To_Authorization()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Authorization
func (m *Authorization) To_Authorization() *TLAuthorization {
	m.PredicateName = Predicate_authorization
	return &TLAuthorization{
		Data2: m,
	}
}

// MakeTLAuthorization
func MakeTLAuthorization(data2 *Authorization) *TLAuthorization {
	if data2 == nil {
		return &TLAuthorization{Data2: &Authorization{
			PredicateName: Predicate_authorization,
		}}
	} else {
		data2.PredicateName = Predicate_authorization
		return &TLAuthorization{Data2: data2}
	}
}

func (m *TLAuthorization) To_Authorization() *Authorization {
	m.Data2.PredicateName = Predicate_authorization
	return m.Data2
}

//// flags
func (m *TLAuthorization) SetCurrent(v bool) { m.Data2.Current = v }
func (m *TLAuthorization) GetCurrent() bool  { return m.Data2.Current }

func (m *TLAuthorization) SetOfficialApp(v bool) { m.Data2.OfficialApp = v }
func (m *TLAuthorization) GetOfficialApp() bool  { return m.Data2.OfficialApp }

func (m *TLAuthorization) SetPasswordPending(v bool) { m.Data2.PasswordPending = v }
func (m *TLAuthorization) GetPasswordPending() bool  { return m.Data2.PasswordPending }

func (m *TLAuthorization) SetEncryptedRequestsDisabled(v bool) { m.Data2.EncryptedRequestsDisabled = v }
func (m *TLAuthorization) GetEncryptedRequestsDisabled() bool {
	return m.Data2.EncryptedRequestsDisabled
}

func (m *TLAuthorization) SetCallRequestsDisabled(v bool) { m.Data2.CallRequestsDisabled = v }
func (m *TLAuthorization) GetCallRequestsDisabled() bool  { return m.Data2.CallRequestsDisabled }

func (m *TLAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAuthorization) GetHash() int64  { return m.Data2.Hash }

func (m *TLAuthorization) SetDeviceModel(v string) { m.Data2.DeviceModel = v }
func (m *TLAuthorization) GetDeviceModel() string  { return m.Data2.DeviceModel }

func (m *TLAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLAuthorization) GetPlatform() string  { return m.Data2.Platform }

func (m *TLAuthorization) SetSystemVersion(v string) { m.Data2.SystemVersion = v }
func (m *TLAuthorization) GetSystemVersion() string  { return m.Data2.SystemVersion }

func (m *TLAuthorization) SetApiId(v int32) { m.Data2.ApiId = v }
func (m *TLAuthorization) GetApiId() int32  { return m.Data2.ApiId }

func (m *TLAuthorization) SetAppName(v string) { m.Data2.AppName = v }
func (m *TLAuthorization) GetAppName() string  { return m.Data2.AppName }

func (m *TLAuthorization) SetAppVersion(v string) { m.Data2.AppVersion = v }
func (m *TLAuthorization) GetAppVersion() string  { return m.Data2.AppVersion }

func (m *TLAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLAuthorization) GetDateCreated() int32  { return m.Data2.DateCreated }

func (m *TLAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLAuthorization) GetDateActive() int32  { return m.Data2.DateActive }

func (m *TLAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLAuthorization) GetIp() string  { return m.Data2.Ip }

func (m *TLAuthorization) SetCountry(v string) { m.Data2.Country = v }
func (m *TLAuthorization) GetCountry() string  { return m.Data2.Country }

func (m *TLAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLAuthorization) GetRegion() string  { return m.Data2.Region }

func (m *TLAuthorization) GetPredicateName() string {
	return Predicate_authorization
}

func (m *TLAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xad01d61d: func() []byte {
			x.UInt(0xad01d61d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCurrent() == true {
					flags |= 1 << 0
				}
				if m.GetOfficialApp() == true {
					flags |= 1 << 1
				}
				if m.GetPasswordPending() == true {
					flags |= 1 << 2
				}
				if m.GetEncryptedRequestsDisabled() == true {
					flags |= 1 << 3
				}
				if m.GetCallRequestsDisabled() == true {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetHash())
			x.String(m.GetDeviceModel())
			x.String(m.GetPlatform())
			x.String(m.GetSystemVersion())
			x.Int(m.GetApiId())
			x.String(m.GetAppName())
			x.String(m.GetAppVersion())
			x.Int(m.GetDateCreated())
			x.Int(m.GetDateActive())
			x.String(m.GetIp())
			x.String(m.GetCountry())
			x.String(m.GetRegion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_authorization, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_authorization, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthorization) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xad01d61d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCurrent(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetOfficialApp(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetPasswordPending(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetEncryptedRequestsDisabled(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetCallRequestsDisabled(true)
			}
			m.SetHash(dBuf.Long())
			m.SetDeviceModel(dBuf.String())
			m.SetPlatform(dBuf.String())
			m.SetSystemVersion(dBuf.String())
			m.SetApiId(dBuf.Int())
			m.SetAppName(dBuf.String())
			m.SetAppVersion(dBuf.String())
			m.SetDateCreated(dBuf.Int())
			m.SetDateActive(dBuf.Int())
			m.SetIp(dBuf.String())
			m.SetCountry(dBuf.String())
			m.SetRegion(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// CdnPublicKey <--
//  + TL_CdnPublicKey
//

func (m *CdnPublicKey) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_cdnPublicKey:
		t := m.To_CdnPublicKey()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *CdnPublicKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *CdnPublicKey) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc982eaba:
		m2 := MakeTLCdnPublicKey(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *CdnPublicKey) DebugString() string {
	switch m.PredicateName {
	case Predicate_cdnPublicKey:
		t := m.To_CdnPublicKey()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_CdnPublicKey
func (m *CdnPublicKey) To_CdnPublicKey() *TLCdnPublicKey {
	m.PredicateName = Predicate_cdnPublicKey
	return &TLCdnPublicKey{
		Data2: m,
	}
}

// MakeTLCdnPublicKey
func MakeTLCdnPublicKey(data2 *CdnPublicKey) *TLCdnPublicKey {
	if data2 == nil {
		return &TLCdnPublicKey{Data2: &CdnPublicKey{
			PredicateName: Predicate_cdnPublicKey,
		}}
	} else {
		data2.PredicateName = Predicate_cdnPublicKey
		return &TLCdnPublicKey{Data2: data2}
	}
}

func (m *TLCdnPublicKey) To_CdnPublicKey() *CdnPublicKey {
	m.Data2.PredicateName = Predicate_cdnPublicKey
	return m.Data2
}

func (m *TLCdnPublicKey) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLCdnPublicKey) GetDcId() int32  { return m.Data2.DcId }

func (m *TLCdnPublicKey) SetPublicKey(v string) { m.Data2.PublicKey = v }
func (m *TLCdnPublicKey) GetPublicKey() string  { return m.Data2.PublicKey }

func (m *TLCdnPublicKey) GetPredicateName() string {
	return Predicate_cdnPublicKey
}

func (m *TLCdnPublicKey) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc982eaba: func() []byte {
			x.UInt(0xc982eaba)

			x.Int(m.GetDcId())
			x.String(m.GetPublicKey())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_cdnPublicKey, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_cdnPublicKey, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLCdnPublicKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLCdnPublicKey) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc982eaba: func() error {
			m.SetDcId(dBuf.Int())
			m.SetPublicKey(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLCdnPublicKey) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PeerLocated <--
//  + TL_PeerLocated
//  + TL_PeerSelfLocated
//

func (m *PeerLocated) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerLocated:
		t := m.To_PeerLocated()
		xBuf = t.Encode(layer)
	case Predicate_peerSelfLocated:
		t := m.To_PeerSelfLocated()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PeerLocated) CalcByteSize(layer int32) int {
	return 0
}

func (m *PeerLocated) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xca461b5d:
		m2 := MakeTLPeerLocated(m)
		m2.Decode(dBuf)
	case 0xf8ec284b:
		m2 := MakeTLPeerSelfLocated(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PeerLocated) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerLocated:
		t := m.To_PeerLocated()
		return t.DebugString()
	case Predicate_peerSelfLocated:
		t := m.To_PeerSelfLocated()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerLocated
func (m *PeerLocated) To_PeerLocated() *TLPeerLocated {
	m.PredicateName = Predicate_peerLocated
	return &TLPeerLocated{
		Data2: m,
	}
}

// To_PeerSelfLocated
func (m *PeerLocated) To_PeerSelfLocated() *TLPeerSelfLocated {
	m.PredicateName = Predicate_peerSelfLocated
	return &TLPeerSelfLocated{
		Data2: m,
	}
}

// MakeTLPeerLocated
func MakeTLPeerLocated(data2 *PeerLocated) *TLPeerLocated {
	if data2 == nil {
		return &TLPeerLocated{Data2: &PeerLocated{
			PredicateName: Predicate_peerLocated,
		}}
	} else {
		data2.PredicateName = Predicate_peerLocated
		return &TLPeerLocated{Data2: data2}
	}
}

func (m *TLPeerLocated) To_PeerLocated() *PeerLocated {
	m.Data2.PredicateName = Predicate_peerLocated
	return m.Data2
}

func (m *TLPeerLocated) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLPeerLocated) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLPeerLocated) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLPeerLocated) GetExpires() int32  { return m.Data2.Expires }

func (m *TLPeerLocated) SetDistance(v int32) { m.Data2.Distance = v }
func (m *TLPeerLocated) GetDistance() int32  { return m.Data2.Distance }

func (m *TLPeerLocated) GetPredicateName() string {
	return Predicate_peerLocated
}

func (m *TLPeerLocated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xca461b5d: func() []byte {
			x.UInt(0xca461b5d)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetExpires())
			x.Int(m.GetDistance())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerLocated, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerLocated, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerLocated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerLocated) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xca461b5d: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			m.SetExpires(dBuf.Int())
			m.SetDistance(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerLocated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPeerSelfLocated
func MakeTLPeerSelfLocated(data2 *PeerLocated) *TLPeerSelfLocated {
	if data2 == nil {
		return &TLPeerSelfLocated{Data2: &PeerLocated{
			PredicateName: Predicate_peerSelfLocated,
		}}
	} else {
		data2.PredicateName = Predicate_peerSelfLocated
		return &TLPeerSelfLocated{Data2: data2}
	}
}

func (m *TLPeerSelfLocated) To_PeerLocated() *PeerLocated {
	m.Data2.PredicateName = Predicate_peerSelfLocated
	return m.Data2
}

func (m *TLPeerSelfLocated) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLPeerSelfLocated) GetExpires() int32  { return m.Data2.Expires }

func (m *TLPeerSelfLocated) GetPredicateName() string {
	return Predicate_peerSelfLocated
}

func (m *TLPeerSelfLocated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf8ec284b: func() []byte {
			x.UInt(0xf8ec284b)

			x.Int(m.GetExpires())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerSelfLocated, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerSelfLocated, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerSelfLocated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerSelfLocated) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf8ec284b: func() error {
			m.SetExpires(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerSelfLocated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SearchResultsCalendarPeriod <--
//  + TL_SearchResultsCalendarPeriod
//

func (m *SearchResultsCalendarPeriod) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_searchResultsCalendarPeriod:
		t := m.To_SearchResultsCalendarPeriod()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SearchResultsCalendarPeriod) CalcByteSize(layer int32) int {
	return 0
}

func (m *SearchResultsCalendarPeriod) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc9b0539f:
		m2 := MakeTLSearchResultsCalendarPeriod(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SearchResultsCalendarPeriod) DebugString() string {
	switch m.PredicateName {
	case Predicate_searchResultsCalendarPeriod:
		t := m.To_SearchResultsCalendarPeriod()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SearchResultsCalendarPeriod
func (m *SearchResultsCalendarPeriod) To_SearchResultsCalendarPeriod() *TLSearchResultsCalendarPeriod {
	m.PredicateName = Predicate_searchResultsCalendarPeriod
	return &TLSearchResultsCalendarPeriod{
		Data2: m,
	}
}

// MakeTLSearchResultsCalendarPeriod
func MakeTLSearchResultsCalendarPeriod(data2 *SearchResultsCalendarPeriod) *TLSearchResultsCalendarPeriod {
	if data2 == nil {
		return &TLSearchResultsCalendarPeriod{Data2: &SearchResultsCalendarPeriod{
			PredicateName: Predicate_searchResultsCalendarPeriod,
		}}
	} else {
		data2.PredicateName = Predicate_searchResultsCalendarPeriod
		return &TLSearchResultsCalendarPeriod{Data2: data2}
	}
}

func (m *TLSearchResultsCalendarPeriod) To_SearchResultsCalendarPeriod() *SearchResultsCalendarPeriod {
	m.Data2.PredicateName = Predicate_searchResultsCalendarPeriod
	return m.Data2
}

func (m *TLSearchResultsCalendarPeriod) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSearchResultsCalendarPeriod) GetDate() int32  { return m.Data2.Date }

func (m *TLSearchResultsCalendarPeriod) SetMinMsgId(v int32) { m.Data2.MinMsgId = v }
func (m *TLSearchResultsCalendarPeriod) GetMinMsgId() int32  { return m.Data2.MinMsgId }

func (m *TLSearchResultsCalendarPeriod) SetMaxMsgId(v int32) { m.Data2.MaxMsgId = v }
func (m *TLSearchResultsCalendarPeriod) GetMaxMsgId() int32  { return m.Data2.MaxMsgId }

func (m *TLSearchResultsCalendarPeriod) SetCount(v int32) { m.Data2.Count = v }
func (m *TLSearchResultsCalendarPeriod) GetCount() int32  { return m.Data2.Count }

func (m *TLSearchResultsCalendarPeriod) GetPredicateName() string {
	return Predicate_searchResultsCalendarPeriod
}

func (m *TLSearchResultsCalendarPeriod) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc9b0539f: func() []byte {
			x.UInt(0xc9b0539f)

			x.Int(m.GetDate())
			x.Int(m.GetMinMsgId())
			x.Int(m.GetMaxMsgId())
			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_searchResultsCalendarPeriod, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_searchResultsCalendarPeriod, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSearchResultsCalendarPeriod) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSearchResultsCalendarPeriod) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc9b0539f: func() error {
			m.SetDate(dBuf.Int())
			m.SetMinMsgId(dBuf.Int())
			m.SetMaxMsgId(dBuf.Int())
			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSearchResultsCalendarPeriod) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SearchResultsCalendar <--
//  + TL_MessagesSearchResultsCalendar
//

func (m *Messages_SearchResultsCalendar) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_searchResultsCalendar:
		t := m.To_MessagesSearchResultsCalendar()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SearchResultsCalendar) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SearchResultsCalendar) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x147ee23c:
		m2 := MakeTLMessagesSearchResultsCalendar(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SearchResultsCalendar) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_searchResultsCalendar:
		t := m.To_MessagesSearchResultsCalendar()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSearchResultsCalendar
func (m *Messages_SearchResultsCalendar) To_MessagesSearchResultsCalendar() *TLMessagesSearchResultsCalendar {
	m.PredicateName = Predicate_messages_searchResultsCalendar
	return &TLMessagesSearchResultsCalendar{
		Data2: m,
	}
}

// MakeTLMessagesSearchResultsCalendar
func MakeTLMessagesSearchResultsCalendar(data2 *Messages_SearchResultsCalendar) *TLMessagesSearchResultsCalendar {
	if data2 == nil {
		return &TLMessagesSearchResultsCalendar{Data2: &Messages_SearchResultsCalendar{
			PredicateName: Predicate_messages_searchResultsCalendar,
		}}
	} else {
		data2.PredicateName = Predicate_messages_searchResultsCalendar
		return &TLMessagesSearchResultsCalendar{Data2: data2}
	}
}

func (m *TLMessagesSearchResultsCalendar) To_Messages_SearchResultsCalendar() *Messages_SearchResultsCalendar {
	m.Data2.PredicateName = Predicate_messages_searchResultsCalendar
	return m.Data2
}

//// flags
func (m *TLMessagesSearchResultsCalendar) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessagesSearchResultsCalendar) GetInexact() bool  { return m.Data2.Inexact }

func (m *TLMessagesSearchResultsCalendar) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesSearchResultsCalendar) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesSearchResultsCalendar) SetMinDate(v int32) { m.Data2.MinDate = v }
func (m *TLMessagesSearchResultsCalendar) GetMinDate() int32  { return m.Data2.MinDate }

func (m *TLMessagesSearchResultsCalendar) SetMinMsgId(v int32) { m.Data2.MinMsgId = v }
func (m *TLMessagesSearchResultsCalendar) GetMinMsgId() int32  { return m.Data2.MinMsgId }

func (m *TLMessagesSearchResultsCalendar) SetOffsetIdOffset(v *types.Int32Value) {
	m.Data2.OffsetIdOffset = v
}
func (m *TLMessagesSearchResultsCalendar) GetOffsetIdOffset() *types.Int32Value {
	return m.Data2.OffsetIdOffset
}

func (m *TLMessagesSearchResultsCalendar) SetPeriods(v []*SearchResultsCalendarPeriod) {
	m.Data2.Periods = v
}
func (m *TLMessagesSearchResultsCalendar) GetPeriods() []*SearchResultsCalendarPeriod {
	return m.Data2.Periods
}

func (m *TLMessagesSearchResultsCalendar) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesSearchResultsCalendar) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesSearchResultsCalendar) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesSearchResultsCalendar) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesSearchResultsCalendar) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesSearchResultsCalendar) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesSearchResultsCalendar) GetPredicateName() string {
	return Predicate_messages_searchResultsCalendar
}

func (m *TLMessagesSearchResultsCalendar) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x147ee23c: func() []byte {
			x.UInt(0x147ee23c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInexact() == true {
					flags |= 1 << 0
				}

				if m.GetOffsetIdOffset() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetCount())
			x.Int(m.GetMinDate())
			x.Int(m.GetMinMsgId())
			if m.GetOffsetIdOffset() != nil {
				x.Int(m.GetOffsetIdOffset().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPeriods())))
			for _, v := range m.GetPeriods() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_searchResultsCalendar, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_searchResultsCalendar, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchResultsCalendar) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchResultsCalendar) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x147ee23c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetInexact(true)
			}
			m.SetCount(dBuf.Int())
			m.SetMinDate(dBuf.Int())
			m.SetMinMsgId(dBuf.Int())
			if (flags & (1 << 1)) != 0 {
				m.SetOffsetIdOffset(&types.Int32Value{Value: dBuf.Int()})
			}

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*SearchResultsCalendarPeriod, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &SearchResultsCalendarPeriod{}
				v6[i].Decode(dBuf)
			}
			m.SetPeriods(v6)

			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*Message, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &Message{}
				v7[i].Decode(dBuf)
			}
			m.SetMessages(v7)

			c8 := dBuf.Int()
			if c8 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
				return dBuf.GetError()
			}
			l8 := dBuf.Int()
			v8 := make([]*Chat, l8)
			for i := int32(0); i < l8; i++ {
				v8[i] = &Chat{}
				v8[i].Decode(dBuf)
			}
			m.SetChats(v8)

			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*User, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &User{}
				v9[i].Decode(dBuf)
			}
			m.SetUsers(v9)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSearchResultsCalendar) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_GroupCallStreamChannels <--
//  + TL_PhoneGroupCallStreamChannels
//

func (m *Phone_GroupCallStreamChannels) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_groupCallStreamChannels:
		t := m.To_PhoneGroupCallStreamChannels()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_GroupCallStreamChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_GroupCallStreamChannels) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd0e482b2:
		m2 := MakeTLPhoneGroupCallStreamChannels(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_GroupCallStreamChannels) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_groupCallStreamChannels:
		t := m.To_PhoneGroupCallStreamChannels()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneGroupCallStreamChannels
func (m *Phone_GroupCallStreamChannels) To_PhoneGroupCallStreamChannels() *TLPhoneGroupCallStreamChannels {
	m.PredicateName = Predicate_phone_groupCallStreamChannels
	return &TLPhoneGroupCallStreamChannels{
		Data2: m,
	}
}

// MakeTLPhoneGroupCallStreamChannels
func MakeTLPhoneGroupCallStreamChannels(data2 *Phone_GroupCallStreamChannels) *TLPhoneGroupCallStreamChannels {
	if data2 == nil {
		return &TLPhoneGroupCallStreamChannels{Data2: &Phone_GroupCallStreamChannels{
			PredicateName: Predicate_phone_groupCallStreamChannels,
		}}
	} else {
		data2.PredicateName = Predicate_phone_groupCallStreamChannels
		return &TLPhoneGroupCallStreamChannels{Data2: data2}
	}
}

func (m *TLPhoneGroupCallStreamChannels) To_Phone_GroupCallStreamChannels() *Phone_GroupCallStreamChannels {
	m.Data2.PredicateName = Predicate_phone_groupCallStreamChannels
	return m.Data2
}

func (m *TLPhoneGroupCallStreamChannels) SetChannels(v []*GroupCallStreamChannel) {
	m.Data2.Channels = v
}
func (m *TLPhoneGroupCallStreamChannels) GetChannels() []*GroupCallStreamChannel {
	return m.Data2.Channels
}

func (m *TLPhoneGroupCallStreamChannels) GetPredicateName() string {
	return Predicate_phone_groupCallStreamChannels
}

func (m *TLPhoneGroupCallStreamChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd0e482b2: func() []byte {
			x.UInt(0xd0e482b2)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChannels())))
			for _, v := range m.GetChannels() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_groupCallStreamChannels, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_groupCallStreamChannels, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneGroupCallStreamChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGroupCallStreamChannels) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd0e482b2: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*GroupCallStreamChannel, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &GroupCallStreamChannel{}
				v0[i].Decode(dBuf)
			}
			m.SetChannels(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneGroupCallStreamChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Stickers <--
//  + TL_MessagesStickersNotModified
//  + TL_MessagesStickers
//

func (m *Messages_Stickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_stickersNotModified:
		t := m.To_MessagesStickersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_stickers:
		t := m.To_MessagesStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_Stickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_Stickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf1749a22:
		m2 := MakeTLMessagesStickersNotModified(m)
		m2.Decode(dBuf)
	case 0x30a6ec7e:
		m2 := MakeTLMessagesStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_Stickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_stickersNotModified:
		t := m.To_MessagesStickersNotModified()
		return t.DebugString()
	case Predicate_messages_stickers:
		t := m.To_MessagesStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesStickersNotModified
func (m *Messages_Stickers) To_MessagesStickersNotModified() *TLMessagesStickersNotModified {
	m.PredicateName = Predicate_messages_stickersNotModified
	return &TLMessagesStickersNotModified{
		Data2: m,
	}
}

// To_MessagesStickers
func (m *Messages_Stickers) To_MessagesStickers() *TLMessagesStickers {
	m.PredicateName = Predicate_messages_stickers
	return &TLMessagesStickers{
		Data2: m,
	}
}

// MakeTLMessagesStickersNotModified
func MakeTLMessagesStickersNotModified(data2 *Messages_Stickers) *TLMessagesStickersNotModified {
	if data2 == nil {
		return &TLMessagesStickersNotModified{Data2: &Messages_Stickers{
			PredicateName: Predicate_messages_stickersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickersNotModified
		return &TLMessagesStickersNotModified{Data2: data2}
	}
}

func (m *TLMessagesStickersNotModified) To_Messages_Stickers() *Messages_Stickers {
	m.Data2.PredicateName = Predicate_messages_stickersNotModified
	return m.Data2
}

func (m *TLMessagesStickersNotModified) GetPredicateName() string {
	return Predicate_messages_stickersNotModified
}

func (m *TLMessagesStickersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf1749a22: func() []byte {
			x.UInt(0xf1749a22)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf1749a22: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesStickers
func MakeTLMessagesStickers(data2 *Messages_Stickers) *TLMessagesStickers {
	if data2 == nil {
		return &TLMessagesStickers{Data2: &Messages_Stickers{
			PredicateName: Predicate_messages_stickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickers
		return &TLMessagesStickers{Data2: data2}
	}
}

func (m *TLMessagesStickers) To_Messages_Stickers() *Messages_Stickers {
	m.Data2.PredicateName = Predicate_messages_stickers
	return m.Data2
}

func (m *TLMessagesStickers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesStickers) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func (m *TLMessagesStickers) GetPredicateName() string {
	return Predicate_messages_stickers
}

func (m *TLMessagesStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x30a6ec7e: func() []byte {
			x.UInt(0x30a6ec7e)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetStickers())))
			for _, v := range m.GetStickers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x30a6ec7e: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Document, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Document{}
				v1[i].Decode(dBuf)
			}
			m.SetStickers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageRange <--
//  + TL_MessageRange
//

func (m *MessageRange) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageRange:
		t := m.To_MessageRange()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageRange) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageRange) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xae30253:
		m2 := MakeTLMessageRange(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageRange) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageRange:
		t := m.To_MessageRange()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageRange
func (m *MessageRange) To_MessageRange() *TLMessageRange {
	m.PredicateName = Predicate_messageRange
	return &TLMessageRange{
		Data2: m,
	}
}

// MakeTLMessageRange
func MakeTLMessageRange(data2 *MessageRange) *TLMessageRange {
	if data2 == nil {
		return &TLMessageRange{Data2: &MessageRange{
			PredicateName: Predicate_messageRange,
		}}
	} else {
		data2.PredicateName = Predicate_messageRange
		return &TLMessageRange{Data2: data2}
	}
}

func (m *TLMessageRange) To_MessageRange() *MessageRange {
	m.Data2.PredicateName = Predicate_messageRange
	return m.Data2
}

func (m *TLMessageRange) SetMinId(v int32) { m.Data2.MinId = v }
func (m *TLMessageRange) GetMinId() int32  { return m.Data2.MinId }

func (m *TLMessageRange) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLMessageRange) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLMessageRange) GetPredicateName() string {
	return Predicate_messageRange
}

func (m *TLMessageRange) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xae30253: func() []byte {
			x.UInt(0xae30253)

			x.Int(m.GetMinId())
			x.Int(m.GetMaxId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageRange, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageRange, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageRange) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageRange) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xae30253: func() error {
			m.SetMinId(dBuf.Int())
			m.SetMaxId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageRange) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PaymentSavedCredentials <--
//  + TL_PaymentSavedCredentialsCard
//

func (m *PaymentSavedCredentials) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_paymentSavedCredentialsCard:
		t := m.To_PaymentSavedCredentialsCard()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PaymentSavedCredentials) CalcByteSize(layer int32) int {
	return 0
}

func (m *PaymentSavedCredentials) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcdc27a1f:
		m2 := MakeTLPaymentSavedCredentialsCard(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PaymentSavedCredentials) DebugString() string {
	switch m.PredicateName {
	case Predicate_paymentSavedCredentialsCard:
		t := m.To_PaymentSavedCredentialsCard()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentSavedCredentialsCard
func (m *PaymentSavedCredentials) To_PaymentSavedCredentialsCard() *TLPaymentSavedCredentialsCard {
	m.PredicateName = Predicate_paymentSavedCredentialsCard
	return &TLPaymentSavedCredentialsCard{
		Data2: m,
	}
}

// MakeTLPaymentSavedCredentialsCard
func MakeTLPaymentSavedCredentialsCard(data2 *PaymentSavedCredentials) *TLPaymentSavedCredentialsCard {
	if data2 == nil {
		return &TLPaymentSavedCredentialsCard{Data2: &PaymentSavedCredentials{
			PredicateName: Predicate_paymentSavedCredentialsCard,
		}}
	} else {
		data2.PredicateName = Predicate_paymentSavedCredentialsCard
		return &TLPaymentSavedCredentialsCard{Data2: data2}
	}
}

func (m *TLPaymentSavedCredentialsCard) To_PaymentSavedCredentials() *PaymentSavedCredentials {
	m.Data2.PredicateName = Predicate_paymentSavedCredentialsCard
	return m.Data2
}

func (m *TLPaymentSavedCredentialsCard) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentSavedCredentialsCard) GetId() string  { return m.Data2.Id }

func (m *TLPaymentSavedCredentialsCard) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentSavedCredentialsCard) GetTitle() string  { return m.Data2.Title }

func (m *TLPaymentSavedCredentialsCard) GetPredicateName() string {
	return Predicate_paymentSavedCredentialsCard
}

func (m *TLPaymentSavedCredentialsCard) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcdc27a1f: func() []byte {
			x.UInt(0xcdc27a1f)

			x.String(m.GetId())
			x.String(m.GetTitle())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_paymentSavedCredentialsCard, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_paymentSavedCredentialsCard, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentSavedCredentialsCard) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentSavedCredentialsCard) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcdc27a1f: func() error {
			m.SetId(dBuf.String())
			m.SetTitle(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentSavedCredentialsCard) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DialogPeer <--
//  + TL_DialogPeer
//  + TL_DialogPeerFolder
//

func (m *DialogPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dialogPeer:
		t := m.To_DialogPeer()
		xBuf = t.Encode(layer)
	case Predicate_dialogPeerFolder:
		t := m.To_DialogPeerFolder()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DialogPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *DialogPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe56dbf05:
		m2 := MakeTLDialogPeer(m)
		m2.Decode(dBuf)
	case 0x514519e2:
		m2 := MakeTLDialogPeerFolder(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DialogPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_dialogPeer:
		t := m.To_DialogPeer()
		return t.DebugString()
	case Predicate_dialogPeerFolder:
		t := m.To_DialogPeerFolder()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DialogPeer
func (m *DialogPeer) To_DialogPeer() *TLDialogPeer {
	m.PredicateName = Predicate_dialogPeer
	return &TLDialogPeer{
		Data2: m,
	}
}

// To_DialogPeerFolder
func (m *DialogPeer) To_DialogPeerFolder() *TLDialogPeerFolder {
	m.PredicateName = Predicate_dialogPeerFolder
	return &TLDialogPeerFolder{
		Data2: m,
	}
}

// MakeTLDialogPeer
func MakeTLDialogPeer(data2 *DialogPeer) *TLDialogPeer {
	if data2 == nil {
		return &TLDialogPeer{Data2: &DialogPeer{
			PredicateName: Predicate_dialogPeer,
		}}
	} else {
		data2.PredicateName = Predicate_dialogPeer
		return &TLDialogPeer{Data2: data2}
	}
}

func (m *TLDialogPeer) To_DialogPeer() *DialogPeer {
	m.Data2.PredicateName = Predicate_dialogPeer
	return m.Data2
}

func (m *TLDialogPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialogPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLDialogPeer) GetPredicateName() string {
	return Predicate_dialogPeer
}

func (m *TLDialogPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe56dbf05: func() []byte {
			x.UInt(0xe56dbf05)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialogPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialogPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialogPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialogPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe56dbf05: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialogPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDialogPeerFolder
func MakeTLDialogPeerFolder(data2 *DialogPeer) *TLDialogPeerFolder {
	if data2 == nil {
		return &TLDialogPeerFolder{Data2: &DialogPeer{
			PredicateName: Predicate_dialogPeerFolder,
		}}
	} else {
		data2.PredicateName = Predicate_dialogPeerFolder
		return &TLDialogPeerFolder{Data2: data2}
	}
}

func (m *TLDialogPeerFolder) To_DialogPeer() *DialogPeer {
	m.Data2.PredicateName = Predicate_dialogPeerFolder
	return m.Data2
}

func (m *TLDialogPeerFolder) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLDialogPeerFolder) GetFolderId() int32  { return m.Data2.FolderId }

func (m *TLDialogPeerFolder) GetPredicateName() string {
	return Predicate_dialogPeerFolder
}

func (m *TLDialogPeerFolder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x514519e2: func() []byte {
			x.UInt(0x514519e2)

			x.Int(m.GetFolderId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialogPeerFolder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialogPeerFolder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialogPeerFolder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialogPeerFolder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x514519e2: func() error {
			m.SetFolderId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialogPeerFolder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueError <--
//  + TL_SecureValueErrorData
//  + TL_SecureValueErrorFrontSide
//  + TL_SecureValueErrorReverseSide
//  + TL_SecureValueErrorSelfie
//  + TL_SecureValueErrorFile
//  + TL_SecureValueErrorFiles
//  + TL_SecureValueError
//  + TL_SecureValueErrorTranslationFile
//  + TL_SecureValueErrorTranslationFiles
//

func (m *SecureValueError) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureValueErrorData:
		t := m.To_SecureValueErrorData()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorFrontSide:
		t := m.To_SecureValueErrorFrontSide()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorReverseSide:
		t := m.To_SecureValueErrorReverseSide()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorSelfie:
		t := m.To_SecureValueErrorSelfie()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorFile:
		t := m.To_SecureValueErrorFile()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorFiles:
		t := m.To_SecureValueErrorFiles()
		xBuf = t.Encode(layer)
	case Predicate_secureValueError:
		t := m.To_SecureValueError()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorTranslationFile:
		t := m.To_SecureValueErrorTranslationFile()
		xBuf = t.Encode(layer)
	case Predicate_secureValueErrorTranslationFiles:
		t := m.To_SecureValueErrorTranslationFiles()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureValueError) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureValueError) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe8a40bd9:
		m2 := MakeTLSecureValueErrorData(m)
		m2.Decode(dBuf)
	case 0xbe3dfa:
		m2 := MakeTLSecureValueErrorFrontSide(m)
		m2.Decode(dBuf)
	case 0x868a2aa5:
		m2 := MakeTLSecureValueErrorReverseSide(m)
		m2.Decode(dBuf)
	case 0xe537ced6:
		m2 := MakeTLSecureValueErrorSelfie(m)
		m2.Decode(dBuf)
	case 0x7a700873:
		m2 := MakeTLSecureValueErrorFile(m)
		m2.Decode(dBuf)
	case 0x666220e9:
		m2 := MakeTLSecureValueErrorFiles(m)
		m2.Decode(dBuf)
	case 0x869d758f:
		m2 := MakeTLSecureValueError(m)
		m2.Decode(dBuf)
	case 0xa1144770:
		m2 := MakeTLSecureValueErrorTranslationFile(m)
		m2.Decode(dBuf)
	case 0x34636dd8:
		m2 := MakeTLSecureValueErrorTranslationFiles(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureValueError) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureValueErrorData:
		t := m.To_SecureValueErrorData()
		return t.DebugString()
	case Predicate_secureValueErrorFrontSide:
		t := m.To_SecureValueErrorFrontSide()
		return t.DebugString()
	case Predicate_secureValueErrorReverseSide:
		t := m.To_SecureValueErrorReverseSide()
		return t.DebugString()
	case Predicate_secureValueErrorSelfie:
		t := m.To_SecureValueErrorSelfie()
		return t.DebugString()
	case Predicate_secureValueErrorFile:
		t := m.To_SecureValueErrorFile()
		return t.DebugString()
	case Predicate_secureValueErrorFiles:
		t := m.To_SecureValueErrorFiles()
		return t.DebugString()
	case Predicate_secureValueError:
		t := m.To_SecureValueError()
		return t.DebugString()
	case Predicate_secureValueErrorTranslationFile:
		t := m.To_SecureValueErrorTranslationFile()
		return t.DebugString()
	case Predicate_secureValueErrorTranslationFiles:
		t := m.To_SecureValueErrorTranslationFiles()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureValueErrorData
func (m *SecureValueError) To_SecureValueErrorData() *TLSecureValueErrorData {
	m.PredicateName = Predicate_secureValueErrorData
	return &TLSecureValueErrorData{
		Data2: m,
	}
}

// To_SecureValueErrorFrontSide
func (m *SecureValueError) To_SecureValueErrorFrontSide() *TLSecureValueErrorFrontSide {
	m.PredicateName = Predicate_secureValueErrorFrontSide
	return &TLSecureValueErrorFrontSide{
		Data2: m,
	}
}

// To_SecureValueErrorReverseSide
func (m *SecureValueError) To_SecureValueErrorReverseSide() *TLSecureValueErrorReverseSide {
	m.PredicateName = Predicate_secureValueErrorReverseSide
	return &TLSecureValueErrorReverseSide{
		Data2: m,
	}
}

// To_SecureValueErrorSelfie
func (m *SecureValueError) To_SecureValueErrorSelfie() *TLSecureValueErrorSelfie {
	m.PredicateName = Predicate_secureValueErrorSelfie
	return &TLSecureValueErrorSelfie{
		Data2: m,
	}
}

// To_SecureValueErrorFile
func (m *SecureValueError) To_SecureValueErrorFile() *TLSecureValueErrorFile {
	m.PredicateName = Predicate_secureValueErrorFile
	return &TLSecureValueErrorFile{
		Data2: m,
	}
}

// To_SecureValueErrorFiles
func (m *SecureValueError) To_SecureValueErrorFiles() *TLSecureValueErrorFiles {
	m.PredicateName = Predicate_secureValueErrorFiles
	return &TLSecureValueErrorFiles{
		Data2: m,
	}
}

// To_SecureValueError
func (m *SecureValueError) To_SecureValueError() *TLSecureValueError {
	m.PredicateName = Predicate_secureValueError
	return &TLSecureValueError{
		Data2: m,
	}
}

// To_SecureValueErrorTranslationFile
func (m *SecureValueError) To_SecureValueErrorTranslationFile() *TLSecureValueErrorTranslationFile {
	m.PredicateName = Predicate_secureValueErrorTranslationFile
	return &TLSecureValueErrorTranslationFile{
		Data2: m,
	}
}

// To_SecureValueErrorTranslationFiles
func (m *SecureValueError) To_SecureValueErrorTranslationFiles() *TLSecureValueErrorTranslationFiles {
	m.PredicateName = Predicate_secureValueErrorTranslationFiles
	return &TLSecureValueErrorTranslationFiles{
		Data2: m,
	}
}

// MakeTLSecureValueErrorData
func MakeTLSecureValueErrorData(data2 *SecureValueError) *TLSecureValueErrorData {
	if data2 == nil {
		return &TLSecureValueErrorData{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorData,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorData
		return &TLSecureValueErrorData{Data2: data2}
	}
}

func (m *TLSecureValueErrorData) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorData
	return m.Data2
}

func (m *TLSecureValueErrorData) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorData) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureValueErrorData) GetDataHash() []byte  { return m.Data2.DataHash }

func (m *TLSecureValueErrorData) SetField(v string) { m.Data2.Field = v }
func (m *TLSecureValueErrorData) GetField() string  { return m.Data2.Field }

func (m *TLSecureValueErrorData) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorData) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorData) GetPredicateName() string {
	return Predicate_secureValueErrorData
}

func (m *TLSecureValueErrorData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe8a40bd9: func() []byte {
			x.UInt(0xe8a40bd9)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetDataHash())
			x.String(m.GetField())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe8a40bd9: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetDataHash(dBuf.StringBytes())
			m.SetField(dBuf.String())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorFrontSide
func MakeTLSecureValueErrorFrontSide(data2 *SecureValueError) *TLSecureValueErrorFrontSide {
	if data2 == nil {
		return &TLSecureValueErrorFrontSide{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorFrontSide,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorFrontSide
		return &TLSecureValueErrorFrontSide{Data2: data2}
	}
}

func (m *TLSecureValueErrorFrontSide) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorFrontSide
	return m.Data2
}

func (m *TLSecureValueErrorFrontSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFrontSide) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFrontSide) SetFileHash_BYTES(v []byte) { m.Data2.FileHash_BYTES = v }
func (m *TLSecureValueErrorFrontSide) GetFileHash_BYTES() []byte  { return m.Data2.FileHash_BYTES }

func (m *TLSecureValueErrorFrontSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFrontSide) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorFrontSide) GetPredicateName() string {
	return Predicate_secureValueErrorFrontSide
}

func (m *TLSecureValueErrorFrontSide) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbe3dfa: func() []byte {
			x.UInt(0xbe3dfa)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetFileHash_BYTES())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorFrontSide, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorFrontSide, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorFrontSide) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorFrontSide) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbe3dfa: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_BYTES(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorFrontSide) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorReverseSide
func MakeTLSecureValueErrorReverseSide(data2 *SecureValueError) *TLSecureValueErrorReverseSide {
	if data2 == nil {
		return &TLSecureValueErrorReverseSide{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorReverseSide,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorReverseSide
		return &TLSecureValueErrorReverseSide{Data2: data2}
	}
}

func (m *TLSecureValueErrorReverseSide) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorReverseSide
	return m.Data2
}

func (m *TLSecureValueErrorReverseSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorReverseSide) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorReverseSide) SetFileHash_BYTES(v []byte) { m.Data2.FileHash_BYTES = v }
func (m *TLSecureValueErrorReverseSide) GetFileHash_BYTES() []byte  { return m.Data2.FileHash_BYTES }

func (m *TLSecureValueErrorReverseSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorReverseSide) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorReverseSide) GetPredicateName() string {
	return Predicate_secureValueErrorReverseSide
}

func (m *TLSecureValueErrorReverseSide) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x868a2aa5: func() []byte {
			x.UInt(0x868a2aa5)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetFileHash_BYTES())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorReverseSide, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorReverseSide, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorReverseSide) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorReverseSide) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x868a2aa5: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_BYTES(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorReverseSide) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorSelfie
func MakeTLSecureValueErrorSelfie(data2 *SecureValueError) *TLSecureValueErrorSelfie {
	if data2 == nil {
		return &TLSecureValueErrorSelfie{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorSelfie,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorSelfie
		return &TLSecureValueErrorSelfie{Data2: data2}
	}
}

func (m *TLSecureValueErrorSelfie) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorSelfie
	return m.Data2
}

func (m *TLSecureValueErrorSelfie) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorSelfie) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorSelfie) SetFileHash_BYTES(v []byte) { m.Data2.FileHash_BYTES = v }
func (m *TLSecureValueErrorSelfie) GetFileHash_BYTES() []byte  { return m.Data2.FileHash_BYTES }

func (m *TLSecureValueErrorSelfie) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorSelfie) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorSelfie) GetPredicateName() string {
	return Predicate_secureValueErrorSelfie
}

func (m *TLSecureValueErrorSelfie) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe537ced6: func() []byte {
			x.UInt(0xe537ced6)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetFileHash_BYTES())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorSelfie, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorSelfie, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorSelfie) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorSelfie) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe537ced6: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_BYTES(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorSelfie) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorFile
func MakeTLSecureValueErrorFile(data2 *SecureValueError) *TLSecureValueErrorFile {
	if data2 == nil {
		return &TLSecureValueErrorFile{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorFile,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorFile
		return &TLSecureValueErrorFile{Data2: data2}
	}
}

func (m *TLSecureValueErrorFile) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorFile
	return m.Data2
}

func (m *TLSecureValueErrorFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFile) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFile) SetFileHash_BYTES(v []byte) { m.Data2.FileHash_BYTES = v }
func (m *TLSecureValueErrorFile) GetFileHash_BYTES() []byte  { return m.Data2.FileHash_BYTES }

func (m *TLSecureValueErrorFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFile) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorFile) GetPredicateName() string {
	return Predicate_secureValueErrorFile
}

func (m *TLSecureValueErrorFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7a700873: func() []byte {
			x.UInt(0x7a700873)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetFileHash_BYTES())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7a700873: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_BYTES(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorFiles
func MakeTLSecureValueErrorFiles(data2 *SecureValueError) *TLSecureValueErrorFiles {
	if data2 == nil {
		return &TLSecureValueErrorFiles{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorFiles,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorFiles
		return &TLSecureValueErrorFiles{Data2: data2}
	}
}

func (m *TLSecureValueErrorFiles) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorFiles
	return m.Data2
}

func (m *TLSecureValueErrorFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFiles) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorFiles) SetFileHash_VECTORBYTES(v [][]byte) {
	m.Data2.FileHash_VECTORBYTES = v
}
func (m *TLSecureValueErrorFiles) GetFileHash_VECTORBYTES() [][]byte {
	return m.Data2.FileHash_VECTORBYTES
}

func (m *TLSecureValueErrorFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFiles) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorFiles) GetPredicateName() string {
	return Predicate_secureValueErrorFiles
}

func (m *TLSecureValueErrorFiles) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x666220e9: func() []byte {
			x.UInt(0x666220e9)

			x.Bytes(m.GetType().Encode(layer))

			x.VectorBytes(m.GetFileHash_VECTORBYTES())

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorFiles, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorFiles, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorFiles) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorFiles) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x666220e9: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_VECTORBYTES(dBuf.VectorBytes())

			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorFiles) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueError
func MakeTLSecureValueError(data2 *SecureValueError) *TLSecureValueError {
	if data2 == nil {
		return &TLSecureValueError{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueError,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueError
		return &TLSecureValueError{Data2: data2}
	}
}

func (m *TLSecureValueError) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueError
	return m.Data2
}

func (m *TLSecureValueError) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueError) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueError) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueError) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureValueError) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueError) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueError) GetPredicateName() string {
	return Predicate_secureValueError
}

func (m *TLSecureValueError) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x869d758f: func() []byte {
			x.UInt(0x869d758f)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetHash())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueError, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueError, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueError) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueError) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x869d758f: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetHash(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueError) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorTranslationFile
func MakeTLSecureValueErrorTranslationFile(data2 *SecureValueError) *TLSecureValueErrorTranslationFile {
	if data2 == nil {
		return &TLSecureValueErrorTranslationFile{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorTranslationFile,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorTranslationFile
		return &TLSecureValueErrorTranslationFile{Data2: data2}
	}
}

func (m *TLSecureValueErrorTranslationFile) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorTranslationFile
	return m.Data2
}

func (m *TLSecureValueErrorTranslationFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFile) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFile) SetFileHash_BYTES(v []byte) { m.Data2.FileHash_BYTES = v }
func (m *TLSecureValueErrorTranslationFile) GetFileHash_BYTES() []byte  { return m.Data2.FileHash_BYTES }

func (m *TLSecureValueErrorTranslationFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFile) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorTranslationFile) GetPredicateName() string {
	return Predicate_secureValueErrorTranslationFile
}

func (m *TLSecureValueErrorTranslationFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa1144770: func() []byte {
			x.UInt(0xa1144770)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetFileHash_BYTES())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorTranslationFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorTranslationFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorTranslationFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorTranslationFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa1144770: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_BYTES(dBuf.StringBytes())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorTranslationFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueErrorTranslationFiles
func MakeTLSecureValueErrorTranslationFiles(data2 *SecureValueError) *TLSecureValueErrorTranslationFiles {
	if data2 == nil {
		return &TLSecureValueErrorTranslationFiles{Data2: &SecureValueError{
			PredicateName: Predicate_secureValueErrorTranslationFiles,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueErrorTranslationFiles
		return &TLSecureValueErrorTranslationFiles{Data2: data2}
	}
}

func (m *TLSecureValueErrorTranslationFiles) To_SecureValueError() *SecureValueError {
	m.Data2.PredicateName = Predicate_secureValueErrorTranslationFiles
	return m.Data2
}

func (m *TLSecureValueErrorTranslationFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFiles) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFiles) SetFileHash_VECTORBYTES(v [][]byte) {
	m.Data2.FileHash_VECTORBYTES = v
}
func (m *TLSecureValueErrorTranslationFiles) GetFileHash_VECTORBYTES() [][]byte {
	return m.Data2.FileHash_VECTORBYTES
}

func (m *TLSecureValueErrorTranslationFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFiles) GetText() string  { return m.Data2.Text }

func (m *TLSecureValueErrorTranslationFiles) GetPredicateName() string {
	return Predicate_secureValueErrorTranslationFiles
}

func (m *TLSecureValueErrorTranslationFiles) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x34636dd8: func() []byte {
			x.UInt(0x34636dd8)

			x.Bytes(m.GetType().Encode(layer))

			x.VectorBytes(m.GetFileHash_VECTORBYTES())

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueErrorTranslationFiles, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueErrorTranslationFiles, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueErrorTranslationFiles) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueErrorTranslationFiles) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x34636dd8: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetFileHash_VECTORBYTES(dBuf.VectorBytes())

			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueErrorTranslationFiles) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GlobalPrivacySettings <--
//  + TL_GlobalPrivacySettings
//

func (m *GlobalPrivacySettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_globalPrivacySettings:
		t := m.To_GlobalPrivacySettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GlobalPrivacySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *GlobalPrivacySettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbea2f424:
		m2 := MakeTLGlobalPrivacySettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GlobalPrivacySettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_globalPrivacySettings:
		t := m.To_GlobalPrivacySettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GlobalPrivacySettings
func (m *GlobalPrivacySettings) To_GlobalPrivacySettings() *TLGlobalPrivacySettings {
	m.PredicateName = Predicate_globalPrivacySettings
	return &TLGlobalPrivacySettings{
		Data2: m,
	}
}

// MakeTLGlobalPrivacySettings
func MakeTLGlobalPrivacySettings(data2 *GlobalPrivacySettings) *TLGlobalPrivacySettings {
	if data2 == nil {
		return &TLGlobalPrivacySettings{Data2: &GlobalPrivacySettings{
			PredicateName: Predicate_globalPrivacySettings,
		}}
	} else {
		data2.PredicateName = Predicate_globalPrivacySettings
		return &TLGlobalPrivacySettings{Data2: data2}
	}
}

func (m *TLGlobalPrivacySettings) To_GlobalPrivacySettings() *GlobalPrivacySettings {
	m.Data2.PredicateName = Predicate_globalPrivacySettings
	return m.Data2
}

//// flags
func (m *TLGlobalPrivacySettings) SetArchiveAndMuteNewNoncontactPeers(v *Bool) {
	m.Data2.ArchiveAndMuteNewNoncontactPeers = v
}
func (m *TLGlobalPrivacySettings) GetArchiveAndMuteNewNoncontactPeers() *Bool {
	return m.Data2.ArchiveAndMuteNewNoncontactPeers
}

func (m *TLGlobalPrivacySettings) GetPredicateName() string {
	return Predicate_globalPrivacySettings
}

func (m *TLGlobalPrivacySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbea2f424: func() []byte {
			x.UInt(0xbea2f424)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetArchiveAndMuteNewNoncontactPeers() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetArchiveAndMuteNewNoncontactPeers() != nil {
				x.Bytes(m.GetArchiveAndMuteNewNoncontactPeers().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_globalPrivacySettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_globalPrivacySettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGlobalPrivacySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGlobalPrivacySettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbea2f424: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &Bool{}
				m1.Decode(dBuf)
				m.SetArchiveAndMuteNewNoncontactPeers(m1)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGlobalPrivacySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputFileLocation <--
//  + TL_InputFileLocation
//  + TL_InputEncryptedFileLocation
//  + TL_InputDocumentFileLocation
//  + TL_InputSecureFileLocation
//  + TL_InputTakeoutFileLocation
//  + TL_InputPhotoFileLocation
//  + TL_InputPhotoLegacyFileLocation
//  + TL_InputPeerPhotoFileLocation
//  + TL_InputStickerSetThumb
//  + TL_InputGroupCallStream
//

func (m *InputFileLocation) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputFileLocation:
		t := m.To_InputFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputEncryptedFileLocation:
		t := m.To_InputEncryptedFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputDocumentFileLocation:
		t := m.To_InputDocumentFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputSecureFileLocation:
		t := m.To_InputSecureFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputTakeoutFileLocation:
		t := m.To_InputTakeoutFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputPhotoFileLocation:
		t := m.To_InputPhotoFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputPhotoLegacyFileLocation:
		t := m.To_InputPhotoLegacyFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerPhotoFileLocation:
		t := m.To_InputPeerPhotoFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetThumb:
		t := m.To_InputStickerSetThumb()
		xBuf = t.Encode(layer)
	case Predicate_inputGroupCallStream:
		t := m.To_InputGroupCallStream()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputFileLocation) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdfdaabe1:
		m2 := MakeTLInputFileLocation(m)
		m2.Decode(dBuf)
	case 0xf5235d55:
		m2 := MakeTLInputEncryptedFileLocation(m)
		m2.Decode(dBuf)
	case 0xbad07584:
		m2 := MakeTLInputDocumentFileLocation(m)
		m2.Decode(dBuf)
	case 0xcbc7ee28:
		m2 := MakeTLInputSecureFileLocation(m)
		m2.Decode(dBuf)
	case 0x29be5899:
		m2 := MakeTLInputTakeoutFileLocation(m)
		m2.Decode(dBuf)
	case 0x40181ffe:
		m2 := MakeTLInputPhotoFileLocation(m)
		m2.Decode(dBuf)
	case 0xd83466f3:
		m2 := MakeTLInputPhotoLegacyFileLocation(m)
		m2.Decode(dBuf)
	case 0x37257e99:
		m2 := MakeTLInputPeerPhotoFileLocation(m)
		m2.Decode(dBuf)
	case 0x9d84f3db:
		m2 := MakeTLInputStickerSetThumb(m)
		m2.Decode(dBuf)
	case 0x598a92a:
		m2 := MakeTLInputGroupCallStream(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputFileLocation) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputFileLocation:
		t := m.To_InputFileLocation()
		return t.DebugString()
	case Predicate_inputEncryptedFileLocation:
		t := m.To_InputEncryptedFileLocation()
		return t.DebugString()
	case Predicate_inputDocumentFileLocation:
		t := m.To_InputDocumentFileLocation()
		return t.DebugString()
	case Predicate_inputSecureFileLocation:
		t := m.To_InputSecureFileLocation()
		return t.DebugString()
	case Predicate_inputTakeoutFileLocation:
		t := m.To_InputTakeoutFileLocation()
		return t.DebugString()
	case Predicate_inputPhotoFileLocation:
		t := m.To_InputPhotoFileLocation()
		return t.DebugString()
	case Predicate_inputPhotoLegacyFileLocation:
		t := m.To_InputPhotoLegacyFileLocation()
		return t.DebugString()
	case Predicate_inputPeerPhotoFileLocation:
		t := m.To_InputPeerPhotoFileLocation()
		return t.DebugString()
	case Predicate_inputStickerSetThumb:
		t := m.To_InputStickerSetThumb()
		return t.DebugString()
	case Predicate_inputGroupCallStream:
		t := m.To_InputGroupCallStream()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputFileLocation
func (m *InputFileLocation) To_InputFileLocation() *TLInputFileLocation {
	m.PredicateName = Predicate_inputFileLocation
	return &TLInputFileLocation{
		Data2: m,
	}
}

// To_InputEncryptedFileLocation
func (m *InputFileLocation) To_InputEncryptedFileLocation() *TLInputEncryptedFileLocation {
	m.PredicateName = Predicate_inputEncryptedFileLocation
	return &TLInputEncryptedFileLocation{
		Data2: m,
	}
}

// To_InputDocumentFileLocation
func (m *InputFileLocation) To_InputDocumentFileLocation() *TLInputDocumentFileLocation {
	m.PredicateName = Predicate_inputDocumentFileLocation
	return &TLInputDocumentFileLocation{
		Data2: m,
	}
}

// To_InputSecureFileLocation
func (m *InputFileLocation) To_InputSecureFileLocation() *TLInputSecureFileLocation {
	m.PredicateName = Predicate_inputSecureFileLocation
	return &TLInputSecureFileLocation{
		Data2: m,
	}
}

// To_InputTakeoutFileLocation
func (m *InputFileLocation) To_InputTakeoutFileLocation() *TLInputTakeoutFileLocation {
	m.PredicateName = Predicate_inputTakeoutFileLocation
	return &TLInputTakeoutFileLocation{
		Data2: m,
	}
}

// To_InputPhotoFileLocation
func (m *InputFileLocation) To_InputPhotoFileLocation() *TLInputPhotoFileLocation {
	m.PredicateName = Predicate_inputPhotoFileLocation
	return &TLInputPhotoFileLocation{
		Data2: m,
	}
}

// To_InputPhotoLegacyFileLocation
func (m *InputFileLocation) To_InputPhotoLegacyFileLocation() *TLInputPhotoLegacyFileLocation {
	m.PredicateName = Predicate_inputPhotoLegacyFileLocation
	return &TLInputPhotoLegacyFileLocation{
		Data2: m,
	}
}

// To_InputPeerPhotoFileLocation
func (m *InputFileLocation) To_InputPeerPhotoFileLocation() *TLInputPeerPhotoFileLocation {
	m.PredicateName = Predicate_inputPeerPhotoFileLocation
	return &TLInputPeerPhotoFileLocation{
		Data2: m,
	}
}

// To_InputStickerSetThumb
func (m *InputFileLocation) To_InputStickerSetThumb() *TLInputStickerSetThumb {
	m.PredicateName = Predicate_inputStickerSetThumb
	return &TLInputStickerSetThumb{
		Data2: m,
	}
}

// To_InputGroupCallStream
func (m *InputFileLocation) To_InputGroupCallStream() *TLInputGroupCallStream {
	m.PredicateName = Predicate_inputGroupCallStream
	return &TLInputGroupCallStream{
		Data2: m,
	}
}

// MakeTLInputFileLocation
func MakeTLInputFileLocation(data2 *InputFileLocation) *TLInputFileLocation {
	if data2 == nil {
		return &TLInputFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputFileLocation
		return &TLInputFileLocation{Data2: data2}
	}
}

func (m *TLInputFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputFileLocation
	return m.Data2
}

func (m *TLInputFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputFileLocation) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLInputFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputFileLocation) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLInputFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputFileLocation) GetSecret() int64  { return m.Data2.Secret }

func (m *TLInputFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputFileLocation) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputFileLocation) GetPredicateName() string {
	return Predicate_inputFileLocation
}

func (m *TLInputFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdfdaabe1: func() []byte {
			x.UInt(0xdfdaabe1)

			x.Long(m.GetVolumeId())
			x.Int(m.GetLocalId())
			x.Long(m.GetSecret())
			x.StringBytes(m.GetFileReference())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdfdaabe1: func() error {
			m.SetVolumeId(dBuf.Long())
			m.SetLocalId(dBuf.Int())
			m.SetSecret(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputEncryptedFileLocation
func MakeTLInputEncryptedFileLocation(data2 *InputFileLocation) *TLInputEncryptedFileLocation {
	if data2 == nil {
		return &TLInputEncryptedFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputEncryptedFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedFileLocation
		return &TLInputEncryptedFileLocation{Data2: data2}
	}
}

func (m *TLInputEncryptedFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputEncryptedFileLocation
	return m.Data2
}

func (m *TLInputEncryptedFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputEncryptedFileLocation) GetPredicateName() string {
	return Predicate_inputEncryptedFileLocation
}

func (m *TLInputEncryptedFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf5235d55: func() []byte {
			x.UInt(0xf5235d55)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf5235d55: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputDocumentFileLocation
func MakeTLInputDocumentFileLocation(data2 *InputFileLocation) *TLInputDocumentFileLocation {
	if data2 == nil {
		return &TLInputDocumentFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputDocumentFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputDocumentFileLocation
		return &TLInputDocumentFileLocation{Data2: data2}
	}
}

func (m *TLInputDocumentFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputDocumentFileLocation
	return m.Data2
}

func (m *TLInputDocumentFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocumentFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputDocumentFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocumentFileLocation) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputDocumentFileLocation) SetThumbSize(v string) { m.Data2.ThumbSize = v }
func (m *TLInputDocumentFileLocation) GetThumbSize() string  { return m.Data2.ThumbSize }

func (m *TLInputDocumentFileLocation) GetPredicateName() string {
	return Predicate_inputDocumentFileLocation
}

func (m *TLInputDocumentFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbad07584: func() []byte {
			x.UInt(0xbad07584)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			x.String(m.GetThumbSize())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputDocumentFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputDocumentFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputDocumentFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputDocumentFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbad07584: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			m.SetThumbSize(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputDocumentFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputSecureFileLocation
func MakeTLInputSecureFileLocation(data2 *InputFileLocation) *TLInputSecureFileLocation {
	if data2 == nil {
		return &TLInputSecureFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputSecureFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputSecureFileLocation
		return &TLInputSecureFileLocation{Data2: data2}
	}
}

func (m *TLInputSecureFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputSecureFileLocation
	return m.Data2
}

func (m *TLInputSecureFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputSecureFileLocation) GetPredicateName() string {
	return Predicate_inputSecureFileLocation
}

func (m *TLInputSecureFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcbc7ee28: func() []byte {
			x.UInt(0xcbc7ee28)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputSecureFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputSecureFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputSecureFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputSecureFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcbc7ee28: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputSecureFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputTakeoutFileLocation
func MakeTLInputTakeoutFileLocation(data2 *InputFileLocation) *TLInputTakeoutFileLocation {
	if data2 == nil {
		return &TLInputTakeoutFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputTakeoutFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputTakeoutFileLocation
		return &TLInputTakeoutFileLocation{Data2: data2}
	}
}

func (m *TLInputTakeoutFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputTakeoutFileLocation
	return m.Data2
}

func (m *TLInputTakeoutFileLocation) GetPredicateName() string {
	return Predicate_inputTakeoutFileLocation
}

func (m *TLInputTakeoutFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x29be5899: func() []byte {
			x.UInt(0x29be5899)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputTakeoutFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputTakeoutFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputTakeoutFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputTakeoutFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x29be5899: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputTakeoutFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPhotoFileLocation
func MakeTLInputPhotoFileLocation(data2 *InputFileLocation) *TLInputPhotoFileLocation {
	if data2 == nil {
		return &TLInputPhotoFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputPhotoFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhotoFileLocation
		return &TLInputPhotoFileLocation{Data2: data2}
	}
}

func (m *TLInputPhotoFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputPhotoFileLocation
	return m.Data2
}

func (m *TLInputPhotoFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhotoFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhotoFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhotoFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPhotoFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhotoFileLocation) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputPhotoFileLocation) SetThumbSize(v string) { m.Data2.ThumbSize = v }
func (m *TLInputPhotoFileLocation) GetThumbSize() string  { return m.Data2.ThumbSize }

func (m *TLInputPhotoFileLocation) GetPredicateName() string {
	return Predicate_inputPhotoFileLocation
}

func (m *TLInputPhotoFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x40181ffe: func() []byte {
			x.UInt(0x40181ffe)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			x.String(m.GetThumbSize())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhotoFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhotoFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhotoFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhotoFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x40181ffe: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			m.SetThumbSize(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhotoFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPhotoLegacyFileLocation
func MakeTLInputPhotoLegacyFileLocation(data2 *InputFileLocation) *TLInputPhotoLegacyFileLocation {
	if data2 == nil {
		return &TLInputPhotoLegacyFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputPhotoLegacyFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhotoLegacyFileLocation
		return &TLInputPhotoLegacyFileLocation{Data2: data2}
	}
}

func (m *TLInputPhotoLegacyFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputPhotoLegacyFileLocation
	return m.Data2
}

func (m *TLInputPhotoLegacyFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhotoLegacyFileLocation) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhotoLegacyFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhotoLegacyFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPhotoLegacyFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhotoLegacyFileLocation) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputPhotoLegacyFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputPhotoLegacyFileLocation) GetVolumeId() int64  { return m.Data2.VolumeId }

func (m *TLInputPhotoLegacyFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputPhotoLegacyFileLocation) GetLocalId() int32  { return m.Data2.LocalId }

func (m *TLInputPhotoLegacyFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputPhotoLegacyFileLocation) GetSecret() int64  { return m.Data2.Secret }

func (m *TLInputPhotoLegacyFileLocation) GetPredicateName() string {
	return Predicate_inputPhotoLegacyFileLocation
}

func (m *TLInputPhotoLegacyFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd83466f3: func() []byte {
			x.UInt(0xd83466f3)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			x.Long(m.GetVolumeId())
			x.Int(m.GetLocalId())
			x.Long(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhotoLegacyFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhotoLegacyFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhotoLegacyFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhotoLegacyFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd83466f3: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			m.SetVolumeId(dBuf.Long())
			m.SetLocalId(dBuf.Int())
			m.SetSecret(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhotoLegacyFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerPhotoFileLocation
func MakeTLInputPeerPhotoFileLocation(data2 *InputFileLocation) *TLInputPeerPhotoFileLocation {
	if data2 == nil {
		return &TLInputPeerPhotoFileLocation{Data2: &InputFileLocation{
			PredicateName: Predicate_inputPeerPhotoFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerPhotoFileLocation
		return &TLInputPeerPhotoFileLocation{Data2: data2}
	}
}

func (m *TLInputPeerPhotoFileLocation) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputPeerPhotoFileLocation
	return m.Data2
}

//// flags
func (m *TLInputPeerPhotoFileLocation) SetBig(v bool) { m.Data2.Big = v }
func (m *TLInputPeerPhotoFileLocation) GetBig() bool  { return m.Data2.Big }

func (m *TLInputPeerPhotoFileLocation) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerPhotoFileLocation) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputPeerPhotoFileLocation) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLInputPeerPhotoFileLocation) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLInputPeerPhotoFileLocation) GetPredicateName() string {
	return Predicate_inputPeerPhotoFileLocation
}

func (m *TLInputPeerPhotoFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x37257e99: func() []byte {
			x.UInt(0x37257e99)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBig() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer().Encode(layer))
			x.Long(m.GetPhotoId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerPhotoFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerPhotoFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerPhotoFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerPhotoFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x37257e99: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetBig(true)
			}

			m9 := &InputPeer{}
			m9.Decode(dBuf)
			m.SetPeer(m9)

			m.SetPhotoId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerPhotoFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetThumb
func MakeTLInputStickerSetThumb(data2 *InputFileLocation) *TLInputStickerSetThumb {
	if data2 == nil {
		return &TLInputStickerSetThumb{Data2: &InputFileLocation{
			PredicateName: Predicate_inputStickerSetThumb,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetThumb
		return &TLInputStickerSetThumb{Data2: data2}
	}
}

func (m *TLInputStickerSetThumb) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputStickerSetThumb
	return m.Data2
}

func (m *TLInputStickerSetThumb) SetStickerset(v *InputStickerSet) { m.Data2.Stickerset = v }
func (m *TLInputStickerSetThumb) GetStickerset() *InputStickerSet  { return m.Data2.Stickerset }

func (m *TLInputStickerSetThumb) SetThumbVersion(v int32) { m.Data2.ThumbVersion = v }
func (m *TLInputStickerSetThumb) GetThumbVersion() int32  { return m.Data2.ThumbVersion }

func (m *TLInputStickerSetThumb) GetPredicateName() string {
	return Predicate_inputStickerSetThumb
}

func (m *TLInputStickerSetThumb) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9d84f3db: func() []byte {
			x.UInt(0x9d84f3db)

			x.Bytes(m.GetStickerset().Encode(layer))
			x.Int(m.GetThumbVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetThumb, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetThumb, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetThumb) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetThumb) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9d84f3db: func() error {

			m11 := &InputStickerSet{}
			m11.Decode(dBuf)
			m.SetStickerset(m11)

			m.SetThumbVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetThumb) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputGroupCallStream
func MakeTLInputGroupCallStream(data2 *InputFileLocation) *TLInputGroupCallStream {
	if data2 == nil {
		return &TLInputGroupCallStream{Data2: &InputFileLocation{
			PredicateName: Predicate_inputGroupCallStream,
		}}
	} else {
		data2.PredicateName = Predicate_inputGroupCallStream
		return &TLInputGroupCallStream{Data2: data2}
	}
}

func (m *TLInputGroupCallStream) To_InputFileLocation() *InputFileLocation {
	m.Data2.PredicateName = Predicate_inputGroupCallStream
	return m.Data2
}

//// flags
func (m *TLInputGroupCallStream) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLInputGroupCallStream) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLInputGroupCallStream) SetTimeMs(v int64) { m.Data2.TimeMs = v }
func (m *TLInputGroupCallStream) GetTimeMs() int64  { return m.Data2.TimeMs }

func (m *TLInputGroupCallStream) SetScale(v int32) { m.Data2.Scale = v }
func (m *TLInputGroupCallStream) GetScale() int32  { return m.Data2.Scale }

func (m *TLInputGroupCallStream) SetVideoChannel(v *types.Int32Value) { m.Data2.VideoChannel = v }
func (m *TLInputGroupCallStream) GetVideoChannel() *types.Int32Value  { return m.Data2.VideoChannel }

func (m *TLInputGroupCallStream) SetVideoQuality(v *types.Int32Value) { m.Data2.VideoQuality = v }
func (m *TLInputGroupCallStream) GetVideoQuality() *types.Int32Value  { return m.Data2.VideoQuality }

func (m *TLInputGroupCallStream) GetPredicateName() string {
	return Predicate_inputGroupCallStream
}

func (m *TLInputGroupCallStream) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x598a92a: func() []byte {
			x.UInt(0x598a92a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideoChannel() != nil {
					flags |= 1 << 0
				}
				if m.GetVideoQuality() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetCall().Encode(layer))
			x.Long(m.GetTimeMs())
			x.Int(m.GetScale())
			if m.GetVideoChannel() != nil {
				x.Int(m.GetVideoChannel().Value)
			}

			if m.GetVideoQuality() != nil {
				x.Int(m.GetVideoQuality().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGroupCallStream, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGroupCallStream, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGroupCallStream) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGroupCallStream) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x598a92a: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m13 := &InputGroupCall{}
			m13.Decode(dBuf)
			m.SetCall(m13)

			m.SetTimeMs(dBuf.Long())
			m.SetScale(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetVideoChannel(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetVideoQuality(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGroupCallStream) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Stats_MessageStats <--
//  + TL_StatsMessageStats
//

func (m *Stats_MessageStats) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stats_messageStats:
		t := m.To_StatsMessageStats()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Stats_MessageStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *Stats_MessageStats) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8999f295:
		m2 := MakeTLStatsMessageStats(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Stats_MessageStats) DebugString() string {
	switch m.PredicateName {
	case Predicate_stats_messageStats:
		t := m.To_StatsMessageStats()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsMessageStats
func (m *Stats_MessageStats) To_StatsMessageStats() *TLStatsMessageStats {
	m.PredicateName = Predicate_stats_messageStats
	return &TLStatsMessageStats{
		Data2: m,
	}
}

// MakeTLStatsMessageStats
func MakeTLStatsMessageStats(data2 *Stats_MessageStats) *TLStatsMessageStats {
	if data2 == nil {
		return &TLStatsMessageStats{Data2: &Stats_MessageStats{
			PredicateName: Predicate_stats_messageStats,
		}}
	} else {
		data2.PredicateName = Predicate_stats_messageStats
		return &TLStatsMessageStats{Data2: data2}
	}
}

func (m *TLStatsMessageStats) To_Stats_MessageStats() *Stats_MessageStats {
	m.Data2.PredicateName = Predicate_stats_messageStats
	return m.Data2
}

func (m *TLStatsMessageStats) SetViewsGraph(v *StatsGraph) { m.Data2.ViewsGraph = v }
func (m *TLStatsMessageStats) GetViewsGraph() *StatsGraph  { return m.Data2.ViewsGraph }

func (m *TLStatsMessageStats) GetPredicateName() string {
	return Predicate_stats_messageStats
}

func (m *TLStatsMessageStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8999f295: func() []byte {
			x.UInt(0x8999f295)

			x.Bytes(m.GetViewsGraph().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stats_messageStats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stats_messageStats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsMessageStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsMessageStats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8999f295: func() error {

			m0 := &StatsGraph{}
			m0.Decode(dBuf)
			m.SetViewsGraph(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsMessageStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_AuthorizationForm <--
//  + TL_AccountAuthorizationForm
//

func (m *Account_AuthorizationForm) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_authorizationForm:
		t := m.To_AccountAuthorizationForm()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_AuthorizationForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_AuthorizationForm) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xad2e1cd8:
		m2 := MakeTLAccountAuthorizationForm(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_AuthorizationForm) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_authorizationForm:
		t := m.To_AccountAuthorizationForm()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountAuthorizationForm
func (m *Account_AuthorizationForm) To_AccountAuthorizationForm() *TLAccountAuthorizationForm {
	m.PredicateName = Predicate_account_authorizationForm
	return &TLAccountAuthorizationForm{
		Data2: m,
	}
}

// MakeTLAccountAuthorizationForm
func MakeTLAccountAuthorizationForm(data2 *Account_AuthorizationForm) *TLAccountAuthorizationForm {
	if data2 == nil {
		return &TLAccountAuthorizationForm{Data2: &Account_AuthorizationForm{
			PredicateName: Predicate_account_authorizationForm,
		}}
	} else {
		data2.PredicateName = Predicate_account_authorizationForm
		return &TLAccountAuthorizationForm{Data2: data2}
	}
}

func (m *TLAccountAuthorizationForm) To_Account_AuthorizationForm() *Account_AuthorizationForm {
	m.Data2.PredicateName = Predicate_account_authorizationForm
	return m.Data2
}

//// flags
func (m *TLAccountAuthorizationForm) SetRequiredTypes(v []*SecureRequiredType) {
	m.Data2.RequiredTypes = v
}
func (m *TLAccountAuthorizationForm) GetRequiredTypes() []*SecureRequiredType {
	return m.Data2.RequiredTypes
}

func (m *TLAccountAuthorizationForm) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLAccountAuthorizationForm) GetValues() []*SecureValue  { return m.Data2.Values }

func (m *TLAccountAuthorizationForm) SetErrors(v []*SecureValueError) { m.Data2.Errors = v }
func (m *TLAccountAuthorizationForm) GetErrors() []*SecureValueError  { return m.Data2.Errors }

func (m *TLAccountAuthorizationForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountAuthorizationForm) GetUsers() []*User  { return m.Data2.Users }

func (m *TLAccountAuthorizationForm) SetPrivacyPolicyUrl(v *types.StringValue) {
	m.Data2.PrivacyPolicyUrl = v
}
func (m *TLAccountAuthorizationForm) GetPrivacyPolicyUrl() *types.StringValue {
	return m.Data2.PrivacyPolicyUrl
}

func (m *TLAccountAuthorizationForm) GetPredicateName() string {
	return Predicate_account_authorizationForm
}

func (m *TLAccountAuthorizationForm) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xad2e1cd8: func() []byte {
			x.UInt(0xad2e1cd8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPrivacyPolicyUrl() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRequiredTypes())))
			for _, v := range m.GetRequiredTypes() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetValues())))
			for _, v := range m.GetValues() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetErrors())))
			for _, v := range m.GetErrors() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetPrivacyPolicyUrl() != nil {
				x.String(m.GetPrivacyPolicyUrl().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_authorizationForm, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_authorizationForm, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountAuthorizationForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountAuthorizationForm) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xad2e1cd8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*SecureRequiredType, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &SecureRequiredType{}
				v1[i].Decode(dBuf)
			}
			m.SetRequiredTypes(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*SecureValue, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &SecureValue{}
				v2[i].Decode(dBuf)
			}
			m.SetValues(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*SecureValueError, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &SecureValueError{}
				v3[i].Decode(dBuf)
			}
			m.SetErrors(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*User, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &User{}
				v4[i].Decode(dBuf)
			}
			m.SetUsers(v4)

			if (flags & (1 << 0)) != 0 {
				m.SetPrivacyPolicyUrl(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountAuthorizationForm) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_DeepLinkInfo <--
//  + TL_HelpDeepLinkInfoEmpty
//  + TL_HelpDeepLinkInfo
//

func (m *Help_DeepLinkInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_deepLinkInfoEmpty:
		t := m.To_HelpDeepLinkInfoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_help_deepLinkInfo:
		t := m.To_HelpDeepLinkInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_DeepLinkInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_DeepLinkInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x66afa166:
		m2 := MakeTLHelpDeepLinkInfoEmpty(m)
		m2.Decode(dBuf)
	case 0x6a4ee832:
		m2 := MakeTLHelpDeepLinkInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_DeepLinkInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_deepLinkInfoEmpty:
		t := m.To_HelpDeepLinkInfoEmpty()
		return t.DebugString()
	case Predicate_help_deepLinkInfo:
		t := m.To_HelpDeepLinkInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpDeepLinkInfoEmpty
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfoEmpty() *TLHelpDeepLinkInfoEmpty {
	m.PredicateName = Predicate_help_deepLinkInfoEmpty
	return &TLHelpDeepLinkInfoEmpty{
		Data2: m,
	}
}

// To_HelpDeepLinkInfo
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfo() *TLHelpDeepLinkInfo {
	m.PredicateName = Predicate_help_deepLinkInfo
	return &TLHelpDeepLinkInfo{
		Data2: m,
	}
}

// MakeTLHelpDeepLinkInfoEmpty
func MakeTLHelpDeepLinkInfoEmpty(data2 *Help_DeepLinkInfo) *TLHelpDeepLinkInfoEmpty {
	if data2 == nil {
		return &TLHelpDeepLinkInfoEmpty{Data2: &Help_DeepLinkInfo{
			PredicateName: Predicate_help_deepLinkInfoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_help_deepLinkInfoEmpty
		return &TLHelpDeepLinkInfoEmpty{Data2: data2}
	}
}

func (m *TLHelpDeepLinkInfoEmpty) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
	m.Data2.PredicateName = Predicate_help_deepLinkInfoEmpty
	return m.Data2
}

func (m *TLHelpDeepLinkInfoEmpty) GetPredicateName() string {
	return Predicate_help_deepLinkInfoEmpty
}

func (m *TLHelpDeepLinkInfoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x66afa166: func() []byte {
			x.UInt(0x66afa166)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_deepLinkInfoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_deepLinkInfoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpDeepLinkInfoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpDeepLinkInfoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x66afa166: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpDeepLinkInfoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpDeepLinkInfo
func MakeTLHelpDeepLinkInfo(data2 *Help_DeepLinkInfo) *TLHelpDeepLinkInfo {
	if data2 == nil {
		return &TLHelpDeepLinkInfo{Data2: &Help_DeepLinkInfo{
			PredicateName: Predicate_help_deepLinkInfo,
		}}
	} else {
		data2.PredicateName = Predicate_help_deepLinkInfo
		return &TLHelpDeepLinkInfo{Data2: data2}
	}
}

func (m *TLHelpDeepLinkInfo) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
	m.Data2.PredicateName = Predicate_help_deepLinkInfo
	return m.Data2
}

//// flags
func (m *TLHelpDeepLinkInfo) SetUpdateApp(v bool) { m.Data2.UpdateApp = v }
func (m *TLHelpDeepLinkInfo) GetUpdateApp() bool  { return m.Data2.UpdateApp }

func (m *TLHelpDeepLinkInfo) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpDeepLinkInfo) GetMessage() string  { return m.Data2.Message }

func (m *TLHelpDeepLinkInfo) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpDeepLinkInfo) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpDeepLinkInfo) GetPredicateName() string {
	return Predicate_help_deepLinkInfo
}

func (m *TLHelpDeepLinkInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6a4ee832: func() []byte {
			x.UInt(0x6a4ee832)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetUpdateApp() == true {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_deepLinkInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_deepLinkInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpDeepLinkInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpDeepLinkInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6a4ee832: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetUpdateApp(true)
			}
			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c3 := dBuf.Int()
				if c3 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
					return dBuf.GetError()
				}
				l3 := dBuf.Int()
				v3 := make([]*MessageEntity, l3)
				for i := int32(0); i < l3; i++ {
					v3[i] = &MessageEntity{}
					v3[i].Decode(dBuf)
				}
				m.SetEntities(v3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpDeepLinkInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PhotoSize <--
//  + TL_PhotoSizeEmpty
//  + TL_PhotoSize
//  + TL_PhotoCachedSize
//  + TL_PhotoStrippedSize
//  + TL_PhotoSizeProgressive
//  + TL_PhotoPathSize
//

func (m *PhotoSize) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_photoSizeEmpty:
		t := m.To_PhotoSizeEmpty()
		xBuf = t.Encode(layer)
	case Predicate_photoSize:
		t := m.To_PhotoSize()
		xBuf = t.Encode(layer)
	case Predicate_photoCachedSize:
		t := m.To_PhotoCachedSize()
		xBuf = t.Encode(layer)
	case Predicate_photoStrippedSize:
		t := m.To_PhotoStrippedSize()
		xBuf = t.Encode(layer)
	case Predicate_photoSizeProgressive:
		t := m.To_PhotoSizeProgressive()
		xBuf = t.Encode(layer)
	case Predicate_photoPathSize:
		t := m.To_PhotoPathSize()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PhotoSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *PhotoSize) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe17e23c:
		m2 := MakeTLPhotoSizeEmpty(m)
		m2.Decode(dBuf)
	case 0x75c78e60:
		m2 := MakeTLPhotoSize(m)
		m2.Decode(dBuf)
	case 0x21e1ad6:
		m2 := MakeTLPhotoCachedSize(m)
		m2.Decode(dBuf)
	case 0xe0b0bc2e:
		m2 := MakeTLPhotoStrippedSize(m)
		m2.Decode(dBuf)
	case 0xfa3efb95:
		m2 := MakeTLPhotoSizeProgressive(m)
		m2.Decode(dBuf)
	case 0xd8214d41:
		m2 := MakeTLPhotoPathSize(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PhotoSize) DebugString() string {
	switch m.PredicateName {
	case Predicate_photoSizeEmpty:
		t := m.To_PhotoSizeEmpty()
		return t.DebugString()
	case Predicate_photoSize:
		t := m.To_PhotoSize()
		return t.DebugString()
	case Predicate_photoCachedSize:
		t := m.To_PhotoCachedSize()
		return t.DebugString()
	case Predicate_photoStrippedSize:
		t := m.To_PhotoStrippedSize()
		return t.DebugString()
	case Predicate_photoSizeProgressive:
		t := m.To_PhotoSizeProgressive()
		return t.DebugString()
	case Predicate_photoPathSize:
		t := m.To_PhotoPathSize()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhotoSizeEmpty
func (m *PhotoSize) To_PhotoSizeEmpty() *TLPhotoSizeEmpty {
	m.PredicateName = Predicate_photoSizeEmpty
	return &TLPhotoSizeEmpty{
		Data2: m,
	}
}

// To_PhotoSize
func (m *PhotoSize) To_PhotoSize() *TLPhotoSize {
	m.PredicateName = Predicate_photoSize
	return &TLPhotoSize{
		Data2: m,
	}
}

// To_PhotoCachedSize
func (m *PhotoSize) To_PhotoCachedSize() *TLPhotoCachedSize {
	m.PredicateName = Predicate_photoCachedSize
	return &TLPhotoCachedSize{
		Data2: m,
	}
}

// To_PhotoStrippedSize
func (m *PhotoSize) To_PhotoStrippedSize() *TLPhotoStrippedSize {
	m.PredicateName = Predicate_photoStrippedSize
	return &TLPhotoStrippedSize{
		Data2: m,
	}
}

// To_PhotoSizeProgressive
func (m *PhotoSize) To_PhotoSizeProgressive() *TLPhotoSizeProgressive {
	m.PredicateName = Predicate_photoSizeProgressive
	return &TLPhotoSizeProgressive{
		Data2: m,
	}
}

// To_PhotoPathSize
func (m *PhotoSize) To_PhotoPathSize() *TLPhotoPathSize {
	m.PredicateName = Predicate_photoPathSize
	return &TLPhotoPathSize{
		Data2: m,
	}
}

// MakeTLPhotoSizeEmpty
func MakeTLPhotoSizeEmpty(data2 *PhotoSize) *TLPhotoSizeEmpty {
	if data2 == nil {
		return &TLPhotoSizeEmpty{Data2: &PhotoSize{
			PredicateName: Predicate_photoSizeEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_photoSizeEmpty
		return &TLPhotoSizeEmpty{Data2: data2}
	}
}

func (m *TLPhotoSizeEmpty) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoSizeEmpty
	return m.Data2
}

func (m *TLPhotoSizeEmpty) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSizeEmpty) GetType() string  { return m.Data2.Type }

func (m *TLPhotoSizeEmpty) GetPredicateName() string {
	return Predicate_photoSizeEmpty
}

func (m *TLPhotoSizeEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe17e23c: func() []byte {
			x.UInt(0xe17e23c)

			x.String(m.GetType())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoSizeEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoSizeEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoSizeEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoSizeEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe17e23c: func() error {
			m.SetType(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoSizeEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotoSize
func MakeTLPhotoSize(data2 *PhotoSize) *TLPhotoSize {
	if data2 == nil {
		return &TLPhotoSize{Data2: &PhotoSize{
			PredicateName: Predicate_photoSize,
		}}
	} else {
		data2.PredicateName = Predicate_photoSize
		return &TLPhotoSize{Data2: data2}
	}
}

func (m *TLPhotoSize) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoSize
	return m.Data2
}

func (m *TLPhotoSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoSize) GetW() int32  { return m.Data2.W }

func (m *TLPhotoSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoSize) GetH() int32  { return m.Data2.H }

func (m *TLPhotoSize) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLPhotoSize) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLPhotoSize) GetPredicateName() string {
	return Predicate_photoSize
}

func (m *TLPhotoSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x75c78e60: func() []byte {
			x.UInt(0x75c78e60)

			x.String(m.GetType())
			x.Int(m.GetW())
			x.Int(m.GetH())
			x.Int(m.GetSize2())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x75c78e60: func() error {
			m.SetType(dBuf.String())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			m.SetSize2(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotoCachedSize
func MakeTLPhotoCachedSize(data2 *PhotoSize) *TLPhotoCachedSize {
	if data2 == nil {
		return &TLPhotoCachedSize{Data2: &PhotoSize{
			PredicateName: Predicate_photoCachedSize,
		}}
	} else {
		data2.PredicateName = Predicate_photoCachedSize
		return &TLPhotoCachedSize{Data2: data2}
	}
}

func (m *TLPhotoCachedSize) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoCachedSize
	return m.Data2
}

func (m *TLPhotoCachedSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoCachedSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoCachedSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoCachedSize) GetW() int32  { return m.Data2.W }

func (m *TLPhotoCachedSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoCachedSize) GetH() int32  { return m.Data2.H }

func (m *TLPhotoCachedSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoCachedSize) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLPhotoCachedSize) GetPredicateName() string {
	return Predicate_photoCachedSize
}

func (m *TLPhotoCachedSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x21e1ad6: func() []byte {
			x.UInt(0x21e1ad6)

			x.String(m.GetType())
			x.Int(m.GetW())
			x.Int(m.GetH())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoCachedSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoCachedSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoCachedSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoCachedSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x21e1ad6: func() error {
			m.SetType(dBuf.String())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoCachedSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotoStrippedSize
func MakeTLPhotoStrippedSize(data2 *PhotoSize) *TLPhotoStrippedSize {
	if data2 == nil {
		return &TLPhotoStrippedSize{Data2: &PhotoSize{
			PredicateName: Predicate_photoStrippedSize,
		}}
	} else {
		data2.PredicateName = Predicate_photoStrippedSize
		return &TLPhotoStrippedSize{Data2: data2}
	}
}

func (m *TLPhotoStrippedSize) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoStrippedSize
	return m.Data2
}

func (m *TLPhotoStrippedSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoStrippedSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoStrippedSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoStrippedSize) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLPhotoStrippedSize) GetPredicateName() string {
	return Predicate_photoStrippedSize
}

func (m *TLPhotoStrippedSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe0b0bc2e: func() []byte {
			x.UInt(0xe0b0bc2e)

			x.String(m.GetType())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoStrippedSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoStrippedSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoStrippedSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoStrippedSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe0b0bc2e: func() error {
			m.SetType(dBuf.String())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoStrippedSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotoSizeProgressive
func MakeTLPhotoSizeProgressive(data2 *PhotoSize) *TLPhotoSizeProgressive {
	if data2 == nil {
		return &TLPhotoSizeProgressive{Data2: &PhotoSize{
			PredicateName: Predicate_photoSizeProgressive,
		}}
	} else {
		data2.PredicateName = Predicate_photoSizeProgressive
		return &TLPhotoSizeProgressive{Data2: data2}
	}
}

func (m *TLPhotoSizeProgressive) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoSizeProgressive
	return m.Data2
}

func (m *TLPhotoSizeProgressive) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSizeProgressive) GetType() string  { return m.Data2.Type }

func (m *TLPhotoSizeProgressive) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoSizeProgressive) GetW() int32  { return m.Data2.W }

func (m *TLPhotoSizeProgressive) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoSizeProgressive) GetH() int32  { return m.Data2.H }

func (m *TLPhotoSizeProgressive) SetSizes(v []int32) { m.Data2.Sizes = v }
func (m *TLPhotoSizeProgressive) GetSizes() []int32  { return m.Data2.Sizes }

func (m *TLPhotoSizeProgressive) GetPredicateName() string {
	return Predicate_photoSizeProgressive
}

func (m *TLPhotoSizeProgressive) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfa3efb95: func() []byte {
			x.UInt(0xfa3efb95)

			x.String(m.GetType())
			x.Int(m.GetW())
			x.Int(m.GetH())

			x.VectorInt(m.GetSizes())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoSizeProgressive, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoSizeProgressive, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoSizeProgressive) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoSizeProgressive) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfa3efb95: func() error {
			m.SetType(dBuf.String())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())

			m.SetSizes(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoSizeProgressive) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotoPathSize
func MakeTLPhotoPathSize(data2 *PhotoSize) *TLPhotoPathSize {
	if data2 == nil {
		return &TLPhotoPathSize{Data2: &PhotoSize{
			PredicateName: Predicate_photoPathSize,
		}}
	} else {
		data2.PredicateName = Predicate_photoPathSize
		return &TLPhotoPathSize{Data2: data2}
	}
}

func (m *TLPhotoPathSize) To_PhotoSize() *PhotoSize {
	m.Data2.PredicateName = Predicate_photoPathSize
	return m.Data2
}

func (m *TLPhotoPathSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoPathSize) GetType() string  { return m.Data2.Type }

func (m *TLPhotoPathSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoPathSize) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLPhotoPathSize) GetPredicateName() string {
	return Predicate_photoPathSize
}

func (m *TLPhotoPathSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd8214d41: func() []byte {
			x.UInt(0xd8214d41)

			x.String(m.GetType())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoPathSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoPathSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoPathSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoPathSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd8214d41: func() error {
			m.SetType(dBuf.String())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoPathSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Contacts <--
//  + TL_ContactsContactsNotModified
//  + TL_ContactsContacts
//

func (m *Contacts_Contacts) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_contactsNotModified:
		t := m.To_ContactsContactsNotModified()
		xBuf = t.Encode(layer)
	case Predicate_contacts_contacts:
		t := m.To_ContactsContacts()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_Contacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_Contacts) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb74ba9d2:
		m2 := MakeTLContactsContactsNotModified(m)
		m2.Decode(dBuf)
	case 0xeae87e42:
		m2 := MakeTLContactsContacts(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_Contacts) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_contactsNotModified:
		t := m.To_ContactsContactsNotModified()
		return t.DebugString()
	case Predicate_contacts_contacts:
		t := m.To_ContactsContacts()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsContactsNotModified
func (m *Contacts_Contacts) To_ContactsContactsNotModified() *TLContactsContactsNotModified {
	m.PredicateName = Predicate_contacts_contactsNotModified
	return &TLContactsContactsNotModified{
		Data2: m,
	}
}

// To_ContactsContacts
func (m *Contacts_Contacts) To_ContactsContacts() *TLContactsContacts {
	m.PredicateName = Predicate_contacts_contacts
	return &TLContactsContacts{
		Data2: m,
	}
}

// MakeTLContactsContactsNotModified
func MakeTLContactsContactsNotModified(data2 *Contacts_Contacts) *TLContactsContactsNotModified {
	if data2 == nil {
		return &TLContactsContactsNotModified{Data2: &Contacts_Contacts{
			PredicateName: Predicate_contacts_contactsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_contactsNotModified
		return &TLContactsContactsNotModified{Data2: data2}
	}
}

func (m *TLContactsContactsNotModified) To_Contacts_Contacts() *Contacts_Contacts {
	m.Data2.PredicateName = Predicate_contacts_contactsNotModified
	return m.Data2
}

func (m *TLContactsContactsNotModified) GetPredicateName() string {
	return Predicate_contacts_contactsNotModified
}

func (m *TLContactsContactsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb74ba9d2: func() []byte {
			x.UInt(0xb74ba9d2)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_contactsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_contactsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsContactsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsContactsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb74ba9d2: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsContactsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLContactsContacts
func MakeTLContactsContacts(data2 *Contacts_Contacts) *TLContactsContacts {
	if data2 == nil {
		return &TLContactsContacts{Data2: &Contacts_Contacts{
			PredicateName: Predicate_contacts_contacts,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_contacts
		return &TLContactsContacts{Data2: data2}
	}
}

func (m *TLContactsContacts) To_Contacts_Contacts() *Contacts_Contacts {
	m.Data2.PredicateName = Predicate_contacts_contacts
	return m.Data2
}

func (m *TLContactsContacts) SetContacts(v []*Contact) { m.Data2.Contacts = v }
func (m *TLContactsContacts) GetContacts() []*Contact  { return m.Data2.Contacts }

func (m *TLContactsContacts) SetSavedCount(v int32) { m.Data2.SavedCount = v }
func (m *TLContactsContacts) GetSavedCount() int32  { return m.Data2.SavedCount }

func (m *TLContactsContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsContacts) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsContacts) GetPredicateName() string {
	return Predicate_contacts_contacts
}

func (m *TLContactsContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeae87e42: func() []byte {
			x.UInt(0xeae87e42)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetContacts())))
			for _, v := range m.GetContacts() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetSavedCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_contacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_contacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeae87e42: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Contact, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Contact{}
				v0[i].Decode(dBuf)
			}
			m.SetContacts(v0)

			m.SetSavedCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PhoneConnection <--
//  + TL_PhoneConnection
//  + TL_PhoneConnectionWebrtc
//

func (m *PhoneConnection) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phoneConnection:
		t := m.To_PhoneConnection()
		xBuf = t.Encode(layer)
	case Predicate_phoneConnectionWebrtc:
		t := m.To_PhoneConnectionWebrtc()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PhoneConnection) CalcByteSize(layer int32) int {
	return 0
}

func (m *PhoneConnection) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9d4c17c0:
		m2 := MakeTLPhoneConnection(m)
		m2.Decode(dBuf)
	case 0x635fe375:
		m2 := MakeTLPhoneConnectionWebrtc(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PhoneConnection) DebugString() string {
	switch m.PredicateName {
	case Predicate_phoneConnection:
		t := m.To_PhoneConnection()
		return t.DebugString()
	case Predicate_phoneConnectionWebrtc:
		t := m.To_PhoneConnectionWebrtc()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneConnection
func (m *PhoneConnection) To_PhoneConnection() *TLPhoneConnection {
	m.PredicateName = Predicate_phoneConnection
	return &TLPhoneConnection{
		Data2: m,
	}
}

// To_PhoneConnectionWebrtc
func (m *PhoneConnection) To_PhoneConnectionWebrtc() *TLPhoneConnectionWebrtc {
	m.PredicateName = Predicate_phoneConnectionWebrtc
	return &TLPhoneConnectionWebrtc{
		Data2: m,
	}
}

// MakeTLPhoneConnection
func MakeTLPhoneConnection(data2 *PhoneConnection) *TLPhoneConnection {
	if data2 == nil {
		return &TLPhoneConnection{Data2: &PhoneConnection{
			PredicateName: Predicate_phoneConnection,
		}}
	} else {
		data2.PredicateName = Predicate_phoneConnection
		return &TLPhoneConnection{Data2: data2}
	}
}

func (m *TLPhoneConnection) To_PhoneConnection() *PhoneConnection {
	m.Data2.PredicateName = Predicate_phoneConnection
	return m.Data2
}

func (m *TLPhoneConnection) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneConnection) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneConnection) SetIp(v string) { m.Data2.Ip = v }
func (m *TLPhoneConnection) GetIp() string  { return m.Data2.Ip }

func (m *TLPhoneConnection) SetIpv6(v string) { m.Data2.Ipv6 = v }
func (m *TLPhoneConnection) GetIpv6() string  { return m.Data2.Ipv6 }

func (m *TLPhoneConnection) SetPort(v int32) { m.Data2.Port = v }
func (m *TLPhoneConnection) GetPort() int32  { return m.Data2.Port }

func (m *TLPhoneConnection) SetPeerTag(v []byte) { m.Data2.PeerTag = v }
func (m *TLPhoneConnection) GetPeerTag() []byte  { return m.Data2.PeerTag }

func (m *TLPhoneConnection) GetPredicateName() string {
	return Predicate_phoneConnection
}

func (m *TLPhoneConnection) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9d4c17c0: func() []byte {
			x.UInt(0x9d4c17c0)

			x.Long(m.GetId())
			x.String(m.GetIp())
			x.String(m.GetIpv6())
			x.Int(m.GetPort())
			x.StringBytes(m.GetPeerTag())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneConnection, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneConnection, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneConnection) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneConnection) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9d4c17c0: func() error {
			m.SetId(dBuf.Long())
			m.SetIp(dBuf.String())
			m.SetIpv6(dBuf.String())
			m.SetPort(dBuf.Int())
			m.SetPeerTag(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneConnection) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneConnectionWebrtc
func MakeTLPhoneConnectionWebrtc(data2 *PhoneConnection) *TLPhoneConnectionWebrtc {
	if data2 == nil {
		return &TLPhoneConnectionWebrtc{Data2: &PhoneConnection{
			PredicateName: Predicate_phoneConnectionWebrtc,
		}}
	} else {
		data2.PredicateName = Predicate_phoneConnectionWebrtc
		return &TLPhoneConnectionWebrtc{Data2: data2}
	}
}

func (m *TLPhoneConnectionWebrtc) To_PhoneConnection() *PhoneConnection {
	m.Data2.PredicateName = Predicate_phoneConnectionWebrtc
	return m.Data2
}

//// flags
func (m *TLPhoneConnectionWebrtc) SetTurn(v bool) { m.Data2.Turn = v }
func (m *TLPhoneConnectionWebrtc) GetTurn() bool  { return m.Data2.Turn }

func (m *TLPhoneConnectionWebrtc) SetStun(v bool) { m.Data2.Stun = v }
func (m *TLPhoneConnectionWebrtc) GetStun() bool  { return m.Data2.Stun }

func (m *TLPhoneConnectionWebrtc) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneConnectionWebrtc) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneConnectionWebrtc) SetIp(v string) { m.Data2.Ip = v }
func (m *TLPhoneConnectionWebrtc) GetIp() string  { return m.Data2.Ip }

func (m *TLPhoneConnectionWebrtc) SetIpv6(v string) { m.Data2.Ipv6 = v }
func (m *TLPhoneConnectionWebrtc) GetIpv6() string  { return m.Data2.Ipv6 }

func (m *TLPhoneConnectionWebrtc) SetPort(v int32) { m.Data2.Port = v }
func (m *TLPhoneConnectionWebrtc) GetPort() int32  { return m.Data2.Port }

func (m *TLPhoneConnectionWebrtc) SetUsername(v string) { m.Data2.Username = v }
func (m *TLPhoneConnectionWebrtc) GetUsername() string  { return m.Data2.Username }

func (m *TLPhoneConnectionWebrtc) SetPassword(v string) { m.Data2.Password = v }
func (m *TLPhoneConnectionWebrtc) GetPassword() string  { return m.Data2.Password }

func (m *TLPhoneConnectionWebrtc) GetPredicateName() string {
	return Predicate_phoneConnectionWebrtc
}

func (m *TLPhoneConnectionWebrtc) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x635fe375: func() []byte {
			x.UInt(0x635fe375)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTurn() == true {
					flags |= 1 << 0
				}
				if m.GetStun() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetIp())
			x.String(m.GetIpv6())
			x.Int(m.GetPort())
			x.String(m.GetUsername())
			x.String(m.GetPassword())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneConnectionWebrtc, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneConnectionWebrtc, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneConnectionWebrtc) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneConnectionWebrtc) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x635fe375: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetTurn(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetStun(true)
			}
			m.SetId(dBuf.Long())
			m.SetIp(dBuf.String())
			m.SetIpv6(dBuf.String())
			m.SetPort(dBuf.Int())
			m.SetUsername(dBuf.String())
			m.SetPassword(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneConnectionWebrtc) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventAction <--
//  + TL_ChannelAdminLogEventActionChangeTitle
//  + TL_ChannelAdminLogEventActionChangeAbout
//  + TL_ChannelAdminLogEventActionChangeUsername
//  + TL_ChannelAdminLogEventActionChangePhoto
//  + TL_ChannelAdminLogEventActionToggleInvites
//  + TL_ChannelAdminLogEventActionToggleSignatures
//  + TL_ChannelAdminLogEventActionUpdatePinned
//  + TL_ChannelAdminLogEventActionEditMessage
//  + TL_ChannelAdminLogEventActionDeleteMessage
//  + TL_ChannelAdminLogEventActionParticipantJoin
//  + TL_ChannelAdminLogEventActionParticipantLeave
//  + TL_ChannelAdminLogEventActionParticipantInvite
//  + TL_ChannelAdminLogEventActionParticipantToggleBan
//  + TL_ChannelAdminLogEventActionParticipantToggleAdmin
//  + TL_ChannelAdminLogEventActionChangeStickerSet
//  + TL_ChannelAdminLogEventActionTogglePreHistoryHidden
//  + TL_ChannelAdminLogEventActionDefaultBannedRights
//  + TL_ChannelAdminLogEventActionStopPoll
//  + TL_ChannelAdminLogEventActionChangeLinkedChat
//  + TL_ChannelAdminLogEventActionChangeLocation
//  + TL_ChannelAdminLogEventActionToggleSlowMode
//  + TL_ChannelAdminLogEventActionStartGroupCall
//  + TL_ChannelAdminLogEventActionDiscardGroupCall
//  + TL_ChannelAdminLogEventActionParticipantMute
//  + TL_ChannelAdminLogEventActionParticipantUnmute
//  + TL_ChannelAdminLogEventActionToggleGroupCallSetting
//  + TL_ChannelAdminLogEventActionParticipantJoinByInvite
//  + TL_ChannelAdminLogEventActionExportedInviteDelete
//  + TL_ChannelAdminLogEventActionExportedInviteRevoke
//  + TL_ChannelAdminLogEventActionExportedInviteEdit
//  + TL_ChannelAdminLogEventActionParticipantVolume
//  + TL_ChannelAdminLogEventActionChangeHistoryTTL
//  + TL_ChannelAdminLogEventActionParticipantJoinByRequest
//  + TL_ChannelAdminLogEventActionToggleNoForwards
//  + TL_ChannelAdminLogEventActionSendMessage
//  + TL_ChannelAdminLogEventActionChangeAvailableReactions
//

func (m *ChannelAdminLogEventAction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelAdminLogEventActionChangeTitle:
		t := m.To_ChannelAdminLogEventActionChangeTitle()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeAbout:
		t := m.To_ChannelAdminLogEventActionChangeAbout()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeUsername:
		t := m.To_ChannelAdminLogEventActionChangeUsername()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangePhoto:
		t := m.To_ChannelAdminLogEventActionChangePhoto()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionToggleInvites:
		t := m.To_ChannelAdminLogEventActionToggleInvites()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionToggleSignatures:
		t := m.To_ChannelAdminLogEventActionToggleSignatures()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionUpdatePinned:
		t := m.To_ChannelAdminLogEventActionUpdatePinned()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionEditMessage:
		t := m.To_ChannelAdminLogEventActionEditMessage()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionDeleteMessage:
		t := m.To_ChannelAdminLogEventActionDeleteMessage()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantJoin:
		t := m.To_ChannelAdminLogEventActionParticipantJoin()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantLeave:
		t := m.To_ChannelAdminLogEventActionParticipantLeave()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantInvite:
		t := m.To_ChannelAdminLogEventActionParticipantInvite()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantToggleBan:
		t := m.To_ChannelAdminLogEventActionParticipantToggleBan()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantToggleAdmin:
		t := m.To_ChannelAdminLogEventActionParticipantToggleAdmin()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeStickerSet:
		t := m.To_ChannelAdminLogEventActionChangeStickerSet()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionTogglePreHistoryHidden:
		t := m.To_ChannelAdminLogEventActionTogglePreHistoryHidden()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionDefaultBannedRights:
		t := m.To_ChannelAdminLogEventActionDefaultBannedRights()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionStopPoll:
		t := m.To_ChannelAdminLogEventActionStopPoll()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeLinkedChat:
		t := m.To_ChannelAdminLogEventActionChangeLinkedChat()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeLocation:
		t := m.To_ChannelAdminLogEventActionChangeLocation()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionToggleSlowMode:
		t := m.To_ChannelAdminLogEventActionToggleSlowMode()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionStartGroupCall:
		t := m.To_ChannelAdminLogEventActionStartGroupCall()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionDiscardGroupCall:
		t := m.To_ChannelAdminLogEventActionDiscardGroupCall()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantMute:
		t := m.To_ChannelAdminLogEventActionParticipantMute()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantUnmute:
		t := m.To_ChannelAdminLogEventActionParticipantUnmute()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionToggleGroupCallSetting:
		t := m.To_ChannelAdminLogEventActionToggleGroupCallSetting()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantJoinByInvite:
		t := m.To_ChannelAdminLogEventActionParticipantJoinByInvite()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionExportedInviteDelete:
		t := m.To_ChannelAdminLogEventActionExportedInviteDelete()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionExportedInviteRevoke:
		t := m.To_ChannelAdminLogEventActionExportedInviteRevoke()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionExportedInviteEdit:
		t := m.To_ChannelAdminLogEventActionExportedInviteEdit()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantVolume:
		t := m.To_ChannelAdminLogEventActionParticipantVolume()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeHistoryTTL:
		t := m.To_ChannelAdminLogEventActionChangeHistoryTTL()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionParticipantJoinByRequest:
		t := m.To_ChannelAdminLogEventActionParticipantJoinByRequest()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionToggleNoForwards:
		t := m.To_ChannelAdminLogEventActionToggleNoForwards()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionSendMessage:
		t := m.To_ChannelAdminLogEventActionSendMessage()
		xBuf = t.Encode(layer)
	case Predicate_channelAdminLogEventActionChangeAvailableReactions:
		t := m.To_ChannelAdminLogEventActionChangeAvailableReactions()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelAdminLogEventAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelAdminLogEventAction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe6dfb825:
		m2 := MakeTLChannelAdminLogEventActionChangeTitle(m)
		m2.Decode(dBuf)
	case 0x55188a2e:
		m2 := MakeTLChannelAdminLogEventActionChangeAbout(m)
		m2.Decode(dBuf)
	case 0x6a4afc38:
		m2 := MakeTLChannelAdminLogEventActionChangeUsername(m)
		m2.Decode(dBuf)
	case 0x434bd2af:
		m2 := MakeTLChannelAdminLogEventActionChangePhoto(m)
		m2.Decode(dBuf)
	case 0x1b7907ae:
		m2 := MakeTLChannelAdminLogEventActionToggleInvites(m)
		m2.Decode(dBuf)
	case 0x26ae0971:
		m2 := MakeTLChannelAdminLogEventActionToggleSignatures(m)
		m2.Decode(dBuf)
	case 0xe9e82c18:
		m2 := MakeTLChannelAdminLogEventActionUpdatePinned(m)
		m2.Decode(dBuf)
	case 0x709b2405:
		m2 := MakeTLChannelAdminLogEventActionEditMessage(m)
		m2.Decode(dBuf)
	case 0x42e047bb:
		m2 := MakeTLChannelAdminLogEventActionDeleteMessage(m)
		m2.Decode(dBuf)
	case 0x183040d3:
		m2 := MakeTLChannelAdminLogEventActionParticipantJoin(m)
		m2.Decode(dBuf)
	case 0xf89777f2:
		m2 := MakeTLChannelAdminLogEventActionParticipantLeave(m)
		m2.Decode(dBuf)
	case 0xe31c34d8:
		m2 := MakeTLChannelAdminLogEventActionParticipantInvite(m)
		m2.Decode(dBuf)
	case 0xe6d83d7e:
		m2 := MakeTLChannelAdminLogEventActionParticipantToggleBan(m)
		m2.Decode(dBuf)
	case 0xd5676710:
		m2 := MakeTLChannelAdminLogEventActionParticipantToggleAdmin(m)
		m2.Decode(dBuf)
	case 0xb1c3caa7:
		m2 := MakeTLChannelAdminLogEventActionChangeStickerSet(m)
		m2.Decode(dBuf)
	case 0x5f5c95f1:
		m2 := MakeTLChannelAdminLogEventActionTogglePreHistoryHidden(m)
		m2.Decode(dBuf)
	case 0x2df5fc0a:
		m2 := MakeTLChannelAdminLogEventActionDefaultBannedRights(m)
		m2.Decode(dBuf)
	case 0x8f079643:
		m2 := MakeTLChannelAdminLogEventActionStopPoll(m)
		m2.Decode(dBuf)
	case 0x50c7ac8:
		m2 := MakeTLChannelAdminLogEventActionChangeLinkedChat(m)
		m2.Decode(dBuf)
	case 0xe6b76ae:
		m2 := MakeTLChannelAdminLogEventActionChangeLocation(m)
		m2.Decode(dBuf)
	case 0x53909779:
		m2 := MakeTLChannelAdminLogEventActionToggleSlowMode(m)
		m2.Decode(dBuf)
	case 0x23209745:
		m2 := MakeTLChannelAdminLogEventActionStartGroupCall(m)
		m2.Decode(dBuf)
	case 0xdb9f9140:
		m2 := MakeTLChannelAdminLogEventActionDiscardGroupCall(m)
		m2.Decode(dBuf)
	case 0xf92424d2:
		m2 := MakeTLChannelAdminLogEventActionParticipantMute(m)
		m2.Decode(dBuf)
	case 0xe64429c0:
		m2 := MakeTLChannelAdminLogEventActionParticipantUnmute(m)
		m2.Decode(dBuf)
	case 0x56d6a247:
		m2 := MakeTLChannelAdminLogEventActionToggleGroupCallSetting(m)
		m2.Decode(dBuf)
	case 0x5cdada77:
		m2 := MakeTLChannelAdminLogEventActionParticipantJoinByInvite(m)
		m2.Decode(dBuf)
	case 0x5a50fca4:
		m2 := MakeTLChannelAdminLogEventActionExportedInviteDelete(m)
		m2.Decode(dBuf)
	case 0x410a134e:
		m2 := MakeTLChannelAdminLogEventActionExportedInviteRevoke(m)
		m2.Decode(dBuf)
	case 0xe90ebb59:
		m2 := MakeTLChannelAdminLogEventActionExportedInviteEdit(m)
		m2.Decode(dBuf)
	case 0x3e7f6847:
		m2 := MakeTLChannelAdminLogEventActionParticipantVolume(m)
		m2.Decode(dBuf)
	case 0x6e941a38:
		m2 := MakeTLChannelAdminLogEventActionChangeHistoryTTL(m)
		m2.Decode(dBuf)
	case 0xafb6144a:
		m2 := MakeTLChannelAdminLogEventActionParticipantJoinByRequest(m)
		m2.Decode(dBuf)
	case 0xcb2ac766:
		m2 := MakeTLChannelAdminLogEventActionToggleNoForwards(m)
		m2.Decode(dBuf)
	case 0x278f2868:
		m2 := MakeTLChannelAdminLogEventActionSendMessage(m)
		m2.Decode(dBuf)
	case 0x9cf7f76a:
		m2 := MakeTLChannelAdminLogEventActionChangeAvailableReactions(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelAdminLogEventAction) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelAdminLogEventActionChangeTitle:
		t := m.To_ChannelAdminLogEventActionChangeTitle()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeAbout:
		t := m.To_ChannelAdminLogEventActionChangeAbout()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeUsername:
		t := m.To_ChannelAdminLogEventActionChangeUsername()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangePhoto:
		t := m.To_ChannelAdminLogEventActionChangePhoto()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionToggleInvites:
		t := m.To_ChannelAdminLogEventActionToggleInvites()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionToggleSignatures:
		t := m.To_ChannelAdminLogEventActionToggleSignatures()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionUpdatePinned:
		t := m.To_ChannelAdminLogEventActionUpdatePinned()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionEditMessage:
		t := m.To_ChannelAdminLogEventActionEditMessage()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionDeleteMessage:
		t := m.To_ChannelAdminLogEventActionDeleteMessage()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantJoin:
		t := m.To_ChannelAdminLogEventActionParticipantJoin()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantLeave:
		t := m.To_ChannelAdminLogEventActionParticipantLeave()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantInvite:
		t := m.To_ChannelAdminLogEventActionParticipantInvite()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantToggleBan:
		t := m.To_ChannelAdminLogEventActionParticipantToggleBan()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantToggleAdmin:
		t := m.To_ChannelAdminLogEventActionParticipantToggleAdmin()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeStickerSet:
		t := m.To_ChannelAdminLogEventActionChangeStickerSet()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionTogglePreHistoryHidden:
		t := m.To_ChannelAdminLogEventActionTogglePreHistoryHidden()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionDefaultBannedRights:
		t := m.To_ChannelAdminLogEventActionDefaultBannedRights()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionStopPoll:
		t := m.To_ChannelAdminLogEventActionStopPoll()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeLinkedChat:
		t := m.To_ChannelAdminLogEventActionChangeLinkedChat()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeLocation:
		t := m.To_ChannelAdminLogEventActionChangeLocation()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionToggleSlowMode:
		t := m.To_ChannelAdminLogEventActionToggleSlowMode()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionStartGroupCall:
		t := m.To_ChannelAdminLogEventActionStartGroupCall()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionDiscardGroupCall:
		t := m.To_ChannelAdminLogEventActionDiscardGroupCall()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantMute:
		t := m.To_ChannelAdminLogEventActionParticipantMute()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantUnmute:
		t := m.To_ChannelAdminLogEventActionParticipantUnmute()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionToggleGroupCallSetting:
		t := m.To_ChannelAdminLogEventActionToggleGroupCallSetting()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantJoinByInvite:
		t := m.To_ChannelAdminLogEventActionParticipantJoinByInvite()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionExportedInviteDelete:
		t := m.To_ChannelAdminLogEventActionExportedInviteDelete()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionExportedInviteRevoke:
		t := m.To_ChannelAdminLogEventActionExportedInviteRevoke()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionExportedInviteEdit:
		t := m.To_ChannelAdminLogEventActionExportedInviteEdit()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantVolume:
		t := m.To_ChannelAdminLogEventActionParticipantVolume()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeHistoryTTL:
		t := m.To_ChannelAdminLogEventActionChangeHistoryTTL()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionParticipantJoinByRequest:
		t := m.To_ChannelAdminLogEventActionParticipantJoinByRequest()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionToggleNoForwards:
		t := m.To_ChannelAdminLogEventActionToggleNoForwards()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionSendMessage:
		t := m.To_ChannelAdminLogEventActionSendMessage()
		return t.DebugString()
	case Predicate_channelAdminLogEventActionChangeAvailableReactions:
		t := m.To_ChannelAdminLogEventActionChangeAvailableReactions()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelAdminLogEventActionChangeTitle
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeTitle() *TLChannelAdminLogEventActionChangeTitle {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeTitle
	return &TLChannelAdminLogEventActionChangeTitle{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeAbout
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeAbout() *TLChannelAdminLogEventActionChangeAbout {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeAbout
	return &TLChannelAdminLogEventActionChangeAbout{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeUsername
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeUsername() *TLChannelAdminLogEventActionChangeUsername {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeUsername
	return &TLChannelAdminLogEventActionChangeUsername{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangePhoto
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangePhoto() *TLChannelAdminLogEventActionChangePhoto {
	m.PredicateName = Predicate_channelAdminLogEventActionChangePhoto
	return &TLChannelAdminLogEventActionChangePhoto{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionToggleInvites
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleInvites() *TLChannelAdminLogEventActionToggleInvites {
	m.PredicateName = Predicate_channelAdminLogEventActionToggleInvites
	return &TLChannelAdminLogEventActionToggleInvites{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionToggleSignatures
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleSignatures() *TLChannelAdminLogEventActionToggleSignatures {
	m.PredicateName = Predicate_channelAdminLogEventActionToggleSignatures
	return &TLChannelAdminLogEventActionToggleSignatures{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionUpdatePinned
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionUpdatePinned() *TLChannelAdminLogEventActionUpdatePinned {
	m.PredicateName = Predicate_channelAdminLogEventActionUpdatePinned
	return &TLChannelAdminLogEventActionUpdatePinned{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionEditMessage
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionEditMessage() *TLChannelAdminLogEventActionEditMessage {
	m.PredicateName = Predicate_channelAdminLogEventActionEditMessage
	return &TLChannelAdminLogEventActionEditMessage{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionDeleteMessage
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDeleteMessage() *TLChannelAdminLogEventActionDeleteMessage {
	m.PredicateName = Predicate_channelAdminLogEventActionDeleteMessage
	return &TLChannelAdminLogEventActionDeleteMessage{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantJoin
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantJoin() *TLChannelAdminLogEventActionParticipantJoin {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantJoin
	return &TLChannelAdminLogEventActionParticipantJoin{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantLeave
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantLeave() *TLChannelAdminLogEventActionParticipantLeave {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantLeave
	return &TLChannelAdminLogEventActionParticipantLeave{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantInvite
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantInvite() *TLChannelAdminLogEventActionParticipantInvite {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantInvite
	return &TLChannelAdminLogEventActionParticipantInvite{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantToggleBan
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleBan() *TLChannelAdminLogEventActionParticipantToggleBan {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleBan
	return &TLChannelAdminLogEventActionParticipantToggleBan{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantToggleAdmin
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleAdmin() *TLChannelAdminLogEventActionParticipantToggleAdmin {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleAdmin
	return &TLChannelAdminLogEventActionParticipantToggleAdmin{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeStickerSet
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeStickerSet() *TLChannelAdminLogEventActionChangeStickerSet {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeStickerSet
	return &TLChannelAdminLogEventActionChangeStickerSet{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionTogglePreHistoryHidden
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionTogglePreHistoryHidden() *TLChannelAdminLogEventActionTogglePreHistoryHidden {
	m.PredicateName = Predicate_channelAdminLogEventActionTogglePreHistoryHidden
	return &TLChannelAdminLogEventActionTogglePreHistoryHidden{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionDefaultBannedRights
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDefaultBannedRights() *TLChannelAdminLogEventActionDefaultBannedRights {
	m.PredicateName = Predicate_channelAdminLogEventActionDefaultBannedRights
	return &TLChannelAdminLogEventActionDefaultBannedRights{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionStopPoll
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionStopPoll() *TLChannelAdminLogEventActionStopPoll {
	m.PredicateName = Predicate_channelAdminLogEventActionStopPoll
	return &TLChannelAdminLogEventActionStopPoll{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeLinkedChat
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeLinkedChat() *TLChannelAdminLogEventActionChangeLinkedChat {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeLinkedChat
	return &TLChannelAdminLogEventActionChangeLinkedChat{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeLocation
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeLocation() *TLChannelAdminLogEventActionChangeLocation {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeLocation
	return &TLChannelAdminLogEventActionChangeLocation{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionToggleSlowMode
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleSlowMode() *TLChannelAdminLogEventActionToggleSlowMode {
	m.PredicateName = Predicate_channelAdminLogEventActionToggleSlowMode
	return &TLChannelAdminLogEventActionToggleSlowMode{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionStartGroupCall
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionStartGroupCall() *TLChannelAdminLogEventActionStartGroupCall {
	m.PredicateName = Predicate_channelAdminLogEventActionStartGroupCall
	return &TLChannelAdminLogEventActionStartGroupCall{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionDiscardGroupCall
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDiscardGroupCall() *TLChannelAdminLogEventActionDiscardGroupCall {
	m.PredicateName = Predicate_channelAdminLogEventActionDiscardGroupCall
	return &TLChannelAdminLogEventActionDiscardGroupCall{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantMute
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantMute() *TLChannelAdminLogEventActionParticipantMute {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantMute
	return &TLChannelAdminLogEventActionParticipantMute{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantUnmute
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantUnmute() *TLChannelAdminLogEventActionParticipantUnmute {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantUnmute
	return &TLChannelAdminLogEventActionParticipantUnmute{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionToggleGroupCallSetting
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleGroupCallSetting() *TLChannelAdminLogEventActionToggleGroupCallSetting {
	m.PredicateName = Predicate_channelAdminLogEventActionToggleGroupCallSetting
	return &TLChannelAdminLogEventActionToggleGroupCallSetting{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantJoinByInvite
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantJoinByInvite() *TLChannelAdminLogEventActionParticipantJoinByInvite {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByInvite
	return &TLChannelAdminLogEventActionParticipantJoinByInvite{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionExportedInviteDelete
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionExportedInviteDelete() *TLChannelAdminLogEventActionExportedInviteDelete {
	m.PredicateName = Predicate_channelAdminLogEventActionExportedInviteDelete
	return &TLChannelAdminLogEventActionExportedInviteDelete{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionExportedInviteRevoke
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionExportedInviteRevoke() *TLChannelAdminLogEventActionExportedInviteRevoke {
	m.PredicateName = Predicate_channelAdminLogEventActionExportedInviteRevoke
	return &TLChannelAdminLogEventActionExportedInviteRevoke{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionExportedInviteEdit
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionExportedInviteEdit() *TLChannelAdminLogEventActionExportedInviteEdit {
	m.PredicateName = Predicate_channelAdminLogEventActionExportedInviteEdit
	return &TLChannelAdminLogEventActionExportedInviteEdit{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantVolume
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantVolume() *TLChannelAdminLogEventActionParticipantVolume {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantVolume
	return &TLChannelAdminLogEventActionParticipantVolume{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeHistoryTTL
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeHistoryTTL() *TLChannelAdminLogEventActionChangeHistoryTTL {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeHistoryTTL
	return &TLChannelAdminLogEventActionChangeHistoryTTL{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionParticipantJoinByRequest
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantJoinByRequest() *TLChannelAdminLogEventActionParticipantJoinByRequest {
	m.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByRequest
	return &TLChannelAdminLogEventActionParticipantJoinByRequest{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionToggleNoForwards
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleNoForwards() *TLChannelAdminLogEventActionToggleNoForwards {
	m.PredicateName = Predicate_channelAdminLogEventActionToggleNoForwards
	return &TLChannelAdminLogEventActionToggleNoForwards{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionSendMessage
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionSendMessage() *TLChannelAdminLogEventActionSendMessage {
	m.PredicateName = Predicate_channelAdminLogEventActionSendMessage
	return &TLChannelAdminLogEventActionSendMessage{
		Data2: m,
	}
}

// To_ChannelAdminLogEventActionChangeAvailableReactions
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeAvailableReactions() *TLChannelAdminLogEventActionChangeAvailableReactions {
	m.PredicateName = Predicate_channelAdminLogEventActionChangeAvailableReactions
	return &TLChannelAdminLogEventActionChangeAvailableReactions{
		Data2: m,
	}
}

// MakeTLChannelAdminLogEventActionChangeTitle
func MakeTLChannelAdminLogEventActionChangeTitle(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeTitle {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeTitle{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeTitle,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeTitle
		return &TLChannelAdminLogEventActionChangeTitle{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeTitle) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeTitle
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeTitle) SetPrevValue_STRING(v string) {
	m.Data2.PrevValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeTitle) GetPrevValue_STRING() string {
	return m.Data2.PrevValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeTitle) SetNewValue_STRING(v string) {
	m.Data2.NewValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeTitle) GetNewValue_STRING() string {
	return m.Data2.NewValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeTitle) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeTitle
}

func (m *TLChannelAdminLogEventActionChangeTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe6dfb825: func() []byte {
			x.UInt(0xe6dfb825)

			x.String(m.GetPrevValue_STRING())
			x.String(m.GetNewValue_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeTitle, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeTitle, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeTitle) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe6dfb825: func() error {
			m.SetPrevValue_STRING(dBuf.String())
			m.SetNewValue_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeAbout
func MakeTLChannelAdminLogEventActionChangeAbout(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeAbout {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeAbout{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeAbout,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeAbout
		return &TLChannelAdminLogEventActionChangeAbout{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeAbout) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeAbout
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeAbout) SetPrevValue_STRING(v string) {
	m.Data2.PrevValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeAbout) GetPrevValue_STRING() string {
	return m.Data2.PrevValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeAbout) SetNewValue_STRING(v string) {
	m.Data2.NewValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeAbout) GetNewValue_STRING() string {
	return m.Data2.NewValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeAbout) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeAbout
}

func (m *TLChannelAdminLogEventActionChangeAbout) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x55188a2e: func() []byte {
			x.UInt(0x55188a2e)

			x.String(m.GetPrevValue_STRING())
			x.String(m.GetNewValue_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeAbout, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeAbout, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeAbout) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeAbout) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x55188a2e: func() error {
			m.SetPrevValue_STRING(dBuf.String())
			m.SetNewValue_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeAbout) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeUsername
func MakeTLChannelAdminLogEventActionChangeUsername(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeUsername {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeUsername{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeUsername,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeUsername
		return &TLChannelAdminLogEventActionChangeUsername{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeUsername) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeUsername
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeUsername) SetPrevValue_STRING(v string) {
	m.Data2.PrevValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeUsername) GetPrevValue_STRING() string {
	return m.Data2.PrevValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeUsername) SetNewValue_STRING(v string) {
	m.Data2.NewValue_STRING = v
}
func (m *TLChannelAdminLogEventActionChangeUsername) GetNewValue_STRING() string {
	return m.Data2.NewValue_STRING
}

func (m *TLChannelAdminLogEventActionChangeUsername) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeUsername
}

func (m *TLChannelAdminLogEventActionChangeUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6a4afc38: func() []byte {
			x.UInt(0x6a4afc38)

			x.String(m.GetPrevValue_STRING())
			x.String(m.GetNewValue_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeUsername, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeUsername, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeUsername) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6a4afc38: func() error {
			m.SetPrevValue_STRING(dBuf.String())
			m.SetNewValue_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangePhoto
func MakeTLChannelAdminLogEventActionChangePhoto(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangePhoto {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangePhoto{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangePhoto,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangePhoto
		return &TLChannelAdminLogEventActionChangePhoto{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangePhoto) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangePhoto
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangePhoto) SetPrevPhoto(v *Photo) { m.Data2.PrevPhoto = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetPrevPhoto() *Photo  { return m.Data2.PrevPhoto }

func (m *TLChannelAdminLogEventActionChangePhoto) SetNewPhoto(v *Photo) { m.Data2.NewPhoto = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetNewPhoto() *Photo  { return m.Data2.NewPhoto }

func (m *TLChannelAdminLogEventActionChangePhoto) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangePhoto
}

func (m *TLChannelAdminLogEventActionChangePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x434bd2af: func() []byte {
			x.UInt(0x434bd2af)

			x.Bytes(m.GetPrevPhoto().Encode(layer))
			x.Bytes(m.GetNewPhoto().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangePhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangePhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangePhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x434bd2af: func() error {

			m2 := &Photo{}
			m2.Decode(dBuf)
			m.SetPrevPhoto(m2)

			m3 := &Photo{}
			m3.Decode(dBuf)
			m.SetNewPhoto(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionToggleInvites
func MakeTLChannelAdminLogEventActionToggleInvites(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionToggleInvites {
	if data2 == nil {
		return &TLChannelAdminLogEventActionToggleInvites{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionToggleInvites,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionToggleInvites
		return &TLChannelAdminLogEventActionToggleInvites{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionToggleInvites) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionToggleInvites
	return m.Data2
}

func (m *TLChannelAdminLogEventActionToggleInvites) SetNewValue_BOOL(v *Bool) {
	m.Data2.NewValue_BOOL = v
}
func (m *TLChannelAdminLogEventActionToggleInvites) GetNewValue_BOOL() *Bool {
	return m.Data2.NewValue_BOOL
}

func (m *TLChannelAdminLogEventActionToggleInvites) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionToggleInvites
}

func (m *TLChannelAdminLogEventActionToggleInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b7907ae: func() []byte {
			x.UInt(0x1b7907ae)

			x.Bytes(m.GetNewValue_BOOL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionToggleInvites, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionToggleInvites, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionToggleInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionToggleInvites) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b7907ae: func() error {

			m1 := &Bool{}
			m1.Decode(dBuf)
			m.SetNewValue_BOOL(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionToggleInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionToggleSignatures
func MakeTLChannelAdminLogEventActionToggleSignatures(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionToggleSignatures {
	if data2 == nil {
		return &TLChannelAdminLogEventActionToggleSignatures{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionToggleSignatures,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionToggleSignatures
		return &TLChannelAdminLogEventActionToggleSignatures{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionToggleSignatures) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionToggleSignatures
	return m.Data2
}

func (m *TLChannelAdminLogEventActionToggleSignatures) SetNewValue_BOOL(v *Bool) {
	m.Data2.NewValue_BOOL = v
}
func (m *TLChannelAdminLogEventActionToggleSignatures) GetNewValue_BOOL() *Bool {
	return m.Data2.NewValue_BOOL
}

func (m *TLChannelAdminLogEventActionToggleSignatures) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionToggleSignatures
}

func (m *TLChannelAdminLogEventActionToggleSignatures) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x26ae0971: func() []byte {
			x.UInt(0x26ae0971)

			x.Bytes(m.GetNewValue_BOOL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionToggleSignatures, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionToggleSignatures, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionToggleSignatures) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionToggleSignatures) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x26ae0971: func() error {

			m1 := &Bool{}
			m1.Decode(dBuf)
			m.SetNewValue_BOOL(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionToggleSignatures) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionUpdatePinned
func MakeTLChannelAdminLogEventActionUpdatePinned(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionUpdatePinned {
	if data2 == nil {
		return &TLChannelAdminLogEventActionUpdatePinned{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionUpdatePinned,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionUpdatePinned
		return &TLChannelAdminLogEventActionUpdatePinned{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionUpdatePinned) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionUpdatePinned
	return m.Data2
}

func (m *TLChannelAdminLogEventActionUpdatePinned) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionUpdatePinned) GetMessage() *Message  { return m.Data2.Message }

func (m *TLChannelAdminLogEventActionUpdatePinned) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionUpdatePinned
}

func (m *TLChannelAdminLogEventActionUpdatePinned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe9e82c18: func() []byte {
			x.UInt(0xe9e82c18)

			x.Bytes(m.GetMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionUpdatePinned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionUpdatePinned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionUpdatePinned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionUpdatePinned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe9e82c18: func() error {

			m4 := &Message{}
			m4.Decode(dBuf)
			m.SetMessage(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionUpdatePinned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionEditMessage
func MakeTLChannelAdminLogEventActionEditMessage(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionEditMessage {
	if data2 == nil {
		return &TLChannelAdminLogEventActionEditMessage{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionEditMessage,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionEditMessage
		return &TLChannelAdminLogEventActionEditMessage{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionEditMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionEditMessage
	return m.Data2
}

func (m *TLChannelAdminLogEventActionEditMessage) SetPrevMessage(v *Message) { m.Data2.PrevMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetPrevMessage() *Message {
	return m.Data2.PrevMessage
}

func (m *TLChannelAdminLogEventActionEditMessage) SetNewMessage(v *Message) { m.Data2.NewMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetNewMessage() *Message  { return m.Data2.NewMessage }

func (m *TLChannelAdminLogEventActionEditMessage) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionEditMessage
}

func (m *TLChannelAdminLogEventActionEditMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x709b2405: func() []byte {
			x.UInt(0x709b2405)

			x.Bytes(m.GetPrevMessage().Encode(layer))
			x.Bytes(m.GetNewMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionEditMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionEditMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionEditMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionEditMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x709b2405: func() error {

			m5 := &Message{}
			m5.Decode(dBuf)
			m.SetPrevMessage(m5)

			m6 := &Message{}
			m6.Decode(dBuf)
			m.SetNewMessage(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionEditMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionDeleteMessage
func MakeTLChannelAdminLogEventActionDeleteMessage(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionDeleteMessage {
	if data2 == nil {
		return &TLChannelAdminLogEventActionDeleteMessage{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionDeleteMessage,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionDeleteMessage
		return &TLChannelAdminLogEventActionDeleteMessage{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionDeleteMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionDeleteMessage
	return m.Data2
}

func (m *TLChannelAdminLogEventActionDeleteMessage) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionDeleteMessage) GetMessage() *Message  { return m.Data2.Message }

func (m *TLChannelAdminLogEventActionDeleteMessage) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionDeleteMessage
}

func (m *TLChannelAdminLogEventActionDeleteMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x42e047bb: func() []byte {
			x.UInt(0x42e047bb)

			x.Bytes(m.GetMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionDeleteMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionDeleteMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionDeleteMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionDeleteMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x42e047bb: func() error {

			m4 := &Message{}
			m4.Decode(dBuf)
			m.SetMessage(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionDeleteMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantJoin
func MakeTLChannelAdminLogEventActionParticipantJoin(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantJoin {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantJoin{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantJoin,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoin
		return &TLChannelAdminLogEventActionParticipantJoin{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoin
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantJoin) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantJoin
}

func (m *TLChannelAdminLogEventActionParticipantJoin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x183040d3: func() []byte {
			x.UInt(0x183040d3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantJoin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantJoin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantJoin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantJoin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x183040d3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantLeave
func MakeTLChannelAdminLogEventActionParticipantLeave(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantLeave {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantLeave{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantLeave,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantLeave
		return &TLChannelAdminLogEventActionParticipantLeave{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantLeave) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantLeave
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantLeave) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantLeave
}

func (m *TLChannelAdminLogEventActionParticipantLeave) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf89777f2: func() []byte {
			x.UInt(0xf89777f2)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantLeave, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantLeave, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantLeave) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantLeave) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf89777f2: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantLeave) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantInvite
func MakeTLChannelAdminLogEventActionParticipantInvite(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantInvite {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantInvite{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantInvite,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantInvite
		return &TLChannelAdminLogEventActionParticipantInvite{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantInvite) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantInvite
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantInvite) SetParticipant_CHANNELPARTICIPANT(v *ChannelParticipant) {
	m.Data2.Participant_CHANNELPARTICIPANT = v
}
func (m *TLChannelAdminLogEventActionParticipantInvite) GetParticipant_CHANNELPARTICIPANT() *ChannelParticipant {
	return m.Data2.Participant_CHANNELPARTICIPANT
}

func (m *TLChannelAdminLogEventActionParticipantInvite) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantInvite
}

func (m *TLChannelAdminLogEventActionParticipantInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe31c34d8: func() []byte {
			x.UInt(0xe31c34d8)

			x.Bytes(m.GetParticipant_CHANNELPARTICIPANT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe31c34d8: func() error {

			m7 := &ChannelParticipant{}
			m7.Decode(dBuf)
			m.SetParticipant_CHANNELPARTICIPANT(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantToggleBan
func MakeTLChannelAdminLogEventActionParticipantToggleBan(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantToggleBan {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantToggleBan{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantToggleBan,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleBan
		return &TLChannelAdminLogEventActionParticipantToggleBan{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleBan
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetPrevParticipant(v *ChannelParticipant) {
	m.Data2.PrevParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetPrevParticipant() *ChannelParticipant {
	return m.Data2.PrevParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetNewParticipant(v *ChannelParticipant) {
	m.Data2.NewParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetNewParticipant() *ChannelParticipant {
	return m.Data2.NewParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantToggleBan
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe6d83d7e: func() []byte {
			x.UInt(0xe6d83d7e)

			x.Bytes(m.GetPrevParticipant().Encode(layer))
			x.Bytes(m.GetNewParticipant().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantToggleBan, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantToggleBan, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe6d83d7e: func() error {

			m8 := &ChannelParticipant{}
			m8.Decode(dBuf)
			m.SetPrevParticipant(m8)

			m9 := &ChannelParticipant{}
			m9.Decode(dBuf)
			m.SetNewParticipant(m9)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleBan) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantToggleAdmin
func MakeTLChannelAdminLogEventActionParticipantToggleAdmin(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantToggleAdmin {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantToggleAdmin{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantToggleAdmin,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleAdmin
		return &TLChannelAdminLogEventActionParticipantToggleAdmin{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantToggleAdmin
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetPrevParticipant(v *ChannelParticipant) {
	m.Data2.PrevParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetPrevParticipant() *ChannelParticipant {
	return m.Data2.PrevParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetNewParticipant(v *ChannelParticipant) {
	m.Data2.NewParticipant = v
}
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetNewParticipant() *ChannelParticipant {
	return m.Data2.NewParticipant
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantToggleAdmin
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd5676710: func() []byte {
			x.UInt(0xd5676710)

			x.Bytes(m.GetPrevParticipant().Encode(layer))
			x.Bytes(m.GetNewParticipant().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantToggleAdmin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantToggleAdmin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd5676710: func() error {

			m8 := &ChannelParticipant{}
			m8.Decode(dBuf)
			m.SetPrevParticipant(m8)

			m9 := &ChannelParticipant{}
			m9.Decode(dBuf)
			m.SetNewParticipant(m9)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeStickerSet
func MakeTLChannelAdminLogEventActionChangeStickerSet(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeStickerSet {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeStickerSet{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeStickerSet,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeStickerSet
		return &TLChannelAdminLogEventActionChangeStickerSet{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeStickerSet
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) SetPrevStickerset(v *InputStickerSet) {
	m.Data2.PrevStickerset = v
}
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetPrevStickerset() *InputStickerSet {
	return m.Data2.PrevStickerset
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) SetNewStickerset(v *InputStickerSet) {
	m.Data2.NewStickerset = v
}
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetNewStickerset() *InputStickerSet {
	return m.Data2.NewStickerset
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeStickerSet
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb1c3caa7: func() []byte {
			x.UInt(0xb1c3caa7)

			x.Bytes(m.GetPrevStickerset().Encode(layer))
			x.Bytes(m.GetNewStickerset().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeStickerSet, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeStickerSet, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb1c3caa7: func() error {

			m10 := &InputStickerSet{}
			m10.Decode(dBuf)
			m.SetPrevStickerset(m10)

			m11 := &InputStickerSet{}
			m11.Decode(dBuf)
			m.SetNewStickerset(m11)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionTogglePreHistoryHidden
func MakeTLChannelAdminLogEventActionTogglePreHistoryHidden(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionTogglePreHistoryHidden {
	if data2 == nil {
		return &TLChannelAdminLogEventActionTogglePreHistoryHidden{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionTogglePreHistoryHidden,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionTogglePreHistoryHidden
		return &TLChannelAdminLogEventActionTogglePreHistoryHidden{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionTogglePreHistoryHidden
	return m.Data2
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) SetNewValue_BOOL(v *Bool) {
	m.Data2.NewValue_BOOL = v
}
func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) GetNewValue_BOOL() *Bool {
	return m.Data2.NewValue_BOOL
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionTogglePreHistoryHidden
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5f5c95f1: func() []byte {
			x.UInt(0x5f5c95f1)

			x.Bytes(m.GetNewValue_BOOL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionTogglePreHistoryHidden, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionTogglePreHistoryHidden, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5f5c95f1: func() error {

			m1 := &Bool{}
			m1.Decode(dBuf)
			m.SetNewValue_BOOL(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionDefaultBannedRights
func MakeTLChannelAdminLogEventActionDefaultBannedRights(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionDefaultBannedRights {
	if data2 == nil {
		return &TLChannelAdminLogEventActionDefaultBannedRights{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionDefaultBannedRights,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionDefaultBannedRights
		return &TLChannelAdminLogEventActionDefaultBannedRights{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionDefaultBannedRights
	return m.Data2
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) SetPrevBannedRights(v *ChatBannedRights) {
	m.Data2.PrevBannedRights = v
}
func (m *TLChannelAdminLogEventActionDefaultBannedRights) GetPrevBannedRights() *ChatBannedRights {
	return m.Data2.PrevBannedRights
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) SetNewBannedRights(v *ChatBannedRights) {
	m.Data2.NewBannedRights = v
}
func (m *TLChannelAdminLogEventActionDefaultBannedRights) GetNewBannedRights() *ChatBannedRights {
	return m.Data2.NewBannedRights
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionDefaultBannedRights
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2df5fc0a: func() []byte {
			x.UInt(0x2df5fc0a)

			x.Bytes(m.GetPrevBannedRights().Encode(layer))
			x.Bytes(m.GetNewBannedRights().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionDefaultBannedRights, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionDefaultBannedRights, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2df5fc0a: func() error {

			m12 := &ChatBannedRights{}
			m12.Decode(dBuf)
			m.SetPrevBannedRights(m12)

			m13 := &ChatBannedRights{}
			m13.Decode(dBuf)
			m.SetNewBannedRights(m13)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionDefaultBannedRights) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionStopPoll
func MakeTLChannelAdminLogEventActionStopPoll(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionStopPoll {
	if data2 == nil {
		return &TLChannelAdminLogEventActionStopPoll{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionStopPoll,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionStopPoll
		return &TLChannelAdminLogEventActionStopPoll{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionStopPoll) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionStopPoll
	return m.Data2
}

func (m *TLChannelAdminLogEventActionStopPoll) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionStopPoll) GetMessage() *Message  { return m.Data2.Message }

func (m *TLChannelAdminLogEventActionStopPoll) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionStopPoll
}

func (m *TLChannelAdminLogEventActionStopPoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8f079643: func() []byte {
			x.UInt(0x8f079643)

			x.Bytes(m.GetMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionStopPoll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionStopPoll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionStopPoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionStopPoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8f079643: func() error {

			m4 := &Message{}
			m4.Decode(dBuf)
			m.SetMessage(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionStopPoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeLinkedChat
func MakeTLChannelAdminLogEventActionChangeLinkedChat(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeLinkedChat {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeLinkedChat{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeLinkedChat,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeLinkedChat
		return &TLChannelAdminLogEventActionChangeLinkedChat{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeLinkedChat
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) SetPrevValue_INT64(v int64) {
	m.Data2.PrevValue_INT64 = v
}
func (m *TLChannelAdminLogEventActionChangeLinkedChat) GetPrevValue_INT64() int64 {
	return m.Data2.PrevValue_INT64
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) SetNewValue_INT64(v int64) {
	m.Data2.NewValue_INT64 = v
}
func (m *TLChannelAdminLogEventActionChangeLinkedChat) GetNewValue_INT64() int64 {
	return m.Data2.NewValue_INT64
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeLinkedChat
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x50c7ac8: func() []byte {
			x.UInt(0x50c7ac8)

			x.Long(m.GetPrevValue_INT64())
			x.Long(m.GetNewValue_INT64())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeLinkedChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeLinkedChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x50c7ac8: func() error {
			m.SetPrevValue_INT64(dBuf.Long())
			m.SetNewValue_INT64(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeLinkedChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeLocation
func MakeTLChannelAdminLogEventActionChangeLocation(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeLocation {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeLocation{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeLocation,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeLocation
		return &TLChannelAdminLogEventActionChangeLocation{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeLocation) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeLocation
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeLocation) SetPrevValue_CHANNELLOCATION(v *ChannelLocation) {
	m.Data2.PrevValue_CHANNELLOCATION = v
}
func (m *TLChannelAdminLogEventActionChangeLocation) GetPrevValue_CHANNELLOCATION() *ChannelLocation {
	return m.Data2.PrevValue_CHANNELLOCATION
}

func (m *TLChannelAdminLogEventActionChangeLocation) SetNewValue_CHANNELLOCATION(v *ChannelLocation) {
	m.Data2.NewValue_CHANNELLOCATION = v
}
func (m *TLChannelAdminLogEventActionChangeLocation) GetNewValue_CHANNELLOCATION() *ChannelLocation {
	return m.Data2.NewValue_CHANNELLOCATION
}

func (m *TLChannelAdminLogEventActionChangeLocation) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeLocation
}

func (m *TLChannelAdminLogEventActionChangeLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe6b76ae: func() []byte {
			x.UInt(0xe6b76ae)

			x.Bytes(m.GetPrevValue_CHANNELLOCATION().Encode(layer))
			x.Bytes(m.GetNewValue_CHANNELLOCATION().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe6b76ae: func() error {

			m0 := &ChannelLocation{}
			m0.Decode(dBuf)
			m.SetPrevValue_CHANNELLOCATION(m0)

			m1 := &ChannelLocation{}
			m1.Decode(dBuf)
			m.SetNewValue_CHANNELLOCATION(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionToggleSlowMode
func MakeTLChannelAdminLogEventActionToggleSlowMode(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionToggleSlowMode {
	if data2 == nil {
		return &TLChannelAdminLogEventActionToggleSlowMode{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionToggleSlowMode,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionToggleSlowMode
		return &TLChannelAdminLogEventActionToggleSlowMode{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionToggleSlowMode
	return m.Data2
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) SetPrevValue_INT32(v int32) {
	m.Data2.PrevValue_INT32 = v
}
func (m *TLChannelAdminLogEventActionToggleSlowMode) GetPrevValue_INT32() int32 {
	return m.Data2.PrevValue_INT32
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) SetNewValue_INT32(v int32) {
	m.Data2.NewValue_INT32 = v
}
func (m *TLChannelAdminLogEventActionToggleSlowMode) GetNewValue_INT32() int32 {
	return m.Data2.NewValue_INT32
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionToggleSlowMode
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x53909779: func() []byte {
			x.UInt(0x53909779)

			x.Int(m.GetPrevValue_INT32())
			x.Int(m.GetNewValue_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionToggleSlowMode, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionToggleSlowMode, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x53909779: func() error {
			m.SetPrevValue_INT32(dBuf.Int())
			m.SetNewValue_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionToggleSlowMode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionStartGroupCall
func MakeTLChannelAdminLogEventActionStartGroupCall(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionStartGroupCall {
	if data2 == nil {
		return &TLChannelAdminLogEventActionStartGroupCall{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionStartGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionStartGroupCall
		return &TLChannelAdminLogEventActionStartGroupCall{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionStartGroupCall) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionStartGroupCall
	return m.Data2
}

func (m *TLChannelAdminLogEventActionStartGroupCall) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLChannelAdminLogEventActionStartGroupCall) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLChannelAdminLogEventActionStartGroupCall) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionStartGroupCall
}

func (m *TLChannelAdminLogEventActionStartGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x23209745: func() []byte {
			x.UInt(0x23209745)

			x.Bytes(m.GetCall().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionStartGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionStartGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionStartGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionStartGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x23209745: func() error {

			m14 := &InputGroupCall{}
			m14.Decode(dBuf)
			m.SetCall(m14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionStartGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionDiscardGroupCall
func MakeTLChannelAdminLogEventActionDiscardGroupCall(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionDiscardGroupCall {
	if data2 == nil {
		return &TLChannelAdminLogEventActionDiscardGroupCall{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionDiscardGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionDiscardGroupCall
		return &TLChannelAdminLogEventActionDiscardGroupCall{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionDiscardGroupCall
	return m.Data2
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLChannelAdminLogEventActionDiscardGroupCall) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLChannelAdminLogEventActionDiscardGroupCall) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionDiscardGroupCall
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb9f9140: func() []byte {
			x.UInt(0xdb9f9140)

			x.Bytes(m.GetCall().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionDiscardGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionDiscardGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb9f9140: func() error {

			m14 := &InputGroupCall{}
			m14.Decode(dBuf)
			m.SetCall(m14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionDiscardGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantMute
func MakeTLChannelAdminLogEventActionParticipantMute(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantMute {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantMute{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantMute,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantMute
		return &TLChannelAdminLogEventActionParticipantMute{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantMute) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantMute
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantMute) SetParticipant_GROUPCALLPARTICIPANT(v *GroupCallParticipant) {
	m.Data2.Participant_GROUPCALLPARTICIPANT = v
}
func (m *TLChannelAdminLogEventActionParticipantMute) GetParticipant_GROUPCALLPARTICIPANT() *GroupCallParticipant {
	return m.Data2.Participant_GROUPCALLPARTICIPANT
}

func (m *TLChannelAdminLogEventActionParticipantMute) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantMute
}

func (m *TLChannelAdminLogEventActionParticipantMute) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf92424d2: func() []byte {
			x.UInt(0xf92424d2)

			x.Bytes(m.GetParticipant_GROUPCALLPARTICIPANT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantMute, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantMute, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantMute) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantMute) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf92424d2: func() error {

			m7 := &GroupCallParticipant{}
			m7.Decode(dBuf)
			m.SetParticipant_GROUPCALLPARTICIPANT(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantMute) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantUnmute
func MakeTLChannelAdminLogEventActionParticipantUnmute(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantUnmute {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantUnmute{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantUnmute,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantUnmute
		return &TLChannelAdminLogEventActionParticipantUnmute{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantUnmute
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) SetParticipant_GROUPCALLPARTICIPANT(v *GroupCallParticipant) {
	m.Data2.Participant_GROUPCALLPARTICIPANT = v
}
func (m *TLChannelAdminLogEventActionParticipantUnmute) GetParticipant_GROUPCALLPARTICIPANT() *GroupCallParticipant {
	return m.Data2.Participant_GROUPCALLPARTICIPANT
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantUnmute
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe64429c0: func() []byte {
			x.UInt(0xe64429c0)

			x.Bytes(m.GetParticipant_GROUPCALLPARTICIPANT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantUnmute, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantUnmute, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe64429c0: func() error {

			m7 := &GroupCallParticipant{}
			m7.Decode(dBuf)
			m.SetParticipant_GROUPCALLPARTICIPANT(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantUnmute) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionToggleGroupCallSetting
func MakeTLChannelAdminLogEventActionToggleGroupCallSetting(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionToggleGroupCallSetting {
	if data2 == nil {
		return &TLChannelAdminLogEventActionToggleGroupCallSetting{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionToggleGroupCallSetting,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionToggleGroupCallSetting
		return &TLChannelAdminLogEventActionToggleGroupCallSetting{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionToggleGroupCallSetting
	return m.Data2
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) SetJoinMuted(v *Bool) {
	m.Data2.JoinMuted = v
}
func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) GetJoinMuted() *Bool {
	return m.Data2.JoinMuted
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionToggleGroupCallSetting
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56d6a247: func() []byte {
			x.UInt(0x56d6a247)

			x.Bytes(m.GetJoinMuted().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionToggleGroupCallSetting, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionToggleGroupCallSetting, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56d6a247: func() error {

			m15 := &Bool{}
			m15.Decode(dBuf)
			m.SetJoinMuted(m15)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionToggleGroupCallSetting) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantJoinByInvite
func MakeTLChannelAdminLogEventActionParticipantJoinByInvite(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantJoinByInvite {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantJoinByInvite{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantJoinByInvite,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByInvite
		return &TLChannelAdminLogEventActionParticipantJoinByInvite{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByInvite
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) SetInvite(v *ExportedChatInvite) {
	m.Data2.Invite = v
}
func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) GetInvite() *ExportedChatInvite {
	return m.Data2.Invite
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantJoinByInvite
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5cdada77: func() []byte {
			x.UInt(0x5cdada77)

			x.Bytes(m.GetInvite().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantJoinByInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantJoinByInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5cdada77: func() error {

			m16 := &ExportedChatInvite{}
			m16.Decode(dBuf)
			m.SetInvite(m16)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoinByInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionExportedInviteDelete
func MakeTLChannelAdminLogEventActionExportedInviteDelete(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionExportedInviteDelete {
	if data2 == nil {
		return &TLChannelAdminLogEventActionExportedInviteDelete{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionExportedInviteDelete,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteDelete
		return &TLChannelAdminLogEventActionExportedInviteDelete{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteDelete
	return m.Data2
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) SetInvite(v *ExportedChatInvite) {
	m.Data2.Invite = v
}
func (m *TLChannelAdminLogEventActionExportedInviteDelete) GetInvite() *ExportedChatInvite {
	return m.Data2.Invite
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionExportedInviteDelete
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5a50fca4: func() []byte {
			x.UInt(0x5a50fca4)

			x.Bytes(m.GetInvite().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionExportedInviteDelete, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionExportedInviteDelete, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5a50fca4: func() error {

			m16 := &ExportedChatInvite{}
			m16.Decode(dBuf)
			m.SetInvite(m16)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteDelete) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionExportedInviteRevoke
func MakeTLChannelAdminLogEventActionExportedInviteRevoke(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionExportedInviteRevoke {
	if data2 == nil {
		return &TLChannelAdminLogEventActionExportedInviteRevoke{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionExportedInviteRevoke,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteRevoke
		return &TLChannelAdminLogEventActionExportedInviteRevoke{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteRevoke
	return m.Data2
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) SetInvite(v *ExportedChatInvite) {
	m.Data2.Invite = v
}
func (m *TLChannelAdminLogEventActionExportedInviteRevoke) GetInvite() *ExportedChatInvite {
	return m.Data2.Invite
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionExportedInviteRevoke
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x410a134e: func() []byte {
			x.UInt(0x410a134e)

			x.Bytes(m.GetInvite().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionExportedInviteRevoke, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionExportedInviteRevoke, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x410a134e: func() error {

			m16 := &ExportedChatInvite{}
			m16.Decode(dBuf)
			m.SetInvite(m16)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteRevoke) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionExportedInviteEdit
func MakeTLChannelAdminLogEventActionExportedInviteEdit(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionExportedInviteEdit {
	if data2 == nil {
		return &TLChannelAdminLogEventActionExportedInviteEdit{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionExportedInviteEdit,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteEdit
		return &TLChannelAdminLogEventActionExportedInviteEdit{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionExportedInviteEdit
	return m.Data2
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) SetPrevInvite(v *ExportedChatInvite) {
	m.Data2.PrevInvite = v
}
func (m *TLChannelAdminLogEventActionExportedInviteEdit) GetPrevInvite() *ExportedChatInvite {
	return m.Data2.PrevInvite
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) SetNewInvite(v *ExportedChatInvite) {
	m.Data2.NewInvite = v
}
func (m *TLChannelAdminLogEventActionExportedInviteEdit) GetNewInvite() *ExportedChatInvite {
	return m.Data2.NewInvite
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionExportedInviteEdit
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe90ebb59: func() []byte {
			x.UInt(0xe90ebb59)

			x.Bytes(m.GetPrevInvite().Encode(layer))
			x.Bytes(m.GetNewInvite().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionExportedInviteEdit, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionExportedInviteEdit, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe90ebb59: func() error {

			m17 := &ExportedChatInvite{}
			m17.Decode(dBuf)
			m.SetPrevInvite(m17)

			m18 := &ExportedChatInvite{}
			m18.Decode(dBuf)
			m.SetNewInvite(m18)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionExportedInviteEdit) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantVolume
func MakeTLChannelAdminLogEventActionParticipantVolume(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantVolume {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantVolume{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantVolume,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantVolume
		return &TLChannelAdminLogEventActionParticipantVolume{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantVolume) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantVolume
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantVolume) SetParticipant_GROUPCALLPARTICIPANT(v *GroupCallParticipant) {
	m.Data2.Participant_GROUPCALLPARTICIPANT = v
}
func (m *TLChannelAdminLogEventActionParticipantVolume) GetParticipant_GROUPCALLPARTICIPANT() *GroupCallParticipant {
	return m.Data2.Participant_GROUPCALLPARTICIPANT
}

func (m *TLChannelAdminLogEventActionParticipantVolume) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantVolume
}

func (m *TLChannelAdminLogEventActionParticipantVolume) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3e7f6847: func() []byte {
			x.UInt(0x3e7f6847)

			x.Bytes(m.GetParticipant_GROUPCALLPARTICIPANT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantVolume, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantVolume, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantVolume) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantVolume) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3e7f6847: func() error {

			m7 := &GroupCallParticipant{}
			m7.Decode(dBuf)
			m.SetParticipant_GROUPCALLPARTICIPANT(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantVolume) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeHistoryTTL
func MakeTLChannelAdminLogEventActionChangeHistoryTTL(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeHistoryTTL {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeHistoryTTL{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeHistoryTTL,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeHistoryTTL
		return &TLChannelAdminLogEventActionChangeHistoryTTL{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeHistoryTTL
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) SetPrevValue_INT32(v int32) {
	m.Data2.PrevValue_INT32 = v
}
func (m *TLChannelAdminLogEventActionChangeHistoryTTL) GetPrevValue_INT32() int32 {
	return m.Data2.PrevValue_INT32
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) SetNewValue_INT32(v int32) {
	m.Data2.NewValue_INT32 = v
}
func (m *TLChannelAdminLogEventActionChangeHistoryTTL) GetNewValue_INT32() int32 {
	return m.Data2.NewValue_INT32
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeHistoryTTL
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6e941a38: func() []byte {
			x.UInt(0x6e941a38)

			x.Int(m.GetPrevValue_INT32())
			x.Int(m.GetNewValue_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeHistoryTTL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeHistoryTTL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6e941a38: func() error {
			m.SetPrevValue_INT32(dBuf.Int())
			m.SetNewValue_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeHistoryTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionParticipantJoinByRequest
func MakeTLChannelAdminLogEventActionParticipantJoinByRequest(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionParticipantJoinByRequest {
	if data2 == nil {
		return &TLChannelAdminLogEventActionParticipantJoinByRequest{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionParticipantJoinByRequest,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByRequest
		return &TLChannelAdminLogEventActionParticipantJoinByRequest{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionParticipantJoinByRequest
	return m.Data2
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) SetInvite(v *ExportedChatInvite) {
	m.Data2.Invite = v
}
func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) GetInvite() *ExportedChatInvite {
	return m.Data2.Invite
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) SetApprovedBy(v int64) {
	m.Data2.ApprovedBy = v
}
func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) GetApprovedBy() int64 {
	return m.Data2.ApprovedBy
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionParticipantJoinByRequest
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xafb6144a: func() []byte {
			x.UInt(0xafb6144a)

			x.Bytes(m.GetInvite().Encode(layer))
			x.Long(m.GetApprovedBy())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionParticipantJoinByRequest, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionParticipantJoinByRequest, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xafb6144a: func() error {

			m16 := &ExportedChatInvite{}
			m16.Decode(dBuf)
			m.SetInvite(m16)

			m.SetApprovedBy(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionParticipantJoinByRequest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionToggleNoForwards
func MakeTLChannelAdminLogEventActionToggleNoForwards(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionToggleNoForwards {
	if data2 == nil {
		return &TLChannelAdminLogEventActionToggleNoForwards{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionToggleNoForwards,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionToggleNoForwards
		return &TLChannelAdminLogEventActionToggleNoForwards{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionToggleNoForwards
	return m.Data2
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) SetNewValue_BOOL(v *Bool) {
	m.Data2.NewValue_BOOL = v
}
func (m *TLChannelAdminLogEventActionToggleNoForwards) GetNewValue_BOOL() *Bool {
	return m.Data2.NewValue_BOOL
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionToggleNoForwards
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcb2ac766: func() []byte {
			x.UInt(0xcb2ac766)

			x.Bytes(m.GetNewValue_BOOL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionToggleNoForwards, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionToggleNoForwards, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcb2ac766: func() error {

			m1 := &Bool{}
			m1.Decode(dBuf)
			m.SetNewValue_BOOL(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionToggleNoForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionSendMessage
func MakeTLChannelAdminLogEventActionSendMessage(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionSendMessage {
	if data2 == nil {
		return &TLChannelAdminLogEventActionSendMessage{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionSendMessage,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionSendMessage
		return &TLChannelAdminLogEventActionSendMessage{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionSendMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionSendMessage
	return m.Data2
}

func (m *TLChannelAdminLogEventActionSendMessage) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionSendMessage) GetMessage() *Message  { return m.Data2.Message }

func (m *TLChannelAdminLogEventActionSendMessage) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionSendMessage
}

func (m *TLChannelAdminLogEventActionSendMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x278f2868: func() []byte {
			x.UInt(0x278f2868)

			x.Bytes(m.GetMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionSendMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionSendMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionSendMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionSendMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x278f2868: func() error {

			m4 := &Message{}
			m4.Decode(dBuf)
			m.SetMessage(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionSendMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelAdminLogEventActionChangeAvailableReactions
func MakeTLChannelAdminLogEventActionChangeAvailableReactions(data2 *ChannelAdminLogEventAction) *TLChannelAdminLogEventActionChangeAvailableReactions {
	if data2 == nil {
		return &TLChannelAdminLogEventActionChangeAvailableReactions{Data2: &ChannelAdminLogEventAction{
			PredicateName: Predicate_channelAdminLogEventActionChangeAvailableReactions,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventActionChangeAvailableReactions
		return &TLChannelAdminLogEventActionChangeAvailableReactions{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
	m.Data2.PredicateName = Predicate_channelAdminLogEventActionChangeAvailableReactions
	return m.Data2
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) SetPrevValue_VECTORSTRING(v []string) {
	m.Data2.PrevValue_VECTORSTRING = v
}
func (m *TLChannelAdminLogEventActionChangeAvailableReactions) GetPrevValue_VECTORSTRING() []string {
	return m.Data2.PrevValue_VECTORSTRING
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) SetNewValue_VECTORSTRING(v []string) {
	m.Data2.NewValue_VECTORSTRING = v
}
func (m *TLChannelAdminLogEventActionChangeAvailableReactions) GetNewValue_VECTORSTRING() []string {
	return m.Data2.NewValue_VECTORSTRING
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) GetPredicateName() string {
	return Predicate_channelAdminLogEventActionChangeAvailableReactions
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9cf7f76a: func() []byte {
			x.UInt(0x9cf7f76a)

			x.VectorString(m.GetPrevValue_VECTORSTRING())

			x.VectorString(m.GetNewValue_VECTORSTRING())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventActionChangeAvailableReactions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventActionChangeAvailableReactions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9cf7f76a: func() error {

			m.SetPrevValue_VECTORSTRING(dBuf.VectorString())

			m.SetNewValue_VECTORSTRING(dBuf.VectorString())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventActionChangeAvailableReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FoundStickerSets <--
//  + TL_MessagesFoundStickerSetsNotModified
//  + TL_MessagesFoundStickerSets
//

func (m *Messages_FoundStickerSets) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_foundStickerSetsNotModified:
		t := m.To_MessagesFoundStickerSetsNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_foundStickerSets:
		t := m.To_MessagesFoundStickerSets()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_FoundStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_FoundStickerSets) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd54b65d:
		m2 := MakeTLMessagesFoundStickerSetsNotModified(m)
		m2.Decode(dBuf)
	case 0x8af09dd2:
		m2 := MakeTLMessagesFoundStickerSets(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_FoundStickerSets) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_foundStickerSetsNotModified:
		t := m.To_MessagesFoundStickerSetsNotModified()
		return t.DebugString()
	case Predicate_messages_foundStickerSets:
		t := m.To_MessagesFoundStickerSets()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesFoundStickerSetsNotModified
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSetsNotModified() *TLMessagesFoundStickerSetsNotModified {
	m.PredicateName = Predicate_messages_foundStickerSetsNotModified
	return &TLMessagesFoundStickerSetsNotModified{
		Data2: m,
	}
}

// To_MessagesFoundStickerSets
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSets() *TLMessagesFoundStickerSets {
	m.PredicateName = Predicate_messages_foundStickerSets
	return &TLMessagesFoundStickerSets{
		Data2: m,
	}
}

// MakeTLMessagesFoundStickerSetsNotModified
func MakeTLMessagesFoundStickerSetsNotModified(data2 *Messages_FoundStickerSets) *TLMessagesFoundStickerSetsNotModified {
	if data2 == nil {
		return &TLMessagesFoundStickerSetsNotModified{Data2: &Messages_FoundStickerSets{
			PredicateName: Predicate_messages_foundStickerSetsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_foundStickerSetsNotModified
		return &TLMessagesFoundStickerSetsNotModified{Data2: data2}
	}
}

func (m *TLMessagesFoundStickerSetsNotModified) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
	m.Data2.PredicateName = Predicate_messages_foundStickerSetsNotModified
	return m.Data2
}

func (m *TLMessagesFoundStickerSetsNotModified) GetPredicateName() string {
	return Predicate_messages_foundStickerSetsNotModified
}

func (m *TLMessagesFoundStickerSetsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd54b65d: func() []byte {
			x.UInt(0xd54b65d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_foundStickerSetsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_foundStickerSetsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFoundStickerSetsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFoundStickerSetsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd54b65d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFoundStickerSetsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesFoundStickerSets
func MakeTLMessagesFoundStickerSets(data2 *Messages_FoundStickerSets) *TLMessagesFoundStickerSets {
	if data2 == nil {
		return &TLMessagesFoundStickerSets{Data2: &Messages_FoundStickerSets{
			PredicateName: Predicate_messages_foundStickerSets,
		}}
	} else {
		data2.PredicateName = Predicate_messages_foundStickerSets
		return &TLMessagesFoundStickerSets{Data2: data2}
	}
}

func (m *TLMessagesFoundStickerSets) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
	m.Data2.PredicateName = Predicate_messages_foundStickerSets
	return m.Data2
}

func (m *TLMessagesFoundStickerSets) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesFoundStickerSets) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesFoundStickerSets) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFoundStickerSets) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func (m *TLMessagesFoundStickerSets) GetPredicateName() string {
	return Predicate_messages_foundStickerSets
}

func (m *TLMessagesFoundStickerSets) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8af09dd2: func() []byte {
			x.UInt(0x8af09dd2)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSets())))
			for _, v := range m.GetSets() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_foundStickerSets, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_foundStickerSets, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFoundStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFoundStickerSets) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8af09dd2: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerSetCovered, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerSetCovered{}
				v1[i].Decode(dBuf)
			}
			m.SetSets(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFoundStickerSets) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputSecureValue <--
//  + TL_InputSecureValue
//

func (m *InputSecureValue) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputSecureValue:
		t := m.To_InputSecureValue()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputSecureValue) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdb21d0a7:
		m2 := MakeTLInputSecureValue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputSecureValue) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputSecureValue:
		t := m.To_InputSecureValue()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputSecureValue
func (m *InputSecureValue) To_InputSecureValue() *TLInputSecureValue {
	m.PredicateName = Predicate_inputSecureValue
	return &TLInputSecureValue{
		Data2: m,
	}
}

// MakeTLInputSecureValue
func MakeTLInputSecureValue(data2 *InputSecureValue) *TLInputSecureValue {
	if data2 == nil {
		return &TLInputSecureValue{Data2: &InputSecureValue{
			PredicateName: Predicate_inputSecureValue,
		}}
	} else {
		data2.PredicateName = Predicate_inputSecureValue
		return &TLInputSecureValue{Data2: data2}
	}
}

func (m *TLInputSecureValue) To_InputSecureValue() *InputSecureValue {
	m.Data2.PredicateName = Predicate_inputSecureValue
	return m.Data2
}

//// flags
func (m *TLInputSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLInputSecureValue) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLInputSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLInputSecureValue) GetData() *SecureData  { return m.Data2.Data }

func (m *TLInputSecureValue) SetFrontSide(v *InputSecureFile) { m.Data2.FrontSide = v }
func (m *TLInputSecureValue) GetFrontSide() *InputSecureFile  { return m.Data2.FrontSide }

func (m *TLInputSecureValue) SetReverseSide(v *InputSecureFile) { m.Data2.ReverseSide = v }
func (m *TLInputSecureValue) GetReverseSide() *InputSecureFile  { return m.Data2.ReverseSide }

func (m *TLInputSecureValue) SetSelfie(v *InputSecureFile) { m.Data2.Selfie = v }
func (m *TLInputSecureValue) GetSelfie() *InputSecureFile  { return m.Data2.Selfie }

func (m *TLInputSecureValue) SetTranslation(v []*InputSecureFile) { m.Data2.Translation = v }
func (m *TLInputSecureValue) GetTranslation() []*InputSecureFile  { return m.Data2.Translation }

func (m *TLInputSecureValue) SetFiles(v []*InputSecureFile) { m.Data2.Files = v }
func (m *TLInputSecureValue) GetFiles() []*InputSecureFile  { return m.Data2.Files }

func (m *TLInputSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLInputSecureValue) GetPlainData() *SecurePlainData  { return m.Data2.PlainData }

func (m *TLInputSecureValue) GetPredicateName() string {
	return Predicate_inputSecureValue
}

func (m *TLInputSecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb21d0a7: func() []byte {
			x.UInt(0xdb21d0a7)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetData() != nil {
					flags |= 1 << 0
				}
				if m.GetFrontSide() != nil {
					flags |= 1 << 1
				}
				if m.GetReverseSide() != nil {
					flags |= 1 << 2
				}
				if m.GetSelfie() != nil {
					flags |= 1 << 3
				}
				if m.GetTranslation() != nil {
					flags |= 1 << 6
				}
				if m.GetFiles() != nil {
					flags |= 1 << 4
				}
				if m.GetPlainData() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetType().Encode(layer))
			if m.GetData() != nil {
				x.Bytes(m.GetData().Encode(layer))
			}

			if m.GetFrontSide() != nil {
				x.Bytes(m.GetFrontSide().Encode(layer))
			}

			if m.GetReverseSide() != nil {
				x.Bytes(m.GetReverseSide().Encode(layer))
			}

			if m.GetSelfie() != nil {
				x.Bytes(m.GetSelfie().Encode(layer))
			}

			if m.GetTranslation() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetTranslation())))
				for _, v := range m.GetTranslation() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetFiles() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetFiles())))
				for _, v := range m.GetFiles() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetPlainData() != nil {
				x.Bytes(m.GetPlainData().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputSecureValue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputSecureValue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputSecureValue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb21d0a7: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &SecureValueType{}
			m1.Decode(dBuf)
			m.SetType(m1)

			if (flags & (1 << 0)) != 0 {
				m2 := &SecureData{}
				m2.Decode(dBuf)
				m.SetData(m2)
			}
			if (flags & (1 << 1)) != 0 {
				m3 := &InputSecureFile{}
				m3.Decode(dBuf)
				m.SetFrontSide(m3)
			}
			if (flags & (1 << 2)) != 0 {
				m4 := &InputSecureFile{}
				m4.Decode(dBuf)
				m.SetReverseSide(m4)
			}
			if (flags & (1 << 3)) != 0 {
				m5 := &InputSecureFile{}
				m5.Decode(dBuf)
				m.SetSelfie(m5)
			}
			if (flags & (1 << 6)) != 0 {
				c6 := dBuf.Int()
				if c6 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
					return dBuf.GetError()
				}
				l6 := dBuf.Int()
				v6 := make([]*InputSecureFile, l6)
				for i := int32(0); i < l6; i++ {
					v6[i] = &InputSecureFile{}
					v6[i].Decode(dBuf)
				}
				m.SetTranslation(v6)
			}
			if (flags & (1 << 4)) != 0 {
				c7 := dBuf.Int()
				if c7 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
					return dBuf.GetError()
				}
				l7 := dBuf.Int()
				v7 := make([]*InputSecureFile, l7)
				for i := int32(0); i < l7; i++ {
					v7[i] = &InputSecureFile{}
					v7[i].Decode(dBuf)
				}
				m.SetFiles(v7)
			}
			if (flags & (1 << 5)) != 0 {
				m8 := &SecurePlainData{}
				m8.Decode(dBuf)
				m.SetPlainData(m8)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputSecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureSecretSettings <--
//  + TL_SecureSecretSettings
//

func (m *SecureSecretSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureSecretSettings:
		t := m.To_SecureSecretSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureSecretSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureSecretSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1527bcac:
		m2 := MakeTLSecureSecretSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureSecretSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureSecretSettings:
		t := m.To_SecureSecretSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureSecretSettings
func (m *SecureSecretSettings) To_SecureSecretSettings() *TLSecureSecretSettings {
	m.PredicateName = Predicate_secureSecretSettings
	return &TLSecureSecretSettings{
		Data2: m,
	}
}

// MakeTLSecureSecretSettings
func MakeTLSecureSecretSettings(data2 *SecureSecretSettings) *TLSecureSecretSettings {
	if data2 == nil {
		return &TLSecureSecretSettings{Data2: &SecureSecretSettings{
			PredicateName: Predicate_secureSecretSettings,
		}}
	} else {
		data2.PredicateName = Predicate_secureSecretSettings
		return &TLSecureSecretSettings{Data2: data2}
	}
}

func (m *TLSecureSecretSettings) To_SecureSecretSettings() *SecureSecretSettings {
	m.Data2.PredicateName = Predicate_secureSecretSettings
	return m.Data2
}

func (m *TLSecureSecretSettings) SetSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.SecureAlgo = v }
func (m *TLSecureSecretSettings) GetSecureAlgo() *SecurePasswordKdfAlgo  { return m.Data2.SecureAlgo }

func (m *TLSecureSecretSettings) SetSecureSecret(v []byte) { m.Data2.SecureSecret = v }
func (m *TLSecureSecretSettings) GetSecureSecret() []byte  { return m.Data2.SecureSecret }

func (m *TLSecureSecretSettings) SetSecureSecretId(v int64) { m.Data2.SecureSecretId = v }
func (m *TLSecureSecretSettings) GetSecureSecretId() int64  { return m.Data2.SecureSecretId }

func (m *TLSecureSecretSettings) GetPredicateName() string {
	return Predicate_secureSecretSettings
}

func (m *TLSecureSecretSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1527bcac: func() []byte {
			x.UInt(0x1527bcac)

			x.Bytes(m.GetSecureAlgo().Encode(layer))
			x.StringBytes(m.GetSecureSecret())
			x.Long(m.GetSecureSecretId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureSecretSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureSecretSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureSecretSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureSecretSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1527bcac: func() error {

			m0 := &SecurePasswordKdfAlgo{}
			m0.Decode(dBuf)
			m.SetSecureAlgo(m0)

			m.SetSecureSecret(dBuf.StringBytes())
			m.SetSecureSecretId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureSecretSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PollAnswer <--
//  + TL_PollAnswer
//

func (m *PollAnswer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pollAnswer:
		t := m.To_PollAnswer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PollAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *PollAnswer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6ca9c2e9:
		m2 := MakeTLPollAnswer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PollAnswer) DebugString() string {
	switch m.PredicateName {
	case Predicate_pollAnswer:
		t := m.To_PollAnswer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PollAnswer
func (m *PollAnswer) To_PollAnswer() *TLPollAnswer {
	m.PredicateName = Predicate_pollAnswer
	return &TLPollAnswer{
		Data2: m,
	}
}

// MakeTLPollAnswer
func MakeTLPollAnswer(data2 *PollAnswer) *TLPollAnswer {
	if data2 == nil {
		return &TLPollAnswer{Data2: &PollAnswer{
			PredicateName: Predicate_pollAnswer,
		}}
	} else {
		data2.PredicateName = Predicate_pollAnswer
		return &TLPollAnswer{Data2: data2}
	}
}

func (m *TLPollAnswer) To_PollAnswer() *PollAnswer {
	m.Data2.PredicateName = Predicate_pollAnswer
	return m.Data2
}

func (m *TLPollAnswer) SetText(v string) { m.Data2.Text = v }
func (m *TLPollAnswer) GetText() string  { return m.Data2.Text }

func (m *TLPollAnswer) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLPollAnswer) GetOption() []byte  { return m.Data2.Option }

func (m *TLPollAnswer) GetPredicateName() string {
	return Predicate_pollAnswer
}

func (m *TLPollAnswer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6ca9c2e9: func() []byte {
			x.UInt(0x6ca9c2e9)

			x.String(m.GetText())
			x.StringBytes(m.GetOption())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pollAnswer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pollAnswer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPollAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPollAnswer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6ca9c2e9: func() error {
			m.SetText(dBuf.String())
			m.SetOption(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPollAnswer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputGroupCall <--
//  + TL_InputGroupCall
//

func (m *InputGroupCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputGroupCall:
		t := m.To_InputGroupCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputGroupCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd8aa840f:
		m2 := MakeTLInputGroupCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputGroupCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputGroupCall:
		t := m.To_InputGroupCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputGroupCall
func (m *InputGroupCall) To_InputGroupCall() *TLInputGroupCall {
	m.PredicateName = Predicate_inputGroupCall
	return &TLInputGroupCall{
		Data2: m,
	}
}

// MakeTLInputGroupCall
func MakeTLInputGroupCall(data2 *InputGroupCall) *TLInputGroupCall {
	if data2 == nil {
		return &TLInputGroupCall{Data2: &InputGroupCall{
			PredicateName: Predicate_inputGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_inputGroupCall
		return &TLInputGroupCall{Data2: data2}
	}
}

func (m *TLInputGroupCall) To_InputGroupCall() *InputGroupCall {
	m.Data2.PredicateName = Predicate_inputGroupCall
	return m.Data2
}

func (m *TLInputGroupCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputGroupCall) GetId() int64  { return m.Data2.Id }

func (m *TLInputGroupCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputGroupCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputGroupCall) GetPredicateName() string {
	return Predicate_inputGroupCall
}

func (m *TLInputGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd8aa840f: func() []byte {
			x.UInt(0xd8aa840f)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd8aa840f: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageReactions <--
//  + TL_MessageReactions
//

func (m *MessageReactions) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageReactions:
		t := m.To_MessageReactions()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageReactions) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4f2b9479:
		m2 := MakeTLMessageReactions(m)
		m2.Decode(dBuf)
	case 0x87b6e36:
		m2 := MakeTLMessageReactions(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageReactions) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageReactions:
		t := m.To_MessageReactions()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageReactions
func (m *MessageReactions) To_MessageReactions() *TLMessageReactions {
	m.PredicateName = Predicate_messageReactions
	return &TLMessageReactions{
		Data2: m,
	}
}

// MakeTLMessageReactions
func MakeTLMessageReactions(data2 *MessageReactions) *TLMessageReactions {
	if data2 == nil {
		return &TLMessageReactions{Data2: &MessageReactions{
			PredicateName: Predicate_messageReactions,
		}}
	} else {
		data2.PredicateName = Predicate_messageReactions
		return &TLMessageReactions{Data2: data2}
	}
}

func (m *TLMessageReactions) To_MessageReactions() *MessageReactions {
	m.Data2.PredicateName = Predicate_messageReactions
	return m.Data2
}

//// flags
func (m *TLMessageReactions) SetMin(v bool) { m.Data2.Min = v }
func (m *TLMessageReactions) GetMin() bool  { return m.Data2.Min }

func (m *TLMessageReactions) SetCanSeeList(v bool) { m.Data2.CanSeeList = v }
func (m *TLMessageReactions) GetCanSeeList() bool  { return m.Data2.CanSeeList }

func (m *TLMessageReactions) SetResults(v []*ReactionCount) { m.Data2.Results = v }
func (m *TLMessageReactions) GetResults() []*ReactionCount  { return m.Data2.Results }

func (m *TLMessageReactions) SetRecentReactions(v []*MessagePeerReaction) {
	m.Data2.RecentReactions = v
}
func (m *TLMessageReactions) GetRecentReactions() []*MessagePeerReaction {
	return m.Data2.RecentReactions
}

func (m *TLMessageReactions) SetRecentReactons(v []*MessageUserReaction) { m.Data2.RecentReactons = v }
func (m *TLMessageReactions) GetRecentReactons() []*MessageUserReaction {
	return m.Data2.RecentReactons
}

func (m *TLMessageReactions) GetPredicateName() string {
	return Predicate_messageReactions
}

func (m *TLMessageReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4f2b9479: func() []byte {
			x.UInt(0x4f2b9479)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMin() == true {
					flags |= 1 << 0
				}
				if m.GetCanSeeList() == true {
					flags |= 1 << 2
				}

				if m.GetRecentReactions() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetResults())))
			for _, v := range m.GetResults() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetRecentReactions() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRecentReactions())))
				for _, v := range m.GetRecentReactions() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
		0x87b6e36: func() []byte {
			x.UInt(0x87b6e36)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMin() == true {
					flags |= 1 << 0
				}
				if m.GetCanSeeList() == true {
					flags |= 1 << 2
				}

				if m.GetRecentReactons() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetResults())))
			for _, v := range m.GetResults() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetRecentReactons() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRecentReactons())))
				for _, v := range m.GetRecentReactons() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageReactions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageReactions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageReactions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4f2b9479: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetCanSeeList(true)
			}
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*ReactionCount, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &ReactionCount{}
				v3[i].Decode(dBuf)
			}
			m.SetResults(v3)

			if (flags & (1 << 1)) != 0 {
				c4 := dBuf.Int()
				if c4 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
					return dBuf.GetError()
				}
				l4 := dBuf.Int()
				v4 := make([]*MessagePeerReaction, l4)
				for i := int32(0); i < l4; i++ {
					v4[i] = &MessagePeerReaction{}
					v4[i].Decode(dBuf)
				}
				m.SetRecentReactions(v4)
			}
			return dBuf.GetError()
		},
		0x87b6e36: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetCanSeeList(true)
			}
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*ReactionCount, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &ReactionCount{}
				v3[i].Decode(dBuf)
			}
			m.SetResults(v3)

			if (flags & (1 << 1)) != 0 {
				c5 := dBuf.Int()
				if c5 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
					return dBuf.GetError()
				}
				l5 := dBuf.Int()
				v5 := make([]*MessageUserReaction, l5)
				for i := int32(0); i < l5; i++ {
					v5[i] = &MessageUserReaction{}
					v5[i].Decode(dBuf)
				}
				m.SetRecentReactons(v5)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPhoto <--
//  + TL_InputPhotoEmpty
//  + TL_InputPhoto
//

func (m *InputPhoto) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPhotoEmpty:
		t := m.To_InputPhotoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputPhoto:
		t := m.To_InputPhoto()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPhoto) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1cd7bf0d:
		m2 := MakeTLInputPhotoEmpty(m)
		m2.Decode(dBuf)
	case 0x3bb3b94a:
		m2 := MakeTLInputPhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPhoto) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPhotoEmpty:
		t := m.To_InputPhotoEmpty()
		return t.DebugString()
	case Predicate_inputPhoto:
		t := m.To_InputPhoto()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPhotoEmpty
func (m *InputPhoto) To_InputPhotoEmpty() *TLInputPhotoEmpty {
	m.PredicateName = Predicate_inputPhotoEmpty
	return &TLInputPhotoEmpty{
		Data2: m,
	}
}

// To_InputPhoto
func (m *InputPhoto) To_InputPhoto() *TLInputPhoto {
	m.PredicateName = Predicate_inputPhoto
	return &TLInputPhoto{
		Data2: m,
	}
}

// MakeTLInputPhotoEmpty
func MakeTLInputPhotoEmpty(data2 *InputPhoto) *TLInputPhotoEmpty {
	if data2 == nil {
		return &TLInputPhotoEmpty{Data2: &InputPhoto{
			PredicateName: Predicate_inputPhotoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhotoEmpty
		return &TLInputPhotoEmpty{Data2: data2}
	}
}

func (m *TLInputPhotoEmpty) To_InputPhoto() *InputPhoto {
	m.Data2.PredicateName = Predicate_inputPhotoEmpty
	return m.Data2
}

func (m *TLInputPhotoEmpty) GetPredicateName() string {
	return Predicate_inputPhotoEmpty
}

func (m *TLInputPhotoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1cd7bf0d: func() []byte {
			x.UInt(0x1cd7bf0d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhotoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhotoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhotoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhotoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1cd7bf0d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhotoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPhoto
func MakeTLInputPhoto(data2 *InputPhoto) *TLInputPhoto {
	if data2 == nil {
		return &TLInputPhoto{Data2: &InputPhoto{
			PredicateName: Predicate_inputPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhoto
		return &TLInputPhoto{Data2: data2}
	}
}

func (m *TLInputPhoto) To_InputPhoto() *InputPhoto {
	m.Data2.PredicateName = Predicate_inputPhoto
	return m.Data2
}

func (m *TLInputPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoto) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoto) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPhoto) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhoto) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputPhoto) GetPredicateName() string {
	return Predicate_inputPhoto
}

func (m *TLInputPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3bb3b94a: func() []byte {
			x.UInt(0x3bb3b94a)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3bb3b94a: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SendMessageAction <--
//  + TL_SendMessageTypingAction
//  + TL_SendMessageCancelAction
//  + TL_SendMessageRecordVideoAction
//  + TL_SendMessageUploadVideoAction
//  + TL_SendMessageRecordAudioAction
//  + TL_SendMessageUploadAudioAction
//  + TL_SendMessageUploadPhotoAction
//  + TL_SendMessageUploadDocumentAction
//  + TL_SendMessageGeoLocationAction
//  + TL_SendMessageChooseContactAction
//  + TL_SendMessageGamePlayAction
//  + TL_SendMessageRecordRoundAction
//  + TL_SendMessageUploadRoundAction
//  + TL_SpeakingInGroupCallAction
//  + TL_SendMessageHistoryImportAction
//  + TL_SendMessageChooseStickerAction
//  + TL_SendMessageEmojiInteraction
//  + TL_SendMessageEmojiInteractionSeen
//

func (m *SendMessageAction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_sendMessageTypingAction:
		t := m.To_SendMessageTypingAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageCancelAction:
		t := m.To_SendMessageCancelAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageRecordVideoAction:
		t := m.To_SendMessageRecordVideoAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageUploadVideoAction:
		t := m.To_SendMessageUploadVideoAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageRecordAudioAction:
		t := m.To_SendMessageRecordAudioAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageUploadAudioAction:
		t := m.To_SendMessageUploadAudioAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageUploadPhotoAction:
		t := m.To_SendMessageUploadPhotoAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageUploadDocumentAction:
		t := m.To_SendMessageUploadDocumentAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageGeoLocationAction:
		t := m.To_SendMessageGeoLocationAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageChooseContactAction:
		t := m.To_SendMessageChooseContactAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageGamePlayAction:
		t := m.To_SendMessageGamePlayAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageRecordRoundAction:
		t := m.To_SendMessageRecordRoundAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageUploadRoundAction:
		t := m.To_SendMessageUploadRoundAction()
		xBuf = t.Encode(layer)
	case Predicate_speakingInGroupCallAction:
		t := m.To_SpeakingInGroupCallAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageHistoryImportAction:
		t := m.To_SendMessageHistoryImportAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageChooseStickerAction:
		t := m.To_SendMessageChooseStickerAction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageEmojiInteraction:
		t := m.To_SendMessageEmojiInteraction()
		xBuf = t.Encode(layer)
	case Predicate_sendMessageEmojiInteractionSeen:
		t := m.To_SendMessageEmojiInteractionSeen()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SendMessageAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *SendMessageAction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x16bf744e:
		m2 := MakeTLSendMessageTypingAction(m)
		m2.Decode(dBuf)
	case 0xfd5ec8f5:
		m2 := MakeTLSendMessageCancelAction(m)
		m2.Decode(dBuf)
	case 0xa187d66f:
		m2 := MakeTLSendMessageRecordVideoAction(m)
		m2.Decode(dBuf)
	case 0xe9763aec:
		m2 := MakeTLSendMessageUploadVideoAction(m)
		m2.Decode(dBuf)
	case 0xd52f73f7:
		m2 := MakeTLSendMessageRecordAudioAction(m)
		m2.Decode(dBuf)
	case 0xf351d7ab:
		m2 := MakeTLSendMessageUploadAudioAction(m)
		m2.Decode(dBuf)
	case 0xd1d34a26:
		m2 := MakeTLSendMessageUploadPhotoAction(m)
		m2.Decode(dBuf)
	case 0xaa0cd9e4:
		m2 := MakeTLSendMessageUploadDocumentAction(m)
		m2.Decode(dBuf)
	case 0x176f8ba1:
		m2 := MakeTLSendMessageGeoLocationAction(m)
		m2.Decode(dBuf)
	case 0x628cbc6f:
		m2 := MakeTLSendMessageChooseContactAction(m)
		m2.Decode(dBuf)
	case 0xdd6a8f48:
		m2 := MakeTLSendMessageGamePlayAction(m)
		m2.Decode(dBuf)
	case 0x88f27fbc:
		m2 := MakeTLSendMessageRecordRoundAction(m)
		m2.Decode(dBuf)
	case 0x243e1c66:
		m2 := MakeTLSendMessageUploadRoundAction(m)
		m2.Decode(dBuf)
	case 0xd92c2285:
		m2 := MakeTLSpeakingInGroupCallAction(m)
		m2.Decode(dBuf)
	case 0xdbda9246:
		m2 := MakeTLSendMessageHistoryImportAction(m)
		m2.Decode(dBuf)
	case 0xb05ac6b1:
		m2 := MakeTLSendMessageChooseStickerAction(m)
		m2.Decode(dBuf)
	case 0x25972bcb:
		m2 := MakeTLSendMessageEmojiInteraction(m)
		m2.Decode(dBuf)
	case 0xb665902e:
		m2 := MakeTLSendMessageEmojiInteractionSeen(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SendMessageAction) DebugString() string {
	switch m.PredicateName {
	case Predicate_sendMessageTypingAction:
		t := m.To_SendMessageTypingAction()
		return t.DebugString()
	case Predicate_sendMessageCancelAction:
		t := m.To_SendMessageCancelAction()
		return t.DebugString()
	case Predicate_sendMessageRecordVideoAction:
		t := m.To_SendMessageRecordVideoAction()
		return t.DebugString()
	case Predicate_sendMessageUploadVideoAction:
		t := m.To_SendMessageUploadVideoAction()
		return t.DebugString()
	case Predicate_sendMessageRecordAudioAction:
		t := m.To_SendMessageRecordAudioAction()
		return t.DebugString()
	case Predicate_sendMessageUploadAudioAction:
		t := m.To_SendMessageUploadAudioAction()
		return t.DebugString()
	case Predicate_sendMessageUploadPhotoAction:
		t := m.To_SendMessageUploadPhotoAction()
		return t.DebugString()
	case Predicate_sendMessageUploadDocumentAction:
		t := m.To_SendMessageUploadDocumentAction()
		return t.DebugString()
	case Predicate_sendMessageGeoLocationAction:
		t := m.To_SendMessageGeoLocationAction()
		return t.DebugString()
	case Predicate_sendMessageChooseContactAction:
		t := m.To_SendMessageChooseContactAction()
		return t.DebugString()
	case Predicate_sendMessageGamePlayAction:
		t := m.To_SendMessageGamePlayAction()
		return t.DebugString()
	case Predicate_sendMessageRecordRoundAction:
		t := m.To_SendMessageRecordRoundAction()
		return t.DebugString()
	case Predicate_sendMessageUploadRoundAction:
		t := m.To_SendMessageUploadRoundAction()
		return t.DebugString()
	case Predicate_speakingInGroupCallAction:
		t := m.To_SpeakingInGroupCallAction()
		return t.DebugString()
	case Predicate_sendMessageHistoryImportAction:
		t := m.To_SendMessageHistoryImportAction()
		return t.DebugString()
	case Predicate_sendMessageChooseStickerAction:
		t := m.To_SendMessageChooseStickerAction()
		return t.DebugString()
	case Predicate_sendMessageEmojiInteraction:
		t := m.To_SendMessageEmojiInteraction()
		return t.DebugString()
	case Predicate_sendMessageEmojiInteractionSeen:
		t := m.To_SendMessageEmojiInteractionSeen()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SendMessageTypingAction
func (m *SendMessageAction) To_SendMessageTypingAction() *TLSendMessageTypingAction {
	m.PredicateName = Predicate_sendMessageTypingAction
	return &TLSendMessageTypingAction{
		Data2: m,
	}
}

// To_SendMessageCancelAction
func (m *SendMessageAction) To_SendMessageCancelAction() *TLSendMessageCancelAction {
	m.PredicateName = Predicate_sendMessageCancelAction
	return &TLSendMessageCancelAction{
		Data2: m,
	}
}

// To_SendMessageRecordVideoAction
func (m *SendMessageAction) To_SendMessageRecordVideoAction() *TLSendMessageRecordVideoAction {
	m.PredicateName = Predicate_sendMessageRecordVideoAction
	return &TLSendMessageRecordVideoAction{
		Data2: m,
	}
}

// To_SendMessageUploadVideoAction
func (m *SendMessageAction) To_SendMessageUploadVideoAction() *TLSendMessageUploadVideoAction {
	m.PredicateName = Predicate_sendMessageUploadVideoAction
	return &TLSendMessageUploadVideoAction{
		Data2: m,
	}
}

// To_SendMessageRecordAudioAction
func (m *SendMessageAction) To_SendMessageRecordAudioAction() *TLSendMessageRecordAudioAction {
	m.PredicateName = Predicate_sendMessageRecordAudioAction
	return &TLSendMessageRecordAudioAction{
		Data2: m,
	}
}

// To_SendMessageUploadAudioAction
func (m *SendMessageAction) To_SendMessageUploadAudioAction() *TLSendMessageUploadAudioAction {
	m.PredicateName = Predicate_sendMessageUploadAudioAction
	return &TLSendMessageUploadAudioAction{
		Data2: m,
	}
}

// To_SendMessageUploadPhotoAction
func (m *SendMessageAction) To_SendMessageUploadPhotoAction() *TLSendMessageUploadPhotoAction {
	m.PredicateName = Predicate_sendMessageUploadPhotoAction
	return &TLSendMessageUploadPhotoAction{
		Data2: m,
	}
}

// To_SendMessageUploadDocumentAction
func (m *SendMessageAction) To_SendMessageUploadDocumentAction() *TLSendMessageUploadDocumentAction {
	m.PredicateName = Predicate_sendMessageUploadDocumentAction
	return &TLSendMessageUploadDocumentAction{
		Data2: m,
	}
}

// To_SendMessageGeoLocationAction
func (m *SendMessageAction) To_SendMessageGeoLocationAction() *TLSendMessageGeoLocationAction {
	m.PredicateName = Predicate_sendMessageGeoLocationAction
	return &TLSendMessageGeoLocationAction{
		Data2: m,
	}
}

// To_SendMessageChooseContactAction
func (m *SendMessageAction) To_SendMessageChooseContactAction() *TLSendMessageChooseContactAction {
	m.PredicateName = Predicate_sendMessageChooseContactAction
	return &TLSendMessageChooseContactAction{
		Data2: m,
	}
}

// To_SendMessageGamePlayAction
func (m *SendMessageAction) To_SendMessageGamePlayAction() *TLSendMessageGamePlayAction {
	m.PredicateName = Predicate_sendMessageGamePlayAction
	return &TLSendMessageGamePlayAction{
		Data2: m,
	}
}

// To_SendMessageRecordRoundAction
func (m *SendMessageAction) To_SendMessageRecordRoundAction() *TLSendMessageRecordRoundAction {
	m.PredicateName = Predicate_sendMessageRecordRoundAction
	return &TLSendMessageRecordRoundAction{
		Data2: m,
	}
}

// To_SendMessageUploadRoundAction
func (m *SendMessageAction) To_SendMessageUploadRoundAction() *TLSendMessageUploadRoundAction {
	m.PredicateName = Predicate_sendMessageUploadRoundAction
	return &TLSendMessageUploadRoundAction{
		Data2: m,
	}
}

// To_SpeakingInGroupCallAction
func (m *SendMessageAction) To_SpeakingInGroupCallAction() *TLSpeakingInGroupCallAction {
	m.PredicateName = Predicate_speakingInGroupCallAction
	return &TLSpeakingInGroupCallAction{
		Data2: m,
	}
}

// To_SendMessageHistoryImportAction
func (m *SendMessageAction) To_SendMessageHistoryImportAction() *TLSendMessageHistoryImportAction {
	m.PredicateName = Predicate_sendMessageHistoryImportAction
	return &TLSendMessageHistoryImportAction{
		Data2: m,
	}
}

// To_SendMessageChooseStickerAction
func (m *SendMessageAction) To_SendMessageChooseStickerAction() *TLSendMessageChooseStickerAction {
	m.PredicateName = Predicate_sendMessageChooseStickerAction
	return &TLSendMessageChooseStickerAction{
		Data2: m,
	}
}

// To_SendMessageEmojiInteraction
func (m *SendMessageAction) To_SendMessageEmojiInteraction() *TLSendMessageEmojiInteraction {
	m.PredicateName = Predicate_sendMessageEmojiInteraction
	return &TLSendMessageEmojiInteraction{
		Data2: m,
	}
}

// To_SendMessageEmojiInteractionSeen
func (m *SendMessageAction) To_SendMessageEmojiInteractionSeen() *TLSendMessageEmojiInteractionSeen {
	m.PredicateName = Predicate_sendMessageEmojiInteractionSeen
	return &TLSendMessageEmojiInteractionSeen{
		Data2: m,
	}
}

// MakeTLSendMessageTypingAction
func MakeTLSendMessageTypingAction(data2 *SendMessageAction) *TLSendMessageTypingAction {
	if data2 == nil {
		return &TLSendMessageTypingAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageTypingAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageTypingAction
		return &TLSendMessageTypingAction{Data2: data2}
	}
}

func (m *TLSendMessageTypingAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageTypingAction
	return m.Data2
}

func (m *TLSendMessageTypingAction) GetPredicateName() string {
	return Predicate_sendMessageTypingAction
}

func (m *TLSendMessageTypingAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x16bf744e: func() []byte {
			x.UInt(0x16bf744e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageTypingAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageTypingAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageTypingAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageTypingAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x16bf744e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageTypingAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageCancelAction
func MakeTLSendMessageCancelAction(data2 *SendMessageAction) *TLSendMessageCancelAction {
	if data2 == nil {
		return &TLSendMessageCancelAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageCancelAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageCancelAction
		return &TLSendMessageCancelAction{Data2: data2}
	}
}

func (m *TLSendMessageCancelAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageCancelAction
	return m.Data2
}

func (m *TLSendMessageCancelAction) GetPredicateName() string {
	return Predicate_sendMessageCancelAction
}

func (m *TLSendMessageCancelAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfd5ec8f5: func() []byte {
			x.UInt(0xfd5ec8f5)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageCancelAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageCancelAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageCancelAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageCancelAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfd5ec8f5: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageCancelAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageRecordVideoAction
func MakeTLSendMessageRecordVideoAction(data2 *SendMessageAction) *TLSendMessageRecordVideoAction {
	if data2 == nil {
		return &TLSendMessageRecordVideoAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageRecordVideoAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageRecordVideoAction
		return &TLSendMessageRecordVideoAction{Data2: data2}
	}
}

func (m *TLSendMessageRecordVideoAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageRecordVideoAction
	return m.Data2
}

func (m *TLSendMessageRecordVideoAction) GetPredicateName() string {
	return Predicate_sendMessageRecordVideoAction
}

func (m *TLSendMessageRecordVideoAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa187d66f: func() []byte {
			x.UInt(0xa187d66f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageRecordVideoAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageRecordVideoAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageRecordVideoAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageRecordVideoAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa187d66f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageRecordVideoAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageUploadVideoAction
func MakeTLSendMessageUploadVideoAction(data2 *SendMessageAction) *TLSendMessageUploadVideoAction {
	if data2 == nil {
		return &TLSendMessageUploadVideoAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageUploadVideoAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageUploadVideoAction
		return &TLSendMessageUploadVideoAction{Data2: data2}
	}
}

func (m *TLSendMessageUploadVideoAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageUploadVideoAction
	return m.Data2
}

func (m *TLSendMessageUploadVideoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadVideoAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageUploadVideoAction) GetPredicateName() string {
	return Predicate_sendMessageUploadVideoAction
}

func (m *TLSendMessageUploadVideoAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe9763aec: func() []byte {
			x.UInt(0xe9763aec)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageUploadVideoAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageUploadVideoAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageUploadVideoAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageUploadVideoAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe9763aec: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageUploadVideoAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageRecordAudioAction
func MakeTLSendMessageRecordAudioAction(data2 *SendMessageAction) *TLSendMessageRecordAudioAction {
	if data2 == nil {
		return &TLSendMessageRecordAudioAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageRecordAudioAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageRecordAudioAction
		return &TLSendMessageRecordAudioAction{Data2: data2}
	}
}

func (m *TLSendMessageRecordAudioAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageRecordAudioAction
	return m.Data2
}

func (m *TLSendMessageRecordAudioAction) GetPredicateName() string {
	return Predicate_sendMessageRecordAudioAction
}

func (m *TLSendMessageRecordAudioAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd52f73f7: func() []byte {
			x.UInt(0xd52f73f7)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageRecordAudioAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageRecordAudioAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageRecordAudioAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageRecordAudioAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd52f73f7: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageRecordAudioAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageUploadAudioAction
func MakeTLSendMessageUploadAudioAction(data2 *SendMessageAction) *TLSendMessageUploadAudioAction {
	if data2 == nil {
		return &TLSendMessageUploadAudioAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageUploadAudioAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageUploadAudioAction
		return &TLSendMessageUploadAudioAction{Data2: data2}
	}
}

func (m *TLSendMessageUploadAudioAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageUploadAudioAction
	return m.Data2
}

func (m *TLSendMessageUploadAudioAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadAudioAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageUploadAudioAction) GetPredicateName() string {
	return Predicate_sendMessageUploadAudioAction
}

func (m *TLSendMessageUploadAudioAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf351d7ab: func() []byte {
			x.UInt(0xf351d7ab)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageUploadAudioAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageUploadAudioAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageUploadAudioAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageUploadAudioAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf351d7ab: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageUploadAudioAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageUploadPhotoAction
func MakeTLSendMessageUploadPhotoAction(data2 *SendMessageAction) *TLSendMessageUploadPhotoAction {
	if data2 == nil {
		return &TLSendMessageUploadPhotoAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageUploadPhotoAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageUploadPhotoAction
		return &TLSendMessageUploadPhotoAction{Data2: data2}
	}
}

func (m *TLSendMessageUploadPhotoAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageUploadPhotoAction
	return m.Data2
}

func (m *TLSendMessageUploadPhotoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadPhotoAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageUploadPhotoAction) GetPredicateName() string {
	return Predicate_sendMessageUploadPhotoAction
}

func (m *TLSendMessageUploadPhotoAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd1d34a26: func() []byte {
			x.UInt(0xd1d34a26)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageUploadPhotoAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageUploadPhotoAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageUploadPhotoAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageUploadPhotoAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd1d34a26: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageUploadPhotoAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageUploadDocumentAction
func MakeTLSendMessageUploadDocumentAction(data2 *SendMessageAction) *TLSendMessageUploadDocumentAction {
	if data2 == nil {
		return &TLSendMessageUploadDocumentAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageUploadDocumentAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageUploadDocumentAction
		return &TLSendMessageUploadDocumentAction{Data2: data2}
	}
}

func (m *TLSendMessageUploadDocumentAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageUploadDocumentAction
	return m.Data2
}

func (m *TLSendMessageUploadDocumentAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadDocumentAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageUploadDocumentAction) GetPredicateName() string {
	return Predicate_sendMessageUploadDocumentAction
}

func (m *TLSendMessageUploadDocumentAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaa0cd9e4: func() []byte {
			x.UInt(0xaa0cd9e4)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageUploadDocumentAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageUploadDocumentAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageUploadDocumentAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageUploadDocumentAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaa0cd9e4: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageUploadDocumentAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageGeoLocationAction
func MakeTLSendMessageGeoLocationAction(data2 *SendMessageAction) *TLSendMessageGeoLocationAction {
	if data2 == nil {
		return &TLSendMessageGeoLocationAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageGeoLocationAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageGeoLocationAction
		return &TLSendMessageGeoLocationAction{Data2: data2}
	}
}

func (m *TLSendMessageGeoLocationAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageGeoLocationAction
	return m.Data2
}

func (m *TLSendMessageGeoLocationAction) GetPredicateName() string {
	return Predicate_sendMessageGeoLocationAction
}

func (m *TLSendMessageGeoLocationAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x176f8ba1: func() []byte {
			x.UInt(0x176f8ba1)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageGeoLocationAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageGeoLocationAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageGeoLocationAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageGeoLocationAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x176f8ba1: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageGeoLocationAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageChooseContactAction
func MakeTLSendMessageChooseContactAction(data2 *SendMessageAction) *TLSendMessageChooseContactAction {
	if data2 == nil {
		return &TLSendMessageChooseContactAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageChooseContactAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageChooseContactAction
		return &TLSendMessageChooseContactAction{Data2: data2}
	}
}

func (m *TLSendMessageChooseContactAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageChooseContactAction
	return m.Data2
}

func (m *TLSendMessageChooseContactAction) GetPredicateName() string {
	return Predicate_sendMessageChooseContactAction
}

func (m *TLSendMessageChooseContactAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x628cbc6f: func() []byte {
			x.UInt(0x628cbc6f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageChooseContactAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageChooseContactAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageChooseContactAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageChooseContactAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x628cbc6f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageChooseContactAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageGamePlayAction
func MakeTLSendMessageGamePlayAction(data2 *SendMessageAction) *TLSendMessageGamePlayAction {
	if data2 == nil {
		return &TLSendMessageGamePlayAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageGamePlayAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageGamePlayAction
		return &TLSendMessageGamePlayAction{Data2: data2}
	}
}

func (m *TLSendMessageGamePlayAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageGamePlayAction
	return m.Data2
}

func (m *TLSendMessageGamePlayAction) GetPredicateName() string {
	return Predicate_sendMessageGamePlayAction
}

func (m *TLSendMessageGamePlayAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdd6a8f48: func() []byte {
			x.UInt(0xdd6a8f48)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageGamePlayAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageGamePlayAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageGamePlayAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageGamePlayAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdd6a8f48: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageGamePlayAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageRecordRoundAction
func MakeTLSendMessageRecordRoundAction(data2 *SendMessageAction) *TLSendMessageRecordRoundAction {
	if data2 == nil {
		return &TLSendMessageRecordRoundAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageRecordRoundAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageRecordRoundAction
		return &TLSendMessageRecordRoundAction{Data2: data2}
	}
}

func (m *TLSendMessageRecordRoundAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageRecordRoundAction
	return m.Data2
}

func (m *TLSendMessageRecordRoundAction) GetPredicateName() string {
	return Predicate_sendMessageRecordRoundAction
}

func (m *TLSendMessageRecordRoundAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x88f27fbc: func() []byte {
			x.UInt(0x88f27fbc)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageRecordRoundAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageRecordRoundAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageRecordRoundAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageRecordRoundAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x88f27fbc: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageRecordRoundAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageUploadRoundAction
func MakeTLSendMessageUploadRoundAction(data2 *SendMessageAction) *TLSendMessageUploadRoundAction {
	if data2 == nil {
		return &TLSendMessageUploadRoundAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageUploadRoundAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageUploadRoundAction
		return &TLSendMessageUploadRoundAction{Data2: data2}
	}
}

func (m *TLSendMessageUploadRoundAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageUploadRoundAction
	return m.Data2
}

func (m *TLSendMessageUploadRoundAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadRoundAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageUploadRoundAction) GetPredicateName() string {
	return Predicate_sendMessageUploadRoundAction
}

func (m *TLSendMessageUploadRoundAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x243e1c66: func() []byte {
			x.UInt(0x243e1c66)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageUploadRoundAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageUploadRoundAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageUploadRoundAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageUploadRoundAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x243e1c66: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageUploadRoundAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSpeakingInGroupCallAction
func MakeTLSpeakingInGroupCallAction(data2 *SendMessageAction) *TLSpeakingInGroupCallAction {
	if data2 == nil {
		return &TLSpeakingInGroupCallAction{Data2: &SendMessageAction{
			PredicateName: Predicate_speakingInGroupCallAction,
		}}
	} else {
		data2.PredicateName = Predicate_speakingInGroupCallAction
		return &TLSpeakingInGroupCallAction{Data2: data2}
	}
}

func (m *TLSpeakingInGroupCallAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_speakingInGroupCallAction
	return m.Data2
}

func (m *TLSpeakingInGroupCallAction) GetPredicateName() string {
	return Predicate_speakingInGroupCallAction
}

func (m *TLSpeakingInGroupCallAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd92c2285: func() []byte {
			x.UInt(0xd92c2285)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_speakingInGroupCallAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_speakingInGroupCallAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSpeakingInGroupCallAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSpeakingInGroupCallAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd92c2285: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSpeakingInGroupCallAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageHistoryImportAction
func MakeTLSendMessageHistoryImportAction(data2 *SendMessageAction) *TLSendMessageHistoryImportAction {
	if data2 == nil {
		return &TLSendMessageHistoryImportAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageHistoryImportAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageHistoryImportAction
		return &TLSendMessageHistoryImportAction{Data2: data2}
	}
}

func (m *TLSendMessageHistoryImportAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageHistoryImportAction
	return m.Data2
}

func (m *TLSendMessageHistoryImportAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageHistoryImportAction) GetProgress() int32  { return m.Data2.Progress }

func (m *TLSendMessageHistoryImportAction) GetPredicateName() string {
	return Predicate_sendMessageHistoryImportAction
}

func (m *TLSendMessageHistoryImportAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdbda9246: func() []byte {
			x.UInt(0xdbda9246)

			x.Int(m.GetProgress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageHistoryImportAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageHistoryImportAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageHistoryImportAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageHistoryImportAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdbda9246: func() error {
			m.SetProgress(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageHistoryImportAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageChooseStickerAction
func MakeTLSendMessageChooseStickerAction(data2 *SendMessageAction) *TLSendMessageChooseStickerAction {
	if data2 == nil {
		return &TLSendMessageChooseStickerAction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageChooseStickerAction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageChooseStickerAction
		return &TLSendMessageChooseStickerAction{Data2: data2}
	}
}

func (m *TLSendMessageChooseStickerAction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageChooseStickerAction
	return m.Data2
}

func (m *TLSendMessageChooseStickerAction) GetPredicateName() string {
	return Predicate_sendMessageChooseStickerAction
}

func (m *TLSendMessageChooseStickerAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb05ac6b1: func() []byte {
			x.UInt(0xb05ac6b1)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageChooseStickerAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageChooseStickerAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageChooseStickerAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageChooseStickerAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb05ac6b1: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageChooseStickerAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageEmojiInteraction
func MakeTLSendMessageEmojiInteraction(data2 *SendMessageAction) *TLSendMessageEmojiInteraction {
	if data2 == nil {
		return &TLSendMessageEmojiInteraction{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageEmojiInteraction,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageEmojiInteraction
		return &TLSendMessageEmojiInteraction{Data2: data2}
	}
}

func (m *TLSendMessageEmojiInteraction) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageEmojiInteraction
	return m.Data2
}

func (m *TLSendMessageEmojiInteraction) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLSendMessageEmojiInteraction) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLSendMessageEmojiInteraction) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLSendMessageEmojiInteraction) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLSendMessageEmojiInteraction) SetInteraction(v *DataJSON) { m.Data2.Interaction = v }
func (m *TLSendMessageEmojiInteraction) GetInteraction() *DataJSON  { return m.Data2.Interaction }

func (m *TLSendMessageEmojiInteraction) GetPredicateName() string {
	return Predicate_sendMessageEmojiInteraction
}

func (m *TLSendMessageEmojiInteraction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x25972bcb: func() []byte {
			x.UInt(0x25972bcb)

			x.String(m.GetEmoticon())
			x.Int(m.GetMsgId())
			x.Bytes(m.GetInteraction().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageEmojiInteraction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageEmojiInteraction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageEmojiInteraction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageEmojiInteraction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x25972bcb: func() error {
			m.SetEmoticon(dBuf.String())
			m.SetMsgId(dBuf.Int())

			m3 := &DataJSON{}
			m3.Decode(dBuf)
			m.SetInteraction(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageEmojiInteraction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSendMessageEmojiInteractionSeen
func MakeTLSendMessageEmojiInteractionSeen(data2 *SendMessageAction) *TLSendMessageEmojiInteractionSeen {
	if data2 == nil {
		return &TLSendMessageEmojiInteractionSeen{Data2: &SendMessageAction{
			PredicateName: Predicate_sendMessageEmojiInteractionSeen,
		}}
	} else {
		data2.PredicateName = Predicate_sendMessageEmojiInteractionSeen
		return &TLSendMessageEmojiInteractionSeen{Data2: data2}
	}
}

func (m *TLSendMessageEmojiInteractionSeen) To_SendMessageAction() *SendMessageAction {
	m.Data2.PredicateName = Predicate_sendMessageEmojiInteractionSeen
	return m.Data2
}

func (m *TLSendMessageEmojiInteractionSeen) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLSendMessageEmojiInteractionSeen) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLSendMessageEmojiInteractionSeen) GetPredicateName() string {
	return Predicate_sendMessageEmojiInteractionSeen
}

func (m *TLSendMessageEmojiInteractionSeen) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb665902e: func() []byte {
			x.UInt(0xb665902e)

			x.String(m.GetEmoticon())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sendMessageEmojiInteractionSeen, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sendMessageEmojiInteractionSeen, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSendMessageEmojiInteractionSeen) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSendMessageEmojiInteractionSeen) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb665902e: func() error {
			m.SetEmoticon(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSendMessageEmojiInteractionSeen) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// LangPackString <--
//  + TL_LangPackString
//  + TL_LangPackStringPluralized
//  + TL_LangPackStringDeleted
//

func (m *LangPackString) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_langPackString:
		t := m.To_LangPackString()
		xBuf = t.Encode(layer)
	case Predicate_langPackStringPluralized:
		t := m.To_LangPackStringPluralized()
		xBuf = t.Encode(layer)
	case Predicate_langPackStringDeleted:
		t := m.To_LangPackStringDeleted()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *LangPackString) CalcByteSize(layer int32) int {
	return 0
}

func (m *LangPackString) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcad181f6:
		m2 := MakeTLLangPackString(m)
		m2.Decode(dBuf)
	case 0x6c47ac9f:
		m2 := MakeTLLangPackStringPluralized(m)
		m2.Decode(dBuf)
	case 0x2979eeb2:
		m2 := MakeTLLangPackStringDeleted(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *LangPackString) DebugString() string {
	switch m.PredicateName {
	case Predicate_langPackString:
		t := m.To_LangPackString()
		return t.DebugString()
	case Predicate_langPackStringPluralized:
		t := m.To_LangPackStringPluralized()
		return t.DebugString()
	case Predicate_langPackStringDeleted:
		t := m.To_LangPackStringDeleted()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_LangPackString
func (m *LangPackString) To_LangPackString() *TLLangPackString {
	m.PredicateName = Predicate_langPackString
	return &TLLangPackString{
		Data2: m,
	}
}

// To_LangPackStringPluralized
func (m *LangPackString) To_LangPackStringPluralized() *TLLangPackStringPluralized {
	m.PredicateName = Predicate_langPackStringPluralized
	return &TLLangPackStringPluralized{
		Data2: m,
	}
}

// To_LangPackStringDeleted
func (m *LangPackString) To_LangPackStringDeleted() *TLLangPackStringDeleted {
	m.PredicateName = Predicate_langPackStringDeleted
	return &TLLangPackStringDeleted{
		Data2: m,
	}
}

// MakeTLLangPackString
func MakeTLLangPackString(data2 *LangPackString) *TLLangPackString {
	if data2 == nil {
		return &TLLangPackString{Data2: &LangPackString{
			PredicateName: Predicate_langPackString,
		}}
	} else {
		data2.PredicateName = Predicate_langPackString
		return &TLLangPackString{Data2: data2}
	}
}

func (m *TLLangPackString) To_LangPackString() *LangPackString {
	m.Data2.PredicateName = Predicate_langPackString
	return m.Data2
}

func (m *TLLangPackString) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackString) GetKey() string  { return m.Data2.Key }

func (m *TLLangPackString) SetValue(v string) { m.Data2.Value = v }
func (m *TLLangPackString) GetValue() string  { return m.Data2.Value }

func (m *TLLangPackString) GetPredicateName() string {
	return Predicate_langPackString
}

func (m *TLLangPackString) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcad181f6: func() []byte {
			x.UInt(0xcad181f6)

			x.String(m.GetKey())
			x.String(m.GetValue())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_langPackString, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_langPackString, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLangPackString) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangPackString) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcad181f6: func() error {
			m.SetKey(dBuf.String())
			m.SetValue(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLangPackString) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLLangPackStringPluralized
func MakeTLLangPackStringPluralized(data2 *LangPackString) *TLLangPackStringPluralized {
	if data2 == nil {
		return &TLLangPackStringPluralized{Data2: &LangPackString{
			PredicateName: Predicate_langPackStringPluralized,
		}}
	} else {
		data2.PredicateName = Predicate_langPackStringPluralized
		return &TLLangPackStringPluralized{Data2: data2}
	}
}

func (m *TLLangPackStringPluralized) To_LangPackString() *LangPackString {
	m.Data2.PredicateName = Predicate_langPackStringPluralized
	return m.Data2
}

//// flags
func (m *TLLangPackStringPluralized) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringPluralized) GetKey() string  { return m.Data2.Key }

func (m *TLLangPackStringPluralized) SetZeroValue(v *types.StringValue) { m.Data2.ZeroValue = v }
func (m *TLLangPackStringPluralized) GetZeroValue() *types.StringValue  { return m.Data2.ZeroValue }

func (m *TLLangPackStringPluralized) SetOneValue(v *types.StringValue) { m.Data2.OneValue = v }
func (m *TLLangPackStringPluralized) GetOneValue() *types.StringValue  { return m.Data2.OneValue }

func (m *TLLangPackStringPluralized) SetTwoValue(v *types.StringValue) { m.Data2.TwoValue = v }
func (m *TLLangPackStringPluralized) GetTwoValue() *types.StringValue  { return m.Data2.TwoValue }

func (m *TLLangPackStringPluralized) SetFewValue(v *types.StringValue) { m.Data2.FewValue = v }
func (m *TLLangPackStringPluralized) GetFewValue() *types.StringValue  { return m.Data2.FewValue }

func (m *TLLangPackStringPluralized) SetManyValue(v *types.StringValue) { m.Data2.ManyValue = v }
func (m *TLLangPackStringPluralized) GetManyValue() *types.StringValue  { return m.Data2.ManyValue }

func (m *TLLangPackStringPluralized) SetOtherValue(v string) { m.Data2.OtherValue = v }
func (m *TLLangPackStringPluralized) GetOtherValue() string  { return m.Data2.OtherValue }

func (m *TLLangPackStringPluralized) GetPredicateName() string {
	return Predicate_langPackStringPluralized
}

func (m *TLLangPackStringPluralized) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6c47ac9f: func() []byte {
			x.UInt(0x6c47ac9f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetZeroValue() != nil {
					flags |= 1 << 0
				}
				if m.GetOneValue() != nil {
					flags |= 1 << 1
				}
				if m.GetTwoValue() != nil {
					flags |= 1 << 2
				}
				if m.GetFewValue() != nil {
					flags |= 1 << 3
				}
				if m.GetManyValue() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetKey())
			if m.GetZeroValue() != nil {
				x.String(m.GetZeroValue().Value)
			}

			if m.GetOneValue() != nil {
				x.String(m.GetOneValue().Value)
			}

			if m.GetTwoValue() != nil {
				x.String(m.GetTwoValue().Value)
			}

			if m.GetFewValue() != nil {
				x.String(m.GetFewValue().Value)
			}

			if m.GetManyValue() != nil {
				x.String(m.GetManyValue().Value)
			}

			x.String(m.GetOtherValue())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_langPackStringPluralized, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_langPackStringPluralized, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLangPackStringPluralized) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangPackStringPluralized) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6c47ac9f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetKey(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetZeroValue(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetOneValue(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetTwoValue(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetFewValue(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetManyValue(&types.StringValue{Value: dBuf.String()})
			}

			m.SetOtherValue(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLangPackStringPluralized) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLLangPackStringDeleted
func MakeTLLangPackStringDeleted(data2 *LangPackString) *TLLangPackStringDeleted {
	if data2 == nil {
		return &TLLangPackStringDeleted{Data2: &LangPackString{
			PredicateName: Predicate_langPackStringDeleted,
		}}
	} else {
		data2.PredicateName = Predicate_langPackStringDeleted
		return &TLLangPackStringDeleted{Data2: data2}
	}
}

func (m *TLLangPackStringDeleted) To_LangPackString() *LangPackString {
	m.Data2.PredicateName = Predicate_langPackStringDeleted
	return m.Data2
}

func (m *TLLangPackStringDeleted) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringDeleted) GetKey() string  { return m.Data2.Key }

func (m *TLLangPackStringDeleted) GetPredicateName() string {
	return Predicate_langPackStringDeleted
}

func (m *TLLangPackStringDeleted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2979eeb2: func() []byte {
			x.UInt(0x2979eeb2)

			x.String(m.GetKey())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_langPackStringDeleted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_langPackStringDeleted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLangPackStringDeleted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangPackStringDeleted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2979eeb2: func() error {
			m.SetKey(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLangPackStringDeleted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputSingleMedia <--
//  + TL_InputSingleMedia
//

func (m *InputSingleMedia) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputSingleMedia:
		t := m.To_InputSingleMedia()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputSingleMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputSingleMedia) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1cc6e91f:
		m2 := MakeTLInputSingleMedia(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputSingleMedia) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputSingleMedia:
		t := m.To_InputSingleMedia()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputSingleMedia
func (m *InputSingleMedia) To_InputSingleMedia() *TLInputSingleMedia {
	m.PredicateName = Predicate_inputSingleMedia
	return &TLInputSingleMedia{
		Data2: m,
	}
}

// MakeTLInputSingleMedia
func MakeTLInputSingleMedia(data2 *InputSingleMedia) *TLInputSingleMedia {
	if data2 == nil {
		return &TLInputSingleMedia{Data2: &InputSingleMedia{
			PredicateName: Predicate_inputSingleMedia,
		}}
	} else {
		data2.PredicateName = Predicate_inputSingleMedia
		return &TLInputSingleMedia{Data2: data2}
	}
}

func (m *TLInputSingleMedia) To_InputSingleMedia() *InputSingleMedia {
	m.Data2.PredicateName = Predicate_inputSingleMedia
	return m.Data2
}

//// flags
func (m *TLInputSingleMedia) SetMedia(v *InputMedia) { m.Data2.Media = v }
func (m *TLInputSingleMedia) GetMedia() *InputMedia  { return m.Data2.Media }

func (m *TLInputSingleMedia) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLInputSingleMedia) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLInputSingleMedia) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputSingleMedia) GetMessage() string  { return m.Data2.Message }

func (m *TLInputSingleMedia) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputSingleMedia) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLInputSingleMedia) GetPredicateName() string {
	return Predicate_inputSingleMedia
}

func (m *TLInputSingleMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1cc6e91f: func() []byte {
			x.UInt(0x1cc6e91f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetEntities() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetMedia().Encode(layer))
			x.Long(m.GetRandomId())
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputSingleMedia, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputSingleMedia, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputSingleMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputSingleMedia) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1cc6e91f: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &InputMedia{}
			m1.Decode(dBuf)
			m.SetMedia(m1)

			m.SetRandomId(dBuf.Long())
			m.SetMessage(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				c4 := dBuf.Int()
				if c4 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
					return dBuf.GetError()
				}
				l4 := dBuf.Int()
				v4 := make([]*MessageEntity, l4)
				for i := int32(0); i < l4; i++ {
					v4[i] = &MessageEntity{}
					v4[i].Decode(dBuf)
				}
				m.SetEntities(v4)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputSingleMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BaseTheme <--
//  + TL_BaseThemeClassic
//  + TL_BaseThemeDay
//  + TL_BaseThemeNight
//  + TL_BaseThemeTinted
//  + TL_BaseThemeArctic
//

func (m *BaseTheme) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_baseThemeClassic:
		t := m.To_BaseThemeClassic()
		xBuf = t.Encode(layer)
	case Predicate_baseThemeDay:
		t := m.To_BaseThemeDay()
		xBuf = t.Encode(layer)
	case Predicate_baseThemeNight:
		t := m.To_BaseThemeNight()
		xBuf = t.Encode(layer)
	case Predicate_baseThemeTinted:
		t := m.To_BaseThemeTinted()
		xBuf = t.Encode(layer)
	case Predicate_baseThemeArctic:
		t := m.To_BaseThemeArctic()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BaseTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *BaseTheme) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc3a12462:
		m2 := MakeTLBaseThemeClassic(m)
		m2.Decode(dBuf)
	case 0xfbd81688:
		m2 := MakeTLBaseThemeDay(m)
		m2.Decode(dBuf)
	case 0xb7b31ea8:
		m2 := MakeTLBaseThemeNight(m)
		m2.Decode(dBuf)
	case 0x6d5f77ee:
		m2 := MakeTLBaseThemeTinted(m)
		m2.Decode(dBuf)
	case 0x5b11125a:
		m2 := MakeTLBaseThemeArctic(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BaseTheme) DebugString() string {
	switch m.PredicateName {
	case Predicate_baseThemeClassic:
		t := m.To_BaseThemeClassic()
		return t.DebugString()
	case Predicate_baseThemeDay:
		t := m.To_BaseThemeDay()
		return t.DebugString()
	case Predicate_baseThemeNight:
		t := m.To_BaseThemeNight()
		return t.DebugString()
	case Predicate_baseThemeTinted:
		t := m.To_BaseThemeTinted()
		return t.DebugString()
	case Predicate_baseThemeArctic:
		t := m.To_BaseThemeArctic()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BaseThemeClassic
func (m *BaseTheme) To_BaseThemeClassic() *TLBaseThemeClassic {
	m.PredicateName = Predicate_baseThemeClassic
	return &TLBaseThemeClassic{
		Data2: m,
	}
}

// To_BaseThemeDay
func (m *BaseTheme) To_BaseThemeDay() *TLBaseThemeDay {
	m.PredicateName = Predicate_baseThemeDay
	return &TLBaseThemeDay{
		Data2: m,
	}
}

// To_BaseThemeNight
func (m *BaseTheme) To_BaseThemeNight() *TLBaseThemeNight {
	m.PredicateName = Predicate_baseThemeNight
	return &TLBaseThemeNight{
		Data2: m,
	}
}

// To_BaseThemeTinted
func (m *BaseTheme) To_BaseThemeTinted() *TLBaseThemeTinted {
	m.PredicateName = Predicate_baseThemeTinted
	return &TLBaseThemeTinted{
		Data2: m,
	}
}

// To_BaseThemeArctic
func (m *BaseTheme) To_BaseThemeArctic() *TLBaseThemeArctic {
	m.PredicateName = Predicate_baseThemeArctic
	return &TLBaseThemeArctic{
		Data2: m,
	}
}

// MakeTLBaseThemeClassic
func MakeTLBaseThemeClassic(data2 *BaseTheme) *TLBaseThemeClassic {
	if data2 == nil {
		return &TLBaseThemeClassic{Data2: &BaseTheme{
			PredicateName: Predicate_baseThemeClassic,
		}}
	} else {
		data2.PredicateName = Predicate_baseThemeClassic
		return &TLBaseThemeClassic{Data2: data2}
	}
}

func (m *TLBaseThemeClassic) To_BaseTheme() *BaseTheme {
	m.Data2.PredicateName = Predicate_baseThemeClassic
	return m.Data2
}

func (m *TLBaseThemeClassic) GetPredicateName() string {
	return Predicate_baseThemeClassic
}

func (m *TLBaseThemeClassic) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc3a12462: func() []byte {
			x.UInt(0xc3a12462)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_baseThemeClassic, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_baseThemeClassic, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBaseThemeClassic) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBaseThemeClassic) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc3a12462: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBaseThemeClassic) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBaseThemeDay
func MakeTLBaseThemeDay(data2 *BaseTheme) *TLBaseThemeDay {
	if data2 == nil {
		return &TLBaseThemeDay{Data2: &BaseTheme{
			PredicateName: Predicate_baseThemeDay,
		}}
	} else {
		data2.PredicateName = Predicate_baseThemeDay
		return &TLBaseThemeDay{Data2: data2}
	}
}

func (m *TLBaseThemeDay) To_BaseTheme() *BaseTheme {
	m.Data2.PredicateName = Predicate_baseThemeDay
	return m.Data2
}

func (m *TLBaseThemeDay) GetPredicateName() string {
	return Predicate_baseThemeDay
}

func (m *TLBaseThemeDay) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfbd81688: func() []byte {
			x.UInt(0xfbd81688)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_baseThemeDay, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_baseThemeDay, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBaseThemeDay) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBaseThemeDay) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfbd81688: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBaseThemeDay) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBaseThemeNight
func MakeTLBaseThemeNight(data2 *BaseTheme) *TLBaseThemeNight {
	if data2 == nil {
		return &TLBaseThemeNight{Data2: &BaseTheme{
			PredicateName: Predicate_baseThemeNight,
		}}
	} else {
		data2.PredicateName = Predicate_baseThemeNight
		return &TLBaseThemeNight{Data2: data2}
	}
}

func (m *TLBaseThemeNight) To_BaseTheme() *BaseTheme {
	m.Data2.PredicateName = Predicate_baseThemeNight
	return m.Data2
}

func (m *TLBaseThemeNight) GetPredicateName() string {
	return Predicate_baseThemeNight
}

func (m *TLBaseThemeNight) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb7b31ea8: func() []byte {
			x.UInt(0xb7b31ea8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_baseThemeNight, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_baseThemeNight, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBaseThemeNight) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBaseThemeNight) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb7b31ea8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBaseThemeNight) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBaseThemeTinted
func MakeTLBaseThemeTinted(data2 *BaseTheme) *TLBaseThemeTinted {
	if data2 == nil {
		return &TLBaseThemeTinted{Data2: &BaseTheme{
			PredicateName: Predicate_baseThemeTinted,
		}}
	} else {
		data2.PredicateName = Predicate_baseThemeTinted
		return &TLBaseThemeTinted{Data2: data2}
	}
}

func (m *TLBaseThemeTinted) To_BaseTheme() *BaseTheme {
	m.Data2.PredicateName = Predicate_baseThemeTinted
	return m.Data2
}

func (m *TLBaseThemeTinted) GetPredicateName() string {
	return Predicate_baseThemeTinted
}

func (m *TLBaseThemeTinted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6d5f77ee: func() []byte {
			x.UInt(0x6d5f77ee)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_baseThemeTinted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_baseThemeTinted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBaseThemeTinted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBaseThemeTinted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6d5f77ee: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBaseThemeTinted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBaseThemeArctic
func MakeTLBaseThemeArctic(data2 *BaseTheme) *TLBaseThemeArctic {
	if data2 == nil {
		return &TLBaseThemeArctic{Data2: &BaseTheme{
			PredicateName: Predicate_baseThemeArctic,
		}}
	} else {
		data2.PredicateName = Predicate_baseThemeArctic
		return &TLBaseThemeArctic{Data2: data2}
	}
}

func (m *TLBaseThemeArctic) To_BaseTheme() *BaseTheme {
	m.Data2.PredicateName = Predicate_baseThemeArctic
	return m.Data2
}

func (m *TLBaseThemeArctic) GetPredicateName() string {
	return Predicate_baseThemeArctic
}

func (m *TLBaseThemeArctic) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5b11125a: func() []byte {
			x.UInt(0x5b11125a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_baseThemeArctic, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_baseThemeArctic, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBaseThemeArctic) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBaseThemeArctic) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5b11125a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBaseThemeArctic) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsDateRangeDays <--
//  + TL_StatsDateRangeDays
//

func (m *StatsDateRangeDays) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsDateRangeDays:
		t := m.To_StatsDateRangeDays()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsDateRangeDays) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsDateRangeDays) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb637edaf:
		m2 := MakeTLStatsDateRangeDays(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsDateRangeDays) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsDateRangeDays:
		t := m.To_StatsDateRangeDays()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsDateRangeDays
func (m *StatsDateRangeDays) To_StatsDateRangeDays() *TLStatsDateRangeDays {
	m.PredicateName = Predicate_statsDateRangeDays
	return &TLStatsDateRangeDays{
		Data2: m,
	}
}

// MakeTLStatsDateRangeDays
func MakeTLStatsDateRangeDays(data2 *StatsDateRangeDays) *TLStatsDateRangeDays {
	if data2 == nil {
		return &TLStatsDateRangeDays{Data2: &StatsDateRangeDays{
			PredicateName: Predicate_statsDateRangeDays,
		}}
	} else {
		data2.PredicateName = Predicate_statsDateRangeDays
		return &TLStatsDateRangeDays{Data2: data2}
	}
}

func (m *TLStatsDateRangeDays) To_StatsDateRangeDays() *StatsDateRangeDays {
	m.Data2.PredicateName = Predicate_statsDateRangeDays
	return m.Data2
}

func (m *TLStatsDateRangeDays) SetMinDate(v int32) { m.Data2.MinDate = v }
func (m *TLStatsDateRangeDays) GetMinDate() int32  { return m.Data2.MinDate }

func (m *TLStatsDateRangeDays) SetMaxDate(v int32) { m.Data2.MaxDate = v }
func (m *TLStatsDateRangeDays) GetMaxDate() int32  { return m.Data2.MaxDate }

func (m *TLStatsDateRangeDays) GetPredicateName() string {
	return Predicate_statsDateRangeDays
}

func (m *TLStatsDateRangeDays) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb637edaf: func() []byte {
			x.UInt(0xb637edaf)

			x.Int(m.GetMinDate())
			x.Int(m.GetMaxDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsDateRangeDays, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsDateRangeDays, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsDateRangeDays) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsDateRangeDays) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb637edaf: func() error {
			m.SetMinDate(dBuf.Int())
			m.SetMaxDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsDateRangeDays) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BotInlineResult <--
//  + TL_BotInlineResult
//  + TL_BotInlineMediaResult
//

func (m *BotInlineResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_botInlineResult:
		t := m.To_BotInlineResult()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMediaResult:
		t := m.To_BotInlineMediaResult()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BotInlineResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *BotInlineResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x11965f3a:
		m2 := MakeTLBotInlineResult(m)
		m2.Decode(dBuf)
	case 0x17db940b:
		m2 := MakeTLBotInlineMediaResult(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BotInlineResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_botInlineResult:
		t := m.To_BotInlineResult()
		return t.DebugString()
	case Predicate_botInlineMediaResult:
		t := m.To_BotInlineMediaResult()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BotInlineResult
func (m *BotInlineResult) To_BotInlineResult() *TLBotInlineResult {
	m.PredicateName = Predicate_botInlineResult
	return &TLBotInlineResult{
		Data2: m,
	}
}

// To_BotInlineMediaResult
func (m *BotInlineResult) To_BotInlineMediaResult() *TLBotInlineMediaResult {
	m.PredicateName = Predicate_botInlineMediaResult
	return &TLBotInlineMediaResult{
		Data2: m,
	}
}

// MakeTLBotInlineResult
func MakeTLBotInlineResult(data2 *BotInlineResult) *TLBotInlineResult {
	if data2 == nil {
		return &TLBotInlineResult{Data2: &BotInlineResult{
			PredicateName: Predicate_botInlineResult,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineResult
		return &TLBotInlineResult{Data2: data2}
	}
}

func (m *TLBotInlineResult) To_BotInlineResult() *BotInlineResult {
	m.Data2.PredicateName = Predicate_botInlineResult
	return m.Data2
}

//// flags
func (m *TLBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineResult) GetId() string  { return m.Data2.Id }

func (m *TLBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineResult) GetType() string  { return m.Data2.Type }

func (m *TLBotInlineResult) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLBotInlineResult) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLBotInlineResult) SetDescription(v *types.StringValue) { m.Data2.Description = v }
func (m *TLBotInlineResult) GetDescription() *types.StringValue  { return m.Data2.Description }

func (m *TLBotInlineResult) SetUrl(v *types.StringValue) { m.Data2.Url = v }
func (m *TLBotInlineResult) GetUrl() *types.StringValue  { return m.Data2.Url }

func (m *TLBotInlineResult) SetThumb(v *WebDocument) { m.Data2.Thumb = v }
func (m *TLBotInlineResult) GetThumb() *WebDocument  { return m.Data2.Thumb }

func (m *TLBotInlineResult) SetContent(v *WebDocument) { m.Data2.Content = v }
func (m *TLBotInlineResult) GetContent() *WebDocument  { return m.Data2.Content }

func (m *TLBotInlineResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineResult) GetSendMessage() *BotInlineMessage  { return m.Data2.SendMessage }

func (m *TLBotInlineResult) GetPredicateName() string {
	return Predicate_botInlineResult
}

func (m *TLBotInlineResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x11965f3a: func() []byte {
			x.UInt(0x11965f3a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTitle() != nil {
					flags |= 1 << 1
				}
				if m.GetDescription() != nil {
					flags |= 1 << 2
				}
				if m.GetUrl() != nil {
					flags |= 1 << 3
				}
				if m.GetThumb() != nil {
					flags |= 1 << 4
				}
				if m.GetContent() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetId())
			x.String(m.GetType())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			if m.GetUrl() != nil {
				x.String(m.GetUrl().Value)
			}

			if m.GetThumb() != nil {
				x.Bytes(m.GetThumb().Encode(layer))
			}

			if m.GetContent() != nil {
				x.Bytes(m.GetContent().Encode(layer))
			}

			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineResult, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineResult, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineResult) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x11965f3a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.String())
			m.SetType(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetUrl(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m6 := &WebDocument{}
				m6.Decode(dBuf)
				m.SetThumb(m6)
			}
			if (flags & (1 << 5)) != 0 {
				m7 := &WebDocument{}
				m7.Decode(dBuf)
				m.SetContent(m7)
			}

			m8 := &BotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMediaResult
func MakeTLBotInlineMediaResult(data2 *BotInlineResult) *TLBotInlineMediaResult {
	if data2 == nil {
		return &TLBotInlineMediaResult{Data2: &BotInlineResult{
			PredicateName: Predicate_botInlineMediaResult,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMediaResult
		return &TLBotInlineMediaResult{Data2: data2}
	}
}

func (m *TLBotInlineMediaResult) To_BotInlineResult() *BotInlineResult {
	m.Data2.PredicateName = Predicate_botInlineMediaResult
	return m.Data2
}

//// flags
func (m *TLBotInlineMediaResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineMediaResult) GetId() string  { return m.Data2.Id }

func (m *TLBotInlineMediaResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineMediaResult) GetType() string  { return m.Data2.Type }

func (m *TLBotInlineMediaResult) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLBotInlineMediaResult) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLBotInlineMediaResult) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLBotInlineMediaResult) GetDocument() *Document  { return m.Data2.Document }

func (m *TLBotInlineMediaResult) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLBotInlineMediaResult) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLBotInlineMediaResult) SetDescription(v *types.StringValue) { m.Data2.Description = v }
func (m *TLBotInlineMediaResult) GetDescription() *types.StringValue  { return m.Data2.Description }

func (m *TLBotInlineMediaResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineMediaResult) GetSendMessage() *BotInlineMessage  { return m.Data2.SendMessage }

func (m *TLBotInlineMediaResult) GetPredicateName() string {
	return Predicate_botInlineMediaResult
}

func (m *TLBotInlineMediaResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x17db940b: func() []byte {
			x.UInt(0x17db940b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhoto() != nil {
					flags |= 1 << 0
				}
				if m.GetDocument() != nil {
					flags |= 1 << 1
				}
				if m.GetTitle() != nil {
					flags |= 1 << 2
				}
				if m.GetDescription() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetId())
			x.String(m.GetType())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			x.Bytes(m.GetSendMessage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMediaResult, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMediaResult, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMediaResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMediaResult) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x17db940b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.String())
			m.SetType(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m9 := &Photo{}
				m9.Decode(dBuf)
				m.SetPhoto(m9)
			}
			if (flags & (1 << 1)) != 0 {
				m10 := &Document{}
				m10.Decode(dBuf)
				m.SetDocument(m10)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			m8 := &BotInlineMessage{}
			m8.Decode(dBuf)
			m.SetSendMessage(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMediaResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DraftMessage <--
//  + TL_DraftMessageEmpty
//  + TL_DraftMessage
//

func (m *DraftMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_draftMessageEmpty:
		t := m.To_DraftMessageEmpty()
		xBuf = t.Encode(layer)
	case Predicate_draftMessage:
		t := m.To_DraftMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DraftMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *DraftMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1b0c841a:
		m2 := MakeTLDraftMessageEmpty(m)
		m2.Decode(dBuf)
	case 0xfd8e711f:
		m2 := MakeTLDraftMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DraftMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_draftMessageEmpty:
		t := m.To_DraftMessageEmpty()
		return t.DebugString()
	case Predicate_draftMessage:
		t := m.To_DraftMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DraftMessageEmpty
func (m *DraftMessage) To_DraftMessageEmpty() *TLDraftMessageEmpty {
	m.PredicateName = Predicate_draftMessageEmpty
	return &TLDraftMessageEmpty{
		Data2: m,
	}
}

// To_DraftMessage
func (m *DraftMessage) To_DraftMessage() *TLDraftMessage {
	m.PredicateName = Predicate_draftMessage
	return &TLDraftMessage{
		Data2: m,
	}
}

// MakeTLDraftMessageEmpty
func MakeTLDraftMessageEmpty(data2 *DraftMessage) *TLDraftMessageEmpty {
	if data2 == nil {
		return &TLDraftMessageEmpty{Data2: &DraftMessage{
			PredicateName: Predicate_draftMessageEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_draftMessageEmpty
		return &TLDraftMessageEmpty{Data2: data2}
	}
}

func (m *TLDraftMessageEmpty) To_DraftMessage() *DraftMessage {
	m.Data2.PredicateName = Predicate_draftMessageEmpty
	return m.Data2
}

//// flags
func (m *TLDraftMessageEmpty) SetDate_FLAGINT32(v *types.Int32Value) { m.Data2.Date_FLAGINT32 = v }
func (m *TLDraftMessageEmpty) GetDate_FLAGINT32() *types.Int32Value  { return m.Data2.Date_FLAGINT32 }

func (m *TLDraftMessageEmpty) GetPredicateName() string {
	return Predicate_draftMessageEmpty
}

func (m *TLDraftMessageEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b0c841a: func() []byte {
			x.UInt(0x1b0c841a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDate_FLAGINT32() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetDate_FLAGINT32() != nil {
				x.Int(m.GetDate_FLAGINT32().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_draftMessageEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_draftMessageEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDraftMessageEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDraftMessageEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b0c841a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetDate_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDraftMessageEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDraftMessage
func MakeTLDraftMessage(data2 *DraftMessage) *TLDraftMessage {
	if data2 == nil {
		return &TLDraftMessage{Data2: &DraftMessage{
			PredicateName: Predicate_draftMessage,
		}}
	} else {
		data2.PredicateName = Predicate_draftMessage
		return &TLDraftMessage{Data2: data2}
	}
}

func (m *TLDraftMessage) To_DraftMessage() *DraftMessage {
	m.Data2.PredicateName = Predicate_draftMessage
	return m.Data2
}

//// flags
func (m *TLDraftMessage) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLDraftMessage) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLDraftMessage) SetReplyToMsgId(v *types.Int32Value) { m.Data2.ReplyToMsgId = v }
func (m *TLDraftMessage) GetReplyToMsgId() *types.Int32Value  { return m.Data2.ReplyToMsgId }

func (m *TLDraftMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLDraftMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLDraftMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLDraftMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLDraftMessage) SetDate_INT32(v int32) { m.Data2.Date_INT32 = v }
func (m *TLDraftMessage) GetDate_INT32() int32  { return m.Data2.Date_INT32 }

func (m *TLDraftMessage) GetPredicateName() string {
	return Predicate_draftMessage
}

func (m *TLDraftMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfd8e711f: func() []byte {
			x.UInt(0xfd8e711f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNoWebpage() == true {
					flags |= 1 << 1
				}
				if m.GetReplyToMsgId() != nil {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetReplyToMsgId() != nil {
				x.Int(m.GetReplyToMsgId().Value)
			}

			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			x.Int(m.GetDate_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_draftMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_draftMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDraftMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDraftMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfd8e711f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetNoWebpage(true)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetReplyToMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetMessage(dBuf.String())
			if (flags & (1 << 3)) != 0 {
				c5 := dBuf.Int()
				if c5 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
					return dBuf.GetError()
				}
				l5 := dBuf.Int()
				v5 := make([]*MessageEntity, l5)
				for i := int32(0); i < l5; i++ {
					v5[i] = &MessageEntity{}
					v5[i].Decode(dBuf)
				}
				m.SetEntities(v5)
			}
			m.SetDate_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDraftMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// JSONValue <--
//  + TL_JsonNull
//  + TL_JsonBool
//  + TL_JsonNumber
//  + TL_JsonString
//  + TL_JsonArray
//  + TL_JsonObject
//

func (m *JSONValue) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_jsonNull:
		t := m.To_JsonNull()
		xBuf = t.Encode(layer)
	case Predicate_jsonBool:
		t := m.To_JsonBool()
		xBuf = t.Encode(layer)
	case Predicate_jsonNumber:
		t := m.To_JsonNumber()
		xBuf = t.Encode(layer)
	case Predicate_jsonString:
		t := m.To_JsonString()
		xBuf = t.Encode(layer)
	case Predicate_jsonArray:
		t := m.To_JsonArray()
		xBuf = t.Encode(layer)
	case Predicate_jsonObject:
		t := m.To_JsonObject()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *JSONValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *JSONValue) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3f6d7b68:
		m2 := MakeTLJsonNull(m)
		m2.Decode(dBuf)
	case 0xc7345e6a:
		m2 := MakeTLJsonBool(m)
		m2.Decode(dBuf)
	case 0x2be0dfa4:
		m2 := MakeTLJsonNumber(m)
		m2.Decode(dBuf)
	case 0xb71e767a:
		m2 := MakeTLJsonString(m)
		m2.Decode(dBuf)
	case 0xf7444763:
		m2 := MakeTLJsonArray(m)
		m2.Decode(dBuf)
	case 0x99c1d49d:
		m2 := MakeTLJsonObject(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *JSONValue) DebugString() string {
	switch m.PredicateName {
	case Predicate_jsonNull:
		t := m.To_JsonNull()
		return t.DebugString()
	case Predicate_jsonBool:
		t := m.To_JsonBool()
		return t.DebugString()
	case Predicate_jsonNumber:
		t := m.To_JsonNumber()
		return t.DebugString()
	case Predicate_jsonString:
		t := m.To_JsonString()
		return t.DebugString()
	case Predicate_jsonArray:
		t := m.To_JsonArray()
		return t.DebugString()
	case Predicate_jsonObject:
		t := m.To_JsonObject()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_JsonNull
func (m *JSONValue) To_JsonNull() *TLJsonNull {
	m.PredicateName = Predicate_jsonNull
	return &TLJsonNull{
		Data2: m,
	}
}

// To_JsonBool
func (m *JSONValue) To_JsonBool() *TLJsonBool {
	m.PredicateName = Predicate_jsonBool
	return &TLJsonBool{
		Data2: m,
	}
}

// To_JsonNumber
func (m *JSONValue) To_JsonNumber() *TLJsonNumber {
	m.PredicateName = Predicate_jsonNumber
	return &TLJsonNumber{
		Data2: m,
	}
}

// To_JsonString
func (m *JSONValue) To_JsonString() *TLJsonString {
	m.PredicateName = Predicate_jsonString
	return &TLJsonString{
		Data2: m,
	}
}

// To_JsonArray
func (m *JSONValue) To_JsonArray() *TLJsonArray {
	m.PredicateName = Predicate_jsonArray
	return &TLJsonArray{
		Data2: m,
	}
}

// To_JsonObject
func (m *JSONValue) To_JsonObject() *TLJsonObject {
	m.PredicateName = Predicate_jsonObject
	return &TLJsonObject{
		Data2: m,
	}
}

// MakeTLJsonNull
func MakeTLJsonNull(data2 *JSONValue) *TLJsonNull {
	if data2 == nil {
		return &TLJsonNull{Data2: &JSONValue{
			PredicateName: Predicate_jsonNull,
		}}
	} else {
		data2.PredicateName = Predicate_jsonNull
		return &TLJsonNull{Data2: data2}
	}
}

func (m *TLJsonNull) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonNull
	return m.Data2
}

func (m *TLJsonNull) GetPredicateName() string {
	return Predicate_jsonNull
}

func (m *TLJsonNull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3f6d7b68: func() []byte {
			x.UInt(0x3f6d7b68)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonNull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonNull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonNull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonNull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3f6d7b68: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonNull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLJsonBool
func MakeTLJsonBool(data2 *JSONValue) *TLJsonBool {
	if data2 == nil {
		return &TLJsonBool{Data2: &JSONValue{
			PredicateName: Predicate_jsonBool,
		}}
	} else {
		data2.PredicateName = Predicate_jsonBool
		return &TLJsonBool{Data2: data2}
	}
}

func (m *TLJsonBool) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonBool
	return m.Data2
}

func (m *TLJsonBool) SetValue_BOOL(v *Bool) { m.Data2.Value_BOOL = v }
func (m *TLJsonBool) GetValue_BOOL() *Bool  { return m.Data2.Value_BOOL }

func (m *TLJsonBool) GetPredicateName() string {
	return Predicate_jsonBool
}

func (m *TLJsonBool) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc7345e6a: func() []byte {
			x.UInt(0xc7345e6a)

			x.Bytes(m.GetValue_BOOL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonBool, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonBool, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonBool) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonBool) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc7345e6a: func() error {

			m0 := &Bool{}
			m0.Decode(dBuf)
			m.SetValue_BOOL(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonBool) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLJsonNumber
func MakeTLJsonNumber(data2 *JSONValue) *TLJsonNumber {
	if data2 == nil {
		return &TLJsonNumber{Data2: &JSONValue{
			PredicateName: Predicate_jsonNumber,
		}}
	} else {
		data2.PredicateName = Predicate_jsonNumber
		return &TLJsonNumber{Data2: data2}
	}
}

func (m *TLJsonNumber) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonNumber
	return m.Data2
}

func (m *TLJsonNumber) SetValue_FLOAT64(v float64) { m.Data2.Value_FLOAT64 = v }
func (m *TLJsonNumber) GetValue_FLOAT64() float64  { return m.Data2.Value_FLOAT64 }

func (m *TLJsonNumber) GetPredicateName() string {
	return Predicate_jsonNumber
}

func (m *TLJsonNumber) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2be0dfa4: func() []byte {
			x.UInt(0x2be0dfa4)

			x.Double(m.GetValue_FLOAT64())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonNumber, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonNumber, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonNumber) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonNumber) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2be0dfa4: func() error {
			m.SetValue_FLOAT64(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonNumber) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLJsonString
func MakeTLJsonString(data2 *JSONValue) *TLJsonString {
	if data2 == nil {
		return &TLJsonString{Data2: &JSONValue{
			PredicateName: Predicate_jsonString,
		}}
	} else {
		data2.PredicateName = Predicate_jsonString
		return &TLJsonString{Data2: data2}
	}
}

func (m *TLJsonString) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonString
	return m.Data2
}

func (m *TLJsonString) SetValue_STRING(v string) { m.Data2.Value_STRING = v }
func (m *TLJsonString) GetValue_STRING() string  { return m.Data2.Value_STRING }

func (m *TLJsonString) GetPredicateName() string {
	return Predicate_jsonString
}

func (m *TLJsonString) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb71e767a: func() []byte {
			x.UInt(0xb71e767a)

			x.String(m.GetValue_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonString, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonString, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonString) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonString) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb71e767a: func() error {
			m.SetValue_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonString) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLJsonArray
func MakeTLJsonArray(data2 *JSONValue) *TLJsonArray {
	if data2 == nil {
		return &TLJsonArray{Data2: &JSONValue{
			PredicateName: Predicate_jsonArray,
		}}
	} else {
		data2.PredicateName = Predicate_jsonArray
		return &TLJsonArray{Data2: data2}
	}
}

func (m *TLJsonArray) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonArray
	return m.Data2
}

func (m *TLJsonArray) SetValue_VECTORJSONVALUE(v []*JSONValue) { m.Data2.Value_VECTORJSONVALUE = v }
func (m *TLJsonArray) GetValue_VECTORJSONVALUE() []*JSONValue  { return m.Data2.Value_VECTORJSONVALUE }

func (m *TLJsonArray) GetPredicateName() string {
	return Predicate_jsonArray
}

func (m *TLJsonArray) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf7444763: func() []byte {
			x.UInt(0xf7444763)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetValue_VECTORJSONVALUE())))
			for _, v := range m.GetValue_VECTORJSONVALUE() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonArray, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonArray, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonArray) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonArray) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf7444763: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*JSONValue, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &JSONValue{}
				v0[i].Decode(dBuf)
			}
			m.SetValue_VECTORJSONVALUE(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonArray) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLJsonObject
func MakeTLJsonObject(data2 *JSONValue) *TLJsonObject {
	if data2 == nil {
		return &TLJsonObject{Data2: &JSONValue{
			PredicateName: Predicate_jsonObject,
		}}
	} else {
		data2.PredicateName = Predicate_jsonObject
		return &TLJsonObject{Data2: data2}
	}
}

func (m *TLJsonObject) To_JSONValue() *JSONValue {
	m.Data2.PredicateName = Predicate_jsonObject
	return m.Data2
}

func (m *TLJsonObject) SetValue_VECTORJSONOBJECTVALUE(v []*JSONObjectValue) {
	m.Data2.Value_VECTORJSONOBJECTVALUE = v
}
func (m *TLJsonObject) GetValue_VECTORJSONOBJECTVALUE() []*JSONObjectValue {
	return m.Data2.Value_VECTORJSONOBJECTVALUE
}

func (m *TLJsonObject) GetPredicateName() string {
	return Predicate_jsonObject
}

func (m *TLJsonObject) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x99c1d49d: func() []byte {
			x.UInt(0x99c1d49d)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetValue_VECTORJSONOBJECTVALUE())))
			for _, v := range m.GetValue_VECTORJSONOBJECTVALUE() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonObject, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonObject, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonObject) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonObject) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x99c1d49d: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*JSONObjectValue, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &JSONObjectValue{}
				v0[i].Decode(dBuf)
			}
			m.SetValue_VECTORJSONOBJECTVALUE(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonObject) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Stats_MegagroupStats <--
//  + TL_StatsMegagroupStats
//

func (m *Stats_MegagroupStats) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stats_megagroupStats:
		t := m.To_StatsMegagroupStats()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Stats_MegagroupStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *Stats_MegagroupStats) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xef7ff916:
		m2 := MakeTLStatsMegagroupStats(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Stats_MegagroupStats) DebugString() string {
	switch m.PredicateName {
	case Predicate_stats_megagroupStats:
		t := m.To_StatsMegagroupStats()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsMegagroupStats
func (m *Stats_MegagroupStats) To_StatsMegagroupStats() *TLStatsMegagroupStats {
	m.PredicateName = Predicate_stats_megagroupStats
	return &TLStatsMegagroupStats{
		Data2: m,
	}
}

// MakeTLStatsMegagroupStats
func MakeTLStatsMegagroupStats(data2 *Stats_MegagroupStats) *TLStatsMegagroupStats {
	if data2 == nil {
		return &TLStatsMegagroupStats{Data2: &Stats_MegagroupStats{
			PredicateName: Predicate_stats_megagroupStats,
		}}
	} else {
		data2.PredicateName = Predicate_stats_megagroupStats
		return &TLStatsMegagroupStats{Data2: data2}
	}
}

func (m *TLStatsMegagroupStats) To_Stats_MegagroupStats() *Stats_MegagroupStats {
	m.Data2.PredicateName = Predicate_stats_megagroupStats
	return m.Data2
}

func (m *TLStatsMegagroupStats) SetPeriod(v *StatsDateRangeDays) { m.Data2.Period = v }
func (m *TLStatsMegagroupStats) GetPeriod() *StatsDateRangeDays  { return m.Data2.Period }

func (m *TLStatsMegagroupStats) SetMembers(v *StatsAbsValueAndPrev) { m.Data2.Members = v }
func (m *TLStatsMegagroupStats) GetMembers() *StatsAbsValueAndPrev  { return m.Data2.Members }

func (m *TLStatsMegagroupStats) SetMessages(v *StatsAbsValueAndPrev) { m.Data2.Messages = v }
func (m *TLStatsMegagroupStats) GetMessages() *StatsAbsValueAndPrev  { return m.Data2.Messages }

func (m *TLStatsMegagroupStats) SetViewers(v *StatsAbsValueAndPrev) { m.Data2.Viewers = v }
func (m *TLStatsMegagroupStats) GetViewers() *StatsAbsValueAndPrev  { return m.Data2.Viewers }

func (m *TLStatsMegagroupStats) SetPosters(v *StatsAbsValueAndPrev) { m.Data2.Posters = v }
func (m *TLStatsMegagroupStats) GetPosters() *StatsAbsValueAndPrev  { return m.Data2.Posters }

func (m *TLStatsMegagroupStats) SetGrowthGraph(v *StatsGraph) { m.Data2.GrowthGraph = v }
func (m *TLStatsMegagroupStats) GetGrowthGraph() *StatsGraph  { return m.Data2.GrowthGraph }

func (m *TLStatsMegagroupStats) SetMembersGraph(v *StatsGraph) { m.Data2.MembersGraph = v }
func (m *TLStatsMegagroupStats) GetMembersGraph() *StatsGraph  { return m.Data2.MembersGraph }

func (m *TLStatsMegagroupStats) SetNewMembersBySourceGraph(v *StatsGraph) {
	m.Data2.NewMembersBySourceGraph = v
}
func (m *TLStatsMegagroupStats) GetNewMembersBySourceGraph() *StatsGraph {
	return m.Data2.NewMembersBySourceGraph
}

func (m *TLStatsMegagroupStats) SetLanguagesGraph(v *StatsGraph) { m.Data2.LanguagesGraph = v }
func (m *TLStatsMegagroupStats) GetLanguagesGraph() *StatsGraph  { return m.Data2.LanguagesGraph }

func (m *TLStatsMegagroupStats) SetMessagesGraph(v *StatsGraph) { m.Data2.MessagesGraph = v }
func (m *TLStatsMegagroupStats) GetMessagesGraph() *StatsGraph  { return m.Data2.MessagesGraph }

func (m *TLStatsMegagroupStats) SetActionsGraph(v *StatsGraph) { m.Data2.ActionsGraph = v }
func (m *TLStatsMegagroupStats) GetActionsGraph() *StatsGraph  { return m.Data2.ActionsGraph }

func (m *TLStatsMegagroupStats) SetTopHoursGraph(v *StatsGraph) { m.Data2.TopHoursGraph = v }
func (m *TLStatsMegagroupStats) GetTopHoursGraph() *StatsGraph  { return m.Data2.TopHoursGraph }

func (m *TLStatsMegagroupStats) SetWeekdaysGraph(v *StatsGraph) { m.Data2.WeekdaysGraph = v }
func (m *TLStatsMegagroupStats) GetWeekdaysGraph() *StatsGraph  { return m.Data2.WeekdaysGraph }

func (m *TLStatsMegagroupStats) SetTopPosters(v []*StatsGroupTopPoster) { m.Data2.TopPosters = v }
func (m *TLStatsMegagroupStats) GetTopPosters() []*StatsGroupTopPoster  { return m.Data2.TopPosters }

func (m *TLStatsMegagroupStats) SetTopAdmins(v []*StatsGroupTopAdmin) { m.Data2.TopAdmins = v }
func (m *TLStatsMegagroupStats) GetTopAdmins() []*StatsGroupTopAdmin  { return m.Data2.TopAdmins }

func (m *TLStatsMegagroupStats) SetTopInviters(v []*StatsGroupTopInviter) { m.Data2.TopInviters = v }
func (m *TLStatsMegagroupStats) GetTopInviters() []*StatsGroupTopInviter  { return m.Data2.TopInviters }

func (m *TLStatsMegagroupStats) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLStatsMegagroupStats) GetUsers() []*User  { return m.Data2.Users }

func (m *TLStatsMegagroupStats) GetPredicateName() string {
	return Predicate_stats_megagroupStats
}

func (m *TLStatsMegagroupStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xef7ff916: func() []byte {
			x.UInt(0xef7ff916)

			x.Bytes(m.GetPeriod().Encode(layer))
			x.Bytes(m.GetMembers().Encode(layer))
			x.Bytes(m.GetMessages().Encode(layer))
			x.Bytes(m.GetViewers().Encode(layer))
			x.Bytes(m.GetPosters().Encode(layer))
			x.Bytes(m.GetGrowthGraph().Encode(layer))
			x.Bytes(m.GetMembersGraph().Encode(layer))
			x.Bytes(m.GetNewMembersBySourceGraph().Encode(layer))
			x.Bytes(m.GetLanguagesGraph().Encode(layer))
			x.Bytes(m.GetMessagesGraph().Encode(layer))
			x.Bytes(m.GetActionsGraph().Encode(layer))
			x.Bytes(m.GetTopHoursGraph().Encode(layer))
			x.Bytes(m.GetWeekdaysGraph().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTopPosters())))
			for _, v := range m.GetTopPosters() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTopAdmins())))
			for _, v := range m.GetTopAdmins() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTopInviters())))
			for _, v := range m.GetTopInviters() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stats_megagroupStats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stats_megagroupStats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsMegagroupStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsMegagroupStats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xef7ff916: func() error {

			m0 := &StatsDateRangeDays{}
			m0.Decode(dBuf)
			m.SetPeriod(m0)

			m1 := &StatsAbsValueAndPrev{}
			m1.Decode(dBuf)
			m.SetMembers(m1)

			m2 := &StatsAbsValueAndPrev{}
			m2.Decode(dBuf)
			m.SetMessages(m2)

			m3 := &StatsAbsValueAndPrev{}
			m3.Decode(dBuf)
			m.SetViewers(m3)

			m4 := &StatsAbsValueAndPrev{}
			m4.Decode(dBuf)
			m.SetPosters(m4)

			m5 := &StatsGraph{}
			m5.Decode(dBuf)
			m.SetGrowthGraph(m5)

			m6 := &StatsGraph{}
			m6.Decode(dBuf)
			m.SetMembersGraph(m6)

			m7 := &StatsGraph{}
			m7.Decode(dBuf)
			m.SetNewMembersBySourceGraph(m7)

			m8 := &StatsGraph{}
			m8.Decode(dBuf)
			m.SetLanguagesGraph(m8)

			m9 := &StatsGraph{}
			m9.Decode(dBuf)
			m.SetMessagesGraph(m9)

			m10 := &StatsGraph{}
			m10.Decode(dBuf)
			m.SetActionsGraph(m10)

			m11 := &StatsGraph{}
			m11.Decode(dBuf)
			m.SetTopHoursGraph(m11)

			m12 := &StatsGraph{}
			m12.Decode(dBuf)
			m.SetWeekdaysGraph(m12)

			c13 := dBuf.Int()
			if c13 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 13, c13)
				return dBuf.GetError()
			}
			l13 := dBuf.Int()
			v13 := make([]*StatsGroupTopPoster, l13)
			for i := int32(0); i < l13; i++ {
				v13[i] = &StatsGroupTopPoster{}
				v13[i].Decode(dBuf)
			}
			m.SetTopPosters(v13)

			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*StatsGroupTopAdmin, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &StatsGroupTopAdmin{}
				v14[i].Decode(dBuf)
			}
			m.SetTopAdmins(v14)

			c15 := dBuf.Int()
			if c15 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 15, c15)
				return dBuf.GetError()
			}
			l15 := dBuf.Int()
			v15 := make([]*StatsGroupTopInviter, l15)
			for i := int32(0); i < l15; i++ {
				v15[i] = &StatsGroupTopInviter{}
				v15[i].Decode(dBuf)
			}
			m.SetTopInviters(v15)

			c16 := dBuf.Int()
			if c16 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 16, c16)
				return dBuf.GetError()
			}
			l16 := dBuf.Int()
			v16 := make([]*User, l16)
			for i := int32(0); i < l16; i++ {
				v16[i] = &User{}
				v16[i].Decode(dBuf)
			}
			m.SetUsers(v16)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsMegagroupStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageViews <--
//  + TL_MessageViews
//

func (m *MessageViews) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageViews:
		t := m.To_MessageViews()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageViews) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x455b853d:
		m2 := MakeTLMessageViews(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageViews) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageViews:
		t := m.To_MessageViews()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageViews
func (m *MessageViews) To_MessageViews() *TLMessageViews {
	m.PredicateName = Predicate_messageViews
	return &TLMessageViews{
		Data2: m,
	}
}

// MakeTLMessageViews
func MakeTLMessageViews(data2 *MessageViews) *TLMessageViews {
	if data2 == nil {
		return &TLMessageViews{Data2: &MessageViews{
			PredicateName: Predicate_messageViews,
		}}
	} else {
		data2.PredicateName = Predicate_messageViews
		return &TLMessageViews{Data2: data2}
	}
}

func (m *TLMessageViews) To_MessageViews() *MessageViews {
	m.Data2.PredicateName = Predicate_messageViews
	return m.Data2
}

//// flags
func (m *TLMessageViews) SetViews(v *types.Int32Value) { m.Data2.Views = v }
func (m *TLMessageViews) GetViews() *types.Int32Value  { return m.Data2.Views }

func (m *TLMessageViews) SetForwards(v *types.Int32Value) { m.Data2.Forwards = v }
func (m *TLMessageViews) GetForwards() *types.Int32Value  { return m.Data2.Forwards }

func (m *TLMessageViews) SetReplies(v *MessageReplies) { m.Data2.Replies = v }
func (m *TLMessageViews) GetReplies() *MessageReplies  { return m.Data2.Replies }

func (m *TLMessageViews) GetPredicateName() string {
	return Predicate_messageViews
}

func (m *TLMessageViews) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x455b853d: func() []byte {
			x.UInt(0x455b853d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetViews() != nil {
					flags |= 1 << 0
				}
				if m.GetForwards() != nil {
					flags |= 1 << 1
				}
				if m.GetReplies() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetViews() != nil {
				x.Int(m.GetViews().Value)
			}

			if m.GetForwards() != nil {
				x.Int(m.GetForwards().Value)
			}

			if m.GetReplies() != nil {
				x.Bytes(m.GetReplies().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageViews, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageViews, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageViews) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x455b853d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetViews(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetForwards(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m3 := &MessageReplies{}
				m3.Decode(dBuf)
				m.SetReplies(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageViews) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_DiscussionMessage <--
//  + TL_MessagesDiscussionMessage
//

func (m *Messages_DiscussionMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_discussionMessage:
		t := m.To_MessagesDiscussionMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_DiscussionMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_DiscussionMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa6341782:
		m2 := MakeTLMessagesDiscussionMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_DiscussionMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_discussionMessage:
		t := m.To_MessagesDiscussionMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesDiscussionMessage
func (m *Messages_DiscussionMessage) To_MessagesDiscussionMessage() *TLMessagesDiscussionMessage {
	m.PredicateName = Predicate_messages_discussionMessage
	return &TLMessagesDiscussionMessage{
		Data2: m,
	}
}

// MakeTLMessagesDiscussionMessage
func MakeTLMessagesDiscussionMessage(data2 *Messages_DiscussionMessage) *TLMessagesDiscussionMessage {
	if data2 == nil {
		return &TLMessagesDiscussionMessage{Data2: &Messages_DiscussionMessage{
			PredicateName: Predicate_messages_discussionMessage,
		}}
	} else {
		data2.PredicateName = Predicate_messages_discussionMessage
		return &TLMessagesDiscussionMessage{Data2: data2}
	}
}

func (m *TLMessagesDiscussionMessage) To_Messages_DiscussionMessage() *Messages_DiscussionMessage {
	m.Data2.PredicateName = Predicate_messages_discussionMessage
	return m.Data2
}

//// flags
func (m *TLMessagesDiscussionMessage) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDiscussionMessage) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesDiscussionMessage) SetMaxId(v *types.Int32Value) { m.Data2.MaxId = v }
func (m *TLMessagesDiscussionMessage) GetMaxId() *types.Int32Value  { return m.Data2.MaxId }

func (m *TLMessagesDiscussionMessage) SetReadInboxMaxId(v *types.Int32Value) {
	m.Data2.ReadInboxMaxId = v
}
func (m *TLMessagesDiscussionMessage) GetReadInboxMaxId() *types.Int32Value {
	return m.Data2.ReadInboxMaxId
}

func (m *TLMessagesDiscussionMessage) SetReadOutboxMaxId(v *types.Int32Value) {
	m.Data2.ReadOutboxMaxId = v
}
func (m *TLMessagesDiscussionMessage) GetReadOutboxMaxId() *types.Int32Value {
	return m.Data2.ReadOutboxMaxId
}

func (m *TLMessagesDiscussionMessage) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLMessagesDiscussionMessage) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLMessagesDiscussionMessage) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDiscussionMessage) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesDiscussionMessage) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDiscussionMessage) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesDiscussionMessage) GetPredicateName() string {
	return Predicate_messages_discussionMessage
}

func (m *TLMessagesDiscussionMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa6341782: func() []byte {
			x.UInt(0xa6341782)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMaxId() != nil {
					flags |= 1 << 0
				}
				if m.GetReadInboxMaxId() != nil {
					flags |= 1 << 1
				}
				if m.GetReadOutboxMaxId() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMaxId() != nil {
				x.Int(m.GetMaxId().Value)
			}

			if m.GetReadInboxMaxId() != nil {
				x.Int(m.GetReadInboxMaxId().Value)
			}

			if m.GetReadOutboxMaxId() != nil {
				x.Int(m.GetReadOutboxMaxId().Value)
			}

			x.Int(m.GetUnreadCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_discussionMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_discussionMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDiscussionMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDiscussionMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa6341782: func() error {
			var flags = dBuf.UInt()
			_ = flags
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Message, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Message{}
				v1[i].Decode(dBuf)
			}
			m.SetMessages(v1)

			if (flags & (1 << 0)) != 0 {
				m.SetMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetReadInboxMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetReadOutboxMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetUnreadCount(dBuf.Int())
			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*Chat, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &Chat{}
				v6[i].Decode(dBuf)
			}
			m.SetChats(v6)

			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*User, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &User{}
				v7[i].Decode(dBuf)
			}
			m.SetUsers(v7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDiscussionMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Storage_FileType <--
//  + TL_StorageFileUnknown
//  + TL_StorageFilePartial
//  + TL_StorageFileJpeg
//  + TL_StorageFileGif
//  + TL_StorageFilePng
//  + TL_StorageFilePdf
//  + TL_StorageFileMp3
//  + TL_StorageFileMov
//  + TL_StorageFileMp4
//  + TL_StorageFileWebp
//

func (m *Storage_FileType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_storage_fileUnknown:
		t := m.To_StorageFileUnknown()
		xBuf = t.Encode(layer)
	case Predicate_storage_filePartial:
		t := m.To_StorageFilePartial()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileJpeg:
		t := m.To_StorageFileJpeg()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileGif:
		t := m.To_StorageFileGif()
		xBuf = t.Encode(layer)
	case Predicate_storage_filePng:
		t := m.To_StorageFilePng()
		xBuf = t.Encode(layer)
	case Predicate_storage_filePdf:
		t := m.To_StorageFilePdf()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileMp3:
		t := m.To_StorageFileMp3()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileMov:
		t := m.To_StorageFileMov()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileMp4:
		t := m.To_StorageFileMp4()
		xBuf = t.Encode(layer)
	case Predicate_storage_fileWebp:
		t := m.To_StorageFileWebp()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Storage_FileType) CalcByteSize(layer int32) int {
	return 0
}

func (m *Storage_FileType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xaa963b05:
		m2 := MakeTLStorageFileUnknown(m)
		m2.Decode(dBuf)
	case 0x40bc6f52:
		m2 := MakeTLStorageFilePartial(m)
		m2.Decode(dBuf)
	case 0x7efe0e:
		m2 := MakeTLStorageFileJpeg(m)
		m2.Decode(dBuf)
	case 0xcae1aadf:
		m2 := MakeTLStorageFileGif(m)
		m2.Decode(dBuf)
	case 0xa4f63c0:
		m2 := MakeTLStorageFilePng(m)
		m2.Decode(dBuf)
	case 0xae1e508d:
		m2 := MakeTLStorageFilePdf(m)
		m2.Decode(dBuf)
	case 0x528a0677:
		m2 := MakeTLStorageFileMp3(m)
		m2.Decode(dBuf)
	case 0x4b09ebbc:
		m2 := MakeTLStorageFileMov(m)
		m2.Decode(dBuf)
	case 0xb3cea0e4:
		m2 := MakeTLStorageFileMp4(m)
		m2.Decode(dBuf)
	case 0x1081464c:
		m2 := MakeTLStorageFileWebp(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Storage_FileType) DebugString() string {
	switch m.PredicateName {
	case Predicate_storage_fileUnknown:
		t := m.To_StorageFileUnknown()
		return t.DebugString()
	case Predicate_storage_filePartial:
		t := m.To_StorageFilePartial()
		return t.DebugString()
	case Predicate_storage_fileJpeg:
		t := m.To_StorageFileJpeg()
		return t.DebugString()
	case Predicate_storage_fileGif:
		t := m.To_StorageFileGif()
		return t.DebugString()
	case Predicate_storage_filePng:
		t := m.To_StorageFilePng()
		return t.DebugString()
	case Predicate_storage_filePdf:
		t := m.To_StorageFilePdf()
		return t.DebugString()
	case Predicate_storage_fileMp3:
		t := m.To_StorageFileMp3()
		return t.DebugString()
	case Predicate_storage_fileMov:
		t := m.To_StorageFileMov()
		return t.DebugString()
	case Predicate_storage_fileMp4:
		t := m.To_StorageFileMp4()
		return t.DebugString()
	case Predicate_storage_fileWebp:
		t := m.To_StorageFileWebp()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StorageFileUnknown
func (m *Storage_FileType) To_StorageFileUnknown() *TLStorageFileUnknown {
	m.PredicateName = Predicate_storage_fileUnknown
	return &TLStorageFileUnknown{
		Data2: m,
	}
}

// To_StorageFilePartial
func (m *Storage_FileType) To_StorageFilePartial() *TLStorageFilePartial {
	m.PredicateName = Predicate_storage_filePartial
	return &TLStorageFilePartial{
		Data2: m,
	}
}

// To_StorageFileJpeg
func (m *Storage_FileType) To_StorageFileJpeg() *TLStorageFileJpeg {
	m.PredicateName = Predicate_storage_fileJpeg
	return &TLStorageFileJpeg{
		Data2: m,
	}
}

// To_StorageFileGif
func (m *Storage_FileType) To_StorageFileGif() *TLStorageFileGif {
	m.PredicateName = Predicate_storage_fileGif
	return &TLStorageFileGif{
		Data2: m,
	}
}

// To_StorageFilePng
func (m *Storage_FileType) To_StorageFilePng() *TLStorageFilePng {
	m.PredicateName = Predicate_storage_filePng
	return &TLStorageFilePng{
		Data2: m,
	}
}

// To_StorageFilePdf
func (m *Storage_FileType) To_StorageFilePdf() *TLStorageFilePdf {
	m.PredicateName = Predicate_storage_filePdf
	return &TLStorageFilePdf{
		Data2: m,
	}
}

// To_StorageFileMp3
func (m *Storage_FileType) To_StorageFileMp3() *TLStorageFileMp3 {
	m.PredicateName = Predicate_storage_fileMp3
	return &TLStorageFileMp3{
		Data2: m,
	}
}

// To_StorageFileMov
func (m *Storage_FileType) To_StorageFileMov() *TLStorageFileMov {
	m.PredicateName = Predicate_storage_fileMov
	return &TLStorageFileMov{
		Data2: m,
	}
}

// To_StorageFileMp4
func (m *Storage_FileType) To_StorageFileMp4() *TLStorageFileMp4 {
	m.PredicateName = Predicate_storage_fileMp4
	return &TLStorageFileMp4{
		Data2: m,
	}
}

// To_StorageFileWebp
func (m *Storage_FileType) To_StorageFileWebp() *TLStorageFileWebp {
	m.PredicateName = Predicate_storage_fileWebp
	return &TLStorageFileWebp{
		Data2: m,
	}
}

// MakeTLStorageFileUnknown
func MakeTLStorageFileUnknown(data2 *Storage_FileType) *TLStorageFileUnknown {
	if data2 == nil {
		return &TLStorageFileUnknown{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileUnknown,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileUnknown
		return &TLStorageFileUnknown{Data2: data2}
	}
}

func (m *TLStorageFileUnknown) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileUnknown
	return m.Data2
}

func (m *TLStorageFileUnknown) GetPredicateName() string {
	return Predicate_storage_fileUnknown
}

func (m *TLStorageFileUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaa963b05: func() []byte {
			x.UInt(0xaa963b05)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileUnknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileUnknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaa963b05: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFilePartial
func MakeTLStorageFilePartial(data2 *Storage_FileType) *TLStorageFilePartial {
	if data2 == nil {
		return &TLStorageFilePartial{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_filePartial,
		}}
	} else {
		data2.PredicateName = Predicate_storage_filePartial
		return &TLStorageFilePartial{Data2: data2}
	}
}

func (m *TLStorageFilePartial) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_filePartial
	return m.Data2
}

func (m *TLStorageFilePartial) GetPredicateName() string {
	return Predicate_storage_filePartial
}

func (m *TLStorageFilePartial) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x40bc6f52: func() []byte {
			x.UInt(0x40bc6f52)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_filePartial, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_filePartial, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFilePartial) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFilePartial) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x40bc6f52: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFilePartial) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileJpeg
func MakeTLStorageFileJpeg(data2 *Storage_FileType) *TLStorageFileJpeg {
	if data2 == nil {
		return &TLStorageFileJpeg{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileJpeg,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileJpeg
		return &TLStorageFileJpeg{Data2: data2}
	}
}

func (m *TLStorageFileJpeg) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileJpeg
	return m.Data2
}

func (m *TLStorageFileJpeg) GetPredicateName() string {
	return Predicate_storage_fileJpeg
}

func (m *TLStorageFileJpeg) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7efe0e: func() []byte {
			x.UInt(0x7efe0e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileJpeg, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileJpeg, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileJpeg) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileJpeg) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7efe0e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileJpeg) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileGif
func MakeTLStorageFileGif(data2 *Storage_FileType) *TLStorageFileGif {
	if data2 == nil {
		return &TLStorageFileGif{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileGif,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileGif
		return &TLStorageFileGif{Data2: data2}
	}
}

func (m *TLStorageFileGif) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileGif
	return m.Data2
}

func (m *TLStorageFileGif) GetPredicateName() string {
	return Predicate_storage_fileGif
}

func (m *TLStorageFileGif) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcae1aadf: func() []byte {
			x.UInt(0xcae1aadf)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileGif, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileGif, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileGif) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileGif) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcae1aadf: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileGif) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFilePng
func MakeTLStorageFilePng(data2 *Storage_FileType) *TLStorageFilePng {
	if data2 == nil {
		return &TLStorageFilePng{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_filePng,
		}}
	} else {
		data2.PredicateName = Predicate_storage_filePng
		return &TLStorageFilePng{Data2: data2}
	}
}

func (m *TLStorageFilePng) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_filePng
	return m.Data2
}

func (m *TLStorageFilePng) GetPredicateName() string {
	return Predicate_storage_filePng
}

func (m *TLStorageFilePng) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa4f63c0: func() []byte {
			x.UInt(0xa4f63c0)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_filePng, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_filePng, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFilePng) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFilePng) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa4f63c0: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFilePng) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFilePdf
func MakeTLStorageFilePdf(data2 *Storage_FileType) *TLStorageFilePdf {
	if data2 == nil {
		return &TLStorageFilePdf{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_filePdf,
		}}
	} else {
		data2.PredicateName = Predicate_storage_filePdf
		return &TLStorageFilePdf{Data2: data2}
	}
}

func (m *TLStorageFilePdf) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_filePdf
	return m.Data2
}

func (m *TLStorageFilePdf) GetPredicateName() string {
	return Predicate_storage_filePdf
}

func (m *TLStorageFilePdf) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xae1e508d: func() []byte {
			x.UInt(0xae1e508d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_filePdf, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_filePdf, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFilePdf) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFilePdf) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xae1e508d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFilePdf) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileMp3
func MakeTLStorageFileMp3(data2 *Storage_FileType) *TLStorageFileMp3 {
	if data2 == nil {
		return &TLStorageFileMp3{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileMp3,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileMp3
		return &TLStorageFileMp3{Data2: data2}
	}
}

func (m *TLStorageFileMp3) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileMp3
	return m.Data2
}

func (m *TLStorageFileMp3) GetPredicateName() string {
	return Predicate_storage_fileMp3
}

func (m *TLStorageFileMp3) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x528a0677: func() []byte {
			x.UInt(0x528a0677)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileMp3, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileMp3, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileMp3) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileMp3) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x528a0677: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileMp3) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileMov
func MakeTLStorageFileMov(data2 *Storage_FileType) *TLStorageFileMov {
	if data2 == nil {
		return &TLStorageFileMov{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileMov,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileMov
		return &TLStorageFileMov{Data2: data2}
	}
}

func (m *TLStorageFileMov) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileMov
	return m.Data2
}

func (m *TLStorageFileMov) GetPredicateName() string {
	return Predicate_storage_fileMov
}

func (m *TLStorageFileMov) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4b09ebbc: func() []byte {
			x.UInt(0x4b09ebbc)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileMov, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileMov, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileMov) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileMov) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4b09ebbc: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileMov) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileMp4
func MakeTLStorageFileMp4(data2 *Storage_FileType) *TLStorageFileMp4 {
	if data2 == nil {
		return &TLStorageFileMp4{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileMp4,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileMp4
		return &TLStorageFileMp4{Data2: data2}
	}
}

func (m *TLStorageFileMp4) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileMp4
	return m.Data2
}

func (m *TLStorageFileMp4) GetPredicateName() string {
	return Predicate_storage_fileMp4
}

func (m *TLStorageFileMp4) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb3cea0e4: func() []byte {
			x.UInt(0xb3cea0e4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileMp4, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileMp4, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileMp4) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileMp4) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb3cea0e4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileMp4) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStorageFileWebp
func MakeTLStorageFileWebp(data2 *Storage_FileType) *TLStorageFileWebp {
	if data2 == nil {
		return &TLStorageFileWebp{Data2: &Storage_FileType{
			PredicateName: Predicate_storage_fileWebp,
		}}
	} else {
		data2.PredicateName = Predicate_storage_fileWebp
		return &TLStorageFileWebp{Data2: data2}
	}
}

func (m *TLStorageFileWebp) To_Storage_FileType() *Storage_FileType {
	m.Data2.PredicateName = Predicate_storage_fileWebp
	return m.Data2
}

func (m *TLStorageFileWebp) GetPredicateName() string {
	return Predicate_storage_fileWebp
}

func (m *TLStorageFileWebp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1081464c: func() []byte {
			x.UInt(0x1081464c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_storage_fileWebp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_storage_fileWebp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStorageFileWebp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStorageFileWebp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1081464c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStorageFileWebp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatParticipants <--
//  + TL_ChatParticipantsForbidden
//  + TL_ChatParticipants
//

func (m *ChatParticipants) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatParticipantsForbidden:
		t := m.To_ChatParticipantsForbidden()
		xBuf = t.Encode(layer)
	case Predicate_chatParticipants:
		t := m.To_ChatParticipants()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatParticipants) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8763d3e1:
		m2 := MakeTLChatParticipantsForbidden(m)
		m2.Decode(dBuf)
	case 0x3cbc93f8:
		m2 := MakeTLChatParticipants(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatParticipants) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatParticipantsForbidden:
		t := m.To_ChatParticipantsForbidden()
		return t.DebugString()
	case Predicate_chatParticipants:
		t := m.To_ChatParticipants()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatParticipantsForbidden
func (m *ChatParticipants) To_ChatParticipantsForbidden() *TLChatParticipantsForbidden {
	m.PredicateName = Predicate_chatParticipantsForbidden
	return &TLChatParticipantsForbidden{
		Data2: m,
	}
}

// To_ChatParticipants
func (m *ChatParticipants) To_ChatParticipants() *TLChatParticipants {
	m.PredicateName = Predicate_chatParticipants
	return &TLChatParticipants{
		Data2: m,
	}
}

// MakeTLChatParticipantsForbidden
func MakeTLChatParticipantsForbidden(data2 *ChatParticipants) *TLChatParticipantsForbidden {
	if data2 == nil {
		return &TLChatParticipantsForbidden{Data2: &ChatParticipants{
			PredicateName: Predicate_chatParticipantsForbidden,
		}}
	} else {
		data2.PredicateName = Predicate_chatParticipantsForbidden
		return &TLChatParticipantsForbidden{Data2: data2}
	}
}

func (m *TLChatParticipantsForbidden) To_ChatParticipants() *ChatParticipants {
	m.Data2.PredicateName = Predicate_chatParticipantsForbidden
	return m.Data2
}

//// flags
func (m *TLChatParticipantsForbidden) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLChatParticipantsForbidden) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLChatParticipantsForbidden) SetSelfParticipant(v *ChatParticipant) {
	m.Data2.SelfParticipant = v
}
func (m *TLChatParticipantsForbidden) GetSelfParticipant() *ChatParticipant {
	return m.Data2.SelfParticipant
}

func (m *TLChatParticipantsForbidden) GetPredicateName() string {
	return Predicate_chatParticipantsForbidden
}

func (m *TLChatParticipantsForbidden) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8763d3e1: func() []byte {
			x.UInt(0x8763d3e1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSelfParticipant() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChatId())
			if m.GetSelfParticipant() != nil {
				x.Bytes(m.GetSelfParticipant().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatParticipantsForbidden, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatParticipantsForbidden, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatParticipantsForbidden) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatParticipantsForbidden) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8763d3e1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChatId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m2 := &ChatParticipant{}
				m2.Decode(dBuf)
				m.SetSelfParticipant(m2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatParticipantsForbidden) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatParticipants
func MakeTLChatParticipants(data2 *ChatParticipants) *TLChatParticipants {
	if data2 == nil {
		return &TLChatParticipants{Data2: &ChatParticipants{
			PredicateName: Predicate_chatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_chatParticipants
		return &TLChatParticipants{Data2: data2}
	}
}

func (m *TLChatParticipants) To_ChatParticipants() *ChatParticipants {
	m.Data2.PredicateName = Predicate_chatParticipants
	return m.Data2
}

func (m *TLChatParticipants) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLChatParticipants) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLChatParticipants) SetParticipants(v []*ChatParticipant) { m.Data2.Participants = v }
func (m *TLChatParticipants) GetParticipants() []*ChatParticipant  { return m.Data2.Participants }

func (m *TLChatParticipants) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChatParticipants) GetVersion() int32  { return m.Data2.Version }

func (m *TLChatParticipants) GetPredicateName() string {
	return Predicate_chatParticipants
}

func (m *TLChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3cbc93f8: func() []byte {
			x.UInt(0x3cbc93f8)

			x.Long(m.GetChatId())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetParticipants())))
			for _, v := range m.GetParticipants() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3cbc93f8: func() error {
			m.SetChatId(dBuf.Long())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*ChatParticipant, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &ChatParticipant{}
				v3[i].Decode(dBuf)
			}
			m.SetParticipants(v3)

			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Blocked <--
//  + TL_ContactsBlocked
//  + TL_ContactsBlockedSlice
//

func (m *Contacts_Blocked) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_blocked:
		t := m.To_ContactsBlocked()
		xBuf = t.Encode(layer)
	case Predicate_contacts_blockedSlice:
		t := m.To_ContactsBlockedSlice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_Blocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_Blocked) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xade1591:
		m2 := MakeTLContactsBlocked(m)
		m2.Decode(dBuf)
	case 0xe1664194:
		m2 := MakeTLContactsBlockedSlice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_Blocked) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_blocked:
		t := m.To_ContactsBlocked()
		return t.DebugString()
	case Predicate_contacts_blockedSlice:
		t := m.To_ContactsBlockedSlice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsBlocked
func (m *Contacts_Blocked) To_ContactsBlocked() *TLContactsBlocked {
	m.PredicateName = Predicate_contacts_blocked
	return &TLContactsBlocked{
		Data2: m,
	}
}

// To_ContactsBlockedSlice
func (m *Contacts_Blocked) To_ContactsBlockedSlice() *TLContactsBlockedSlice {
	m.PredicateName = Predicate_contacts_blockedSlice
	return &TLContactsBlockedSlice{
		Data2: m,
	}
}

// MakeTLContactsBlocked
func MakeTLContactsBlocked(data2 *Contacts_Blocked) *TLContactsBlocked {
	if data2 == nil {
		return &TLContactsBlocked{Data2: &Contacts_Blocked{
			PredicateName: Predicate_contacts_blocked,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_blocked
		return &TLContactsBlocked{Data2: data2}
	}
}

func (m *TLContactsBlocked) To_Contacts_Blocked() *Contacts_Blocked {
	m.Data2.PredicateName = Predicate_contacts_blocked
	return m.Data2
}

func (m *TLContactsBlocked) SetBlocked(v []*PeerBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlocked) GetBlocked() []*PeerBlocked  { return m.Data2.Blocked }

func (m *TLContactsBlocked) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsBlocked) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsBlocked) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlocked) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsBlocked) GetPredicateName() string {
	return Predicate_contacts_blocked
}

func (m *TLContactsBlocked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xade1591: func() []byte {
			x.UInt(0xade1591)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocked())))
			for _, v := range m.GetBlocked() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_blocked, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_blocked, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsBlocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsBlocked) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xade1591: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*PeerBlocked, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &PeerBlocked{}
				v0[i].Decode(dBuf)
			}
			m.SetBlocked(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsBlocked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLContactsBlockedSlice
func MakeTLContactsBlockedSlice(data2 *Contacts_Blocked) *TLContactsBlockedSlice {
	if data2 == nil {
		return &TLContactsBlockedSlice{Data2: &Contacts_Blocked{
			PredicateName: Predicate_contacts_blockedSlice,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_blockedSlice
		return &TLContactsBlockedSlice{Data2: data2}
	}
}

func (m *TLContactsBlockedSlice) To_Contacts_Blocked() *Contacts_Blocked {
	m.Data2.PredicateName = Predicate_contacts_blockedSlice
	return m.Data2
}

func (m *TLContactsBlockedSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLContactsBlockedSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLContactsBlockedSlice) SetBlocked(v []*PeerBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlockedSlice) GetBlocked() []*PeerBlocked  { return m.Data2.Blocked }

func (m *TLContactsBlockedSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsBlockedSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsBlockedSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlockedSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsBlockedSlice) GetPredicateName() string {
	return Predicate_contacts_blockedSlice
}

func (m *TLContactsBlockedSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe1664194: func() []byte {
			x.UInt(0xe1664194)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocked())))
			for _, v := range m.GetBlocked() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_blockedSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_blockedSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsBlockedSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsBlockedSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe1664194: func() error {
			m.SetCount(dBuf.Int())
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*PeerBlocked, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &PeerBlocked{}
				v0[i].Decode(dBuf)
			}
			m.SetBlocked(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsBlockedSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_Authorizations <--
//  + TL_AccountAuthorizations
//

func (m *Account_Authorizations) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_authorizations:
		t := m.To_AccountAuthorizations()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_Authorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_Authorizations) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4bff8ea0:
		m2 := MakeTLAccountAuthorizations(m)
		m2.Decode(dBuf)
	case 0x1250abde:
		m2 := MakeTLAccountAuthorizations(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_Authorizations) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_authorizations:
		t := m.To_AccountAuthorizations()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountAuthorizations
func (m *Account_Authorizations) To_AccountAuthorizations() *TLAccountAuthorizations {
	m.PredicateName = Predicate_account_authorizations
	return &TLAccountAuthorizations{
		Data2: m,
	}
}

// MakeTLAccountAuthorizations
func MakeTLAccountAuthorizations(data2 *Account_Authorizations) *TLAccountAuthorizations {
	if data2 == nil {
		return &TLAccountAuthorizations{Data2: &Account_Authorizations{
			PredicateName: Predicate_account_authorizations,
		}}
	} else {
		data2.PredicateName = Predicate_account_authorizations
		return &TLAccountAuthorizations{Data2: data2}
	}
}

func (m *TLAccountAuthorizations) To_Account_Authorizations() *Account_Authorizations {
	m.Data2.PredicateName = Predicate_account_authorizations
	return m.Data2
}

func (m *TLAccountAuthorizations) SetAuthorizationTtlDays(v int32) { m.Data2.AuthorizationTtlDays = v }
func (m *TLAccountAuthorizations) GetAuthorizationTtlDays() int32 {
	return m.Data2.AuthorizationTtlDays
}

func (m *TLAccountAuthorizations) SetAuthorizations(v []*Authorization) { m.Data2.Authorizations = v }
func (m *TLAccountAuthorizations) GetAuthorizations() []*Authorization  { return m.Data2.Authorizations }

func (m *TLAccountAuthorizations) GetPredicateName() string {
	return Predicate_account_authorizations
}

func (m *TLAccountAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4bff8ea0: func() []byte {
			x.UInt(0x4bff8ea0)

			x.Int(m.GetAuthorizationTtlDays())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAuthorizations())))
			for _, v := range m.GetAuthorizations() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
		0x1250abde: func() []byte {
			x.UInt(0x1250abde)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAuthorizations())))
			for _, v := range m.GetAuthorizations() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_authorizations, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_authorizations, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountAuthorizations) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4bff8ea0: func() error {
			m.SetAuthorizationTtlDays(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Authorization, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Authorization{}
				v1[i].Decode(dBuf)
			}
			m.SetAuthorizations(v1)

			return dBuf.GetError()
		},
		0x1250abde: func() error {
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Authorization, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Authorization{}
				v1[i].Decode(dBuf)
			}
			m.SetAuthorizations(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageRelatedArticle <--
//  + TL_PageRelatedArticle
//

func (m *PageRelatedArticle) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageRelatedArticle:
		t := m.To_PageRelatedArticle()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageRelatedArticle) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageRelatedArticle) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb390dc08:
		m2 := MakeTLPageRelatedArticle(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageRelatedArticle) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageRelatedArticle:
		t := m.To_PageRelatedArticle()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageRelatedArticle
func (m *PageRelatedArticle) To_PageRelatedArticle() *TLPageRelatedArticle {
	m.PredicateName = Predicate_pageRelatedArticle
	return &TLPageRelatedArticle{
		Data2: m,
	}
}

// MakeTLPageRelatedArticle
func MakeTLPageRelatedArticle(data2 *PageRelatedArticle) *TLPageRelatedArticle {
	if data2 == nil {
		return &TLPageRelatedArticle{Data2: &PageRelatedArticle{
			PredicateName: Predicate_pageRelatedArticle,
		}}
	} else {
		data2.PredicateName = Predicate_pageRelatedArticle
		return &TLPageRelatedArticle{Data2: data2}
	}
}

func (m *TLPageRelatedArticle) To_PageRelatedArticle() *PageRelatedArticle {
	m.Data2.PredicateName = Predicate_pageRelatedArticle
	return m.Data2
}

//// flags
func (m *TLPageRelatedArticle) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageRelatedArticle) GetUrl() string  { return m.Data2.Url }

func (m *TLPageRelatedArticle) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageRelatedArticle) GetWebpageId() int64  { return m.Data2.WebpageId }

func (m *TLPageRelatedArticle) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLPageRelatedArticle) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLPageRelatedArticle) SetDescription(v *types.StringValue) { m.Data2.Description = v }
func (m *TLPageRelatedArticle) GetDescription() *types.StringValue  { return m.Data2.Description }

func (m *TLPageRelatedArticle) SetPhotoId(v *types.Int64Value) { m.Data2.PhotoId = v }
func (m *TLPageRelatedArticle) GetPhotoId() *types.Int64Value  { return m.Data2.PhotoId }

func (m *TLPageRelatedArticle) SetAuthor(v *types.StringValue) { m.Data2.Author = v }
func (m *TLPageRelatedArticle) GetAuthor() *types.StringValue  { return m.Data2.Author }

func (m *TLPageRelatedArticle) SetPublishedDate(v *types.Int32Value) { m.Data2.PublishedDate = v }
func (m *TLPageRelatedArticle) GetPublishedDate() *types.Int32Value  { return m.Data2.PublishedDate }

func (m *TLPageRelatedArticle) GetPredicateName() string {
	return Predicate_pageRelatedArticle
}

func (m *TLPageRelatedArticle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb390dc08: func() []byte {
			x.UInt(0xb390dc08)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTitle() != nil {
					flags |= 1 << 0
				}
				if m.GetDescription() != nil {
					flags |= 1 << 1
				}
				if m.GetPhotoId() != nil {
					flags |= 1 << 2
				}
				if m.GetAuthor() != nil {
					flags |= 1 << 3
				}
				if m.GetPublishedDate() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetUrl())
			x.Long(m.GetWebpageId())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			if m.GetPhotoId() != nil {
				x.Long(m.GetPhotoId().Value)
			}

			if m.GetAuthor() != nil {
				x.String(m.GetAuthor().Value)
			}

			if m.GetPublishedDate() != nil {
				x.Int(m.GetPublishedDate().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageRelatedArticle, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageRelatedArticle, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageRelatedArticle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageRelatedArticle) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb390dc08: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUrl(dBuf.String())
			m.SetWebpageId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetPhotoId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetAuthor(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetPublishedDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageRelatedArticle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_HistoryImportParsed <--
//  + TL_MessagesHistoryImportParsed
//

func (m *Messages_HistoryImportParsed) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_historyImportParsed:
		t := m.To_MessagesHistoryImportParsed()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_HistoryImportParsed) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_HistoryImportParsed) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5e0fb7b9:
		m2 := MakeTLMessagesHistoryImportParsed(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_HistoryImportParsed) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_historyImportParsed:
		t := m.To_MessagesHistoryImportParsed()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesHistoryImportParsed
func (m *Messages_HistoryImportParsed) To_MessagesHistoryImportParsed() *TLMessagesHistoryImportParsed {
	m.PredicateName = Predicate_messages_historyImportParsed
	return &TLMessagesHistoryImportParsed{
		Data2: m,
	}
}

// MakeTLMessagesHistoryImportParsed
func MakeTLMessagesHistoryImportParsed(data2 *Messages_HistoryImportParsed) *TLMessagesHistoryImportParsed {
	if data2 == nil {
		return &TLMessagesHistoryImportParsed{Data2: &Messages_HistoryImportParsed{
			PredicateName: Predicate_messages_historyImportParsed,
		}}
	} else {
		data2.PredicateName = Predicate_messages_historyImportParsed
		return &TLMessagesHistoryImportParsed{Data2: data2}
	}
}

func (m *TLMessagesHistoryImportParsed) To_Messages_HistoryImportParsed() *Messages_HistoryImportParsed {
	m.Data2.PredicateName = Predicate_messages_historyImportParsed
	return m.Data2
}

//// flags
func (m *TLMessagesHistoryImportParsed) SetPm(v bool) { m.Data2.Pm = v }
func (m *TLMessagesHistoryImportParsed) GetPm() bool  { return m.Data2.Pm }

func (m *TLMessagesHistoryImportParsed) SetGroup(v bool) { m.Data2.Group = v }
func (m *TLMessagesHistoryImportParsed) GetGroup() bool  { return m.Data2.Group }

func (m *TLMessagesHistoryImportParsed) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLMessagesHistoryImportParsed) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLMessagesHistoryImportParsed) GetPredicateName() string {
	return Predicate_messages_historyImportParsed
}

func (m *TLMessagesHistoryImportParsed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5e0fb7b9: func() []byte {
			x.UInt(0x5e0fb7b9)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPm() == true {
					flags |= 1 << 0
				}
				if m.GetGroup() == true {
					flags |= 1 << 1
				}
				if m.GetTitle() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_historyImportParsed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_historyImportParsed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesHistoryImportParsed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHistoryImportParsed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5e0fb7b9: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPm(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetGroup(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesHistoryImportParsed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Dialog <--
//  + TL_Dialog
//  + TL_DialogFolder
//

func (m *Dialog) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dialog:
		t := m.To_Dialog()
		xBuf = t.Encode(layer)
	case Predicate_dialogFolder:
		t := m.To_DialogFolder()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Dialog) CalcByteSize(layer int32) int {
	return 0
}

func (m *Dialog) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa8edd0f5:
		m2 := MakeTLDialog(m)
		m2.Decode(dBuf)
	case 0x2c171f72:
		m2 := MakeTLDialog(m)
		m2.Decode(dBuf)
	case 0x71bd134c:
		m2 := MakeTLDialogFolder(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Dialog) DebugString() string {
	switch m.PredicateName {
	case Predicate_dialog:
		t := m.To_Dialog()
		return t.DebugString()
	case Predicate_dialogFolder:
		t := m.To_DialogFolder()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Dialog
func (m *Dialog) To_Dialog() *TLDialog {
	m.PredicateName = Predicate_dialog
	return &TLDialog{
		Data2: m,
	}
}

// To_DialogFolder
func (m *Dialog) To_DialogFolder() *TLDialogFolder {
	m.PredicateName = Predicate_dialogFolder
	return &TLDialogFolder{
		Data2: m,
	}
}

// MakeTLDialog
func MakeTLDialog(data2 *Dialog) *TLDialog {
	if data2 == nil {
		return &TLDialog{Data2: &Dialog{
			PredicateName: Predicate_dialog,
		}}
	} else {
		data2.PredicateName = Predicate_dialog
		return &TLDialog{Data2: data2}
	}
}

func (m *TLDialog) To_Dialog() *Dialog {
	m.Data2.PredicateName = Predicate_dialog
	return m.Data2
}

//// flags
func (m *TLDialog) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialog) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLDialog) SetUnreadMark(v bool) { m.Data2.UnreadMark = v }
func (m *TLDialog) GetUnreadMark() bool  { return m.Data2.UnreadMark }

func (m *TLDialog) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialog) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLDialog) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialog) GetTopMessage() int32  { return m.Data2.TopMessage }

func (m *TLDialog) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLDialog) GetReadInboxMaxId() int32  { return m.Data2.ReadInboxMaxId }

func (m *TLDialog) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLDialog) GetReadOutboxMaxId() int32  { return m.Data2.ReadOutboxMaxId }

func (m *TLDialog) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLDialog) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLDialog) SetUnreadMentionsCount(v int32) { m.Data2.UnreadMentionsCount = v }
func (m *TLDialog) GetUnreadMentionsCount() int32  { return m.Data2.UnreadMentionsCount }

func (m *TLDialog) SetUnreadReactionsCount(v int32) { m.Data2.UnreadReactionsCount = v }
func (m *TLDialog) GetUnreadReactionsCount() int32  { return m.Data2.UnreadReactionsCount }

func (m *TLDialog) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLDialog) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLDialog) SetPts(v *types.Int32Value) { m.Data2.Pts = v }
func (m *TLDialog) GetPts() *types.Int32Value  { return m.Data2.Pts }

func (m *TLDialog) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLDialog) GetDraft() *DraftMessage  { return m.Data2.Draft }

func (m *TLDialog) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLDialog) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLDialog) GetPredicateName() string {
	return Predicate_dialog
}

func (m *TLDialog) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8edd0f5: func() []byte {
			x.UInt(0xa8edd0f5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 2
				}
				if m.GetUnreadMark() == true {
					flags |= 1 << 3
				}

				if m.GetPts() != nil {
					flags |= 1 << 0
				}
				if m.GetDraft() != nil {
					flags |= 1 << 1
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetTopMessage())
			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Int(m.GetUnreadMentionsCount())
			x.Int(m.GetUnreadReactionsCount())
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetPts() != nil {
				x.Int(m.GetPts().Value)
			}

			if m.GetDraft() != nil {
				x.Bytes(m.GetDraft().Encode(layer))
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			return x.GetBuf()
		},
		0x2c171f72: func() []byte {
			x.UInt(0x2c171f72)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 2
				}
				if m.GetUnreadMark() == true {
					flags |= 1 << 3
				}

				if m.GetPts() != nil {
					flags |= 1 << 0
				}
				if m.GetDraft() != nil {
					flags |= 1 << 1
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetTopMessage())
			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Int(m.GetUnreadMentionsCount())
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetPts() != nil {
				x.Int(m.GetPts().Value)
			}

			if m.GetDraft() != nil {
				x.Bytes(m.GetDraft().Encode(layer))
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialog, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialog, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialog) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialog) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8edd0f5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetUnreadMark(true)
			}

			m3 := &Peer{}
			m3.Decode(dBuf)
			m.SetPeer(m3)

			m.SetTopMessage(dBuf.Int())
			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())
			m.SetUnreadMentionsCount(dBuf.Int())
			m.SetUnreadReactionsCount(dBuf.Int())

			m10 := &PeerNotifySettings{}
			m10.Decode(dBuf)
			m.SetNotifySettings(m10)

			if (flags & (1 << 0)) != 0 {
				m.SetPts(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m12 := &DraftMessage{}
				m12.Decode(dBuf)
				m.SetDraft(m12)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
		0x2c171f72: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetUnreadMark(true)
			}

			m3 := &Peer{}
			m3.Decode(dBuf)
			m.SetPeer(m3)

			m.SetTopMessage(dBuf.Int())
			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())
			m.SetUnreadMentionsCount(dBuf.Int())

			m10 := &PeerNotifySettings{}
			m10.Decode(dBuf)
			m.SetNotifySettings(m10)

			if (flags & (1 << 0)) != 0 {
				m.SetPts(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m12 := &DraftMessage{}
				m12.Decode(dBuf)
				m.SetDraft(m12)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialog) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDialogFolder
func MakeTLDialogFolder(data2 *Dialog) *TLDialogFolder {
	if data2 == nil {
		return &TLDialogFolder{Data2: &Dialog{
			PredicateName: Predicate_dialogFolder,
		}}
	} else {
		data2.PredicateName = Predicate_dialogFolder
		return &TLDialogFolder{Data2: data2}
	}
}

func (m *TLDialogFolder) To_Dialog() *Dialog {
	m.Data2.PredicateName = Predicate_dialogFolder
	return m.Data2
}

//// flags
func (m *TLDialogFolder) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialogFolder) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLDialogFolder) SetFolder(v *Folder) { m.Data2.Folder = v }
func (m *TLDialogFolder) GetFolder() *Folder  { return m.Data2.Folder }

func (m *TLDialogFolder) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialogFolder) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLDialogFolder) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialogFolder) GetTopMessage() int32  { return m.Data2.TopMessage }

func (m *TLDialogFolder) SetUnreadMutedPeersCount(v int32) { m.Data2.UnreadMutedPeersCount = v }
func (m *TLDialogFolder) GetUnreadMutedPeersCount() int32  { return m.Data2.UnreadMutedPeersCount }

func (m *TLDialogFolder) SetUnreadUnmutedPeersCount(v int32) { m.Data2.UnreadUnmutedPeersCount = v }
func (m *TLDialogFolder) GetUnreadUnmutedPeersCount() int32  { return m.Data2.UnreadUnmutedPeersCount }

func (m *TLDialogFolder) SetUnreadMutedMessagesCount(v int32) { m.Data2.UnreadMutedMessagesCount = v }
func (m *TLDialogFolder) GetUnreadMutedMessagesCount() int32  { return m.Data2.UnreadMutedMessagesCount }

func (m *TLDialogFolder) SetUnreadUnmutedMessagesCount(v int32) {
	m.Data2.UnreadUnmutedMessagesCount = v
}
func (m *TLDialogFolder) GetUnreadUnmutedMessagesCount() int32 {
	return m.Data2.UnreadUnmutedMessagesCount
}

func (m *TLDialogFolder) GetPredicateName() string {
	return Predicate_dialogFolder
}

func (m *TLDialogFolder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x71bd134c: func() []byte {
			x.UInt(0x71bd134c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetFolder().Encode(layer))
			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetTopMessage())
			x.Int(m.GetUnreadMutedPeersCount())
			x.Int(m.GetUnreadUnmutedPeersCount())
			x.Int(m.GetUnreadMutedMessagesCount())
			x.Int(m.GetUnreadUnmutedMessagesCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialogFolder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialogFolder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialogFolder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialogFolder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x71bd134c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetPinned(true)
			}

			m14 := &Folder{}
			m14.Decode(dBuf)
			m.SetFolder(m14)

			m3 := &Peer{}
			m3.Decode(dBuf)
			m.SetPeer(m3)

			m.SetTopMessage(dBuf.Int())
			m.SetUnreadMutedPeersCount(dBuf.Int())
			m.SetUnreadUnmutedPeersCount(dBuf.Int())
			m.SetUnreadMutedMessagesCount(dBuf.Int())
			m.SetUnreadUnmutedMessagesCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialogFolder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputStickerSet <--
//  + TL_InputStickerSetEmpty
//  + TL_InputStickerSetID
//  + TL_InputStickerSetShortName
//  + TL_InputStickerSetAnimatedEmoji
//  + TL_InputStickerSetDice
//  + TL_InputStickerSetAnimatedEmojiAnimations
//

func (m *InputStickerSet) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputStickerSetEmpty:
		t := m.To_InputStickerSetEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetID:
		t := m.To_InputStickerSetID()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetShortName:
		t := m.To_InputStickerSetShortName()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetAnimatedEmoji:
		t := m.To_InputStickerSetAnimatedEmoji()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetDice:
		t := m.To_InputStickerSetDice()
		xBuf = t.Encode(layer)
	case Predicate_inputStickerSetAnimatedEmojiAnimations:
		t := m.To_InputStickerSetAnimatedEmojiAnimations()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputStickerSet) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xffb62b95:
		m2 := MakeTLInputStickerSetEmpty(m)
		m2.Decode(dBuf)
	case 0x9de7a269:
		m2 := MakeTLInputStickerSetID(m)
		m2.Decode(dBuf)
	case 0x861cc8a0:
		m2 := MakeTLInputStickerSetShortName(m)
		m2.Decode(dBuf)
	case 0x28703c8:
		m2 := MakeTLInputStickerSetAnimatedEmoji(m)
		m2.Decode(dBuf)
	case 0xe67f520e:
		m2 := MakeTLInputStickerSetDice(m)
		m2.Decode(dBuf)
	case 0xcde3739:
		m2 := MakeTLInputStickerSetAnimatedEmojiAnimations(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputStickerSet) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputStickerSetEmpty:
		t := m.To_InputStickerSetEmpty()
		return t.DebugString()
	case Predicate_inputStickerSetID:
		t := m.To_InputStickerSetID()
		return t.DebugString()
	case Predicate_inputStickerSetShortName:
		t := m.To_InputStickerSetShortName()
		return t.DebugString()
	case Predicate_inputStickerSetAnimatedEmoji:
		t := m.To_InputStickerSetAnimatedEmoji()
		return t.DebugString()
	case Predicate_inputStickerSetDice:
		t := m.To_InputStickerSetDice()
		return t.DebugString()
	case Predicate_inputStickerSetAnimatedEmojiAnimations:
		t := m.To_InputStickerSetAnimatedEmojiAnimations()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputStickerSetEmpty
func (m *InputStickerSet) To_InputStickerSetEmpty() *TLInputStickerSetEmpty {
	m.PredicateName = Predicate_inputStickerSetEmpty
	return &TLInputStickerSetEmpty{
		Data2: m,
	}
}

// To_InputStickerSetID
func (m *InputStickerSet) To_InputStickerSetID() *TLInputStickerSetID {
	m.PredicateName = Predicate_inputStickerSetID
	return &TLInputStickerSetID{
		Data2: m,
	}
}

// To_InputStickerSetShortName
func (m *InputStickerSet) To_InputStickerSetShortName() *TLInputStickerSetShortName {
	m.PredicateName = Predicate_inputStickerSetShortName
	return &TLInputStickerSetShortName{
		Data2: m,
	}
}

// To_InputStickerSetAnimatedEmoji
func (m *InputStickerSet) To_InputStickerSetAnimatedEmoji() *TLInputStickerSetAnimatedEmoji {
	m.PredicateName = Predicate_inputStickerSetAnimatedEmoji
	return &TLInputStickerSetAnimatedEmoji{
		Data2: m,
	}
}

// To_InputStickerSetDice
func (m *InputStickerSet) To_InputStickerSetDice() *TLInputStickerSetDice {
	m.PredicateName = Predicate_inputStickerSetDice
	return &TLInputStickerSetDice{
		Data2: m,
	}
}

// To_InputStickerSetAnimatedEmojiAnimations
func (m *InputStickerSet) To_InputStickerSetAnimatedEmojiAnimations() *TLInputStickerSetAnimatedEmojiAnimations {
	m.PredicateName = Predicate_inputStickerSetAnimatedEmojiAnimations
	return &TLInputStickerSetAnimatedEmojiAnimations{
		Data2: m,
	}
}

// MakeTLInputStickerSetEmpty
func MakeTLInputStickerSetEmpty(data2 *InputStickerSet) *TLInputStickerSetEmpty {
	if data2 == nil {
		return &TLInputStickerSetEmpty{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetEmpty
		return &TLInputStickerSetEmpty{Data2: data2}
	}
}

func (m *TLInputStickerSetEmpty) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetEmpty
	return m.Data2
}

func (m *TLInputStickerSetEmpty) GetPredicateName() string {
	return Predicate_inputStickerSetEmpty
}

func (m *TLInputStickerSetEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xffb62b95: func() []byte {
			x.UInt(0xffb62b95)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xffb62b95: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetID
func MakeTLInputStickerSetID(data2 *InputStickerSet) *TLInputStickerSetID {
	if data2 == nil {
		return &TLInputStickerSetID{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetID,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetID
		return &TLInputStickerSetID{Data2: data2}
	}
}

func (m *TLInputStickerSetID) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetID
	return m.Data2
}

func (m *TLInputStickerSetID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputStickerSetID) GetId() int64  { return m.Data2.Id }

func (m *TLInputStickerSetID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputStickerSetID) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputStickerSetID) GetPredicateName() string {
	return Predicate_inputStickerSetID
}

func (m *TLInputStickerSetID) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9de7a269: func() []byte {
			x.UInt(0x9de7a269)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetID, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetID, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetID) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetID) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9de7a269: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetID) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetShortName
func MakeTLInputStickerSetShortName(data2 *InputStickerSet) *TLInputStickerSetShortName {
	if data2 == nil {
		return &TLInputStickerSetShortName{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetShortName,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetShortName
		return &TLInputStickerSetShortName{Data2: data2}
	}
}

func (m *TLInputStickerSetShortName) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetShortName
	return m.Data2
}

func (m *TLInputStickerSetShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputStickerSetShortName) GetShortName() string  { return m.Data2.ShortName }

func (m *TLInputStickerSetShortName) GetPredicateName() string {
	return Predicate_inputStickerSetShortName
}

func (m *TLInputStickerSetShortName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x861cc8a0: func() []byte {
			x.UInt(0x861cc8a0)

			x.String(m.GetShortName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetShortName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetShortName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetShortName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x861cc8a0: func() error {
			m.SetShortName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetShortName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetAnimatedEmoji
func MakeTLInputStickerSetAnimatedEmoji(data2 *InputStickerSet) *TLInputStickerSetAnimatedEmoji {
	if data2 == nil {
		return &TLInputStickerSetAnimatedEmoji{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetAnimatedEmoji,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetAnimatedEmoji
		return &TLInputStickerSetAnimatedEmoji{Data2: data2}
	}
}

func (m *TLInputStickerSetAnimatedEmoji) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetAnimatedEmoji
	return m.Data2
}

func (m *TLInputStickerSetAnimatedEmoji) GetPredicateName() string {
	return Predicate_inputStickerSetAnimatedEmoji
}

func (m *TLInputStickerSetAnimatedEmoji) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x28703c8: func() []byte {
			x.UInt(0x28703c8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetAnimatedEmoji, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetAnimatedEmoji, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetAnimatedEmoji) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetAnimatedEmoji) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x28703c8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetAnimatedEmoji) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetDice
func MakeTLInputStickerSetDice(data2 *InputStickerSet) *TLInputStickerSetDice {
	if data2 == nil {
		return &TLInputStickerSetDice{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetDice,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetDice
		return &TLInputStickerSetDice{Data2: data2}
	}
}

func (m *TLInputStickerSetDice) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetDice
	return m.Data2
}

func (m *TLInputStickerSetDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLInputStickerSetDice) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLInputStickerSetDice) GetPredicateName() string {
	return Predicate_inputStickerSetDice
}

func (m *TLInputStickerSetDice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe67f520e: func() []byte {
			x.UInt(0xe67f520e)

			x.String(m.GetEmoticon())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetDice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetDice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetDice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetDice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe67f520e: func() error {
			m.SetEmoticon(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetDice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickerSetAnimatedEmojiAnimations
func MakeTLInputStickerSetAnimatedEmojiAnimations(data2 *InputStickerSet) *TLInputStickerSetAnimatedEmojiAnimations {
	if data2 == nil {
		return &TLInputStickerSetAnimatedEmojiAnimations{Data2: &InputStickerSet{
			PredicateName: Predicate_inputStickerSetAnimatedEmojiAnimations,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetAnimatedEmojiAnimations
		return &TLInputStickerSetAnimatedEmojiAnimations{Data2: data2}
	}
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) To_InputStickerSet() *InputStickerSet {
	m.Data2.PredicateName = Predicate_inputStickerSetAnimatedEmojiAnimations
	return m.Data2
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) GetPredicateName() string {
	return Predicate_inputStickerSetAnimatedEmojiAnimations
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcde3739: func() []byte {
			x.UInt(0xcde3739)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetAnimatedEmojiAnimations, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetAnimatedEmojiAnimations, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcde3739: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetAnimatedEmojiAnimations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// JSONObjectValue <--
//  + TL_JsonObjectValue
//

func (m *JSONObjectValue) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_jsonObjectValue:
		t := m.To_JsonObjectValue()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *JSONObjectValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *JSONObjectValue) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc0de1bd9:
		m2 := MakeTLJsonObjectValue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *JSONObjectValue) DebugString() string {
	switch m.PredicateName {
	case Predicate_jsonObjectValue:
		t := m.To_JsonObjectValue()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_JsonObjectValue
func (m *JSONObjectValue) To_JsonObjectValue() *TLJsonObjectValue {
	m.PredicateName = Predicate_jsonObjectValue
	return &TLJsonObjectValue{
		Data2: m,
	}
}

// MakeTLJsonObjectValue
func MakeTLJsonObjectValue(data2 *JSONObjectValue) *TLJsonObjectValue {
	if data2 == nil {
		return &TLJsonObjectValue{Data2: &JSONObjectValue{
			PredicateName: Predicate_jsonObjectValue,
		}}
	} else {
		data2.PredicateName = Predicate_jsonObjectValue
		return &TLJsonObjectValue{Data2: data2}
	}
}

func (m *TLJsonObjectValue) To_JSONObjectValue() *JSONObjectValue {
	m.Data2.PredicateName = Predicate_jsonObjectValue
	return m.Data2
}

func (m *TLJsonObjectValue) SetKey(v string) { m.Data2.Key = v }
func (m *TLJsonObjectValue) GetKey() string  { return m.Data2.Key }

func (m *TLJsonObjectValue) SetValue(v *JSONValue) { m.Data2.Value = v }
func (m *TLJsonObjectValue) GetValue() *JSONValue  { return m.Data2.Value }

func (m *TLJsonObjectValue) GetPredicateName() string {
	return Predicate_jsonObjectValue
}

func (m *TLJsonObjectValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc0de1bd9: func() []byte {
			x.UInt(0xc0de1bd9)

			x.String(m.GetKey())
			x.Bytes(m.GetValue().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_jsonObjectValue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_jsonObjectValue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLJsonObjectValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLJsonObjectValue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc0de1bd9: func() error {
			m.SetKey(dBuf.String())

			m1 := &JSONValue{}
			m1.Decode(dBuf)
			m.SetValue(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLJsonObjectValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Int32 <--
//  + TL_Int32
//

func (m *Int32) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_int32:
		t := m.To_Int32()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Int32) CalcByteSize(layer int32) int {
	return 0
}

func (m *Int32) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8ccffa3f:
		m2 := MakeTLInt32(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Int32) DebugString() string {
	switch m.PredicateName {
	case Predicate_int32:
		t := m.To_Int32()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Int32
func (m *Int32) To_Int32() *TLInt32 {
	m.PredicateName = Predicate_int32
	return &TLInt32{
		Data2: m,
	}
}

// MakeTLInt32
func MakeTLInt32(data2 *Int32) *TLInt32 {
	if data2 == nil {
		return &TLInt32{Data2: &Int32{
			PredicateName: Predicate_int32,
		}}
	} else {
		data2.PredicateName = Predicate_int32
		return &TLInt32{Data2: data2}
	}
}

func (m *TLInt32) To_Int32() *Int32 {
	m.Data2.PredicateName = Predicate_int32
	return m.Data2
}

func (m *TLInt32) SetV(v int32) { m.Data2.V = v }
func (m *TLInt32) GetV() int32  { return m.Data2.V }

func (m *TLInt32) GetPredicateName() string {
	return Predicate_int32
}

func (m *TLInt32) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8ccffa3f: func() []byte {
			x.UInt(0x8ccffa3f)

			x.Int(m.GetV())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_int32, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_int32, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInt32) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInt32) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8ccffa3f: func() error {
			m.SetV(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInt32) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_ContentSettings <--
//  + TL_AccountContentSettings
//

func (m *Account_ContentSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_contentSettings:
		t := m.To_AccountContentSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_ContentSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_ContentSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x57e28221:
		m2 := MakeTLAccountContentSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_ContentSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_contentSettings:
		t := m.To_AccountContentSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountContentSettings
func (m *Account_ContentSettings) To_AccountContentSettings() *TLAccountContentSettings {
	m.PredicateName = Predicate_account_contentSettings
	return &TLAccountContentSettings{
		Data2: m,
	}
}

// MakeTLAccountContentSettings
func MakeTLAccountContentSettings(data2 *Account_ContentSettings) *TLAccountContentSettings {
	if data2 == nil {
		return &TLAccountContentSettings{Data2: &Account_ContentSettings{
			PredicateName: Predicate_account_contentSettings,
		}}
	} else {
		data2.PredicateName = Predicate_account_contentSettings
		return &TLAccountContentSettings{Data2: data2}
	}
}

func (m *TLAccountContentSettings) To_Account_ContentSettings() *Account_ContentSettings {
	m.Data2.PredicateName = Predicate_account_contentSettings
	return m.Data2
}

//// flags
func (m *TLAccountContentSettings) SetSensitiveEnabled(v bool) { m.Data2.SensitiveEnabled = v }
func (m *TLAccountContentSettings) GetSensitiveEnabled() bool  { return m.Data2.SensitiveEnabled }

func (m *TLAccountContentSettings) SetSensitiveCanChange(v bool) { m.Data2.SensitiveCanChange = v }
func (m *TLAccountContentSettings) GetSensitiveCanChange() bool  { return m.Data2.SensitiveCanChange }

func (m *TLAccountContentSettings) GetPredicateName() string {
	return Predicate_account_contentSettings
}

func (m *TLAccountContentSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x57e28221: func() []byte {
			x.UInt(0x57e28221)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSensitiveEnabled() == true {
					flags |= 1 << 0
				}
				if m.GetSensitiveCanChange() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_contentSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_contentSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountContentSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountContentSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x57e28221: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetSensitiveEnabled(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSensitiveCanChange(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountContentSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_DhConfig <--
//  + TL_MessagesDhConfigNotModified
//  + TL_MessagesDhConfig
//

func (m *Messages_DhConfig) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_dhConfigNotModified:
		t := m.To_MessagesDhConfigNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_dhConfig:
		t := m.To_MessagesDhConfig()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_DhConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_DhConfig) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc0e24635:
		m2 := MakeTLMessagesDhConfigNotModified(m)
		m2.Decode(dBuf)
	case 0x2c221edd:
		m2 := MakeTLMessagesDhConfig(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_DhConfig) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_dhConfigNotModified:
		t := m.To_MessagesDhConfigNotModified()
		return t.DebugString()
	case Predicate_messages_dhConfig:
		t := m.To_MessagesDhConfig()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesDhConfigNotModified
func (m *Messages_DhConfig) To_MessagesDhConfigNotModified() *TLMessagesDhConfigNotModified {
	m.PredicateName = Predicate_messages_dhConfigNotModified
	return &TLMessagesDhConfigNotModified{
		Data2: m,
	}
}

// To_MessagesDhConfig
func (m *Messages_DhConfig) To_MessagesDhConfig() *TLMessagesDhConfig {
	m.PredicateName = Predicate_messages_dhConfig
	return &TLMessagesDhConfig{
		Data2: m,
	}
}

// MakeTLMessagesDhConfigNotModified
func MakeTLMessagesDhConfigNotModified(data2 *Messages_DhConfig) *TLMessagesDhConfigNotModified {
	if data2 == nil {
		return &TLMessagesDhConfigNotModified{Data2: &Messages_DhConfig{
			PredicateName: Predicate_messages_dhConfigNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_dhConfigNotModified
		return &TLMessagesDhConfigNotModified{Data2: data2}
	}
}

func (m *TLMessagesDhConfigNotModified) To_Messages_DhConfig() *Messages_DhConfig {
	m.Data2.PredicateName = Predicate_messages_dhConfigNotModified
	return m.Data2
}

func (m *TLMessagesDhConfigNotModified) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfigNotModified) GetRandom() []byte  { return m.Data2.Random }

func (m *TLMessagesDhConfigNotModified) GetPredicateName() string {
	return Predicate_messages_dhConfigNotModified
}

func (m *TLMessagesDhConfigNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc0e24635: func() []byte {
			x.UInt(0xc0e24635)

			x.StringBytes(m.GetRandom())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_dhConfigNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_dhConfigNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDhConfigNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDhConfigNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc0e24635: func() error {
			m.SetRandom(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDhConfigNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesDhConfig
func MakeTLMessagesDhConfig(data2 *Messages_DhConfig) *TLMessagesDhConfig {
	if data2 == nil {
		return &TLMessagesDhConfig{Data2: &Messages_DhConfig{
			PredicateName: Predicate_messages_dhConfig,
		}}
	} else {
		data2.PredicateName = Predicate_messages_dhConfig
		return &TLMessagesDhConfig{Data2: data2}
	}
}

func (m *TLMessagesDhConfig) To_Messages_DhConfig() *Messages_DhConfig {
	m.Data2.PredicateName = Predicate_messages_dhConfig
	return m.Data2
}

func (m *TLMessagesDhConfig) SetG(v int32) { m.Data2.G = v }
func (m *TLMessagesDhConfig) GetG() int32  { return m.Data2.G }

func (m *TLMessagesDhConfig) SetP(v []byte) { m.Data2.P = v }
func (m *TLMessagesDhConfig) GetP() []byte  { return m.Data2.P }

func (m *TLMessagesDhConfig) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLMessagesDhConfig) GetVersion() int32  { return m.Data2.Version }

func (m *TLMessagesDhConfig) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfig) GetRandom() []byte  { return m.Data2.Random }

func (m *TLMessagesDhConfig) GetPredicateName() string {
	return Predicate_messages_dhConfig
}

func (m *TLMessagesDhConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2c221edd: func() []byte {
			x.UInt(0x2c221edd)

			x.Int(m.GetG())
			x.StringBytes(m.GetP())
			x.Int(m.GetVersion())
			x.StringBytes(m.GetRandom())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_dhConfig, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_dhConfig, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDhConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDhConfig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2c221edd: func() error {
			m.SetG(dBuf.Int())
			m.SetP(dBuf.StringBytes())
			m.SetVersion(dBuf.Int())
			m.SetRandom(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDhConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_PrivacyRules <--
//  + TL_AccountPrivacyRules
//

func (m *Account_PrivacyRules) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_privacyRules:
		t := m.To_AccountPrivacyRules()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_PrivacyRules) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_PrivacyRules) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x50a04e45:
		m2 := MakeTLAccountPrivacyRules(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_PrivacyRules) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_privacyRules:
		t := m.To_AccountPrivacyRules()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountPrivacyRules
func (m *Account_PrivacyRules) To_AccountPrivacyRules() *TLAccountPrivacyRules {
	m.PredicateName = Predicate_account_privacyRules
	return &TLAccountPrivacyRules{
		Data2: m,
	}
}

// MakeTLAccountPrivacyRules
func MakeTLAccountPrivacyRules(data2 *Account_PrivacyRules) *TLAccountPrivacyRules {
	if data2 == nil {
		return &TLAccountPrivacyRules{Data2: &Account_PrivacyRules{
			PredicateName: Predicate_account_privacyRules,
		}}
	} else {
		data2.PredicateName = Predicate_account_privacyRules
		return &TLAccountPrivacyRules{Data2: data2}
	}
}

func (m *TLAccountPrivacyRules) To_Account_PrivacyRules() *Account_PrivacyRules {
	m.Data2.PredicateName = Predicate_account_privacyRules
	return m.Data2
}

func (m *TLAccountPrivacyRules) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLAccountPrivacyRules) GetRules() []*PrivacyRule  { return m.Data2.Rules }

func (m *TLAccountPrivacyRules) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLAccountPrivacyRules) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLAccountPrivacyRules) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountPrivacyRules) GetUsers() []*User  { return m.Data2.Users }

func (m *TLAccountPrivacyRules) GetPredicateName() string {
	return Predicate_account_privacyRules
}

func (m *TLAccountPrivacyRules) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x50a04e45: func() []byte {
			x.UInt(0x50a04e45)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRules())))
			for _, v := range m.GetRules() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_privacyRules, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_privacyRules, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountPrivacyRules) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountPrivacyRules) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x50a04e45: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*PrivacyRule, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &PrivacyRule{}
				v0[i].Decode(dBuf)
			}
			m.SetRules(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountPrivacyRules) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipants <--
//  + TL_ChannelsChannelParticipants
//  + TL_ChannelsChannelParticipantsNotModified
//

func (m *Channels_ChannelParticipants) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channels_channelParticipants:
		t := m.To_ChannelsChannelParticipants()
		xBuf = t.Encode(layer)
	case Predicate_channels_channelParticipantsNotModified:
		t := m.To_ChannelsChannelParticipantsNotModified()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Channels_ChannelParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *Channels_ChannelParticipants) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9ab0feaf:
		m2 := MakeTLChannelsChannelParticipants(m)
		m2.Decode(dBuf)
	case 0xf0173fe9:
		m2 := MakeTLChannelsChannelParticipantsNotModified(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Channels_ChannelParticipants) DebugString() string {
	switch m.PredicateName {
	case Predicate_channels_channelParticipants:
		t := m.To_ChannelsChannelParticipants()
		return t.DebugString()
	case Predicate_channels_channelParticipantsNotModified:
		t := m.To_ChannelsChannelParticipantsNotModified()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelsChannelParticipants
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipants() *TLChannelsChannelParticipants {
	m.PredicateName = Predicate_channels_channelParticipants
	return &TLChannelsChannelParticipants{
		Data2: m,
	}
}

// To_ChannelsChannelParticipantsNotModified
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipantsNotModified() *TLChannelsChannelParticipantsNotModified {
	m.PredicateName = Predicate_channels_channelParticipantsNotModified
	return &TLChannelsChannelParticipantsNotModified{
		Data2: m,
	}
}

// MakeTLChannelsChannelParticipants
func MakeTLChannelsChannelParticipants(data2 *Channels_ChannelParticipants) *TLChannelsChannelParticipants {
	if data2 == nil {
		return &TLChannelsChannelParticipants{Data2: &Channels_ChannelParticipants{
			PredicateName: Predicate_channels_channelParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_channels_channelParticipants
		return &TLChannelsChannelParticipants{Data2: data2}
	}
}

func (m *TLChannelsChannelParticipants) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
	m.Data2.PredicateName = Predicate_channels_channelParticipants
	return m.Data2
}

func (m *TLChannelsChannelParticipants) SetCount(v int32) { m.Data2.Count = v }
func (m *TLChannelsChannelParticipants) GetCount() int32  { return m.Data2.Count }

func (m *TLChannelsChannelParticipants) SetParticipants(v []*ChannelParticipant) {
	m.Data2.Participants = v
}
func (m *TLChannelsChannelParticipants) GetParticipants() []*ChannelParticipant {
	return m.Data2.Participants
}

func (m *TLChannelsChannelParticipants) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsChannelParticipants) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLChannelsChannelParticipants) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipants) GetUsers() []*User  { return m.Data2.Users }

func (m *TLChannelsChannelParticipants) GetPredicateName() string {
	return Predicate_channels_channelParticipants
}

func (m *TLChannelsChannelParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9ab0feaf: func() []byte {
			x.UInt(0x9ab0feaf)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetParticipants())))
			for _, v := range m.GetParticipants() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channels_channelParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channels_channelParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelsChannelParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsChannelParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9ab0feaf: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*ChannelParticipant, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &ChannelParticipant{}
				v1[i].Decode(dBuf)
			}
			m.SetParticipants(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Chat, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Chat{}
				v2[i].Decode(dBuf)
			}
			m.SetChats(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelsChannelParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelsChannelParticipantsNotModified
func MakeTLChannelsChannelParticipantsNotModified(data2 *Channels_ChannelParticipants) *TLChannelsChannelParticipantsNotModified {
	if data2 == nil {
		return &TLChannelsChannelParticipantsNotModified{Data2: &Channels_ChannelParticipants{
			PredicateName: Predicate_channels_channelParticipantsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_channels_channelParticipantsNotModified
		return &TLChannelsChannelParticipantsNotModified{Data2: data2}
	}
}

func (m *TLChannelsChannelParticipantsNotModified) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
	m.Data2.PredicateName = Predicate_channels_channelParticipantsNotModified
	return m.Data2
}

func (m *TLChannelsChannelParticipantsNotModified) GetPredicateName() string {
	return Predicate_channels_channelParticipantsNotModified
}

func (m *TLChannelsChannelParticipantsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf0173fe9: func() []byte {
			x.UInt(0xf0173fe9)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channels_channelParticipantsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channels_channelParticipantsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelsChannelParticipantsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsChannelParticipantsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf0173fe9: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelsChannelParticipantsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SavedGifs <--
//  + TL_MessagesSavedGifsNotModified
//  + TL_MessagesSavedGifs
//

func (m *Messages_SavedGifs) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_savedGifsNotModified:
		t := m.To_MessagesSavedGifsNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_savedGifs:
		t := m.To_MessagesSavedGifs()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SavedGifs) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SavedGifs) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe8025ca2:
		m2 := MakeTLMessagesSavedGifsNotModified(m)
		m2.Decode(dBuf)
	case 0x84a02a0d:
		m2 := MakeTLMessagesSavedGifs(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SavedGifs) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_savedGifsNotModified:
		t := m.To_MessagesSavedGifsNotModified()
		return t.DebugString()
	case Predicate_messages_savedGifs:
		t := m.To_MessagesSavedGifs()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSavedGifsNotModified
func (m *Messages_SavedGifs) To_MessagesSavedGifsNotModified() *TLMessagesSavedGifsNotModified {
	m.PredicateName = Predicate_messages_savedGifsNotModified
	return &TLMessagesSavedGifsNotModified{
		Data2: m,
	}
}

// To_MessagesSavedGifs
func (m *Messages_SavedGifs) To_MessagesSavedGifs() *TLMessagesSavedGifs {
	m.PredicateName = Predicate_messages_savedGifs
	return &TLMessagesSavedGifs{
		Data2: m,
	}
}

// MakeTLMessagesSavedGifsNotModified
func MakeTLMessagesSavedGifsNotModified(data2 *Messages_SavedGifs) *TLMessagesSavedGifsNotModified {
	if data2 == nil {
		return &TLMessagesSavedGifsNotModified{Data2: &Messages_SavedGifs{
			PredicateName: Predicate_messages_savedGifsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_savedGifsNotModified
		return &TLMessagesSavedGifsNotModified{Data2: data2}
	}
}

func (m *TLMessagesSavedGifsNotModified) To_Messages_SavedGifs() *Messages_SavedGifs {
	m.Data2.PredicateName = Predicate_messages_savedGifsNotModified
	return m.Data2
}

func (m *TLMessagesSavedGifsNotModified) GetPredicateName() string {
	return Predicate_messages_savedGifsNotModified
}

func (m *TLMessagesSavedGifsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe8025ca2: func() []byte {
			x.UInt(0xe8025ca2)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_savedGifsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_savedGifsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSavedGifsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSavedGifsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe8025ca2: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSavedGifsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesSavedGifs
func MakeTLMessagesSavedGifs(data2 *Messages_SavedGifs) *TLMessagesSavedGifs {
	if data2 == nil {
		return &TLMessagesSavedGifs{Data2: &Messages_SavedGifs{
			PredicateName: Predicate_messages_savedGifs,
		}}
	} else {
		data2.PredicateName = Predicate_messages_savedGifs
		return &TLMessagesSavedGifs{Data2: data2}
	}
}

func (m *TLMessagesSavedGifs) To_Messages_SavedGifs() *Messages_SavedGifs {
	m.Data2.PredicateName = Predicate_messages_savedGifs
	return m.Data2
}

func (m *TLMessagesSavedGifs) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesSavedGifs) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesSavedGifs) SetGifs(v []*Document) { m.Data2.Gifs = v }
func (m *TLMessagesSavedGifs) GetGifs() []*Document  { return m.Data2.Gifs }

func (m *TLMessagesSavedGifs) GetPredicateName() string {
	return Predicate_messages_savedGifs
}

func (m *TLMessagesSavedGifs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x84a02a0d: func() []byte {
			x.UInt(0x84a02a0d)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetGifs())))
			for _, v := range m.GetGifs() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_savedGifs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_savedGifs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSavedGifs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSavedGifs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x84a02a0d: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Document, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Document{}
				v1[i].Decode(dBuf)
			}
			m.SetGifs(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSavedGifs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_CodeType <--
//  + TL_AuthCodeTypeSms
//  + TL_AuthCodeTypeCall
//  + TL_AuthCodeTypeFlashCall
//  + TL_AuthCodeTypeMissedCall
//

func (m *Auth_CodeType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_codeTypeSms:
		t := m.To_AuthCodeTypeSms()
		xBuf = t.Encode(layer)
	case Predicate_auth_codeTypeCall:
		t := m.To_AuthCodeTypeCall()
		xBuf = t.Encode(layer)
	case Predicate_auth_codeTypeFlashCall:
		t := m.To_AuthCodeTypeFlashCall()
		xBuf = t.Encode(layer)
	case Predicate_auth_codeTypeMissedCall:
		t := m.To_AuthCodeTypeMissedCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_CodeType) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_CodeType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x72a3158c:
		m2 := MakeTLAuthCodeTypeSms(m)
		m2.Decode(dBuf)
	case 0x741cd3e3:
		m2 := MakeTLAuthCodeTypeCall(m)
		m2.Decode(dBuf)
	case 0x226ccefb:
		m2 := MakeTLAuthCodeTypeFlashCall(m)
		m2.Decode(dBuf)
	case 0xd61ad6ee:
		m2 := MakeTLAuthCodeTypeMissedCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_CodeType) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_codeTypeSms:
		t := m.To_AuthCodeTypeSms()
		return t.DebugString()
	case Predicate_auth_codeTypeCall:
		t := m.To_AuthCodeTypeCall()
		return t.DebugString()
	case Predicate_auth_codeTypeFlashCall:
		t := m.To_AuthCodeTypeFlashCall()
		return t.DebugString()
	case Predicate_auth_codeTypeMissedCall:
		t := m.To_AuthCodeTypeMissedCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthCodeTypeSms
func (m *Auth_CodeType) To_AuthCodeTypeSms() *TLAuthCodeTypeSms {
	m.PredicateName = Predicate_auth_codeTypeSms
	return &TLAuthCodeTypeSms{
		Data2: m,
	}
}

// To_AuthCodeTypeCall
func (m *Auth_CodeType) To_AuthCodeTypeCall() *TLAuthCodeTypeCall {
	m.PredicateName = Predicate_auth_codeTypeCall
	return &TLAuthCodeTypeCall{
		Data2: m,
	}
}

// To_AuthCodeTypeFlashCall
func (m *Auth_CodeType) To_AuthCodeTypeFlashCall() *TLAuthCodeTypeFlashCall {
	m.PredicateName = Predicate_auth_codeTypeFlashCall
	return &TLAuthCodeTypeFlashCall{
		Data2: m,
	}
}

// To_AuthCodeTypeMissedCall
func (m *Auth_CodeType) To_AuthCodeTypeMissedCall() *TLAuthCodeTypeMissedCall {
	m.PredicateName = Predicate_auth_codeTypeMissedCall
	return &TLAuthCodeTypeMissedCall{
		Data2: m,
	}
}

// MakeTLAuthCodeTypeSms
func MakeTLAuthCodeTypeSms(data2 *Auth_CodeType) *TLAuthCodeTypeSms {
	if data2 == nil {
		return &TLAuthCodeTypeSms{Data2: &Auth_CodeType{
			PredicateName: Predicate_auth_codeTypeSms,
		}}
	} else {
		data2.PredicateName = Predicate_auth_codeTypeSms
		return &TLAuthCodeTypeSms{Data2: data2}
	}
}

func (m *TLAuthCodeTypeSms) To_Auth_CodeType() *Auth_CodeType {
	m.Data2.PredicateName = Predicate_auth_codeTypeSms
	return m.Data2
}

func (m *TLAuthCodeTypeSms) GetPredicateName() string {
	return Predicate_auth_codeTypeSms
}

func (m *TLAuthCodeTypeSms) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x72a3158c: func() []byte {
			x.UInt(0x72a3158c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_codeTypeSms, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_codeTypeSms, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthCodeTypeSms) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCodeTypeSms) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x72a3158c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthCodeTypeSms) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthCodeTypeCall
func MakeTLAuthCodeTypeCall(data2 *Auth_CodeType) *TLAuthCodeTypeCall {
	if data2 == nil {
		return &TLAuthCodeTypeCall{Data2: &Auth_CodeType{
			PredicateName: Predicate_auth_codeTypeCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_codeTypeCall
		return &TLAuthCodeTypeCall{Data2: data2}
	}
}

func (m *TLAuthCodeTypeCall) To_Auth_CodeType() *Auth_CodeType {
	m.Data2.PredicateName = Predicate_auth_codeTypeCall
	return m.Data2
}

func (m *TLAuthCodeTypeCall) GetPredicateName() string {
	return Predicate_auth_codeTypeCall
}

func (m *TLAuthCodeTypeCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x741cd3e3: func() []byte {
			x.UInt(0x741cd3e3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_codeTypeCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_codeTypeCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthCodeTypeCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCodeTypeCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x741cd3e3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthCodeTypeCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthCodeTypeFlashCall
func MakeTLAuthCodeTypeFlashCall(data2 *Auth_CodeType) *TLAuthCodeTypeFlashCall {
	if data2 == nil {
		return &TLAuthCodeTypeFlashCall{Data2: &Auth_CodeType{
			PredicateName: Predicate_auth_codeTypeFlashCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_codeTypeFlashCall
		return &TLAuthCodeTypeFlashCall{Data2: data2}
	}
}

func (m *TLAuthCodeTypeFlashCall) To_Auth_CodeType() *Auth_CodeType {
	m.Data2.PredicateName = Predicate_auth_codeTypeFlashCall
	return m.Data2
}

func (m *TLAuthCodeTypeFlashCall) GetPredicateName() string {
	return Predicate_auth_codeTypeFlashCall
}

func (m *TLAuthCodeTypeFlashCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x226ccefb: func() []byte {
			x.UInt(0x226ccefb)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_codeTypeFlashCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_codeTypeFlashCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthCodeTypeFlashCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCodeTypeFlashCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x226ccefb: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthCodeTypeFlashCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthCodeTypeMissedCall
func MakeTLAuthCodeTypeMissedCall(data2 *Auth_CodeType) *TLAuthCodeTypeMissedCall {
	if data2 == nil {
		return &TLAuthCodeTypeMissedCall{Data2: &Auth_CodeType{
			PredicateName: Predicate_auth_codeTypeMissedCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_codeTypeMissedCall
		return &TLAuthCodeTypeMissedCall{Data2: data2}
	}
}

func (m *TLAuthCodeTypeMissedCall) To_Auth_CodeType() *Auth_CodeType {
	m.Data2.PredicateName = Predicate_auth_codeTypeMissedCall
	return m.Data2
}

func (m *TLAuthCodeTypeMissedCall) GetPredicateName() string {
	return Predicate_auth_codeTypeMissedCall
}

func (m *TLAuthCodeTypeMissedCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd61ad6ee: func() []byte {
			x.UInt(0xd61ad6ee)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_codeTypeMissedCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_codeTypeMissedCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthCodeTypeMissedCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCodeTypeMissedCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd61ad6ee: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthCodeTypeMissedCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MaskCoords <--
//  + TL_MaskCoords
//

func (m *MaskCoords) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_maskCoords:
		t := m.To_MaskCoords()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MaskCoords) CalcByteSize(layer int32) int {
	return 0
}

func (m *MaskCoords) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xaed6dbb2:
		m2 := MakeTLMaskCoords(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MaskCoords) DebugString() string {
	switch m.PredicateName {
	case Predicate_maskCoords:
		t := m.To_MaskCoords()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MaskCoords
func (m *MaskCoords) To_MaskCoords() *TLMaskCoords {
	m.PredicateName = Predicate_maskCoords
	return &TLMaskCoords{
		Data2: m,
	}
}

// MakeTLMaskCoords
func MakeTLMaskCoords(data2 *MaskCoords) *TLMaskCoords {
	if data2 == nil {
		return &TLMaskCoords{Data2: &MaskCoords{
			PredicateName: Predicate_maskCoords,
		}}
	} else {
		data2.PredicateName = Predicate_maskCoords
		return &TLMaskCoords{Data2: data2}
	}
}

func (m *TLMaskCoords) To_MaskCoords() *MaskCoords {
	m.Data2.PredicateName = Predicate_maskCoords
	return m.Data2
}

func (m *TLMaskCoords) SetN(v int32) { m.Data2.N = v }
func (m *TLMaskCoords) GetN() int32  { return m.Data2.N }

func (m *TLMaskCoords) SetX(v float64) { m.Data2.X = v }
func (m *TLMaskCoords) GetX() float64  { return m.Data2.X }

func (m *TLMaskCoords) SetY(v float64) { m.Data2.Y = v }
func (m *TLMaskCoords) GetY() float64  { return m.Data2.Y }

func (m *TLMaskCoords) SetZoom(v float64) { m.Data2.Zoom = v }
func (m *TLMaskCoords) GetZoom() float64  { return m.Data2.Zoom }

func (m *TLMaskCoords) GetPredicateName() string {
	return Predicate_maskCoords
}

func (m *TLMaskCoords) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaed6dbb2: func() []byte {
			x.UInt(0xaed6dbb2)

			x.Int(m.GetN())
			x.Double(m.GetX())
			x.Double(m.GetY())
			x.Double(m.GetZoom())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_maskCoords, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_maskCoords, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMaskCoords) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMaskCoords) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaed6dbb2: func() error {
			m.SetN(dBuf.Int())
			m.SetX(dBuf.Double())
			m.SetY(dBuf.Double())
			m.SetZoom(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMaskCoords) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_PasswordRecovery <--
//  + TL_AuthPasswordRecovery
//

func (m *Auth_PasswordRecovery) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_passwordRecovery:
		t := m.To_AuthPasswordRecovery()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_PasswordRecovery) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_PasswordRecovery) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x137948a5:
		m2 := MakeTLAuthPasswordRecovery(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_PasswordRecovery) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_passwordRecovery:
		t := m.To_AuthPasswordRecovery()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthPasswordRecovery
func (m *Auth_PasswordRecovery) To_AuthPasswordRecovery() *TLAuthPasswordRecovery {
	m.PredicateName = Predicate_auth_passwordRecovery
	return &TLAuthPasswordRecovery{
		Data2: m,
	}
}

// MakeTLAuthPasswordRecovery
func MakeTLAuthPasswordRecovery(data2 *Auth_PasswordRecovery) *TLAuthPasswordRecovery {
	if data2 == nil {
		return &TLAuthPasswordRecovery{Data2: &Auth_PasswordRecovery{
			PredicateName: Predicate_auth_passwordRecovery,
		}}
	} else {
		data2.PredicateName = Predicate_auth_passwordRecovery
		return &TLAuthPasswordRecovery{Data2: data2}
	}
}

func (m *TLAuthPasswordRecovery) To_Auth_PasswordRecovery() *Auth_PasswordRecovery {
	m.Data2.PredicateName = Predicate_auth_passwordRecovery
	return m.Data2
}

func (m *TLAuthPasswordRecovery) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAuthPasswordRecovery) GetEmailPattern() string  { return m.Data2.EmailPattern }

func (m *TLAuthPasswordRecovery) GetPredicateName() string {
	return Predicate_auth_passwordRecovery
}

func (m *TLAuthPasswordRecovery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x137948a5: func() []byte {
			x.UInt(0x137948a5)

			x.String(m.GetEmailPattern())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_passwordRecovery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_passwordRecovery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthPasswordRecovery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthPasswordRecovery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x137948a5: func() error {
			m.SetEmailPattern(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthPasswordRecovery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Channels_AdminLogResults <--
//  + TL_ChannelsAdminLogResults
//

func (m *Channels_AdminLogResults) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channels_adminLogResults:
		t := m.To_ChannelsAdminLogResults()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Channels_AdminLogResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *Channels_AdminLogResults) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xed8af74d:
		m2 := MakeTLChannelsAdminLogResults(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Channels_AdminLogResults) DebugString() string {
	switch m.PredicateName {
	case Predicate_channels_adminLogResults:
		t := m.To_ChannelsAdminLogResults()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelsAdminLogResults
func (m *Channels_AdminLogResults) To_ChannelsAdminLogResults() *TLChannelsAdminLogResults {
	m.PredicateName = Predicate_channels_adminLogResults
	return &TLChannelsAdminLogResults{
		Data2: m,
	}
}

// MakeTLChannelsAdminLogResults
func MakeTLChannelsAdminLogResults(data2 *Channels_AdminLogResults) *TLChannelsAdminLogResults {
	if data2 == nil {
		return &TLChannelsAdminLogResults{Data2: &Channels_AdminLogResults{
			PredicateName: Predicate_channels_adminLogResults,
		}}
	} else {
		data2.PredicateName = Predicate_channels_adminLogResults
		return &TLChannelsAdminLogResults{Data2: data2}
	}
}

func (m *TLChannelsAdminLogResults) To_Channels_AdminLogResults() *Channels_AdminLogResults {
	m.Data2.PredicateName = Predicate_channels_adminLogResults
	return m.Data2
}

func (m *TLChannelsAdminLogResults) SetEvents(v []*ChannelAdminLogEvent) { m.Data2.Events = v }
func (m *TLChannelsAdminLogResults) GetEvents() []*ChannelAdminLogEvent  { return m.Data2.Events }

func (m *TLChannelsAdminLogResults) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsAdminLogResults) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLChannelsAdminLogResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsAdminLogResults) GetUsers() []*User  { return m.Data2.Users }

func (m *TLChannelsAdminLogResults) GetPredicateName() string {
	return Predicate_channels_adminLogResults
}

func (m *TLChannelsAdminLogResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed8af74d: func() []byte {
			x.UInt(0xed8af74d)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEvents())))
			for _, v := range m.GetEvents() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channels_adminLogResults, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channels_adminLogResults, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelsAdminLogResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsAdminLogResults) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed8af74d: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*ChannelAdminLogEvent, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &ChannelAdminLogEvent{}
				v0[i].Decode(dBuf)
			}
			m.SetEvents(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelsAdminLogResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputCheckPasswordSRP <--
//  + TL_InputCheckPasswordEmpty
//  + TL_InputCheckPasswordSRP
//

func (m *InputCheckPasswordSRP) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputCheckPasswordEmpty:
		t := m.To_InputCheckPasswordEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputCheckPasswordSRP:
		t := m.To_InputCheckPasswordSRP()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputCheckPasswordSRP) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputCheckPasswordSRP) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9880f658:
		m2 := MakeTLInputCheckPasswordEmpty(m)
		m2.Decode(dBuf)
	case 0xd27ff082:
		m2 := MakeTLInputCheckPasswordSRP(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputCheckPasswordSRP) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputCheckPasswordEmpty:
		t := m.To_InputCheckPasswordEmpty()
		return t.DebugString()
	case Predicate_inputCheckPasswordSRP:
		t := m.To_InputCheckPasswordSRP()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputCheckPasswordEmpty
func (m *InputCheckPasswordSRP) To_InputCheckPasswordEmpty() *TLInputCheckPasswordEmpty {
	m.PredicateName = Predicate_inputCheckPasswordEmpty
	return &TLInputCheckPasswordEmpty{
		Data2: m,
	}
}

// To_InputCheckPasswordSRP
func (m *InputCheckPasswordSRP) To_InputCheckPasswordSRP() *TLInputCheckPasswordSRP {
	m.PredicateName = Predicate_inputCheckPasswordSRP
	return &TLInputCheckPasswordSRP{
		Data2: m,
	}
}

// MakeTLInputCheckPasswordEmpty
func MakeTLInputCheckPasswordEmpty(data2 *InputCheckPasswordSRP) *TLInputCheckPasswordEmpty {
	if data2 == nil {
		return &TLInputCheckPasswordEmpty{Data2: &InputCheckPasswordSRP{
			PredicateName: Predicate_inputCheckPasswordEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputCheckPasswordEmpty
		return &TLInputCheckPasswordEmpty{Data2: data2}
	}
}

func (m *TLInputCheckPasswordEmpty) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
	m.Data2.PredicateName = Predicate_inputCheckPasswordEmpty
	return m.Data2
}

func (m *TLInputCheckPasswordEmpty) GetPredicateName() string {
	return Predicate_inputCheckPasswordEmpty
}

func (m *TLInputCheckPasswordEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9880f658: func() []byte {
			x.UInt(0x9880f658)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputCheckPasswordEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputCheckPasswordEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputCheckPasswordEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputCheckPasswordEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9880f658: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputCheckPasswordEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputCheckPasswordSRP
func MakeTLInputCheckPasswordSRP(data2 *InputCheckPasswordSRP) *TLInputCheckPasswordSRP {
	if data2 == nil {
		return &TLInputCheckPasswordSRP{Data2: &InputCheckPasswordSRP{
			PredicateName: Predicate_inputCheckPasswordSRP,
		}}
	} else {
		data2.PredicateName = Predicate_inputCheckPasswordSRP
		return &TLInputCheckPasswordSRP{Data2: data2}
	}
}

func (m *TLInputCheckPasswordSRP) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
	m.Data2.PredicateName = Predicate_inputCheckPasswordSRP
	return m.Data2
}

func (m *TLInputCheckPasswordSRP) SetSrpId(v int64) { m.Data2.SrpId = v }
func (m *TLInputCheckPasswordSRP) GetSrpId() int64  { return m.Data2.SrpId }

func (m *TLInputCheckPasswordSRP) SetA(v []byte) { m.Data2.A = v }
func (m *TLInputCheckPasswordSRP) GetA() []byte  { return m.Data2.A }

func (m *TLInputCheckPasswordSRP) SetM1(v []byte) { m.Data2.M1 = v }
func (m *TLInputCheckPasswordSRP) GetM1() []byte  { return m.Data2.M1 }

func (m *TLInputCheckPasswordSRP) GetPredicateName() string {
	return Predicate_inputCheckPasswordSRP
}

func (m *TLInputCheckPasswordSRP) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd27ff082: func() []byte {
			x.UInt(0xd27ff082)

			x.Long(m.GetSrpId())
			x.StringBytes(m.GetA())
			x.StringBytes(m.GetM1())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputCheckPasswordSRP, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputCheckPasswordSRP, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputCheckPasswordSRP) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputCheckPasswordSRP) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd27ff082: func() error {
			m.SetSrpId(dBuf.Long())
			m.SetA(dBuf.StringBytes())
			m.SetM1(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputCheckPasswordSRP) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// UpdateList <--
//  + TL_UpdateList
//

func (m *UpdateList) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updateList:
		t := m.To_UpdateList()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *UpdateList) CalcByteSize(layer int32) int {
	return 0
}

func (m *UpdateList) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9014a0a2:
		m2 := MakeTLUpdateList(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *UpdateList) DebugString() string {
	switch m.PredicateName {
	case Predicate_updateList:
		t := m.To_UpdateList()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdateList
func (m *UpdateList) To_UpdateList() *TLUpdateList {
	m.PredicateName = Predicate_updateList
	return &TLUpdateList{
		Data2: m,
	}
}

// MakeTLUpdateList
func MakeTLUpdateList(data2 *UpdateList) *TLUpdateList {
	if data2 == nil {
		return &TLUpdateList{Data2: &UpdateList{
			PredicateName: Predicate_updateList,
		}}
	} else {
		data2.PredicateName = Predicate_updateList
		return &TLUpdateList{Data2: data2}
	}
}

func (m *TLUpdateList) To_UpdateList() *UpdateList {
	m.Data2.PredicateName = Predicate_updateList
	return m.Data2
}

func (m *TLUpdateList) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdateList) GetUpdates() []*Update  { return m.Data2.Updates }

func (m *TLUpdateList) GetPredicateName() string {
	return Predicate_updateList
}

func (m *TLUpdateList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9014a0a2: func() []byte {
			x.UInt(0x9014a0a2)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUpdates())))
			for _, v := range m.GetUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9014a0a2: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Update, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Update{}
				v0[i].Decode(dBuf)
			}
			m.SetUpdates(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageEntity <--
//  + TL_MessageEntityUnknown
//  + TL_MessageEntityMention
//  + TL_MessageEntityHashtag
//  + TL_MessageEntityBotCommand
//  + TL_MessageEntityUrl
//  + TL_MessageEntityEmail
//  + TL_MessageEntityBold
//  + TL_MessageEntityItalic
//  + TL_MessageEntityCode
//  + TL_MessageEntityPre
//  + TL_MessageEntityTextUrl
//  + TL_MessageEntityMentionName
//  + TL_InputMessageEntityMentionName
//  + TL_MessageEntityPhone
//  + TL_MessageEntityCashtag
//  + TL_MessageEntityUnderline
//  + TL_MessageEntityStrike
//  + TL_MessageEntityBlockquote
//  + TL_MessageEntityBankCard
//  + TL_MessageEntitySpoiler
//

func (m *MessageEntity) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageEntityUnknown:
		t := m.To_MessageEntityUnknown()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityMention:
		t := m.To_MessageEntityMention()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityHashtag:
		t := m.To_MessageEntityHashtag()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityBotCommand:
		t := m.To_MessageEntityBotCommand()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityUrl:
		t := m.To_MessageEntityUrl()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityEmail:
		t := m.To_MessageEntityEmail()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityBold:
		t := m.To_MessageEntityBold()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityItalic:
		t := m.To_MessageEntityItalic()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityCode:
		t := m.To_MessageEntityCode()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityPre:
		t := m.To_MessageEntityPre()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityTextUrl:
		t := m.To_MessageEntityTextUrl()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityMentionName:
		t := m.To_MessageEntityMentionName()
		xBuf = t.Encode(layer)
	case Predicate_inputMessageEntityMentionName:
		t := m.To_InputMessageEntityMentionName()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityPhone:
		t := m.To_MessageEntityPhone()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityCashtag:
		t := m.To_MessageEntityCashtag()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityUnderline:
		t := m.To_MessageEntityUnderline()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityStrike:
		t := m.To_MessageEntityStrike()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityBlockquote:
		t := m.To_MessageEntityBlockquote()
		xBuf = t.Encode(layer)
	case Predicate_messageEntityBankCard:
		t := m.To_MessageEntityBankCard()
		xBuf = t.Encode(layer)
	case Predicate_messageEntitySpoiler:
		t := m.To_MessageEntitySpoiler()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageEntity) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageEntity) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbb92ba95:
		m2 := MakeTLMessageEntityUnknown(m)
		m2.Decode(dBuf)
	case 0xfa04579d:
		m2 := MakeTLMessageEntityMention(m)
		m2.Decode(dBuf)
	case 0x6f635b0d:
		m2 := MakeTLMessageEntityHashtag(m)
		m2.Decode(dBuf)
	case 0x6cef8ac7:
		m2 := MakeTLMessageEntityBotCommand(m)
		m2.Decode(dBuf)
	case 0x6ed02538:
		m2 := MakeTLMessageEntityUrl(m)
		m2.Decode(dBuf)
	case 0x64e475c2:
		m2 := MakeTLMessageEntityEmail(m)
		m2.Decode(dBuf)
	case 0xbd610bc9:
		m2 := MakeTLMessageEntityBold(m)
		m2.Decode(dBuf)
	case 0x826f8b60:
		m2 := MakeTLMessageEntityItalic(m)
		m2.Decode(dBuf)
	case 0x28a20571:
		m2 := MakeTLMessageEntityCode(m)
		m2.Decode(dBuf)
	case 0x73924be0:
		m2 := MakeTLMessageEntityPre(m)
		m2.Decode(dBuf)
	case 0x76a6d327:
		m2 := MakeTLMessageEntityTextUrl(m)
		m2.Decode(dBuf)
	case 0xdc7b1140:
		m2 := MakeTLMessageEntityMentionName(m)
		m2.Decode(dBuf)
	case 0x208e68c9:
		m2 := MakeTLInputMessageEntityMentionName(m)
		m2.Decode(dBuf)
	case 0x9b69e34b:
		m2 := MakeTLMessageEntityPhone(m)
		m2.Decode(dBuf)
	case 0x4c4e743f:
		m2 := MakeTLMessageEntityCashtag(m)
		m2.Decode(dBuf)
	case 0x9c4e7e8b:
		m2 := MakeTLMessageEntityUnderline(m)
		m2.Decode(dBuf)
	case 0xbf0693d4:
		m2 := MakeTLMessageEntityStrike(m)
		m2.Decode(dBuf)
	case 0x20df5d0:
		m2 := MakeTLMessageEntityBlockquote(m)
		m2.Decode(dBuf)
	case 0x761e6af4:
		m2 := MakeTLMessageEntityBankCard(m)
		m2.Decode(dBuf)
	case 0x32ca960f:
		m2 := MakeTLMessageEntitySpoiler(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageEntity) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageEntityUnknown:
		t := m.To_MessageEntityUnknown()
		return t.DebugString()
	case Predicate_messageEntityMention:
		t := m.To_MessageEntityMention()
		return t.DebugString()
	case Predicate_messageEntityHashtag:
		t := m.To_MessageEntityHashtag()
		return t.DebugString()
	case Predicate_messageEntityBotCommand:
		t := m.To_MessageEntityBotCommand()
		return t.DebugString()
	case Predicate_messageEntityUrl:
		t := m.To_MessageEntityUrl()
		return t.DebugString()
	case Predicate_messageEntityEmail:
		t := m.To_MessageEntityEmail()
		return t.DebugString()
	case Predicate_messageEntityBold:
		t := m.To_MessageEntityBold()
		return t.DebugString()
	case Predicate_messageEntityItalic:
		t := m.To_MessageEntityItalic()
		return t.DebugString()
	case Predicate_messageEntityCode:
		t := m.To_MessageEntityCode()
		return t.DebugString()
	case Predicate_messageEntityPre:
		t := m.To_MessageEntityPre()
		return t.DebugString()
	case Predicate_messageEntityTextUrl:
		t := m.To_MessageEntityTextUrl()
		return t.DebugString()
	case Predicate_messageEntityMentionName:
		t := m.To_MessageEntityMentionName()
		return t.DebugString()
	case Predicate_inputMessageEntityMentionName:
		t := m.To_InputMessageEntityMentionName()
		return t.DebugString()
	case Predicate_messageEntityPhone:
		t := m.To_MessageEntityPhone()
		return t.DebugString()
	case Predicate_messageEntityCashtag:
		t := m.To_MessageEntityCashtag()
		return t.DebugString()
	case Predicate_messageEntityUnderline:
		t := m.To_MessageEntityUnderline()
		return t.DebugString()
	case Predicate_messageEntityStrike:
		t := m.To_MessageEntityStrike()
		return t.DebugString()
	case Predicate_messageEntityBlockquote:
		t := m.To_MessageEntityBlockquote()
		return t.DebugString()
	case Predicate_messageEntityBankCard:
		t := m.To_MessageEntityBankCard()
		return t.DebugString()
	case Predicate_messageEntitySpoiler:
		t := m.To_MessageEntitySpoiler()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageEntityUnknown
func (m *MessageEntity) To_MessageEntityUnknown() *TLMessageEntityUnknown {
	m.PredicateName = Predicate_messageEntityUnknown
	return &TLMessageEntityUnknown{
		Data2: m,
	}
}

// To_MessageEntityMention
func (m *MessageEntity) To_MessageEntityMention() *TLMessageEntityMention {
	m.PredicateName = Predicate_messageEntityMention
	return &TLMessageEntityMention{
		Data2: m,
	}
}

// To_MessageEntityHashtag
func (m *MessageEntity) To_MessageEntityHashtag() *TLMessageEntityHashtag {
	m.PredicateName = Predicate_messageEntityHashtag
	return &TLMessageEntityHashtag{
		Data2: m,
	}
}

// To_MessageEntityBotCommand
func (m *MessageEntity) To_MessageEntityBotCommand() *TLMessageEntityBotCommand {
	m.PredicateName = Predicate_messageEntityBotCommand
	return &TLMessageEntityBotCommand{
		Data2: m,
	}
}

// To_MessageEntityUrl
func (m *MessageEntity) To_MessageEntityUrl() *TLMessageEntityUrl {
	m.PredicateName = Predicate_messageEntityUrl
	return &TLMessageEntityUrl{
		Data2: m,
	}
}

// To_MessageEntityEmail
func (m *MessageEntity) To_MessageEntityEmail() *TLMessageEntityEmail {
	m.PredicateName = Predicate_messageEntityEmail
	return &TLMessageEntityEmail{
		Data2: m,
	}
}

// To_MessageEntityBold
func (m *MessageEntity) To_MessageEntityBold() *TLMessageEntityBold {
	m.PredicateName = Predicate_messageEntityBold
	return &TLMessageEntityBold{
		Data2: m,
	}
}

// To_MessageEntityItalic
func (m *MessageEntity) To_MessageEntityItalic() *TLMessageEntityItalic {
	m.PredicateName = Predicate_messageEntityItalic
	return &TLMessageEntityItalic{
		Data2: m,
	}
}

// To_MessageEntityCode
func (m *MessageEntity) To_MessageEntityCode() *TLMessageEntityCode {
	m.PredicateName = Predicate_messageEntityCode
	return &TLMessageEntityCode{
		Data2: m,
	}
}

// To_MessageEntityPre
func (m *MessageEntity) To_MessageEntityPre() *TLMessageEntityPre {
	m.PredicateName = Predicate_messageEntityPre
	return &TLMessageEntityPre{
		Data2: m,
	}
}

// To_MessageEntityTextUrl
func (m *MessageEntity) To_MessageEntityTextUrl() *TLMessageEntityTextUrl {
	m.PredicateName = Predicate_messageEntityTextUrl
	return &TLMessageEntityTextUrl{
		Data2: m,
	}
}

// To_MessageEntityMentionName
func (m *MessageEntity) To_MessageEntityMentionName() *TLMessageEntityMentionName {
	m.PredicateName = Predicate_messageEntityMentionName
	return &TLMessageEntityMentionName{
		Data2: m,
	}
}

// To_InputMessageEntityMentionName
func (m *MessageEntity) To_InputMessageEntityMentionName() *TLInputMessageEntityMentionName {
	m.PredicateName = Predicate_inputMessageEntityMentionName
	return &TLInputMessageEntityMentionName{
		Data2: m,
	}
}

// To_MessageEntityPhone
func (m *MessageEntity) To_MessageEntityPhone() *TLMessageEntityPhone {
	m.PredicateName = Predicate_messageEntityPhone
	return &TLMessageEntityPhone{
		Data2: m,
	}
}

// To_MessageEntityCashtag
func (m *MessageEntity) To_MessageEntityCashtag() *TLMessageEntityCashtag {
	m.PredicateName = Predicate_messageEntityCashtag
	return &TLMessageEntityCashtag{
		Data2: m,
	}
}

// To_MessageEntityUnderline
func (m *MessageEntity) To_MessageEntityUnderline() *TLMessageEntityUnderline {
	m.PredicateName = Predicate_messageEntityUnderline
	return &TLMessageEntityUnderline{
		Data2: m,
	}
}

// To_MessageEntityStrike
func (m *MessageEntity) To_MessageEntityStrike() *TLMessageEntityStrike {
	m.PredicateName = Predicate_messageEntityStrike
	return &TLMessageEntityStrike{
		Data2: m,
	}
}

// To_MessageEntityBlockquote
func (m *MessageEntity) To_MessageEntityBlockquote() *TLMessageEntityBlockquote {
	m.PredicateName = Predicate_messageEntityBlockquote
	return &TLMessageEntityBlockquote{
		Data2: m,
	}
}

// To_MessageEntityBankCard
func (m *MessageEntity) To_MessageEntityBankCard() *TLMessageEntityBankCard {
	m.PredicateName = Predicate_messageEntityBankCard
	return &TLMessageEntityBankCard{
		Data2: m,
	}
}

// To_MessageEntitySpoiler
func (m *MessageEntity) To_MessageEntitySpoiler() *TLMessageEntitySpoiler {
	m.PredicateName = Predicate_messageEntitySpoiler
	return &TLMessageEntitySpoiler{
		Data2: m,
	}
}

// MakeTLMessageEntityUnknown
func MakeTLMessageEntityUnknown(data2 *MessageEntity) *TLMessageEntityUnknown {
	if data2 == nil {
		return &TLMessageEntityUnknown{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityUnknown,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityUnknown
		return &TLMessageEntityUnknown{Data2: data2}
	}
}

func (m *TLMessageEntityUnknown) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityUnknown
	return m.Data2
}

func (m *TLMessageEntityUnknown) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUnknown) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityUnknown) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUnknown) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityUnknown) GetPredicateName() string {
	return Predicate_messageEntityUnknown
}

func (m *TLMessageEntityUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbb92ba95: func() []byte {
			x.UInt(0xbb92ba95)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityUnknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityUnknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbb92ba95: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityMention
func MakeTLMessageEntityMention(data2 *MessageEntity) *TLMessageEntityMention {
	if data2 == nil {
		return &TLMessageEntityMention{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityMention,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityMention
		return &TLMessageEntityMention{Data2: data2}
	}
}

func (m *TLMessageEntityMention) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityMention
	return m.Data2
}

func (m *TLMessageEntityMention) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMention) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityMention) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMention) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityMention) GetPredicateName() string {
	return Predicate_messageEntityMention
}

func (m *TLMessageEntityMention) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfa04579d: func() []byte {
			x.UInt(0xfa04579d)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityMention, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityMention, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityMention) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityMention) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfa04579d: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityMention) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityHashtag
func MakeTLMessageEntityHashtag(data2 *MessageEntity) *TLMessageEntityHashtag {
	if data2 == nil {
		return &TLMessageEntityHashtag{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityHashtag,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityHashtag
		return &TLMessageEntityHashtag{Data2: data2}
	}
}

func (m *TLMessageEntityHashtag) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityHashtag
	return m.Data2
}

func (m *TLMessageEntityHashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityHashtag) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityHashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityHashtag) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityHashtag) GetPredicateName() string {
	return Predicate_messageEntityHashtag
}

func (m *TLMessageEntityHashtag) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6f635b0d: func() []byte {
			x.UInt(0x6f635b0d)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityHashtag, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityHashtag, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityHashtag) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityHashtag) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6f635b0d: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityHashtag) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityBotCommand
func MakeTLMessageEntityBotCommand(data2 *MessageEntity) *TLMessageEntityBotCommand {
	if data2 == nil {
		return &TLMessageEntityBotCommand{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityBotCommand,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityBotCommand
		return &TLMessageEntityBotCommand{Data2: data2}
	}
}

func (m *TLMessageEntityBotCommand) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityBotCommand
	return m.Data2
}

func (m *TLMessageEntityBotCommand) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBotCommand) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBotCommand) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBotCommand) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityBotCommand) GetPredicateName() string {
	return Predicate_messageEntityBotCommand
}

func (m *TLMessageEntityBotCommand) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6cef8ac7: func() []byte {
			x.UInt(0x6cef8ac7)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityBotCommand, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityBotCommand, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityBotCommand) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityBotCommand) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6cef8ac7: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityBotCommand) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityUrl
func MakeTLMessageEntityUrl(data2 *MessageEntity) *TLMessageEntityUrl {
	if data2 == nil {
		return &TLMessageEntityUrl{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityUrl,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityUrl
		return &TLMessageEntityUrl{Data2: data2}
	}
}

func (m *TLMessageEntityUrl) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityUrl
	return m.Data2
}

func (m *TLMessageEntityUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUrl) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUrl) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityUrl) GetPredicateName() string {
	return Predicate_messageEntityUrl
}

func (m *TLMessageEntityUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6ed02538: func() []byte {
			x.UInt(0x6ed02538)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6ed02538: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityEmail
func MakeTLMessageEntityEmail(data2 *MessageEntity) *TLMessageEntityEmail {
	if data2 == nil {
		return &TLMessageEntityEmail{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityEmail,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityEmail
		return &TLMessageEntityEmail{Data2: data2}
	}
}

func (m *TLMessageEntityEmail) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityEmail
	return m.Data2
}

func (m *TLMessageEntityEmail) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityEmail) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityEmail) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityEmail) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityEmail) GetPredicateName() string {
	return Predicate_messageEntityEmail
}

func (m *TLMessageEntityEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64e475c2: func() []byte {
			x.UInt(0x64e475c2)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityEmail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityEmail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityEmail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64e475c2: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityBold
func MakeTLMessageEntityBold(data2 *MessageEntity) *TLMessageEntityBold {
	if data2 == nil {
		return &TLMessageEntityBold{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityBold,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityBold
		return &TLMessageEntityBold{Data2: data2}
	}
}

func (m *TLMessageEntityBold) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityBold
	return m.Data2
}

func (m *TLMessageEntityBold) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBold) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBold) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBold) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityBold) GetPredicateName() string {
	return Predicate_messageEntityBold
}

func (m *TLMessageEntityBold) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbd610bc9: func() []byte {
			x.UInt(0xbd610bc9)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityBold, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityBold, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityBold) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityBold) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbd610bc9: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityBold) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityItalic
func MakeTLMessageEntityItalic(data2 *MessageEntity) *TLMessageEntityItalic {
	if data2 == nil {
		return &TLMessageEntityItalic{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityItalic,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityItalic
		return &TLMessageEntityItalic{Data2: data2}
	}
}

func (m *TLMessageEntityItalic) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityItalic
	return m.Data2
}

func (m *TLMessageEntityItalic) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityItalic) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityItalic) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityItalic) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityItalic) GetPredicateName() string {
	return Predicate_messageEntityItalic
}

func (m *TLMessageEntityItalic) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x826f8b60: func() []byte {
			x.UInt(0x826f8b60)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityItalic, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityItalic, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityItalic) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityItalic) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x826f8b60: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityItalic) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityCode
func MakeTLMessageEntityCode(data2 *MessageEntity) *TLMessageEntityCode {
	if data2 == nil {
		return &TLMessageEntityCode{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityCode,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityCode
		return &TLMessageEntityCode{Data2: data2}
	}
}

func (m *TLMessageEntityCode) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityCode
	return m.Data2
}

func (m *TLMessageEntityCode) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCode) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCode) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityCode) GetPredicateName() string {
	return Predicate_messageEntityCode
}

func (m *TLMessageEntityCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x28a20571: func() []byte {
			x.UInt(0x28a20571)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityCode, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityCode, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityCode) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x28a20571: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityPre
func MakeTLMessageEntityPre(data2 *MessageEntity) *TLMessageEntityPre {
	if data2 == nil {
		return &TLMessageEntityPre{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityPre,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityPre
		return &TLMessageEntityPre{Data2: data2}
	}
}

func (m *TLMessageEntityPre) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityPre
	return m.Data2
}

func (m *TLMessageEntityPre) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPre) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityPre) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPre) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityPre) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLMessageEntityPre) GetLanguage() string  { return m.Data2.Language }

func (m *TLMessageEntityPre) GetPredicateName() string {
	return Predicate_messageEntityPre
}

func (m *TLMessageEntityPre) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x73924be0: func() []byte {
			x.UInt(0x73924be0)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			x.String(m.GetLanguage())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityPre, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityPre, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityPre) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityPre) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x73924be0: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			m.SetLanguage(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityPre) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityTextUrl
func MakeTLMessageEntityTextUrl(data2 *MessageEntity) *TLMessageEntityTextUrl {
	if data2 == nil {
		return &TLMessageEntityTextUrl{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityTextUrl,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityTextUrl
		return &TLMessageEntityTextUrl{Data2: data2}
	}
}

func (m *TLMessageEntityTextUrl) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityTextUrl
	return m.Data2
}

func (m *TLMessageEntityTextUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityTextUrl) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityTextUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityTextUrl) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLMessageEntityTextUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLMessageEntityTextUrl) GetPredicateName() string {
	return Predicate_messageEntityTextUrl
}

func (m *TLMessageEntityTextUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x76a6d327: func() []byte {
			x.UInt(0x76a6d327)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityTextUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityTextUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityTextUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityTextUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x76a6d327: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityTextUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityMentionName
func MakeTLMessageEntityMentionName(data2 *MessageEntity) *TLMessageEntityMentionName {
	if data2 == nil {
		return &TLMessageEntityMentionName{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityMentionName,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityMentionName
		return &TLMessageEntityMentionName{Data2: data2}
	}
}

func (m *TLMessageEntityMentionName) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityMentionName
	return m.Data2
}

func (m *TLMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMentionName) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMentionName) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityMentionName) SetUserId_INT64(v int64) { m.Data2.UserId_INT64 = v }
func (m *TLMessageEntityMentionName) GetUserId_INT64() int64  { return m.Data2.UserId_INT64 }

func (m *TLMessageEntityMentionName) GetPredicateName() string {
	return Predicate_messageEntityMentionName
}

func (m *TLMessageEntityMentionName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdc7b1140: func() []byte {
			x.UInt(0xdc7b1140)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			x.Long(m.GetUserId_INT64())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityMentionName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityMentionName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityMentionName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityMentionName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdc7b1140: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			m.SetUserId_INT64(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityMentionName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessageEntityMentionName
func MakeTLInputMessageEntityMentionName(data2 *MessageEntity) *TLInputMessageEntityMentionName {
	if data2 == nil {
		return &TLInputMessageEntityMentionName{Data2: &MessageEntity{
			PredicateName: Predicate_inputMessageEntityMentionName,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessageEntityMentionName
		return &TLInputMessageEntityMentionName{Data2: data2}
	}
}

func (m *TLInputMessageEntityMentionName) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_inputMessageEntityMentionName
	return m.Data2
}

func (m *TLInputMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLInputMessageEntityMentionName) GetOffset() int32  { return m.Data2.Offset }

func (m *TLInputMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLInputMessageEntityMentionName) GetLength() int32  { return m.Data2.Length }

func (m *TLInputMessageEntityMentionName) SetUserId_INPUTUSER(v *InputUser) {
	m.Data2.UserId_INPUTUSER = v
}
func (m *TLInputMessageEntityMentionName) GetUserId_INPUTUSER() *InputUser {
	return m.Data2.UserId_INPUTUSER
}

func (m *TLInputMessageEntityMentionName) GetPredicateName() string {
	return Predicate_inputMessageEntityMentionName
}

func (m *TLInputMessageEntityMentionName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x208e68c9: func() []byte {
			x.UInt(0x208e68c9)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			x.Bytes(m.GetUserId_INPUTUSER().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessageEntityMentionName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessageEntityMentionName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessageEntityMentionName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessageEntityMentionName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x208e68c9: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())

			m4 := &InputUser{}
			m4.Decode(dBuf)
			m.SetUserId_INPUTUSER(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessageEntityMentionName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityPhone
func MakeTLMessageEntityPhone(data2 *MessageEntity) *TLMessageEntityPhone {
	if data2 == nil {
		return &TLMessageEntityPhone{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityPhone,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityPhone
		return &TLMessageEntityPhone{Data2: data2}
	}
}

func (m *TLMessageEntityPhone) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityPhone
	return m.Data2
}

func (m *TLMessageEntityPhone) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPhone) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityPhone) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPhone) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityPhone) GetPredicateName() string {
	return Predicate_messageEntityPhone
}

func (m *TLMessageEntityPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9b69e34b: func() []byte {
			x.UInt(0x9b69e34b)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9b69e34b: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityCashtag
func MakeTLMessageEntityCashtag(data2 *MessageEntity) *TLMessageEntityCashtag {
	if data2 == nil {
		return &TLMessageEntityCashtag{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityCashtag,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityCashtag
		return &TLMessageEntityCashtag{Data2: data2}
	}
}

func (m *TLMessageEntityCashtag) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityCashtag
	return m.Data2
}

func (m *TLMessageEntityCashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCashtag) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityCashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCashtag) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityCashtag) GetPredicateName() string {
	return Predicate_messageEntityCashtag
}

func (m *TLMessageEntityCashtag) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4c4e743f: func() []byte {
			x.UInt(0x4c4e743f)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityCashtag, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityCashtag, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityCashtag) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityCashtag) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4c4e743f: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityCashtag) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityUnderline
func MakeTLMessageEntityUnderline(data2 *MessageEntity) *TLMessageEntityUnderline {
	if data2 == nil {
		return &TLMessageEntityUnderline{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityUnderline,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityUnderline
		return &TLMessageEntityUnderline{Data2: data2}
	}
}

func (m *TLMessageEntityUnderline) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityUnderline
	return m.Data2
}

func (m *TLMessageEntityUnderline) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUnderline) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityUnderline) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUnderline) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityUnderline) GetPredicateName() string {
	return Predicate_messageEntityUnderline
}

func (m *TLMessageEntityUnderline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9c4e7e8b: func() []byte {
			x.UInt(0x9c4e7e8b)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityUnderline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityUnderline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityUnderline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityUnderline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9c4e7e8b: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityUnderline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityStrike
func MakeTLMessageEntityStrike(data2 *MessageEntity) *TLMessageEntityStrike {
	if data2 == nil {
		return &TLMessageEntityStrike{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityStrike,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityStrike
		return &TLMessageEntityStrike{Data2: data2}
	}
}

func (m *TLMessageEntityStrike) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityStrike
	return m.Data2
}

func (m *TLMessageEntityStrike) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityStrike) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityStrike) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityStrike) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityStrike) GetPredicateName() string {
	return Predicate_messageEntityStrike
}

func (m *TLMessageEntityStrike) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbf0693d4: func() []byte {
			x.UInt(0xbf0693d4)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityStrike, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityStrike, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityStrike) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityStrike) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbf0693d4: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityStrike) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityBlockquote
func MakeTLMessageEntityBlockquote(data2 *MessageEntity) *TLMessageEntityBlockquote {
	if data2 == nil {
		return &TLMessageEntityBlockquote{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityBlockquote,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityBlockquote
		return &TLMessageEntityBlockquote{Data2: data2}
	}
}

func (m *TLMessageEntityBlockquote) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityBlockquote
	return m.Data2
}

func (m *TLMessageEntityBlockquote) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBlockquote) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBlockquote) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBlockquote) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityBlockquote) GetPredicateName() string {
	return Predicate_messageEntityBlockquote
}

func (m *TLMessageEntityBlockquote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x20df5d0: func() []byte {
			x.UInt(0x20df5d0)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityBlockquote, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityBlockquote, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityBlockquote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityBlockquote) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x20df5d0: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityBlockquote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntityBankCard
func MakeTLMessageEntityBankCard(data2 *MessageEntity) *TLMessageEntityBankCard {
	if data2 == nil {
		return &TLMessageEntityBankCard{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntityBankCard,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntityBankCard
		return &TLMessageEntityBankCard{Data2: data2}
	}
}

func (m *TLMessageEntityBankCard) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntityBankCard
	return m.Data2
}

func (m *TLMessageEntityBankCard) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBankCard) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntityBankCard) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBankCard) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntityBankCard) GetPredicateName() string {
	return Predicate_messageEntityBankCard
}

func (m *TLMessageEntityBankCard) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x761e6af4: func() []byte {
			x.UInt(0x761e6af4)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntityBankCard, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntityBankCard, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntityBankCard) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntityBankCard) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x761e6af4: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntityBankCard) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageEntitySpoiler
func MakeTLMessageEntitySpoiler(data2 *MessageEntity) *TLMessageEntitySpoiler {
	if data2 == nil {
		return &TLMessageEntitySpoiler{Data2: &MessageEntity{
			PredicateName: Predicate_messageEntitySpoiler,
		}}
	} else {
		data2.PredicateName = Predicate_messageEntitySpoiler
		return &TLMessageEntitySpoiler{Data2: data2}
	}
}

func (m *TLMessageEntitySpoiler) To_MessageEntity() *MessageEntity {
	m.Data2.PredicateName = Predicate_messageEntitySpoiler
	return m.Data2
}

func (m *TLMessageEntitySpoiler) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntitySpoiler) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessageEntitySpoiler) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntitySpoiler) GetLength() int32  { return m.Data2.Length }

func (m *TLMessageEntitySpoiler) GetPredicateName() string {
	return Predicate_messageEntitySpoiler
}

func (m *TLMessageEntitySpoiler) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x32ca960f: func() []byte {
			x.UInt(0x32ca960f)

			x.Int(m.GetOffset())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEntitySpoiler, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEntitySpoiler, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEntitySpoiler) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEntitySpoiler) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x32ca960f: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEntitySpoiler) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_PeerDialogs <--
//  + TL_MessagesPeerDialogs
//

func (m *Messages_PeerDialogs) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_peerDialogs:
		t := m.To_MessagesPeerDialogs()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_PeerDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_PeerDialogs) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3371c354:
		m2 := MakeTLMessagesPeerDialogs(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_PeerDialogs) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_peerDialogs:
		t := m.To_MessagesPeerDialogs()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesPeerDialogs
func (m *Messages_PeerDialogs) To_MessagesPeerDialogs() *TLMessagesPeerDialogs {
	m.PredicateName = Predicate_messages_peerDialogs
	return &TLMessagesPeerDialogs{
		Data2: m,
	}
}

// MakeTLMessagesPeerDialogs
func MakeTLMessagesPeerDialogs(data2 *Messages_PeerDialogs) *TLMessagesPeerDialogs {
	if data2 == nil {
		return &TLMessagesPeerDialogs{Data2: &Messages_PeerDialogs{
			PredicateName: Predicate_messages_peerDialogs,
		}}
	} else {
		data2.PredicateName = Predicate_messages_peerDialogs
		return &TLMessagesPeerDialogs{Data2: data2}
	}
}

func (m *TLMessagesPeerDialogs) To_Messages_PeerDialogs() *Messages_PeerDialogs {
	m.Data2.PredicateName = Predicate_messages_peerDialogs
	return m.Data2
}

func (m *TLMessagesPeerDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesPeerDialogs) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesPeerDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesPeerDialogs) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesPeerDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesPeerDialogs) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesPeerDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesPeerDialogs) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesPeerDialogs) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLMessagesPeerDialogs) GetState() *Updates_State  { return m.Data2.State }

func (m *TLMessagesPeerDialogs) GetPredicateName() string {
	return Predicate_messages_peerDialogs
}

func (m *TLMessagesPeerDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3371c354: func() []byte {
			x.UInt(0x3371c354)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDialogs())))
			for _, v := range m.GetDialogs() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetState().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_peerDialogs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_peerDialogs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesPeerDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesPeerDialogs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3371c354: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Dialog, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Dialog{}
				v0[i].Decode(dBuf)
			}
			m.SetDialogs(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Message, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Message{}
				v1[i].Decode(dBuf)
			}
			m.SetMessages(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Chat, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Chat{}
				v2[i].Decode(dBuf)
			}
			m.SetChats(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			m4 := &Updates_State{}
			m4.Decode(dBuf)
			m.SetState(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesPeerDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_TopPeers <--
//  + TL_ContactsTopPeersNotModified
//  + TL_ContactsTopPeers
//  + TL_ContactsTopPeersDisabled
//

func (m *Contacts_TopPeers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_topPeersNotModified:
		t := m.To_ContactsTopPeersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_contacts_topPeers:
		t := m.To_ContactsTopPeers()
		xBuf = t.Encode(layer)
	case Predicate_contacts_topPeersDisabled:
		t := m.To_ContactsTopPeersDisabled()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_TopPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_TopPeers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xde266ef5:
		m2 := MakeTLContactsTopPeersNotModified(m)
		m2.Decode(dBuf)
	case 0x70b772a8:
		m2 := MakeTLContactsTopPeers(m)
		m2.Decode(dBuf)
	case 0xb52c939d:
		m2 := MakeTLContactsTopPeersDisabled(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_TopPeers) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_topPeersNotModified:
		t := m.To_ContactsTopPeersNotModified()
		return t.DebugString()
	case Predicate_contacts_topPeers:
		t := m.To_ContactsTopPeers()
		return t.DebugString()
	case Predicate_contacts_topPeersDisabled:
		t := m.To_ContactsTopPeersDisabled()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsTopPeersNotModified
func (m *Contacts_TopPeers) To_ContactsTopPeersNotModified() *TLContactsTopPeersNotModified {
	m.PredicateName = Predicate_contacts_topPeersNotModified
	return &TLContactsTopPeersNotModified{
		Data2: m,
	}
}

// To_ContactsTopPeers
func (m *Contacts_TopPeers) To_ContactsTopPeers() *TLContactsTopPeers {
	m.PredicateName = Predicate_contacts_topPeers
	return &TLContactsTopPeers{
		Data2: m,
	}
}

// To_ContactsTopPeersDisabled
func (m *Contacts_TopPeers) To_ContactsTopPeersDisabled() *TLContactsTopPeersDisabled {
	m.PredicateName = Predicate_contacts_topPeersDisabled
	return &TLContactsTopPeersDisabled{
		Data2: m,
	}
}

// MakeTLContactsTopPeersNotModified
func MakeTLContactsTopPeersNotModified(data2 *Contacts_TopPeers) *TLContactsTopPeersNotModified {
	if data2 == nil {
		return &TLContactsTopPeersNotModified{Data2: &Contacts_TopPeers{
			PredicateName: Predicate_contacts_topPeersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_topPeersNotModified
		return &TLContactsTopPeersNotModified{Data2: data2}
	}
}

func (m *TLContactsTopPeersNotModified) To_Contacts_TopPeers() *Contacts_TopPeers {
	m.Data2.PredicateName = Predicate_contacts_topPeersNotModified
	return m.Data2
}

func (m *TLContactsTopPeersNotModified) GetPredicateName() string {
	return Predicate_contacts_topPeersNotModified
}

func (m *TLContactsTopPeersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xde266ef5: func() []byte {
			x.UInt(0xde266ef5)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_topPeersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_topPeersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsTopPeersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsTopPeersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xde266ef5: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsTopPeersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLContactsTopPeers
func MakeTLContactsTopPeers(data2 *Contacts_TopPeers) *TLContactsTopPeers {
	if data2 == nil {
		return &TLContactsTopPeers{Data2: &Contacts_TopPeers{
			PredicateName: Predicate_contacts_topPeers,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_topPeers
		return &TLContactsTopPeers{Data2: data2}
	}
}

func (m *TLContactsTopPeers) To_Contacts_TopPeers() *Contacts_TopPeers {
	m.Data2.PredicateName = Predicate_contacts_topPeers
	return m.Data2
}

func (m *TLContactsTopPeers) SetCategories(v []*TopPeerCategoryPeers) { m.Data2.Categories = v }
func (m *TLContactsTopPeers) GetCategories() []*TopPeerCategoryPeers  { return m.Data2.Categories }

func (m *TLContactsTopPeers) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsTopPeers) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsTopPeers) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsTopPeers) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsTopPeers) GetPredicateName() string {
	return Predicate_contacts_topPeers
}

func (m *TLContactsTopPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x70b772a8: func() []byte {
			x.UInt(0x70b772a8)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCategories())))
			for _, v := range m.GetCategories() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_topPeers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_topPeers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsTopPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsTopPeers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x70b772a8: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*TopPeerCategoryPeers, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &TopPeerCategoryPeers{}
				v0[i].Decode(dBuf)
			}
			m.SetCategories(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsTopPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLContactsTopPeersDisabled
func MakeTLContactsTopPeersDisabled(data2 *Contacts_TopPeers) *TLContactsTopPeersDisabled {
	if data2 == nil {
		return &TLContactsTopPeersDisabled{Data2: &Contacts_TopPeers{
			PredicateName: Predicate_contacts_topPeersDisabled,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_topPeersDisabled
		return &TLContactsTopPeersDisabled{Data2: data2}
	}
}

func (m *TLContactsTopPeersDisabled) To_Contacts_TopPeers() *Contacts_TopPeers {
	m.Data2.PredicateName = Predicate_contacts_topPeersDisabled
	return m.Data2
}

func (m *TLContactsTopPeersDisabled) GetPredicateName() string {
	return Predicate_contacts_topPeersDisabled
}

func (m *TLContactsTopPeersDisabled) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb52c939d: func() []byte {
			x.UInt(0xb52c939d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_topPeersDisabled, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_topPeersDisabled, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsTopPeersDisabled) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsTopPeersDisabled) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb52c939d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsTopPeersDisabled) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WallPaperSettings <--
//  + TL_WallPaperSettings
//

func (m *WallPaperSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_wallPaperSettings:
		t := m.To_WallPaperSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WallPaperSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *WallPaperSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1dc1bca4:
		m2 := MakeTLWallPaperSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WallPaperSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_wallPaperSettings:
		t := m.To_WallPaperSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WallPaperSettings
func (m *WallPaperSettings) To_WallPaperSettings() *TLWallPaperSettings {
	m.PredicateName = Predicate_wallPaperSettings
	return &TLWallPaperSettings{
		Data2: m,
	}
}

// MakeTLWallPaperSettings
func MakeTLWallPaperSettings(data2 *WallPaperSettings) *TLWallPaperSettings {
	if data2 == nil {
		return &TLWallPaperSettings{Data2: &WallPaperSettings{
			PredicateName: Predicate_wallPaperSettings,
		}}
	} else {
		data2.PredicateName = Predicate_wallPaperSettings
		return &TLWallPaperSettings{Data2: data2}
	}
}

func (m *TLWallPaperSettings) To_WallPaperSettings() *WallPaperSettings {
	m.Data2.PredicateName = Predicate_wallPaperSettings
	return m.Data2
}

//// flags
func (m *TLWallPaperSettings) SetBlur(v bool) { m.Data2.Blur = v }
func (m *TLWallPaperSettings) GetBlur() bool  { return m.Data2.Blur }

func (m *TLWallPaperSettings) SetMotion(v bool) { m.Data2.Motion = v }
func (m *TLWallPaperSettings) GetMotion() bool  { return m.Data2.Motion }

func (m *TLWallPaperSettings) SetBackgroundColor(v *types.Int32Value) { m.Data2.BackgroundColor = v }
func (m *TLWallPaperSettings) GetBackgroundColor() *types.Int32Value  { return m.Data2.BackgroundColor }

func (m *TLWallPaperSettings) SetSecondBackgroundColor(v *types.Int32Value) {
	m.Data2.SecondBackgroundColor = v
}
func (m *TLWallPaperSettings) GetSecondBackgroundColor() *types.Int32Value {
	return m.Data2.SecondBackgroundColor
}

func (m *TLWallPaperSettings) SetThirdBackgroundColor(v *types.Int32Value) {
	m.Data2.ThirdBackgroundColor = v
}
func (m *TLWallPaperSettings) GetThirdBackgroundColor() *types.Int32Value {
	return m.Data2.ThirdBackgroundColor
}

func (m *TLWallPaperSettings) SetFourthBackgroundColor(v *types.Int32Value) {
	m.Data2.FourthBackgroundColor = v
}
func (m *TLWallPaperSettings) GetFourthBackgroundColor() *types.Int32Value {
	return m.Data2.FourthBackgroundColor
}

func (m *TLWallPaperSettings) SetIntensity(v *types.Int32Value) { m.Data2.Intensity = v }
func (m *TLWallPaperSettings) GetIntensity() *types.Int32Value  { return m.Data2.Intensity }

func (m *TLWallPaperSettings) SetRotation(v *types.Int32Value) { m.Data2.Rotation = v }
func (m *TLWallPaperSettings) GetRotation() *types.Int32Value  { return m.Data2.Rotation }

func (m *TLWallPaperSettings) GetPredicateName() string {
	return Predicate_wallPaperSettings
}

func (m *TLWallPaperSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1dc1bca4: func() []byte {
			x.UInt(0x1dc1bca4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBlur() == true {
					flags |= 1 << 1
				}
				if m.GetMotion() == true {
					flags |= 1 << 2
				}
				if m.GetBackgroundColor() != nil {
					flags |= 1 << 0
				}
				if m.GetSecondBackgroundColor() != nil {
					flags |= 1 << 4
				}
				if m.GetThirdBackgroundColor() != nil {
					flags |= 1 << 5
				}
				if m.GetFourthBackgroundColor() != nil {
					flags |= 1 << 6
				}
				if m.GetIntensity() != nil {
					flags |= 1 << 3
				}
				if m.GetRotation() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetBackgroundColor() != nil {
				x.Int(m.GetBackgroundColor().Value)
			}

			if m.GetSecondBackgroundColor() != nil {
				x.Int(m.GetSecondBackgroundColor().Value)
			}

			if m.GetThirdBackgroundColor() != nil {
				x.Int(m.GetThirdBackgroundColor().Value)
			}

			if m.GetFourthBackgroundColor() != nil {
				x.Int(m.GetFourthBackgroundColor().Value)
			}

			if m.GetIntensity() != nil {
				x.Int(m.GetIntensity().Value)
			}

			if m.GetRotation() != nil {
				x.Int(m.GetRotation().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_wallPaperSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_wallPaperSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWallPaperSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWallPaperSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1dc1bca4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetBlur(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetMotion(true)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetBackgroundColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetSecondBackgroundColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetThirdBackgroundColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 6)) != 0 {
				m.SetFourthBackgroundColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetIntensity(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetRotation(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWallPaperSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SponsoredMessage <--
//  + TL_SponsoredMessage
//

func (m *SponsoredMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_sponsoredMessage:
		t := m.To_SponsoredMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SponsoredMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *SponsoredMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3a836df8:
		m2 := MakeTLSponsoredMessage(m)
		m2.Decode(dBuf)
	case 0xd151e19a:
		m2 := MakeTLSponsoredMessage(m)
		m2.Decode(dBuf)
	case 0x2a3c381f:
		m2 := MakeTLSponsoredMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SponsoredMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_sponsoredMessage:
		t := m.To_SponsoredMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SponsoredMessage
func (m *SponsoredMessage) To_SponsoredMessage() *TLSponsoredMessage {
	m.PredicateName = Predicate_sponsoredMessage
	return &TLSponsoredMessage{
		Data2: m,
	}
}

// MakeTLSponsoredMessage
func MakeTLSponsoredMessage(data2 *SponsoredMessage) *TLSponsoredMessage {
	if data2 == nil {
		return &TLSponsoredMessage{Data2: &SponsoredMessage{
			PredicateName: Predicate_sponsoredMessage,
		}}
	} else {
		data2.PredicateName = Predicate_sponsoredMessage
		return &TLSponsoredMessage{Data2: data2}
	}
}

func (m *TLSponsoredMessage) To_SponsoredMessage() *SponsoredMessage {
	m.Data2.PredicateName = Predicate_sponsoredMessage
	return m.Data2
}

//// flags
func (m *TLSponsoredMessage) SetRandomId(v []byte) { m.Data2.RandomId = v }
func (m *TLSponsoredMessage) GetRandomId() []byte  { return m.Data2.RandomId }

func (m *TLSponsoredMessage) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLSponsoredMessage) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLSponsoredMessage) SetChatInvite(v *ChatInvite) { m.Data2.ChatInvite = v }
func (m *TLSponsoredMessage) GetChatInvite() *ChatInvite  { return m.Data2.ChatInvite }

func (m *TLSponsoredMessage) SetChatInviteHash(v *types.StringValue) { m.Data2.ChatInviteHash = v }
func (m *TLSponsoredMessage) GetChatInviteHash() *types.StringValue  { return m.Data2.ChatInviteHash }

func (m *TLSponsoredMessage) SetChannelPost(v *types.Int32Value) { m.Data2.ChannelPost = v }
func (m *TLSponsoredMessage) GetChannelPost() *types.Int32Value  { return m.Data2.ChannelPost }

func (m *TLSponsoredMessage) SetStartParam(v *types.StringValue) { m.Data2.StartParam = v }
func (m *TLSponsoredMessage) GetStartParam() *types.StringValue  { return m.Data2.StartParam }

func (m *TLSponsoredMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLSponsoredMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLSponsoredMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLSponsoredMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLSponsoredMessage) GetPredicateName() string {
	return Predicate_sponsoredMessage
}

func (m *TLSponsoredMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3a836df8: func() []byte {
			x.UInt(0x3a836df8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFromId() != nil {
					flags |= 1 << 3
				}
				if m.GetChatInvite() != nil {
					flags |= 1 << 4
				}
				if m.GetChatInviteHash() != nil {
					flags |= 1 << 4
				}
				if m.GetChannelPost() != nil {
					flags |= 1 << 2
				}
				if m.GetStartParam() != nil {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.StringBytes(m.GetRandomId())
			if m.GetFromId() != nil {
				x.Bytes(m.GetFromId().Encode(layer))
			}

			if m.GetChatInvite() != nil {
				x.Bytes(m.GetChatInvite().Encode(layer))
			}

			if m.GetChatInviteHash() != nil {
				x.String(m.GetChatInviteHash().Value)
			}

			if m.GetChannelPost() != nil {
				x.Int(m.GetChannelPost().Value)
			}

			if m.GetStartParam() != nil {
				x.String(m.GetStartParam().Value)
			}

			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
		0xd151e19a: func() []byte {
			x.UInt(0xd151e19a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChannelPost() != nil {
					flags |= 1 << 2
				}
				if m.GetStartParam() != nil {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.StringBytes(m.GetRandomId())
			x.Bytes(m.GetFromId().Encode(layer))
			if m.GetChannelPost() != nil {
				x.Int(m.GetChannelPost().Value)
			}

			if m.GetStartParam() != nil {
				x.String(m.GetStartParam().Value)
			}

			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
		0x2a3c381f: func() []byte {
			x.UInt(0x2a3c381f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetStartParam() != nil {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.StringBytes(m.GetRandomId())
			x.Bytes(m.GetFromId().Encode(layer))
			if m.GetStartParam() != nil {
				x.String(m.GetStartParam().Value)
			}

			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_sponsoredMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_sponsoredMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSponsoredMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSponsoredMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3a836df8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetRandomId(dBuf.StringBytes())
			if (flags & (1 << 3)) != 0 {
				m2 := &Peer{}
				m2.Decode(dBuf)
				m.SetFromId(m2)
			}
			if (flags & (1 << 4)) != 0 {
				m3 := &ChatInvite{}
				m3.Decode(dBuf)
				m.SetChatInvite(m3)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetChatInviteHash(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetChannelPost(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetStartParam(&types.StringValue{Value: dBuf.String()})
			}

			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c8 := dBuf.Int()
				if c8 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
					return dBuf.GetError()
				}
				l8 := dBuf.Int()
				v8 := make([]*MessageEntity, l8)
				for i := int32(0); i < l8; i++ {
					v8[i] = &MessageEntity{}
					v8[i].Decode(dBuf)
				}
				m.SetEntities(v8)
			}
			return dBuf.GetError()
		},
		0xd151e19a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetRandomId(dBuf.StringBytes())

			m2 := &Peer{}
			m2.Decode(dBuf)
			m.SetFromId(m2)

			if (flags & (1 << 2)) != 0 {
				m.SetChannelPost(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetStartParam(&types.StringValue{Value: dBuf.String()})
			}

			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c8 := dBuf.Int()
				if c8 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
					return dBuf.GetError()
				}
				l8 := dBuf.Int()
				v8 := make([]*MessageEntity, l8)
				for i := int32(0); i < l8; i++ {
					v8[i] = &MessageEntity{}
					v8[i].Decode(dBuf)
				}
				m.SetEntities(v8)
			}
			return dBuf.GetError()
		},
		0x2a3c381f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetRandomId(dBuf.StringBytes())

			m2 := &Peer{}
			m2.Decode(dBuf)
			m.SetFromId(m2)

			if (flags & (1 << 0)) != 0 {
				m.SetStartParam(&types.StringValue{Value: dBuf.String()})
			}

			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c8 := dBuf.Int()
				if c8 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
					return dBuf.GetError()
				}
				l8 := dBuf.Int()
				v8 := make([]*MessageEntity, l8)
				for i := int32(0); i < l8; i++ {
					v8[i] = &MessageEntity{}
					v8[i].Decode(dBuf)
				}
				m.SetEntities(v8)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSponsoredMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Chats <--
//  + TL_MessagesChats
//  + TL_MessagesChatsSlice
//

func (m *Messages_Chats) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_chats:
		t := m.To_MessagesChats()
		xBuf = t.Encode(layer)
	case Predicate_messages_chatsSlice:
		t := m.To_MessagesChatsSlice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_Chats) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_Chats) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x64ff9fd5:
		m2 := MakeTLMessagesChats(m)
		m2.Decode(dBuf)
	case 0x9cd81144:
		m2 := MakeTLMessagesChatsSlice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_Chats) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_chats:
		t := m.To_MessagesChats()
		return t.DebugString()
	case Predicate_messages_chatsSlice:
		t := m.To_MessagesChatsSlice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesChats
func (m *Messages_Chats) To_MessagesChats() *TLMessagesChats {
	m.PredicateName = Predicate_messages_chats
	return &TLMessagesChats{
		Data2: m,
	}
}

// To_MessagesChatsSlice
func (m *Messages_Chats) To_MessagesChatsSlice() *TLMessagesChatsSlice {
	m.PredicateName = Predicate_messages_chatsSlice
	return &TLMessagesChatsSlice{
		Data2: m,
	}
}

// MakeTLMessagesChats
func MakeTLMessagesChats(data2 *Messages_Chats) *TLMessagesChats {
	if data2 == nil {
		return &TLMessagesChats{Data2: &Messages_Chats{
			PredicateName: Predicate_messages_chats,
		}}
	} else {
		data2.PredicateName = Predicate_messages_chats
		return &TLMessagesChats{Data2: data2}
	}
}

func (m *TLMessagesChats) To_Messages_Chats() *Messages_Chats {
	m.Data2.PredicateName = Predicate_messages_chats
	return m.Data2
}

func (m *TLMessagesChats) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChats) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChats) GetPredicateName() string {
	return Predicate_messages_chats
}

func (m *TLMessagesChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64ff9fd5: func() []byte {
			x.UInt(0x64ff9fd5)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_chats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_chats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64ff9fd5: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Chat, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Chat{}
				v0[i].Decode(dBuf)
			}
			m.SetChats(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesChatsSlice
func MakeTLMessagesChatsSlice(data2 *Messages_Chats) *TLMessagesChatsSlice {
	if data2 == nil {
		return &TLMessagesChatsSlice{Data2: &Messages_Chats{
			PredicateName: Predicate_messages_chatsSlice,
		}}
	} else {
		data2.PredicateName = Predicate_messages_chatsSlice
		return &TLMessagesChatsSlice{Data2: data2}
	}
}

func (m *TLMessagesChatsSlice) To_Messages_Chats() *Messages_Chats {
	m.Data2.PredicateName = Predicate_messages_chatsSlice
	return m.Data2
}

func (m *TLMessagesChatsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChatsSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesChatsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatsSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChatsSlice) GetPredicateName() string {
	return Predicate_messages_chatsSlice
}

func (m *TLMessagesChatsSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9cd81144: func() []byte {
			x.UInt(0x9cd81144)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_chatsSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_chatsSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChatsSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChatsSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9cd81144: func() error {
			m.SetCount(dBuf.Int())
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Chat, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Chat{}
				v0[i].Decode(dBuf)
			}
			m.SetChats(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChatsSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ChatFull <--
//  + TL_MessagesChatFull
//

func (m *Messages_ChatFull) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_chatFull:
		t := m.To_MessagesChatFull()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ChatFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ChatFull) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe5d7d19c:
		m2 := MakeTLMessagesChatFull(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ChatFull) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_chatFull:
		t := m.To_MessagesChatFull()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesChatFull
func (m *Messages_ChatFull) To_MessagesChatFull() *TLMessagesChatFull {
	m.PredicateName = Predicate_messages_chatFull
	return &TLMessagesChatFull{
		Data2: m,
	}
}

// MakeTLMessagesChatFull
func MakeTLMessagesChatFull(data2 *Messages_ChatFull) *TLMessagesChatFull {
	if data2 == nil {
		return &TLMessagesChatFull{Data2: &Messages_ChatFull{
			PredicateName: Predicate_messages_chatFull,
		}}
	} else {
		data2.PredicateName = Predicate_messages_chatFull
		return &TLMessagesChatFull{Data2: data2}
	}
}

func (m *TLMessagesChatFull) To_Messages_ChatFull() *Messages_ChatFull {
	m.Data2.PredicateName = Predicate_messages_chatFull
	return m.Data2
}

func (m *TLMessagesChatFull) SetFullChat(v *ChatFull) { m.Data2.FullChat = v }
func (m *TLMessagesChatFull) GetFullChat() *ChatFull  { return m.Data2.FullChat }

func (m *TLMessagesChatFull) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatFull) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChatFull) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChatFull) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesChatFull) GetPredicateName() string {
	return Predicate_messages_chatFull
}

func (m *TLMessagesChatFull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe5d7d19c: func() []byte {
			x.UInt(0xe5d7d19c)

			x.Bytes(m.GetFullChat().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_chatFull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_chatFull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChatFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChatFull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe5d7d19c: func() error {

			m0 := &ChatFull{}
			m0.Decode(dBuf)
			m.SetFullChat(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChatFull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputDocument <--
//  + TL_InputDocumentEmpty
//  + TL_InputDocument
//

func (m *InputDocument) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputDocumentEmpty:
		t := m.To_InputDocumentEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputDocument:
		t := m.To_InputDocument()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputDocument) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x72f0eaae:
		m2 := MakeTLInputDocumentEmpty(m)
		m2.Decode(dBuf)
	case 0x1abfb575:
		m2 := MakeTLInputDocument(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputDocument) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputDocumentEmpty:
		t := m.To_InputDocumentEmpty()
		return t.DebugString()
	case Predicate_inputDocument:
		t := m.To_InputDocument()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputDocumentEmpty
func (m *InputDocument) To_InputDocumentEmpty() *TLInputDocumentEmpty {
	m.PredicateName = Predicate_inputDocumentEmpty
	return &TLInputDocumentEmpty{
		Data2: m,
	}
}

// To_InputDocument
func (m *InputDocument) To_InputDocument() *TLInputDocument {
	m.PredicateName = Predicate_inputDocument
	return &TLInputDocument{
		Data2: m,
	}
}

// MakeTLInputDocumentEmpty
func MakeTLInputDocumentEmpty(data2 *InputDocument) *TLInputDocumentEmpty {
	if data2 == nil {
		return &TLInputDocumentEmpty{Data2: &InputDocument{
			PredicateName: Predicate_inputDocumentEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputDocumentEmpty
		return &TLInputDocumentEmpty{Data2: data2}
	}
}

func (m *TLInputDocumentEmpty) To_InputDocument() *InputDocument {
	m.Data2.PredicateName = Predicate_inputDocumentEmpty
	return m.Data2
}

func (m *TLInputDocumentEmpty) GetPredicateName() string {
	return Predicate_inputDocumentEmpty
}

func (m *TLInputDocumentEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x72f0eaae: func() []byte {
			x.UInt(0x72f0eaae)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputDocumentEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputDocumentEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputDocumentEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputDocumentEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x72f0eaae: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputDocumentEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputDocument
func MakeTLInputDocument(data2 *InputDocument) *TLInputDocument {
	if data2 == nil {
		return &TLInputDocument{Data2: &InputDocument{
			PredicateName: Predicate_inputDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputDocument
		return &TLInputDocument{Data2: data2}
	}
}

func (m *TLInputDocument) To_InputDocument() *InputDocument {
	m.Data2.PredicateName = Predicate_inputDocument
	return m.Data2
}

func (m *TLInputDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocument) GetId() int64  { return m.Data2.Id }

func (m *TLInputDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputDocument) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocument) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLInputDocument) GetPredicateName() string {
	return Predicate_inputDocument
}

func (m *TLInputDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1abfb575: func() []byte {
			x.UInt(0x1abfb575)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1abfb575: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// AccountDaysTTL <--
//  + TL_AccountDaysTTL
//

func (m *AccountDaysTTL) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_accountDaysTTL:
		t := m.To_AccountDaysTTL()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *AccountDaysTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *AccountDaysTTL) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb8d0afdf:
		m2 := MakeTLAccountDaysTTL(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *AccountDaysTTL) DebugString() string {
	switch m.PredicateName {
	case Predicate_accountDaysTTL:
		t := m.To_AccountDaysTTL()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountDaysTTL
func (m *AccountDaysTTL) To_AccountDaysTTL() *TLAccountDaysTTL {
	m.PredicateName = Predicate_accountDaysTTL
	return &TLAccountDaysTTL{
		Data2: m,
	}
}

// MakeTLAccountDaysTTL
func MakeTLAccountDaysTTL(data2 *AccountDaysTTL) *TLAccountDaysTTL {
	if data2 == nil {
		return &TLAccountDaysTTL{Data2: &AccountDaysTTL{
			PredicateName: Predicate_accountDaysTTL,
		}}
	} else {
		data2.PredicateName = Predicate_accountDaysTTL
		return &TLAccountDaysTTL{Data2: data2}
	}
}

func (m *TLAccountDaysTTL) To_AccountDaysTTL() *AccountDaysTTL {
	m.Data2.PredicateName = Predicate_accountDaysTTL
	return m.Data2
}

func (m *TLAccountDaysTTL) SetDays(v int32) { m.Data2.Days = v }
func (m *TLAccountDaysTTL) GetDays() int32  { return m.Data2.Days }

func (m *TLAccountDaysTTL) GetPredicateName() string {
	return Predicate_accountDaysTTL
}

func (m *TLAccountDaysTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb8d0afdf: func() []byte {
			x.UInt(0xb8d0afdf)

			x.Int(m.GetDays())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_accountDaysTTL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_accountDaysTTL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountDaysTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountDaysTTL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb8d0afdf: func() error {
			m.SetDays(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountDaysTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageListOrderedItem <--
//  + TL_PageListOrderedItemText
//  + TL_PageListOrderedItemBlocks
//

func (m *PageListOrderedItem) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageListOrderedItemText:
		t := m.To_PageListOrderedItemText()
		xBuf = t.Encode(layer)
	case Predicate_pageListOrderedItemBlocks:
		t := m.To_PageListOrderedItemBlocks()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageListOrderedItem) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageListOrderedItem) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5e068047:
		m2 := MakeTLPageListOrderedItemText(m)
		m2.Decode(dBuf)
	case 0x98dd8936:
		m2 := MakeTLPageListOrderedItemBlocks(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageListOrderedItem) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageListOrderedItemText:
		t := m.To_PageListOrderedItemText()
		return t.DebugString()
	case Predicate_pageListOrderedItemBlocks:
		t := m.To_PageListOrderedItemBlocks()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageListOrderedItemText
func (m *PageListOrderedItem) To_PageListOrderedItemText() *TLPageListOrderedItemText {
	m.PredicateName = Predicate_pageListOrderedItemText
	return &TLPageListOrderedItemText{
		Data2: m,
	}
}

// To_PageListOrderedItemBlocks
func (m *PageListOrderedItem) To_PageListOrderedItemBlocks() *TLPageListOrderedItemBlocks {
	m.PredicateName = Predicate_pageListOrderedItemBlocks
	return &TLPageListOrderedItemBlocks{
		Data2: m,
	}
}

// MakeTLPageListOrderedItemText
func MakeTLPageListOrderedItemText(data2 *PageListOrderedItem) *TLPageListOrderedItemText {
	if data2 == nil {
		return &TLPageListOrderedItemText{Data2: &PageListOrderedItem{
			PredicateName: Predicate_pageListOrderedItemText,
		}}
	} else {
		data2.PredicateName = Predicate_pageListOrderedItemText
		return &TLPageListOrderedItemText{Data2: data2}
	}
}

func (m *TLPageListOrderedItemText) To_PageListOrderedItem() *PageListOrderedItem {
	m.Data2.PredicateName = Predicate_pageListOrderedItemText
	return m.Data2
}

func (m *TLPageListOrderedItemText) SetNum(v string) { m.Data2.Num = v }
func (m *TLPageListOrderedItemText) GetNum() string  { return m.Data2.Num }

func (m *TLPageListOrderedItemText) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageListOrderedItemText) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageListOrderedItemText) GetPredicateName() string {
	return Predicate_pageListOrderedItemText
}

func (m *TLPageListOrderedItemText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5e068047: func() []byte {
			x.UInt(0x5e068047)

			x.String(m.GetNum())
			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageListOrderedItemText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageListOrderedItemText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageListOrderedItemText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageListOrderedItemText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5e068047: func() error {
			m.SetNum(dBuf.String())

			m1 := &RichText{}
			m1.Decode(dBuf)
			m.SetText(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageListOrderedItemText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageListOrderedItemBlocks
func MakeTLPageListOrderedItemBlocks(data2 *PageListOrderedItem) *TLPageListOrderedItemBlocks {
	if data2 == nil {
		return &TLPageListOrderedItemBlocks{Data2: &PageListOrderedItem{
			PredicateName: Predicate_pageListOrderedItemBlocks,
		}}
	} else {
		data2.PredicateName = Predicate_pageListOrderedItemBlocks
		return &TLPageListOrderedItemBlocks{Data2: data2}
	}
}

func (m *TLPageListOrderedItemBlocks) To_PageListOrderedItem() *PageListOrderedItem {
	m.Data2.PredicateName = Predicate_pageListOrderedItemBlocks
	return m.Data2
}

func (m *TLPageListOrderedItemBlocks) SetNum(v string) { m.Data2.Num = v }
func (m *TLPageListOrderedItemBlocks) GetNum() string  { return m.Data2.Num }

func (m *TLPageListOrderedItemBlocks) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageListOrderedItemBlocks) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageListOrderedItemBlocks) GetPredicateName() string {
	return Predicate_pageListOrderedItemBlocks
}

func (m *TLPageListOrderedItemBlocks) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x98dd8936: func() []byte {
			x.UInt(0x98dd8936)

			x.String(m.GetNum())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageListOrderedItemBlocks, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageListOrderedItemBlocks, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageListOrderedItemBlocks) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageListOrderedItemBlocks) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x98dd8936: func() error {
			m.SetNum(dBuf.String())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*PageBlock, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &PageBlock{}
				v2[i].Decode(dBuf)
			}
			m.SetBlocks(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageListOrderedItemBlocks) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_PromoData <--
//  + TL_HelpPromoDataEmpty
//  + TL_HelpPromoData
//

func (m *Help_PromoData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_promoDataEmpty:
		t := m.To_HelpPromoDataEmpty()
		xBuf = t.Encode(layer)
	case Predicate_help_promoData:
		t := m.To_HelpPromoData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_PromoData) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_PromoData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x98f6ac75:
		m2 := MakeTLHelpPromoDataEmpty(m)
		m2.Decode(dBuf)
	case 0x8c39793f:
		m2 := MakeTLHelpPromoData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_PromoData) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_promoDataEmpty:
		t := m.To_HelpPromoDataEmpty()
		return t.DebugString()
	case Predicate_help_promoData:
		t := m.To_HelpPromoData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpPromoDataEmpty
func (m *Help_PromoData) To_HelpPromoDataEmpty() *TLHelpPromoDataEmpty {
	m.PredicateName = Predicate_help_promoDataEmpty
	return &TLHelpPromoDataEmpty{
		Data2: m,
	}
}

// To_HelpPromoData
func (m *Help_PromoData) To_HelpPromoData() *TLHelpPromoData {
	m.PredicateName = Predicate_help_promoData
	return &TLHelpPromoData{
		Data2: m,
	}
}

// MakeTLHelpPromoDataEmpty
func MakeTLHelpPromoDataEmpty(data2 *Help_PromoData) *TLHelpPromoDataEmpty {
	if data2 == nil {
		return &TLHelpPromoDataEmpty{Data2: &Help_PromoData{
			PredicateName: Predicate_help_promoDataEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_help_promoDataEmpty
		return &TLHelpPromoDataEmpty{Data2: data2}
	}
}

func (m *TLHelpPromoDataEmpty) To_Help_PromoData() *Help_PromoData {
	m.Data2.PredicateName = Predicate_help_promoDataEmpty
	return m.Data2
}

func (m *TLHelpPromoDataEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpPromoDataEmpty) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpPromoDataEmpty) GetPredicateName() string {
	return Predicate_help_promoDataEmpty
}

func (m *TLHelpPromoDataEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x98f6ac75: func() []byte {
			x.UInt(0x98f6ac75)

			x.Int(m.GetExpires())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_promoDataEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_promoDataEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpPromoDataEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpPromoDataEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x98f6ac75: func() error {
			m.SetExpires(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpPromoDataEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpPromoData
func MakeTLHelpPromoData(data2 *Help_PromoData) *TLHelpPromoData {
	if data2 == nil {
		return &TLHelpPromoData{Data2: &Help_PromoData{
			PredicateName: Predicate_help_promoData,
		}}
	} else {
		data2.PredicateName = Predicate_help_promoData
		return &TLHelpPromoData{Data2: data2}
	}
}

func (m *TLHelpPromoData) To_Help_PromoData() *Help_PromoData {
	m.Data2.PredicateName = Predicate_help_promoData
	return m.Data2
}

//// flags
func (m *TLHelpPromoData) SetProxy(v bool) { m.Data2.Proxy = v }
func (m *TLHelpPromoData) GetProxy() bool  { return m.Data2.Proxy }

func (m *TLHelpPromoData) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpPromoData) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpPromoData) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLHelpPromoData) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLHelpPromoData) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpPromoData) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLHelpPromoData) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpPromoData) GetUsers() []*User  { return m.Data2.Users }

func (m *TLHelpPromoData) SetPsaType(v *types.StringValue) { m.Data2.PsaType = v }
func (m *TLHelpPromoData) GetPsaType() *types.StringValue  { return m.Data2.PsaType }

func (m *TLHelpPromoData) SetPsaMessage(v *types.StringValue) { m.Data2.PsaMessage = v }
func (m *TLHelpPromoData) GetPsaMessage() *types.StringValue  { return m.Data2.PsaMessage }

func (m *TLHelpPromoData) GetPredicateName() string {
	return Predicate_help_promoData
}

func (m *TLHelpPromoData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c39793f: func() []byte {
			x.UInt(0x8c39793f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetProxy() == true {
					flags |= 1 << 0
				}

				if m.GetPsaType() != nil {
					flags |= 1 << 1
				}
				if m.GetPsaMessage() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetExpires())
			x.Bytes(m.GetPeer().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetPsaType() != nil {
				x.String(m.GetPsaType().Value)
			}

			if m.GetPsaMessage() != nil {
				x.String(m.GetPsaMessage().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_promoData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_promoData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpPromoData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpPromoData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c39793f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetProxy(true)
			}
			m.SetExpires(dBuf.Int())

			m3 := &Peer{}
			m3.Decode(dBuf)
			m.SetPeer(m3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*Chat, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &Chat{}
				v4[i].Decode(dBuf)
			}
			m.SetChats(v4)

			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*User, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &User{}
				v5[i].Decode(dBuf)
			}
			m.SetUsers(v5)

			if (flags & (1 << 1)) != 0 {
				m.SetPsaType(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetPsaMessage(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpPromoData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedMessages <--
//  + TL_MessagesAffectedMessages
//

func (m *Messages_AffectedMessages) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_affectedMessages:
		t := m.To_MessagesAffectedMessages()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_AffectedMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_AffectedMessages) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x84d19185:
		m2 := MakeTLMessagesAffectedMessages(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_AffectedMessages) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_affectedMessages:
		t := m.To_MessagesAffectedMessages()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesAffectedMessages
func (m *Messages_AffectedMessages) To_MessagesAffectedMessages() *TLMessagesAffectedMessages {
	m.PredicateName = Predicate_messages_affectedMessages
	return &TLMessagesAffectedMessages{
		Data2: m,
	}
}

// MakeTLMessagesAffectedMessages
func MakeTLMessagesAffectedMessages(data2 *Messages_AffectedMessages) *TLMessagesAffectedMessages {
	if data2 == nil {
		return &TLMessagesAffectedMessages{Data2: &Messages_AffectedMessages{
			PredicateName: Predicate_messages_affectedMessages,
		}}
	} else {
		data2.PredicateName = Predicate_messages_affectedMessages
		return &TLMessagesAffectedMessages{Data2: data2}
	}
}

func (m *TLMessagesAffectedMessages) To_Messages_AffectedMessages() *Messages_AffectedMessages {
	m.Data2.PredicateName = Predicate_messages_affectedMessages
	return m.Data2
}

func (m *TLMessagesAffectedMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesAffectedMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLMessagesAffectedMessages) GetPredicateName() string {
	return Predicate_messages_affectedMessages
}

func (m *TLMessagesAffectedMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x84d19185: func() []byte {
			x.UInt(0x84d19185)

			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_affectedMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_affectedMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAffectedMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAffectedMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x84d19185: func() error {
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAffectedMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfService <--
//  + TL_HelpTermsOfService
//

func (m *Help_TermsOfService) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_termsOfService:
		t := m.To_HelpTermsOfService()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_TermsOfService) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_TermsOfService) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x780a0310:
		m2 := MakeTLHelpTermsOfService(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_TermsOfService) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_termsOfService:
		t := m.To_HelpTermsOfService()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpTermsOfService
func (m *Help_TermsOfService) To_HelpTermsOfService() *TLHelpTermsOfService {
	m.PredicateName = Predicate_help_termsOfService
	return &TLHelpTermsOfService{
		Data2: m,
	}
}

// MakeTLHelpTermsOfService
func MakeTLHelpTermsOfService(data2 *Help_TermsOfService) *TLHelpTermsOfService {
	if data2 == nil {
		return &TLHelpTermsOfService{Data2: &Help_TermsOfService{
			PredicateName: Predicate_help_termsOfService,
		}}
	} else {
		data2.PredicateName = Predicate_help_termsOfService
		return &TLHelpTermsOfService{Data2: data2}
	}
}

func (m *TLHelpTermsOfService) To_Help_TermsOfService() *Help_TermsOfService {
	m.Data2.PredicateName = Predicate_help_termsOfService
	return m.Data2
}

//// flags
func (m *TLHelpTermsOfService) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLHelpTermsOfService) GetPopup() bool  { return m.Data2.Popup }

func (m *TLHelpTermsOfService) SetId(v *DataJSON) { m.Data2.Id = v }
func (m *TLHelpTermsOfService) GetId() *DataJSON  { return m.Data2.Id }

func (m *TLHelpTermsOfService) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpTermsOfService) GetText() string  { return m.Data2.Text }

func (m *TLHelpTermsOfService) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpTermsOfService) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpTermsOfService) SetMinAgeConfirm(v *types.Int32Value) { m.Data2.MinAgeConfirm = v }
func (m *TLHelpTermsOfService) GetMinAgeConfirm() *types.Int32Value  { return m.Data2.MinAgeConfirm }

func (m *TLHelpTermsOfService) GetPredicateName() string {
	return Predicate_help_termsOfService
}

func (m *TLHelpTermsOfService) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x780a0310: func() []byte {
			x.UInt(0x780a0310)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPopup() == true {
					flags |= 1 << 0
				}

				if m.GetMinAgeConfirm() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetId().Encode(layer))
			x.String(m.GetText())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMinAgeConfirm() != nil {
				x.Int(m.GetMinAgeConfirm().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_termsOfService, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_termsOfService, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpTermsOfService) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpTermsOfService) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x780a0310: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPopup(true)
			}

			m2 := &DataJSON{}
			m2.Decode(dBuf)
			m.SetId(m2)

			m.SetText(dBuf.String())
			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*MessageEntity, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &MessageEntity{}
				v4[i].Decode(dBuf)
			}
			m.SetEntities(v4)

			if (flags & (1 << 1)) != 0 {
				m.SetMinAgeConfirm(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpTermsOfService) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueHash <--
//  + TL_SecureValueHash
//

func (m *SecureValueHash) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureValueHash:
		t := m.To_SecureValueHash()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureValueHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureValueHash) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xed1ecdb0:
		m2 := MakeTLSecureValueHash(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureValueHash) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureValueHash:
		t := m.To_SecureValueHash()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureValueHash
func (m *SecureValueHash) To_SecureValueHash() *TLSecureValueHash {
	m.PredicateName = Predicate_secureValueHash
	return &TLSecureValueHash{
		Data2: m,
	}
}

// MakeTLSecureValueHash
func MakeTLSecureValueHash(data2 *SecureValueHash) *TLSecureValueHash {
	if data2 == nil {
		return &TLSecureValueHash{Data2: &SecureValueHash{
			PredicateName: Predicate_secureValueHash,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueHash
		return &TLSecureValueHash{Data2: data2}
	}
}

func (m *TLSecureValueHash) To_SecureValueHash() *SecureValueHash {
	m.Data2.PredicateName = Predicate_secureValueHash
	return m.Data2
}

func (m *TLSecureValueHash) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueHash) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValueHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueHash) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureValueHash) GetPredicateName() string {
	return Predicate_secureValueHash
}

func (m *TLSecureValueHash) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed1ecdb0: func() []byte {
			x.UInt(0xed1ecdb0)

			x.Bytes(m.GetType().Encode(layer))
			x.StringBytes(m.GetHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueHash, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueHash, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueHash) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed1ecdb0: func() error {

			m0 := &SecureValueType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetHash(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueHash) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageUserVote <--
//  + TL_MessageUserVote
//  + TL_MessageUserVoteInputOption
//  + TL_MessageUserVoteMultiple
//

func (m *MessageUserVote) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageUserVote:
		t := m.To_MessageUserVote()
		xBuf = t.Encode(layer)
	case Predicate_messageUserVoteInputOption:
		t := m.To_MessageUserVoteInputOption()
		xBuf = t.Encode(layer)
	case Predicate_messageUserVoteMultiple:
		t := m.To_MessageUserVoteMultiple()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageUserVote) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageUserVote) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x34d247b4:
		m2 := MakeTLMessageUserVote(m)
		m2.Decode(dBuf)
	case 0x3ca5b0ec:
		m2 := MakeTLMessageUserVoteInputOption(m)
		m2.Decode(dBuf)
	case 0x8a65e557:
		m2 := MakeTLMessageUserVoteMultiple(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageUserVote) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageUserVote:
		t := m.To_MessageUserVote()
		return t.DebugString()
	case Predicate_messageUserVoteInputOption:
		t := m.To_MessageUserVoteInputOption()
		return t.DebugString()
	case Predicate_messageUserVoteMultiple:
		t := m.To_MessageUserVoteMultiple()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageUserVote
func (m *MessageUserVote) To_MessageUserVote() *TLMessageUserVote {
	m.PredicateName = Predicate_messageUserVote
	return &TLMessageUserVote{
		Data2: m,
	}
}

// To_MessageUserVoteInputOption
func (m *MessageUserVote) To_MessageUserVoteInputOption() *TLMessageUserVoteInputOption {
	m.PredicateName = Predicate_messageUserVoteInputOption
	return &TLMessageUserVoteInputOption{
		Data2: m,
	}
}

// To_MessageUserVoteMultiple
func (m *MessageUserVote) To_MessageUserVoteMultiple() *TLMessageUserVoteMultiple {
	m.PredicateName = Predicate_messageUserVoteMultiple
	return &TLMessageUserVoteMultiple{
		Data2: m,
	}
}

// MakeTLMessageUserVote
func MakeTLMessageUserVote(data2 *MessageUserVote) *TLMessageUserVote {
	if data2 == nil {
		return &TLMessageUserVote{Data2: &MessageUserVote{
			PredicateName: Predicate_messageUserVote,
		}}
	} else {
		data2.PredicateName = Predicate_messageUserVote
		return &TLMessageUserVote{Data2: data2}
	}
}

func (m *TLMessageUserVote) To_MessageUserVote() *MessageUserVote {
	m.Data2.PredicateName = Predicate_messageUserVote
	return m.Data2
}

func (m *TLMessageUserVote) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageUserVote) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageUserVote) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLMessageUserVote) GetOption() []byte  { return m.Data2.Option }

func (m *TLMessageUserVote) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVote) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageUserVote) GetPredicateName() string {
	return Predicate_messageUserVote
}

func (m *TLMessageUserVote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x34d247b4: func() []byte {
			x.UInt(0x34d247b4)

			x.Long(m.GetUserId())
			x.StringBytes(m.GetOption())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageUserVote, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageUserVote, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageUserVote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageUserVote) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x34d247b4: func() error {
			m.SetUserId(dBuf.Long())
			m.SetOption(dBuf.StringBytes())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageUserVote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageUserVoteInputOption
func MakeTLMessageUserVoteInputOption(data2 *MessageUserVote) *TLMessageUserVoteInputOption {
	if data2 == nil {
		return &TLMessageUserVoteInputOption{Data2: &MessageUserVote{
			PredicateName: Predicate_messageUserVoteInputOption,
		}}
	} else {
		data2.PredicateName = Predicate_messageUserVoteInputOption
		return &TLMessageUserVoteInputOption{Data2: data2}
	}
}

func (m *TLMessageUserVoteInputOption) To_MessageUserVote() *MessageUserVote {
	m.Data2.PredicateName = Predicate_messageUserVoteInputOption
	return m.Data2
}

func (m *TLMessageUserVoteInputOption) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageUserVoteInputOption) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageUserVoteInputOption) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVoteInputOption) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageUserVoteInputOption) GetPredicateName() string {
	return Predicate_messageUserVoteInputOption
}

func (m *TLMessageUserVoteInputOption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3ca5b0ec: func() []byte {
			x.UInt(0x3ca5b0ec)

			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageUserVoteInputOption, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageUserVoteInputOption, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageUserVoteInputOption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageUserVoteInputOption) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3ca5b0ec: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageUserVoteInputOption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageUserVoteMultiple
func MakeTLMessageUserVoteMultiple(data2 *MessageUserVote) *TLMessageUserVoteMultiple {
	if data2 == nil {
		return &TLMessageUserVoteMultiple{Data2: &MessageUserVote{
			PredicateName: Predicate_messageUserVoteMultiple,
		}}
	} else {
		data2.PredicateName = Predicate_messageUserVoteMultiple
		return &TLMessageUserVoteMultiple{Data2: data2}
	}
}

func (m *TLMessageUserVoteMultiple) To_MessageUserVote() *MessageUserVote {
	m.Data2.PredicateName = Predicate_messageUserVoteMultiple
	return m.Data2
}

func (m *TLMessageUserVoteMultiple) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageUserVoteMultiple) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageUserVoteMultiple) SetOptions(v [][]byte) { m.Data2.Options = v }
func (m *TLMessageUserVoteMultiple) GetOptions() [][]byte  { return m.Data2.Options }

func (m *TLMessageUserVoteMultiple) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVoteMultiple) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageUserVoteMultiple) GetPredicateName() string {
	return Predicate_messageUserVoteMultiple
}

func (m *TLMessageUserVoteMultiple) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8a65e557: func() []byte {
			x.UInt(0x8a65e557)

			x.Long(m.GetUserId())

			x.VectorBytes(m.GetOptions())

			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageUserVoteMultiple, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageUserVoteMultiple, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageUserVoteMultiple) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageUserVoteMultiple) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8a65e557: func() error {
			m.SetUserId(dBuf.Long())

			m.SetOptions(dBuf.VectorBytes())

			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageUserVoteMultiple) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_ResetPasswordResult <--
//  + TL_AccountResetPasswordFailedWait
//  + TL_AccountResetPasswordRequestedWait
//  + TL_AccountResetPasswordOk
//

func (m *Account_ResetPasswordResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_resetPasswordFailedWait:
		t := m.To_AccountResetPasswordFailedWait()
		xBuf = t.Encode(layer)
	case Predicate_account_resetPasswordRequestedWait:
		t := m.To_AccountResetPasswordRequestedWait()
		xBuf = t.Encode(layer)
	case Predicate_account_resetPasswordOk:
		t := m.To_AccountResetPasswordOk()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_ResetPasswordResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_ResetPasswordResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe3779861:
		m2 := MakeTLAccountResetPasswordFailedWait(m)
		m2.Decode(dBuf)
	case 0xe9effc7d:
		m2 := MakeTLAccountResetPasswordRequestedWait(m)
		m2.Decode(dBuf)
	case 0xe926d63e:
		m2 := MakeTLAccountResetPasswordOk(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_ResetPasswordResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_resetPasswordFailedWait:
		t := m.To_AccountResetPasswordFailedWait()
		return t.DebugString()
	case Predicate_account_resetPasswordRequestedWait:
		t := m.To_AccountResetPasswordRequestedWait()
		return t.DebugString()
	case Predicate_account_resetPasswordOk:
		t := m.To_AccountResetPasswordOk()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountResetPasswordFailedWait
func (m *Account_ResetPasswordResult) To_AccountResetPasswordFailedWait() *TLAccountResetPasswordFailedWait {
	m.PredicateName = Predicate_account_resetPasswordFailedWait
	return &TLAccountResetPasswordFailedWait{
		Data2: m,
	}
}

// To_AccountResetPasswordRequestedWait
func (m *Account_ResetPasswordResult) To_AccountResetPasswordRequestedWait() *TLAccountResetPasswordRequestedWait {
	m.PredicateName = Predicate_account_resetPasswordRequestedWait
	return &TLAccountResetPasswordRequestedWait{
		Data2: m,
	}
}

// To_AccountResetPasswordOk
func (m *Account_ResetPasswordResult) To_AccountResetPasswordOk() *TLAccountResetPasswordOk {
	m.PredicateName = Predicate_account_resetPasswordOk
	return &TLAccountResetPasswordOk{
		Data2: m,
	}
}

// MakeTLAccountResetPasswordFailedWait
func MakeTLAccountResetPasswordFailedWait(data2 *Account_ResetPasswordResult) *TLAccountResetPasswordFailedWait {
	if data2 == nil {
		return &TLAccountResetPasswordFailedWait{Data2: &Account_ResetPasswordResult{
			PredicateName: Predicate_account_resetPasswordFailedWait,
		}}
	} else {
		data2.PredicateName = Predicate_account_resetPasswordFailedWait
		return &TLAccountResetPasswordFailedWait{Data2: data2}
	}
}

func (m *TLAccountResetPasswordFailedWait) To_Account_ResetPasswordResult() *Account_ResetPasswordResult {
	m.Data2.PredicateName = Predicate_account_resetPasswordFailedWait
	return m.Data2
}

func (m *TLAccountResetPasswordFailedWait) SetRetryDate(v int32) { m.Data2.RetryDate = v }
func (m *TLAccountResetPasswordFailedWait) GetRetryDate() int32  { return m.Data2.RetryDate }

func (m *TLAccountResetPasswordFailedWait) GetPredicateName() string {
	return Predicate_account_resetPasswordFailedWait
}

func (m *TLAccountResetPasswordFailedWait) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe3779861: func() []byte {
			x.UInt(0xe3779861)

			x.Int(m.GetRetryDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_resetPasswordFailedWait, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_resetPasswordFailedWait, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountResetPasswordFailedWait) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetPasswordFailedWait) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe3779861: func() error {
			m.SetRetryDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountResetPasswordFailedWait) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAccountResetPasswordRequestedWait
func MakeTLAccountResetPasswordRequestedWait(data2 *Account_ResetPasswordResult) *TLAccountResetPasswordRequestedWait {
	if data2 == nil {
		return &TLAccountResetPasswordRequestedWait{Data2: &Account_ResetPasswordResult{
			PredicateName: Predicate_account_resetPasswordRequestedWait,
		}}
	} else {
		data2.PredicateName = Predicate_account_resetPasswordRequestedWait
		return &TLAccountResetPasswordRequestedWait{Data2: data2}
	}
}

func (m *TLAccountResetPasswordRequestedWait) To_Account_ResetPasswordResult() *Account_ResetPasswordResult {
	m.Data2.PredicateName = Predicate_account_resetPasswordRequestedWait
	return m.Data2
}

func (m *TLAccountResetPasswordRequestedWait) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLAccountResetPasswordRequestedWait) GetUntilDate() int32  { return m.Data2.UntilDate }

func (m *TLAccountResetPasswordRequestedWait) GetPredicateName() string {
	return Predicate_account_resetPasswordRequestedWait
}

func (m *TLAccountResetPasswordRequestedWait) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe9effc7d: func() []byte {
			x.UInt(0xe9effc7d)

			x.Int(m.GetUntilDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_resetPasswordRequestedWait, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_resetPasswordRequestedWait, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountResetPasswordRequestedWait) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetPasswordRequestedWait) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe9effc7d: func() error {
			m.SetUntilDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountResetPasswordRequestedWait) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAccountResetPasswordOk
func MakeTLAccountResetPasswordOk(data2 *Account_ResetPasswordResult) *TLAccountResetPasswordOk {
	if data2 == nil {
		return &TLAccountResetPasswordOk{Data2: &Account_ResetPasswordResult{
			PredicateName: Predicate_account_resetPasswordOk,
		}}
	} else {
		data2.PredicateName = Predicate_account_resetPasswordOk
		return &TLAccountResetPasswordOk{Data2: data2}
	}
}

func (m *TLAccountResetPasswordOk) To_Account_ResetPasswordResult() *Account_ResetPasswordResult {
	m.Data2.PredicateName = Predicate_account_resetPasswordOk
	return m.Data2
}

func (m *TLAccountResetPasswordOk) GetPredicateName() string {
	return Predicate_account_resetPasswordOk
}

func (m *TLAccountResetPasswordOk) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe926d63e: func() []byte {
			x.UInt(0xe926d63e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_resetPasswordOk, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_resetPasswordOk, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountResetPasswordOk) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetPasswordOk) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe926d63e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountResetPasswordOk) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ContactStatus <--
//  + TL_ContactStatus
//

func (m *ContactStatus) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contactStatus:
		t := m.To_ContactStatus()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ContactStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *ContactStatus) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x16d9703b:
		m2 := MakeTLContactStatus(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ContactStatus) DebugString() string {
	switch m.PredicateName {
	case Predicate_contactStatus:
		t := m.To_ContactStatus()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactStatus
func (m *ContactStatus) To_ContactStatus() *TLContactStatus {
	m.PredicateName = Predicate_contactStatus
	return &TLContactStatus{
		Data2: m,
	}
}

// MakeTLContactStatus
func MakeTLContactStatus(data2 *ContactStatus) *TLContactStatus {
	if data2 == nil {
		return &TLContactStatus{Data2: &ContactStatus{
			PredicateName: Predicate_contactStatus,
		}}
	} else {
		data2.PredicateName = Predicate_contactStatus
		return &TLContactStatus{Data2: data2}
	}
}

func (m *TLContactStatus) To_ContactStatus() *ContactStatus {
	m.Data2.PredicateName = Predicate_contactStatus
	return m.Data2
}

func (m *TLContactStatus) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLContactStatus) GetUserId() int64  { return m.Data2.UserId }

func (m *TLContactStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLContactStatus) GetStatus() *UserStatus  { return m.Data2.Status }

func (m *TLContactStatus) GetPredicateName() string {
	return Predicate_contactStatus
}

func (m *TLContactStatus) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x16d9703b: func() []byte {
			x.UInt(0x16d9703b)

			x.Long(m.GetUserId())
			x.Bytes(m.GetStatus().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contactStatus, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contactStatus, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactStatus) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x16d9703b: func() error {
			m.SetUserId(dBuf.Long())

			m1 := &UserStatus{}
			m1.Decode(dBuf)
			m.SetStatus(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactStatus) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PaymentCharge <--
//  + TL_PaymentCharge
//

func (m *PaymentCharge) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_paymentCharge:
		t := m.To_PaymentCharge()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PaymentCharge) CalcByteSize(layer int32) int {
	return 0
}

func (m *PaymentCharge) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xea02c27e:
		m2 := MakeTLPaymentCharge(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PaymentCharge) DebugString() string {
	switch m.PredicateName {
	case Predicate_paymentCharge:
		t := m.To_PaymentCharge()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentCharge
func (m *PaymentCharge) To_PaymentCharge() *TLPaymentCharge {
	m.PredicateName = Predicate_paymentCharge
	return &TLPaymentCharge{
		Data2: m,
	}
}

// MakeTLPaymentCharge
func MakeTLPaymentCharge(data2 *PaymentCharge) *TLPaymentCharge {
	if data2 == nil {
		return &TLPaymentCharge{Data2: &PaymentCharge{
			PredicateName: Predicate_paymentCharge,
		}}
	} else {
		data2.PredicateName = Predicate_paymentCharge
		return &TLPaymentCharge{Data2: data2}
	}
}

func (m *TLPaymentCharge) To_PaymentCharge() *PaymentCharge {
	m.Data2.PredicateName = Predicate_paymentCharge
	return m.Data2
}

func (m *TLPaymentCharge) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentCharge) GetId() string  { return m.Data2.Id }

func (m *TLPaymentCharge) SetProviderChargeId(v string) { m.Data2.ProviderChargeId = v }
func (m *TLPaymentCharge) GetProviderChargeId() string  { return m.Data2.ProviderChargeId }

func (m *TLPaymentCharge) GetPredicateName() string {
	return Predicate_paymentCharge
}

func (m *TLPaymentCharge) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xea02c27e: func() []byte {
			x.UInt(0xea02c27e)

			x.String(m.GetId())
			x.String(m.GetProviderChargeId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_paymentCharge, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_paymentCharge, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentCharge) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentCharge) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xea02c27e: func() error {
			m.SetId(dBuf.String())
			m.SetProviderChargeId(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentCharge) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageListItem <--
//  + TL_PageListItemText
//  + TL_PageListItemBlocks
//

func (m *PageListItem) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageListItemText:
		t := m.To_PageListItemText()
		xBuf = t.Encode(layer)
	case Predicate_pageListItemBlocks:
		t := m.To_PageListItemBlocks()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageListItem) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageListItem) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb92fb6cd:
		m2 := MakeTLPageListItemText(m)
		m2.Decode(dBuf)
	case 0x25e073fc:
		m2 := MakeTLPageListItemBlocks(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageListItem) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageListItemText:
		t := m.To_PageListItemText()
		return t.DebugString()
	case Predicate_pageListItemBlocks:
		t := m.To_PageListItemBlocks()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageListItemText
func (m *PageListItem) To_PageListItemText() *TLPageListItemText {
	m.PredicateName = Predicate_pageListItemText
	return &TLPageListItemText{
		Data2: m,
	}
}

// To_PageListItemBlocks
func (m *PageListItem) To_PageListItemBlocks() *TLPageListItemBlocks {
	m.PredicateName = Predicate_pageListItemBlocks
	return &TLPageListItemBlocks{
		Data2: m,
	}
}

// MakeTLPageListItemText
func MakeTLPageListItemText(data2 *PageListItem) *TLPageListItemText {
	if data2 == nil {
		return &TLPageListItemText{Data2: &PageListItem{
			PredicateName: Predicate_pageListItemText,
		}}
	} else {
		data2.PredicateName = Predicate_pageListItemText
		return &TLPageListItemText{Data2: data2}
	}
}

func (m *TLPageListItemText) To_PageListItem() *PageListItem {
	m.Data2.PredicateName = Predicate_pageListItemText
	return m.Data2
}

func (m *TLPageListItemText) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageListItemText) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageListItemText) GetPredicateName() string {
	return Predicate_pageListItemText
}

func (m *TLPageListItemText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb92fb6cd: func() []byte {
			x.UInt(0xb92fb6cd)

			x.Bytes(m.GetText().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageListItemText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageListItemText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageListItemText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageListItemText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb92fb6cd: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageListItemText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPageListItemBlocks
func MakeTLPageListItemBlocks(data2 *PageListItem) *TLPageListItemBlocks {
	if data2 == nil {
		return &TLPageListItemBlocks{Data2: &PageListItem{
			PredicateName: Predicate_pageListItemBlocks,
		}}
	} else {
		data2.PredicateName = Predicate_pageListItemBlocks
		return &TLPageListItemBlocks{Data2: data2}
	}
}

func (m *TLPageListItemBlocks) To_PageListItem() *PageListItem {
	m.Data2.PredicateName = Predicate_pageListItemBlocks
	return m.Data2
}

func (m *TLPageListItemBlocks) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageListItemBlocks) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPageListItemBlocks) GetPredicateName() string {
	return Predicate_pageListItemBlocks
}

func (m *TLPageListItemBlocks) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x25e073fc: func() []byte {
			x.UInt(0x25e073fc)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageListItemBlocks, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageListItemBlocks, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageListItemBlocks) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageListItemBlocks) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x25e073fc: func() error {
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*PageBlock, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &PageBlock{}
				v1[i].Decode(dBuf)
			}
			m.SetBlocks(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageListItemBlocks) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EmojiKeyword <--
//  + TL_EmojiKeyword
//  + TL_EmojiKeywordDeleted
//

func (m *EmojiKeyword) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_emojiKeyword:
		t := m.To_EmojiKeyword()
		xBuf = t.Encode(layer)
	case Predicate_emojiKeywordDeleted:
		t := m.To_EmojiKeywordDeleted()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EmojiKeyword) CalcByteSize(layer int32) int {
	return 0
}

func (m *EmojiKeyword) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd5b3b9f9:
		m2 := MakeTLEmojiKeyword(m)
		m2.Decode(dBuf)
	case 0x236df622:
		m2 := MakeTLEmojiKeywordDeleted(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EmojiKeyword) DebugString() string {
	switch m.PredicateName {
	case Predicate_emojiKeyword:
		t := m.To_EmojiKeyword()
		return t.DebugString()
	case Predicate_emojiKeywordDeleted:
		t := m.To_EmojiKeywordDeleted()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EmojiKeyword
func (m *EmojiKeyword) To_EmojiKeyword() *TLEmojiKeyword {
	m.PredicateName = Predicate_emojiKeyword
	return &TLEmojiKeyword{
		Data2: m,
	}
}

// To_EmojiKeywordDeleted
func (m *EmojiKeyword) To_EmojiKeywordDeleted() *TLEmojiKeywordDeleted {
	m.PredicateName = Predicate_emojiKeywordDeleted
	return &TLEmojiKeywordDeleted{
		Data2: m,
	}
}

// MakeTLEmojiKeyword
func MakeTLEmojiKeyword(data2 *EmojiKeyword) *TLEmojiKeyword {
	if data2 == nil {
		return &TLEmojiKeyword{Data2: &EmojiKeyword{
			PredicateName: Predicate_emojiKeyword,
		}}
	} else {
		data2.PredicateName = Predicate_emojiKeyword
		return &TLEmojiKeyword{Data2: data2}
	}
}

func (m *TLEmojiKeyword) To_EmojiKeyword() *EmojiKeyword {
	m.Data2.PredicateName = Predicate_emojiKeyword
	return m.Data2
}

func (m *TLEmojiKeyword) SetKeyword(v string) { m.Data2.Keyword = v }
func (m *TLEmojiKeyword) GetKeyword() string  { return m.Data2.Keyword }

func (m *TLEmojiKeyword) SetEmoticons(v []string) { m.Data2.Emoticons = v }
func (m *TLEmojiKeyword) GetEmoticons() []string  { return m.Data2.Emoticons }

func (m *TLEmojiKeyword) GetPredicateName() string {
	return Predicate_emojiKeyword
}

func (m *TLEmojiKeyword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd5b3b9f9: func() []byte {
			x.UInt(0xd5b3b9f9)

			x.String(m.GetKeyword())

			x.VectorString(m.GetEmoticons())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_emojiKeyword, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_emojiKeyword, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEmojiKeyword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEmojiKeyword) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd5b3b9f9: func() error {
			m.SetKeyword(dBuf.String())

			m.SetEmoticons(dBuf.VectorString())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEmojiKeyword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEmojiKeywordDeleted
func MakeTLEmojiKeywordDeleted(data2 *EmojiKeyword) *TLEmojiKeywordDeleted {
	if data2 == nil {
		return &TLEmojiKeywordDeleted{Data2: &EmojiKeyword{
			PredicateName: Predicate_emojiKeywordDeleted,
		}}
	} else {
		data2.PredicateName = Predicate_emojiKeywordDeleted
		return &TLEmojiKeywordDeleted{Data2: data2}
	}
}

func (m *TLEmojiKeywordDeleted) To_EmojiKeyword() *EmojiKeyword {
	m.Data2.PredicateName = Predicate_emojiKeywordDeleted
	return m.Data2
}

func (m *TLEmojiKeywordDeleted) SetKeyword(v string) { m.Data2.Keyword = v }
func (m *TLEmojiKeywordDeleted) GetKeyword() string  { return m.Data2.Keyword }

func (m *TLEmojiKeywordDeleted) SetEmoticons(v []string) { m.Data2.Emoticons = v }
func (m *TLEmojiKeywordDeleted) GetEmoticons() []string  { return m.Data2.Emoticons }

func (m *TLEmojiKeywordDeleted) GetPredicateName() string {
	return Predicate_emojiKeywordDeleted
}

func (m *TLEmojiKeywordDeleted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x236df622: func() []byte {
			x.UInt(0x236df622)

			x.String(m.GetKeyword())

			x.VectorString(m.GetEmoticons())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_emojiKeywordDeleted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_emojiKeywordDeleted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEmojiKeywordDeleted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEmojiKeywordDeleted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x236df622: func() error {
			m.SetKeyword(dBuf.String())

			m.SetEmoticons(dBuf.VectorString())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEmojiKeywordDeleted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_LoggedOut <--
//  + TL_AuthLoggedOut
//

func (m *Auth_LoggedOut) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_loggedOut:
		t := m.To_AuthLoggedOut()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_LoggedOut) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_LoggedOut) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc3a2835f:
		m2 := MakeTLAuthLoggedOut(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_LoggedOut) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_loggedOut:
		t := m.To_AuthLoggedOut()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthLoggedOut
func (m *Auth_LoggedOut) To_AuthLoggedOut() *TLAuthLoggedOut {
	m.PredicateName = Predicate_auth_loggedOut
	return &TLAuthLoggedOut{
		Data2: m,
	}
}

// MakeTLAuthLoggedOut
func MakeTLAuthLoggedOut(data2 *Auth_LoggedOut) *TLAuthLoggedOut {
	if data2 == nil {
		return &TLAuthLoggedOut{Data2: &Auth_LoggedOut{
			PredicateName: Predicate_auth_loggedOut,
		}}
	} else {
		data2.PredicateName = Predicate_auth_loggedOut
		return &TLAuthLoggedOut{Data2: data2}
	}
}

func (m *TLAuthLoggedOut) To_Auth_LoggedOut() *Auth_LoggedOut {
	m.Data2.PredicateName = Predicate_auth_loggedOut
	return m.Data2
}

//// flags
func (m *TLAuthLoggedOut) SetFutureAuthToken(v []byte) { m.Data2.FutureAuthToken = v }
func (m *TLAuthLoggedOut) GetFutureAuthToken() []byte  { return m.Data2.FutureAuthToken }

func (m *TLAuthLoggedOut) GetPredicateName() string {
	return Predicate_auth_loggedOut
}

func (m *TLAuthLoggedOut) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc3a2835f: func() []byte {
			x.UInt(0xc3a2835f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFutureAuthToken() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFutureAuthToken() != nil {
				x.StringBytes(m.GetFutureAuthToken())
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_loggedOut, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_loggedOut, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthLoggedOut) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLoggedOut) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc3a2835f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFutureAuthToken(dBuf.StringBytes())
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthLoggedOut) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPhoneCall <--
//  + TL_InputPhoneCall
//

func (m *InputPhoneCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPhoneCall:
		t := m.To_InputPhoneCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPhoneCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1e36fded:
		m2 := MakeTLInputPhoneCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPhoneCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPhoneCall:
		t := m.To_InputPhoneCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPhoneCall
func (m *InputPhoneCall) To_InputPhoneCall() *TLInputPhoneCall {
	m.PredicateName = Predicate_inputPhoneCall
	return &TLInputPhoneCall{
		Data2: m,
	}
}

// MakeTLInputPhoneCall
func MakeTLInputPhoneCall(data2 *InputPhoneCall) *TLInputPhoneCall {
	if data2 == nil {
		return &TLInputPhoneCall{Data2: &InputPhoneCall{
			PredicateName: Predicate_inputPhoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhoneCall
		return &TLInputPhoneCall{Data2: data2}
	}
}

func (m *TLInputPhoneCall) To_InputPhoneCall() *InputPhoneCall {
	m.Data2.PredicateName = Predicate_inputPhoneCall
	return m.Data2
}

func (m *TLInputPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoneCall) GetId() int64  { return m.Data2.Id }

func (m *TLInputPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoneCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPhoneCall) GetPredicateName() string {
	return Predicate_inputPhoneCall
}

func (m *TLInputPhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e36fded: func() []byte {
			x.UInt(0x1e36fded)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e36fded: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_LoginToken <--
//  + TL_AuthLoginToken
//  + TL_AuthLoginTokenMigrateTo
//  + TL_AuthLoginTokenSuccess
//

func (m *Auth_LoginToken) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_loginToken:
		t := m.To_AuthLoginToken()
		xBuf = t.Encode(layer)
	case Predicate_auth_loginTokenMigrateTo:
		t := m.To_AuthLoginTokenMigrateTo()
		xBuf = t.Encode(layer)
	case Predicate_auth_loginTokenSuccess:
		t := m.To_AuthLoginTokenSuccess()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_LoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_LoginToken) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x629f1980:
		m2 := MakeTLAuthLoginToken(m)
		m2.Decode(dBuf)
	case 0x68e9916:
		m2 := MakeTLAuthLoginTokenMigrateTo(m)
		m2.Decode(dBuf)
	case 0x390d5c5e:
		m2 := MakeTLAuthLoginTokenSuccess(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_LoginToken) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_loginToken:
		t := m.To_AuthLoginToken()
		return t.DebugString()
	case Predicate_auth_loginTokenMigrateTo:
		t := m.To_AuthLoginTokenMigrateTo()
		return t.DebugString()
	case Predicate_auth_loginTokenSuccess:
		t := m.To_AuthLoginTokenSuccess()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthLoginToken
func (m *Auth_LoginToken) To_AuthLoginToken() *TLAuthLoginToken {
	m.PredicateName = Predicate_auth_loginToken
	return &TLAuthLoginToken{
		Data2: m,
	}
}

// To_AuthLoginTokenMigrateTo
func (m *Auth_LoginToken) To_AuthLoginTokenMigrateTo() *TLAuthLoginTokenMigrateTo {
	m.PredicateName = Predicate_auth_loginTokenMigrateTo
	return &TLAuthLoginTokenMigrateTo{
		Data2: m,
	}
}

// To_AuthLoginTokenSuccess
func (m *Auth_LoginToken) To_AuthLoginTokenSuccess() *TLAuthLoginTokenSuccess {
	m.PredicateName = Predicate_auth_loginTokenSuccess
	return &TLAuthLoginTokenSuccess{
		Data2: m,
	}
}

// MakeTLAuthLoginToken
func MakeTLAuthLoginToken(data2 *Auth_LoginToken) *TLAuthLoginToken {
	if data2 == nil {
		return &TLAuthLoginToken{Data2: &Auth_LoginToken{
			PredicateName: Predicate_auth_loginToken,
		}}
	} else {
		data2.PredicateName = Predicate_auth_loginToken
		return &TLAuthLoginToken{Data2: data2}
	}
}

func (m *TLAuthLoginToken) To_Auth_LoginToken() *Auth_LoginToken {
	m.Data2.PredicateName = Predicate_auth_loginToken
	return m.Data2
}

func (m *TLAuthLoginToken) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLAuthLoginToken) GetExpires() int32  { return m.Data2.Expires }

func (m *TLAuthLoginToken) SetToken(v []byte) { m.Data2.Token = v }
func (m *TLAuthLoginToken) GetToken() []byte  { return m.Data2.Token }

func (m *TLAuthLoginToken) GetPredicateName() string {
	return Predicate_auth_loginToken
}

func (m *TLAuthLoginToken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x629f1980: func() []byte {
			x.UInt(0x629f1980)

			x.Int(m.GetExpires())
			x.StringBytes(m.GetToken())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_loginToken, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_loginToken, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthLoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLoginToken) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x629f1980: func() error {
			m.SetExpires(dBuf.Int())
			m.SetToken(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthLoginToken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthLoginTokenMigrateTo
func MakeTLAuthLoginTokenMigrateTo(data2 *Auth_LoginToken) *TLAuthLoginTokenMigrateTo {
	if data2 == nil {
		return &TLAuthLoginTokenMigrateTo{Data2: &Auth_LoginToken{
			PredicateName: Predicate_auth_loginTokenMigrateTo,
		}}
	} else {
		data2.PredicateName = Predicate_auth_loginTokenMigrateTo
		return &TLAuthLoginTokenMigrateTo{Data2: data2}
	}
}

func (m *TLAuthLoginTokenMigrateTo) To_Auth_LoginToken() *Auth_LoginToken {
	m.Data2.PredicateName = Predicate_auth_loginTokenMigrateTo
	return m.Data2
}

func (m *TLAuthLoginTokenMigrateTo) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLAuthLoginTokenMigrateTo) GetDcId() int32  { return m.Data2.DcId }

func (m *TLAuthLoginTokenMigrateTo) SetToken(v []byte) { m.Data2.Token = v }
func (m *TLAuthLoginTokenMigrateTo) GetToken() []byte  { return m.Data2.Token }

func (m *TLAuthLoginTokenMigrateTo) GetPredicateName() string {
	return Predicate_auth_loginTokenMigrateTo
}

func (m *TLAuthLoginTokenMigrateTo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x68e9916: func() []byte {
			x.UInt(0x68e9916)

			x.Int(m.GetDcId())
			x.StringBytes(m.GetToken())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_loginTokenMigrateTo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_loginTokenMigrateTo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthLoginTokenMigrateTo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLoginTokenMigrateTo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x68e9916: func() error {
			m.SetDcId(dBuf.Int())
			m.SetToken(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthLoginTokenMigrateTo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthLoginTokenSuccess
func MakeTLAuthLoginTokenSuccess(data2 *Auth_LoginToken) *TLAuthLoginTokenSuccess {
	if data2 == nil {
		return &TLAuthLoginTokenSuccess{Data2: &Auth_LoginToken{
			PredicateName: Predicate_auth_loginTokenSuccess,
		}}
	} else {
		data2.PredicateName = Predicate_auth_loginTokenSuccess
		return &TLAuthLoginTokenSuccess{Data2: data2}
	}
}

func (m *TLAuthLoginTokenSuccess) To_Auth_LoginToken() *Auth_LoginToken {
	m.Data2.PredicateName = Predicate_auth_loginTokenSuccess
	return m.Data2
}

func (m *TLAuthLoginTokenSuccess) SetAuthorization(v *Auth_Authorization) { m.Data2.Authorization = v }
func (m *TLAuthLoginTokenSuccess) GetAuthorization() *Auth_Authorization {
	return m.Data2.Authorization
}

func (m *TLAuthLoginTokenSuccess) GetPredicateName() string {
	return Predicate_auth_loginTokenSuccess
}

func (m *TLAuthLoginTokenSuccess) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x390d5c5e: func() []byte {
			x.UInt(0x390d5c5e)

			x.Bytes(m.GetAuthorization().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_loginTokenSuccess, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_loginTokenSuccess, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthLoginTokenSuccess) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLoginTokenSuccess) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x390d5c5e: func() error {

			m3 := &Auth_Authorization{}
			m3.Decode(dBuf)
			m.SetAuthorization(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthLoginTokenSuccess) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_GroupCall <--
//  + TL_PhoneGroupCall
//

func (m *Phone_GroupCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_groupCall:
		t := m.To_PhoneGroupCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_GroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_GroupCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9e727aad:
		m2 := MakeTLPhoneGroupCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_GroupCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_groupCall:
		t := m.To_PhoneGroupCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneGroupCall
func (m *Phone_GroupCall) To_PhoneGroupCall() *TLPhoneGroupCall {
	m.PredicateName = Predicate_phone_groupCall
	return &TLPhoneGroupCall{
		Data2: m,
	}
}

// MakeTLPhoneGroupCall
func MakeTLPhoneGroupCall(data2 *Phone_GroupCall) *TLPhoneGroupCall {
	if data2 == nil {
		return &TLPhoneGroupCall{Data2: &Phone_GroupCall{
			PredicateName: Predicate_phone_groupCall,
		}}
	} else {
		data2.PredicateName = Predicate_phone_groupCall
		return &TLPhoneGroupCall{Data2: data2}
	}
}

func (m *TLPhoneGroupCall) To_Phone_GroupCall() *Phone_GroupCall {
	m.Data2.PredicateName = Predicate_phone_groupCall
	return m.Data2
}

func (m *TLPhoneGroupCall) SetCall(v *GroupCall) { m.Data2.Call = v }
func (m *TLPhoneGroupCall) GetCall() *GroupCall  { return m.Data2.Call }

func (m *TLPhoneGroupCall) SetParticipants(v []*GroupCallParticipant) { m.Data2.Participants = v }
func (m *TLPhoneGroupCall) GetParticipants() []*GroupCallParticipant  { return m.Data2.Participants }

func (m *TLPhoneGroupCall) SetParticipantsNextOffset(v string) { m.Data2.ParticipantsNextOffset = v }
func (m *TLPhoneGroupCall) GetParticipantsNextOffset() string  { return m.Data2.ParticipantsNextOffset }

func (m *TLPhoneGroupCall) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLPhoneGroupCall) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLPhoneGroupCall) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhoneGroupCall) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhoneGroupCall) GetPredicateName() string {
	return Predicate_phone_groupCall
}

func (m *TLPhoneGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9e727aad: func() []byte {
			x.UInt(0x9e727aad)

			x.Bytes(m.GetCall().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetParticipants())))
			for _, v := range m.GetParticipants() {
				x.Bytes((*v).Encode(layer))
			}

			x.String(m.GetParticipantsNextOffset())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_groupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_groupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9e727aad: func() error {

			m0 := &GroupCall{}
			m0.Decode(dBuf)
			m.SetCall(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*GroupCallParticipant, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &GroupCallParticipant{}
				v1[i].Decode(dBuf)
			}
			m.SetParticipants(v1)

			m.SetParticipantsNextOffset(dBuf.String())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*Chat, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &Chat{}
				v3[i].Decode(dBuf)
			}
			m.SetChats(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*User, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &User{}
				v4[i].Decode(dBuf)
			}
			m.SetUsers(v4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPrivacyRule <--
//  + TL_InputPrivacyValueAllowContacts
//  + TL_InputPrivacyValueAllowAll
//  + TL_InputPrivacyValueAllowUsers
//  + TL_InputPrivacyValueDisallowContacts
//  + TL_InputPrivacyValueDisallowAll
//  + TL_InputPrivacyValueDisallowUsers
//  + TL_InputPrivacyValueAllowChatParticipants
//  + TL_InputPrivacyValueDisallowChatParticipants
//

func (m *InputPrivacyRule) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPrivacyValueAllowContacts:
		t := m.To_InputPrivacyValueAllowContacts()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueAllowAll:
		t := m.To_InputPrivacyValueAllowAll()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueAllowUsers:
		t := m.To_InputPrivacyValueAllowUsers()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueDisallowContacts:
		t := m.To_InputPrivacyValueDisallowContacts()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueDisallowAll:
		t := m.To_InputPrivacyValueDisallowAll()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueDisallowUsers:
		t := m.To_InputPrivacyValueDisallowUsers()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueAllowChatParticipants:
		t := m.To_InputPrivacyValueAllowChatParticipants()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyValueDisallowChatParticipants:
		t := m.To_InputPrivacyValueDisallowChatParticipants()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPrivacyRule) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPrivacyRule) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd09e07b:
		m2 := MakeTLInputPrivacyValueAllowContacts(m)
		m2.Decode(dBuf)
	case 0x184b35ce:
		m2 := MakeTLInputPrivacyValueAllowAll(m)
		m2.Decode(dBuf)
	case 0x131cc67f:
		m2 := MakeTLInputPrivacyValueAllowUsers(m)
		m2.Decode(dBuf)
	case 0xba52007:
		m2 := MakeTLInputPrivacyValueDisallowContacts(m)
		m2.Decode(dBuf)
	case 0xd66b66c9:
		m2 := MakeTLInputPrivacyValueDisallowAll(m)
		m2.Decode(dBuf)
	case 0x90110467:
		m2 := MakeTLInputPrivacyValueDisallowUsers(m)
		m2.Decode(dBuf)
	case 0x840649cf:
		m2 := MakeTLInputPrivacyValueAllowChatParticipants(m)
		m2.Decode(dBuf)
	case 0xe94f0f86:
		m2 := MakeTLInputPrivacyValueDisallowChatParticipants(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPrivacyRule) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPrivacyValueAllowContacts:
		t := m.To_InputPrivacyValueAllowContacts()
		return t.DebugString()
	case Predicate_inputPrivacyValueAllowAll:
		t := m.To_InputPrivacyValueAllowAll()
		return t.DebugString()
	case Predicate_inputPrivacyValueAllowUsers:
		t := m.To_InputPrivacyValueAllowUsers()
		return t.DebugString()
	case Predicate_inputPrivacyValueDisallowContacts:
		t := m.To_InputPrivacyValueDisallowContacts()
		return t.DebugString()
	case Predicate_inputPrivacyValueDisallowAll:
		t := m.To_InputPrivacyValueDisallowAll()
		return t.DebugString()
	case Predicate_inputPrivacyValueDisallowUsers:
		t := m.To_InputPrivacyValueDisallowUsers()
		return t.DebugString()
	case Predicate_inputPrivacyValueAllowChatParticipants:
		t := m.To_InputPrivacyValueAllowChatParticipants()
		return t.DebugString()
	case Predicate_inputPrivacyValueDisallowChatParticipants:
		t := m.To_InputPrivacyValueDisallowChatParticipants()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPrivacyValueAllowContacts
func (m *InputPrivacyRule) To_InputPrivacyValueAllowContacts() *TLInputPrivacyValueAllowContacts {
	m.PredicateName = Predicate_inputPrivacyValueAllowContacts
	return &TLInputPrivacyValueAllowContacts{
		Data2: m,
	}
}

// To_InputPrivacyValueAllowAll
func (m *InputPrivacyRule) To_InputPrivacyValueAllowAll() *TLInputPrivacyValueAllowAll {
	m.PredicateName = Predicate_inputPrivacyValueAllowAll
	return &TLInputPrivacyValueAllowAll{
		Data2: m,
	}
}

// To_InputPrivacyValueAllowUsers
func (m *InputPrivacyRule) To_InputPrivacyValueAllowUsers() *TLInputPrivacyValueAllowUsers {
	m.PredicateName = Predicate_inputPrivacyValueAllowUsers
	return &TLInputPrivacyValueAllowUsers{
		Data2: m,
	}
}

// To_InputPrivacyValueDisallowContacts
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowContacts() *TLInputPrivacyValueDisallowContacts {
	m.PredicateName = Predicate_inputPrivacyValueDisallowContacts
	return &TLInputPrivacyValueDisallowContacts{
		Data2: m,
	}
}

// To_InputPrivacyValueDisallowAll
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowAll() *TLInputPrivacyValueDisallowAll {
	m.PredicateName = Predicate_inputPrivacyValueDisallowAll
	return &TLInputPrivacyValueDisallowAll{
		Data2: m,
	}
}

// To_InputPrivacyValueDisallowUsers
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowUsers() *TLInputPrivacyValueDisallowUsers {
	m.PredicateName = Predicate_inputPrivacyValueDisallowUsers
	return &TLInputPrivacyValueDisallowUsers{
		Data2: m,
	}
}

// To_InputPrivacyValueAllowChatParticipants
func (m *InputPrivacyRule) To_InputPrivacyValueAllowChatParticipants() *TLInputPrivacyValueAllowChatParticipants {
	m.PredicateName = Predicate_inputPrivacyValueAllowChatParticipants
	return &TLInputPrivacyValueAllowChatParticipants{
		Data2: m,
	}
}

// To_InputPrivacyValueDisallowChatParticipants
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowChatParticipants() *TLInputPrivacyValueDisallowChatParticipants {
	m.PredicateName = Predicate_inputPrivacyValueDisallowChatParticipants
	return &TLInputPrivacyValueDisallowChatParticipants{
		Data2: m,
	}
}

// MakeTLInputPrivacyValueAllowContacts
func MakeTLInputPrivacyValueAllowContacts(data2 *InputPrivacyRule) *TLInputPrivacyValueAllowContacts {
	if data2 == nil {
		return &TLInputPrivacyValueAllowContacts{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueAllowContacts,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueAllowContacts
		return &TLInputPrivacyValueAllowContacts{Data2: data2}
	}
}

func (m *TLInputPrivacyValueAllowContacts) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueAllowContacts
	return m.Data2
}

func (m *TLInputPrivacyValueAllowContacts) GetPredicateName() string {
	return Predicate_inputPrivacyValueAllowContacts
}

func (m *TLInputPrivacyValueAllowContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd09e07b: func() []byte {
			x.UInt(0xd09e07b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueAllowContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueAllowContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueAllowContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueAllowContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd09e07b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueAllowContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueAllowAll
func MakeTLInputPrivacyValueAllowAll(data2 *InputPrivacyRule) *TLInputPrivacyValueAllowAll {
	if data2 == nil {
		return &TLInputPrivacyValueAllowAll{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueAllowAll,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueAllowAll
		return &TLInputPrivacyValueAllowAll{Data2: data2}
	}
}

func (m *TLInputPrivacyValueAllowAll) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueAllowAll
	return m.Data2
}

func (m *TLInputPrivacyValueAllowAll) GetPredicateName() string {
	return Predicate_inputPrivacyValueAllowAll
}

func (m *TLInputPrivacyValueAllowAll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x184b35ce: func() []byte {
			x.UInt(0x184b35ce)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueAllowAll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueAllowAll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueAllowAll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueAllowAll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x184b35ce: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueAllowAll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueAllowUsers
func MakeTLInputPrivacyValueAllowUsers(data2 *InputPrivacyRule) *TLInputPrivacyValueAllowUsers {
	if data2 == nil {
		return &TLInputPrivacyValueAllowUsers{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueAllowUsers,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueAllowUsers
		return &TLInputPrivacyValueAllowUsers{Data2: data2}
	}
}

func (m *TLInputPrivacyValueAllowUsers) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueAllowUsers
	return m.Data2
}

func (m *TLInputPrivacyValueAllowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueAllowUsers) GetUsers() []*InputUser  { return m.Data2.Users }

func (m *TLInputPrivacyValueAllowUsers) GetPredicateName() string {
	return Predicate_inputPrivacyValueAllowUsers
}

func (m *TLInputPrivacyValueAllowUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x131cc67f: func() []byte {
			x.UInt(0x131cc67f)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueAllowUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueAllowUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueAllowUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueAllowUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x131cc67f: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*InputUser, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &InputUser{}
				v0[i].Decode(dBuf)
			}
			m.SetUsers(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueAllowUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueDisallowContacts
func MakeTLInputPrivacyValueDisallowContacts(data2 *InputPrivacyRule) *TLInputPrivacyValueDisallowContacts {
	if data2 == nil {
		return &TLInputPrivacyValueDisallowContacts{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueDisallowContacts,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueDisallowContacts
		return &TLInputPrivacyValueDisallowContacts{Data2: data2}
	}
}

func (m *TLInputPrivacyValueDisallowContacts) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueDisallowContacts
	return m.Data2
}

func (m *TLInputPrivacyValueDisallowContacts) GetPredicateName() string {
	return Predicate_inputPrivacyValueDisallowContacts
}

func (m *TLInputPrivacyValueDisallowContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xba52007: func() []byte {
			x.UInt(0xba52007)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueDisallowContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueDisallowContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueDisallowContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueDisallowContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xba52007: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueDisallowContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueDisallowAll
func MakeTLInputPrivacyValueDisallowAll(data2 *InputPrivacyRule) *TLInputPrivacyValueDisallowAll {
	if data2 == nil {
		return &TLInputPrivacyValueDisallowAll{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueDisallowAll,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueDisallowAll
		return &TLInputPrivacyValueDisallowAll{Data2: data2}
	}
}

func (m *TLInputPrivacyValueDisallowAll) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueDisallowAll
	return m.Data2
}

func (m *TLInputPrivacyValueDisallowAll) GetPredicateName() string {
	return Predicate_inputPrivacyValueDisallowAll
}

func (m *TLInputPrivacyValueDisallowAll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd66b66c9: func() []byte {
			x.UInt(0xd66b66c9)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueDisallowAll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueDisallowAll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueDisallowAll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueDisallowAll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd66b66c9: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueDisallowAll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueDisallowUsers
func MakeTLInputPrivacyValueDisallowUsers(data2 *InputPrivacyRule) *TLInputPrivacyValueDisallowUsers {
	if data2 == nil {
		return &TLInputPrivacyValueDisallowUsers{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueDisallowUsers,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueDisallowUsers
		return &TLInputPrivacyValueDisallowUsers{Data2: data2}
	}
}

func (m *TLInputPrivacyValueDisallowUsers) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueDisallowUsers
	return m.Data2
}

func (m *TLInputPrivacyValueDisallowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueDisallowUsers) GetUsers() []*InputUser  { return m.Data2.Users }

func (m *TLInputPrivacyValueDisallowUsers) GetPredicateName() string {
	return Predicate_inputPrivacyValueDisallowUsers
}

func (m *TLInputPrivacyValueDisallowUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x90110467: func() []byte {
			x.UInt(0x90110467)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueDisallowUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueDisallowUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueDisallowUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueDisallowUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x90110467: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*InputUser, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &InputUser{}
				v0[i].Decode(dBuf)
			}
			m.SetUsers(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueDisallowUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueAllowChatParticipants
func MakeTLInputPrivacyValueAllowChatParticipants(data2 *InputPrivacyRule) *TLInputPrivacyValueAllowChatParticipants {
	if data2 == nil {
		return &TLInputPrivacyValueAllowChatParticipants{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueAllowChatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueAllowChatParticipants
		return &TLInputPrivacyValueAllowChatParticipants{Data2: data2}
	}
}

func (m *TLInputPrivacyValueAllowChatParticipants) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueAllowChatParticipants
	return m.Data2
}

func (m *TLInputPrivacyValueAllowChatParticipants) SetChats(v []int64) { m.Data2.Chats = v }
func (m *TLInputPrivacyValueAllowChatParticipants) GetChats() []int64  { return m.Data2.Chats }

func (m *TLInputPrivacyValueAllowChatParticipants) GetPredicateName() string {
	return Predicate_inputPrivacyValueAllowChatParticipants
}

func (m *TLInputPrivacyValueAllowChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x840649cf: func() []byte {
			x.UInt(0x840649cf)

			x.VectorLong(m.GetChats())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueAllowChatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueAllowChatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueAllowChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueAllowChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x840649cf: func() error {

			m.SetChats(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueAllowChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyValueDisallowChatParticipants
func MakeTLInputPrivacyValueDisallowChatParticipants(data2 *InputPrivacyRule) *TLInputPrivacyValueDisallowChatParticipants {
	if data2 == nil {
		return &TLInputPrivacyValueDisallowChatParticipants{Data2: &InputPrivacyRule{
			PredicateName: Predicate_inputPrivacyValueDisallowChatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyValueDisallowChatParticipants
		return &TLInputPrivacyValueDisallowChatParticipants{Data2: data2}
	}
}

func (m *TLInputPrivacyValueDisallowChatParticipants) To_InputPrivacyRule() *InputPrivacyRule {
	m.Data2.PredicateName = Predicate_inputPrivacyValueDisallowChatParticipants
	return m.Data2
}

func (m *TLInputPrivacyValueDisallowChatParticipants) SetChats(v []int64) { m.Data2.Chats = v }
func (m *TLInputPrivacyValueDisallowChatParticipants) GetChats() []int64  { return m.Data2.Chats }

func (m *TLInputPrivacyValueDisallowChatParticipants) GetPredicateName() string {
	return Predicate_inputPrivacyValueDisallowChatParticipants
}

func (m *TLInputPrivacyValueDisallowChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe94f0f86: func() []byte {
			x.UInt(0xe94f0f86)

			x.VectorLong(m.GetChats())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyValueDisallowChatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyValueDisallowChatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyValueDisallowChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyValueDisallowChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe94f0f86: func() error {

			m.SetChats(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyValueDisallowChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipant <--
//  + TL_ChannelsChannelParticipant
//

func (m *Channels_ChannelParticipant) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channels_channelParticipant:
		t := m.To_ChannelsChannelParticipant()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Channels_ChannelParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *Channels_ChannelParticipant) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdfb80317:
		m2 := MakeTLChannelsChannelParticipant(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Channels_ChannelParticipant) DebugString() string {
	switch m.PredicateName {
	case Predicate_channels_channelParticipant:
		t := m.To_ChannelsChannelParticipant()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelsChannelParticipant
func (m *Channels_ChannelParticipant) To_ChannelsChannelParticipant() *TLChannelsChannelParticipant {
	m.PredicateName = Predicate_channels_channelParticipant
	return &TLChannelsChannelParticipant{
		Data2: m,
	}
}

// MakeTLChannelsChannelParticipant
func MakeTLChannelsChannelParticipant(data2 *Channels_ChannelParticipant) *TLChannelsChannelParticipant {
	if data2 == nil {
		return &TLChannelsChannelParticipant{Data2: &Channels_ChannelParticipant{
			PredicateName: Predicate_channels_channelParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_channels_channelParticipant
		return &TLChannelsChannelParticipant{Data2: data2}
	}
}

func (m *TLChannelsChannelParticipant) To_Channels_ChannelParticipant() *Channels_ChannelParticipant {
	m.Data2.PredicateName = Predicate_channels_channelParticipant
	return m.Data2
}

func (m *TLChannelsChannelParticipant) SetParticipant(v *ChannelParticipant) { m.Data2.Participant = v }
func (m *TLChannelsChannelParticipant) GetParticipant() *ChannelParticipant {
	return m.Data2.Participant
}

func (m *TLChannelsChannelParticipant) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsChannelParticipant) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLChannelsChannelParticipant) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipant) GetUsers() []*User  { return m.Data2.Users }

func (m *TLChannelsChannelParticipant) GetPredicateName() string {
	return Predicate_channels_channelParticipant
}

func (m *TLChannelsChannelParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdfb80317: func() []byte {
			x.UInt(0xdfb80317)

			x.Bytes(m.GetParticipant().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channels_channelParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channels_channelParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelsChannelParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsChannelParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdfb80317: func() error {

			m0 := &ChannelParticipant{}
			m0.Decode(dBuf)
			m.SetParticipant(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelsChannelParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageFwdHeader <--
//  + TL_MessageFwdHeader
//

func (m *MessageFwdHeader) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageFwdHeader:
		t := m.To_MessageFwdHeader()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageFwdHeader) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageFwdHeader) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5f777dce:
		m2 := MakeTLMessageFwdHeader(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageFwdHeader) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageFwdHeader:
		t := m.To_MessageFwdHeader()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageFwdHeader
func (m *MessageFwdHeader) To_MessageFwdHeader() *TLMessageFwdHeader {
	m.PredicateName = Predicate_messageFwdHeader
	return &TLMessageFwdHeader{
		Data2: m,
	}
}

// MakeTLMessageFwdHeader
func MakeTLMessageFwdHeader(data2 *MessageFwdHeader) *TLMessageFwdHeader {
	if data2 == nil {
		return &TLMessageFwdHeader{Data2: &MessageFwdHeader{
			PredicateName: Predicate_messageFwdHeader,
		}}
	} else {
		data2.PredicateName = Predicate_messageFwdHeader
		return &TLMessageFwdHeader{Data2: data2}
	}
}

func (m *TLMessageFwdHeader) To_MessageFwdHeader() *MessageFwdHeader {
	m.Data2.PredicateName = Predicate_messageFwdHeader
	return m.Data2
}

//// flags
func (m *TLMessageFwdHeader) SetImported(v bool) { m.Data2.Imported = v }
func (m *TLMessageFwdHeader) GetImported() bool  { return m.Data2.Imported }

func (m *TLMessageFwdHeader) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLMessageFwdHeader) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLMessageFwdHeader) SetFromName(v *types.StringValue) { m.Data2.FromName = v }
func (m *TLMessageFwdHeader) GetFromName() *types.StringValue  { return m.Data2.FromName }

func (m *TLMessageFwdHeader) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageFwdHeader) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageFwdHeader) SetChannelPost(v *types.Int32Value) { m.Data2.ChannelPost = v }
func (m *TLMessageFwdHeader) GetChannelPost() *types.Int32Value  { return m.Data2.ChannelPost }

func (m *TLMessageFwdHeader) SetPostAuthor(v *types.StringValue) { m.Data2.PostAuthor = v }
func (m *TLMessageFwdHeader) GetPostAuthor() *types.StringValue  { return m.Data2.PostAuthor }

func (m *TLMessageFwdHeader) SetSavedFromPeer(v *Peer) { m.Data2.SavedFromPeer = v }
func (m *TLMessageFwdHeader) GetSavedFromPeer() *Peer  { return m.Data2.SavedFromPeer }

func (m *TLMessageFwdHeader) SetSavedFromMsgId(v *types.Int32Value) { m.Data2.SavedFromMsgId = v }
func (m *TLMessageFwdHeader) GetSavedFromMsgId() *types.Int32Value  { return m.Data2.SavedFromMsgId }

func (m *TLMessageFwdHeader) SetPsaType(v *types.StringValue) { m.Data2.PsaType = v }
func (m *TLMessageFwdHeader) GetPsaType() *types.StringValue  { return m.Data2.PsaType }

func (m *TLMessageFwdHeader) GetPredicateName() string {
	return Predicate_messageFwdHeader
}

func (m *TLMessageFwdHeader) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5f777dce: func() []byte {
			x.UInt(0x5f777dce)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetImported() == true {
					flags |= 1 << 7
				}
				if m.GetFromId() != nil {
					flags |= 1 << 0
				}
				if m.GetFromName() != nil {
					flags |= 1 << 5
				}

				if m.GetChannelPost() != nil {
					flags |= 1 << 2
				}
				if m.GetPostAuthor() != nil {
					flags |= 1 << 3
				}
				if m.GetSavedFromPeer() != nil {
					flags |= 1 << 4
				}
				if m.GetSavedFromMsgId() != nil {
					flags |= 1 << 4
				}
				if m.GetPsaType() != nil {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFromId() != nil {
				x.Bytes(m.GetFromId().Encode(layer))
			}

			if m.GetFromName() != nil {
				x.String(m.GetFromName().Value)
			}

			x.Int(m.GetDate())
			if m.GetChannelPost() != nil {
				x.Int(m.GetChannelPost().Value)
			}

			if m.GetPostAuthor() != nil {
				x.String(m.GetPostAuthor().Value)
			}

			if m.GetSavedFromPeer() != nil {
				x.Bytes(m.GetSavedFromPeer().Encode(layer))
			}

			if m.GetSavedFromMsgId() != nil {
				x.Int(m.GetSavedFromMsgId().Value)
			}

			if m.GetPsaType() != nil {
				x.String(m.GetPsaType().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageFwdHeader, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageFwdHeader, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageFwdHeader) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageFwdHeader) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5f777dce: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 7)) != 0 {
				m.SetImported(true)
			}
			if (flags & (1 << 0)) != 0 {
				m2 := &Peer{}
				m2.Decode(dBuf)
				m.SetFromId(m2)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetFromName(&types.StringValue{Value: dBuf.String()})
			}

			m.SetDate(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m.SetChannelPost(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetPostAuthor(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m7 := &Peer{}
				m7.Decode(dBuf)
				m.SetSavedFromPeer(m7)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetSavedFromMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 6)) != 0 {
				m.SetPsaType(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageFwdHeader) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// AutoDownloadSettings <--
//  + TL_AutoDownloadSettings
//

func (m *AutoDownloadSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_autoDownloadSettings:
		t := m.To_AutoDownloadSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *AutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *AutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe04232f3:
		m2 := MakeTLAutoDownloadSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *AutoDownloadSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_autoDownloadSettings:
		t := m.To_AutoDownloadSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AutoDownloadSettings
func (m *AutoDownloadSettings) To_AutoDownloadSettings() *TLAutoDownloadSettings {
	m.PredicateName = Predicate_autoDownloadSettings
	return &TLAutoDownloadSettings{
		Data2: m,
	}
}

// MakeTLAutoDownloadSettings
func MakeTLAutoDownloadSettings(data2 *AutoDownloadSettings) *TLAutoDownloadSettings {
	if data2 == nil {
		return &TLAutoDownloadSettings{Data2: &AutoDownloadSettings{
			PredicateName: Predicate_autoDownloadSettings,
		}}
	} else {
		data2.PredicateName = Predicate_autoDownloadSettings
		return &TLAutoDownloadSettings{Data2: data2}
	}
}

func (m *TLAutoDownloadSettings) To_AutoDownloadSettings() *AutoDownloadSettings {
	m.Data2.PredicateName = Predicate_autoDownloadSettings
	return m.Data2
}

//// flags
func (m *TLAutoDownloadSettings) SetDisabled(v bool) { m.Data2.Disabled = v }
func (m *TLAutoDownloadSettings) GetDisabled() bool  { return m.Data2.Disabled }

func (m *TLAutoDownloadSettings) SetVideoPreloadLarge(v bool) { m.Data2.VideoPreloadLarge = v }
func (m *TLAutoDownloadSettings) GetVideoPreloadLarge() bool  { return m.Data2.VideoPreloadLarge }

func (m *TLAutoDownloadSettings) SetAudioPreloadNext(v bool) { m.Data2.AudioPreloadNext = v }
func (m *TLAutoDownloadSettings) GetAudioPreloadNext() bool  { return m.Data2.AudioPreloadNext }

func (m *TLAutoDownloadSettings) SetPhonecallsLessData(v bool) { m.Data2.PhonecallsLessData = v }
func (m *TLAutoDownloadSettings) GetPhonecallsLessData() bool  { return m.Data2.PhonecallsLessData }

func (m *TLAutoDownloadSettings) SetPhotoSizeMax(v int32) { m.Data2.PhotoSizeMax = v }
func (m *TLAutoDownloadSettings) GetPhotoSizeMax() int32  { return m.Data2.PhotoSizeMax }

func (m *TLAutoDownloadSettings) SetVideoSizeMax(v int32) { m.Data2.VideoSizeMax = v }
func (m *TLAutoDownloadSettings) GetVideoSizeMax() int32  { return m.Data2.VideoSizeMax }

func (m *TLAutoDownloadSettings) SetFileSizeMax(v int32) { m.Data2.FileSizeMax = v }
func (m *TLAutoDownloadSettings) GetFileSizeMax() int32  { return m.Data2.FileSizeMax }

func (m *TLAutoDownloadSettings) SetVideoUploadMaxbitrate(v int32) { m.Data2.VideoUploadMaxbitrate = v }
func (m *TLAutoDownloadSettings) GetVideoUploadMaxbitrate() int32 {
	return m.Data2.VideoUploadMaxbitrate
}

func (m *TLAutoDownloadSettings) GetPredicateName() string {
	return Predicate_autoDownloadSettings
}

func (m *TLAutoDownloadSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe04232f3: func() []byte {
			x.UInt(0xe04232f3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDisabled() == true {
					flags |= 1 << 0
				}
				if m.GetVideoPreloadLarge() == true {
					flags |= 1 << 1
				}
				if m.GetAudioPreloadNext() == true {
					flags |= 1 << 2
				}
				if m.GetPhonecallsLessData() == true {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetPhotoSizeMax())
			x.Int(m.GetVideoSizeMax())
			x.Int(m.GetFileSizeMax())
			x.Int(m.GetVideoUploadMaxbitrate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_autoDownloadSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_autoDownloadSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe04232f3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetDisabled(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetVideoPreloadLarge(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetAudioPreloadNext(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetPhonecallsLessData(true)
			}
			m.SetPhotoSizeMax(dBuf.Int())
			m.SetVideoSizeMax(dBuf.Int())
			m.SetFileSizeMax(dBuf.Int())
			m.SetVideoUploadMaxbitrate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAutoDownloadSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ReactionCount <--
//  + TL_ReactionCount
//

func (m *ReactionCount) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_reactionCount:
		t := m.To_ReactionCount()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ReactionCount) CalcByteSize(layer int32) int {
	return 0
}

func (m *ReactionCount) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6fb250d1:
		m2 := MakeTLReactionCount(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ReactionCount) DebugString() string {
	switch m.PredicateName {
	case Predicate_reactionCount:
		t := m.To_ReactionCount()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ReactionCount
func (m *ReactionCount) To_ReactionCount() *TLReactionCount {
	m.PredicateName = Predicate_reactionCount
	return &TLReactionCount{
		Data2: m,
	}
}

// MakeTLReactionCount
func MakeTLReactionCount(data2 *ReactionCount) *TLReactionCount {
	if data2 == nil {
		return &TLReactionCount{Data2: &ReactionCount{
			PredicateName: Predicate_reactionCount,
		}}
	} else {
		data2.PredicateName = Predicate_reactionCount
		return &TLReactionCount{Data2: data2}
	}
}

func (m *TLReactionCount) To_ReactionCount() *ReactionCount {
	m.Data2.PredicateName = Predicate_reactionCount
	return m.Data2
}

//// flags
func (m *TLReactionCount) SetChosen(v bool) { m.Data2.Chosen = v }
func (m *TLReactionCount) GetChosen() bool  { return m.Data2.Chosen }

func (m *TLReactionCount) SetReaction(v string) { m.Data2.Reaction = v }
func (m *TLReactionCount) GetReaction() string  { return m.Data2.Reaction }

func (m *TLReactionCount) SetCount(v int32) { m.Data2.Count = v }
func (m *TLReactionCount) GetCount() int32  { return m.Data2.Count }

func (m *TLReactionCount) GetPredicateName() string {
	return Predicate_reactionCount
}

func (m *TLReactionCount) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6fb250d1: func() []byte {
			x.UInt(0x6fb250d1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChosen() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetReaction())
			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_reactionCount, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_reactionCount, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReactionCount) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReactionCount) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6fb250d1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetChosen(true)
			}
			m.SetReaction(dBuf.String())
			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReactionCount) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// AvailableReaction <--
//  + TL_AvailableReaction
//

func (m *AvailableReaction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_availableReaction:
		t := m.To_AvailableReaction()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *AvailableReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *AvailableReaction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc077ec01:
		m2 := MakeTLAvailableReaction(m)
		m2.Decode(dBuf)
	case 0x21d7c4b:
		m2 := MakeTLAvailableReaction(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *AvailableReaction) DebugString() string {
	switch m.PredicateName {
	case Predicate_availableReaction:
		t := m.To_AvailableReaction()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AvailableReaction
func (m *AvailableReaction) To_AvailableReaction() *TLAvailableReaction {
	m.PredicateName = Predicate_availableReaction
	return &TLAvailableReaction{
		Data2: m,
	}
}

// MakeTLAvailableReaction
func MakeTLAvailableReaction(data2 *AvailableReaction) *TLAvailableReaction {
	if data2 == nil {
		return &TLAvailableReaction{Data2: &AvailableReaction{
			PredicateName: Predicate_availableReaction,
		}}
	} else {
		data2.PredicateName = Predicate_availableReaction
		return &TLAvailableReaction{Data2: data2}
	}
}

func (m *TLAvailableReaction) To_AvailableReaction() *AvailableReaction {
	m.Data2.PredicateName = Predicate_availableReaction
	return m.Data2
}

//// flags
func (m *TLAvailableReaction) SetInactive(v bool) { m.Data2.Inactive = v }
func (m *TLAvailableReaction) GetInactive() bool  { return m.Data2.Inactive }

func (m *TLAvailableReaction) SetReaction(v string) { m.Data2.Reaction = v }
func (m *TLAvailableReaction) GetReaction() string  { return m.Data2.Reaction }

func (m *TLAvailableReaction) SetTitle(v string) { m.Data2.Title = v }
func (m *TLAvailableReaction) GetTitle() string  { return m.Data2.Title }

func (m *TLAvailableReaction) SetStaticIcon(v *Document) { m.Data2.StaticIcon = v }
func (m *TLAvailableReaction) GetStaticIcon() *Document  { return m.Data2.StaticIcon }

func (m *TLAvailableReaction) SetAppearAnimation(v *Document) { m.Data2.AppearAnimation = v }
func (m *TLAvailableReaction) GetAppearAnimation() *Document  { return m.Data2.AppearAnimation }

func (m *TLAvailableReaction) SetSelectAnimation(v *Document) { m.Data2.SelectAnimation = v }
func (m *TLAvailableReaction) GetSelectAnimation() *Document  { return m.Data2.SelectAnimation }

func (m *TLAvailableReaction) SetActivateAnimation(v *Document) { m.Data2.ActivateAnimation = v }
func (m *TLAvailableReaction) GetActivateAnimation() *Document  { return m.Data2.ActivateAnimation }

func (m *TLAvailableReaction) SetEffectAnimation(v *Document) { m.Data2.EffectAnimation = v }
func (m *TLAvailableReaction) GetEffectAnimation() *Document  { return m.Data2.EffectAnimation }

func (m *TLAvailableReaction) SetAroundAnimation(v *Document) { m.Data2.AroundAnimation = v }
func (m *TLAvailableReaction) GetAroundAnimation() *Document  { return m.Data2.AroundAnimation }

func (m *TLAvailableReaction) SetCenterIcon(v *Document) { m.Data2.CenterIcon = v }
func (m *TLAvailableReaction) GetCenterIcon() *Document  { return m.Data2.CenterIcon }

func (m *TLAvailableReaction) GetPredicateName() string {
	return Predicate_availableReaction
}

func (m *TLAvailableReaction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc077ec01: func() []byte {
			x.UInt(0xc077ec01)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInactive() == true {
					flags |= 1 << 0
				}

				if m.GetAroundAnimation() != nil {
					flags |= 1 << 1
				}
				if m.GetCenterIcon() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetReaction())
			x.String(m.GetTitle())
			x.Bytes(m.GetStaticIcon().Encode(layer))
			x.Bytes(m.GetAppearAnimation().Encode(layer))
			x.Bytes(m.GetSelectAnimation().Encode(layer))
			x.Bytes(m.GetActivateAnimation().Encode(layer))
			x.Bytes(m.GetEffectAnimation().Encode(layer))
			if m.GetAroundAnimation() != nil {
				x.Bytes(m.GetAroundAnimation().Encode(layer))
			}

			if m.GetCenterIcon() != nil {
				x.Bytes(m.GetCenterIcon().Encode(layer))
			}

			return x.GetBuf()
		},
		0x21d7c4b: func() []byte {
			x.UInt(0x21d7c4b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInactive() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetReaction())
			x.String(m.GetTitle())
			x.Bytes(m.GetStaticIcon().Encode(layer))
			x.Bytes(m.GetAppearAnimation().Encode(layer))
			x.Bytes(m.GetSelectAnimation().Encode(layer))
			x.Bytes(m.GetActivateAnimation().Encode(layer))
			x.Bytes(m.GetEffectAnimation().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_availableReaction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_availableReaction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAvailableReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAvailableReaction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc077ec01: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetInactive(true)
			}
			m.SetReaction(dBuf.String())
			m.SetTitle(dBuf.String())

			m4 := &Document{}
			m4.Decode(dBuf)
			m.SetStaticIcon(m4)

			m5 := &Document{}
			m5.Decode(dBuf)
			m.SetAppearAnimation(m5)

			m6 := &Document{}
			m6.Decode(dBuf)
			m.SetSelectAnimation(m6)

			m7 := &Document{}
			m7.Decode(dBuf)
			m.SetActivateAnimation(m7)

			m8 := &Document{}
			m8.Decode(dBuf)
			m.SetEffectAnimation(m8)

			if (flags & (1 << 1)) != 0 {
				m9 := &Document{}
				m9.Decode(dBuf)
				m.SetAroundAnimation(m9)
			}
			if (flags & (1 << 1)) != 0 {
				m10 := &Document{}
				m10.Decode(dBuf)
				m.SetCenterIcon(m10)
			}
			return dBuf.GetError()
		},
		0x21d7c4b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetInactive(true)
			}
			m.SetReaction(dBuf.String())
			m.SetTitle(dBuf.String())

			m4 := &Document{}
			m4.Decode(dBuf)
			m.SetStaticIcon(m4)

			m5 := &Document{}
			m5.Decode(dBuf)
			m.SetAppearAnimation(m5)

			m6 := &Document{}
			m6.Decode(dBuf)
			m.SetSelectAnimation(m6)

			m7 := &Document{}
			m7.Decode(dBuf)
			m.SetActivateAnimation(m7)

			m8 := &Document{}
			m8.Decode(dBuf)
			m.SetEffectAnimation(m8)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAvailableReaction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_SentCodeType <--
//  + TL_AuthSentCodeTypeApp
//  + TL_AuthSentCodeTypeSms
//  + TL_AuthSentCodeTypeCall
//  + TL_AuthSentCodeTypeFlashCall
//  + TL_AuthSentCodeTypeMissedCall
//

func (m *Auth_SentCodeType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_sentCodeTypeApp:
		t := m.To_AuthSentCodeTypeApp()
		xBuf = t.Encode(layer)
	case Predicate_auth_sentCodeTypeSms:
		t := m.To_AuthSentCodeTypeSms()
		xBuf = t.Encode(layer)
	case Predicate_auth_sentCodeTypeCall:
		t := m.To_AuthSentCodeTypeCall()
		xBuf = t.Encode(layer)
	case Predicate_auth_sentCodeTypeFlashCall:
		t := m.To_AuthSentCodeTypeFlashCall()
		xBuf = t.Encode(layer)
	case Predicate_auth_sentCodeTypeMissedCall:
		t := m.To_AuthSentCodeTypeMissedCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_SentCodeType) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_SentCodeType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3dbb5986:
		m2 := MakeTLAuthSentCodeTypeApp(m)
		m2.Decode(dBuf)
	case 0xc000bba2:
		m2 := MakeTLAuthSentCodeTypeSms(m)
		m2.Decode(dBuf)
	case 0x5353e5a7:
		m2 := MakeTLAuthSentCodeTypeCall(m)
		m2.Decode(dBuf)
	case 0xab03c6d9:
		m2 := MakeTLAuthSentCodeTypeFlashCall(m)
		m2.Decode(dBuf)
	case 0x82006484:
		m2 := MakeTLAuthSentCodeTypeMissedCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_SentCodeType) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_sentCodeTypeApp:
		t := m.To_AuthSentCodeTypeApp()
		return t.DebugString()
	case Predicate_auth_sentCodeTypeSms:
		t := m.To_AuthSentCodeTypeSms()
		return t.DebugString()
	case Predicate_auth_sentCodeTypeCall:
		t := m.To_AuthSentCodeTypeCall()
		return t.DebugString()
	case Predicate_auth_sentCodeTypeFlashCall:
		t := m.To_AuthSentCodeTypeFlashCall()
		return t.DebugString()
	case Predicate_auth_sentCodeTypeMissedCall:
		t := m.To_AuthSentCodeTypeMissedCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthSentCodeTypeApp
func (m *Auth_SentCodeType) To_AuthSentCodeTypeApp() *TLAuthSentCodeTypeApp {
	m.PredicateName = Predicate_auth_sentCodeTypeApp
	return &TLAuthSentCodeTypeApp{
		Data2: m,
	}
}

// To_AuthSentCodeTypeSms
func (m *Auth_SentCodeType) To_AuthSentCodeTypeSms() *TLAuthSentCodeTypeSms {
	m.PredicateName = Predicate_auth_sentCodeTypeSms
	return &TLAuthSentCodeTypeSms{
		Data2: m,
	}
}

// To_AuthSentCodeTypeCall
func (m *Auth_SentCodeType) To_AuthSentCodeTypeCall() *TLAuthSentCodeTypeCall {
	m.PredicateName = Predicate_auth_sentCodeTypeCall
	return &TLAuthSentCodeTypeCall{
		Data2: m,
	}
}

// To_AuthSentCodeTypeFlashCall
func (m *Auth_SentCodeType) To_AuthSentCodeTypeFlashCall() *TLAuthSentCodeTypeFlashCall {
	m.PredicateName = Predicate_auth_sentCodeTypeFlashCall
	return &TLAuthSentCodeTypeFlashCall{
		Data2: m,
	}
}

// To_AuthSentCodeTypeMissedCall
func (m *Auth_SentCodeType) To_AuthSentCodeTypeMissedCall() *TLAuthSentCodeTypeMissedCall {
	m.PredicateName = Predicate_auth_sentCodeTypeMissedCall
	return &TLAuthSentCodeTypeMissedCall{
		Data2: m,
	}
}

// MakeTLAuthSentCodeTypeApp
func MakeTLAuthSentCodeTypeApp(data2 *Auth_SentCodeType) *TLAuthSentCodeTypeApp {
	if data2 == nil {
		return &TLAuthSentCodeTypeApp{Data2: &Auth_SentCodeType{
			PredicateName: Predicate_auth_sentCodeTypeApp,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCodeTypeApp
		return &TLAuthSentCodeTypeApp{Data2: data2}
	}
}

func (m *TLAuthSentCodeTypeApp) To_Auth_SentCodeType() *Auth_SentCodeType {
	m.Data2.PredicateName = Predicate_auth_sentCodeTypeApp
	return m.Data2
}

func (m *TLAuthSentCodeTypeApp) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeApp) GetLength() int32  { return m.Data2.Length }

func (m *TLAuthSentCodeTypeApp) GetPredicateName() string {
	return Predicate_auth_sentCodeTypeApp
}

func (m *TLAuthSentCodeTypeApp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3dbb5986: func() []byte {
			x.UInt(0x3dbb5986)

			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCodeTypeApp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCodeTypeApp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCodeTypeApp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCodeTypeApp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3dbb5986: func() error {
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCodeTypeApp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthSentCodeTypeSms
func MakeTLAuthSentCodeTypeSms(data2 *Auth_SentCodeType) *TLAuthSentCodeTypeSms {
	if data2 == nil {
		return &TLAuthSentCodeTypeSms{Data2: &Auth_SentCodeType{
			PredicateName: Predicate_auth_sentCodeTypeSms,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCodeTypeSms
		return &TLAuthSentCodeTypeSms{Data2: data2}
	}
}

func (m *TLAuthSentCodeTypeSms) To_Auth_SentCodeType() *Auth_SentCodeType {
	m.Data2.PredicateName = Predicate_auth_sentCodeTypeSms
	return m.Data2
}

func (m *TLAuthSentCodeTypeSms) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeSms) GetLength() int32  { return m.Data2.Length }

func (m *TLAuthSentCodeTypeSms) GetPredicateName() string {
	return Predicate_auth_sentCodeTypeSms
}

func (m *TLAuthSentCodeTypeSms) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc000bba2: func() []byte {
			x.UInt(0xc000bba2)

			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCodeTypeSms, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCodeTypeSms, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCodeTypeSms) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCodeTypeSms) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc000bba2: func() error {
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCodeTypeSms) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthSentCodeTypeCall
func MakeTLAuthSentCodeTypeCall(data2 *Auth_SentCodeType) *TLAuthSentCodeTypeCall {
	if data2 == nil {
		return &TLAuthSentCodeTypeCall{Data2: &Auth_SentCodeType{
			PredicateName: Predicate_auth_sentCodeTypeCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCodeTypeCall
		return &TLAuthSentCodeTypeCall{Data2: data2}
	}
}

func (m *TLAuthSentCodeTypeCall) To_Auth_SentCodeType() *Auth_SentCodeType {
	m.Data2.PredicateName = Predicate_auth_sentCodeTypeCall
	return m.Data2
}

func (m *TLAuthSentCodeTypeCall) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeCall) GetLength() int32  { return m.Data2.Length }

func (m *TLAuthSentCodeTypeCall) GetPredicateName() string {
	return Predicate_auth_sentCodeTypeCall
}

func (m *TLAuthSentCodeTypeCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5353e5a7: func() []byte {
			x.UInt(0x5353e5a7)

			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCodeTypeCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCodeTypeCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCodeTypeCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCodeTypeCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5353e5a7: func() error {
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCodeTypeCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthSentCodeTypeFlashCall
func MakeTLAuthSentCodeTypeFlashCall(data2 *Auth_SentCodeType) *TLAuthSentCodeTypeFlashCall {
	if data2 == nil {
		return &TLAuthSentCodeTypeFlashCall{Data2: &Auth_SentCodeType{
			PredicateName: Predicate_auth_sentCodeTypeFlashCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCodeTypeFlashCall
		return &TLAuthSentCodeTypeFlashCall{Data2: data2}
	}
}

func (m *TLAuthSentCodeTypeFlashCall) To_Auth_SentCodeType() *Auth_SentCodeType {
	m.Data2.PredicateName = Predicate_auth_sentCodeTypeFlashCall
	return m.Data2
}

func (m *TLAuthSentCodeTypeFlashCall) SetPattern(v string) { m.Data2.Pattern = v }
func (m *TLAuthSentCodeTypeFlashCall) GetPattern() string  { return m.Data2.Pattern }

func (m *TLAuthSentCodeTypeFlashCall) GetPredicateName() string {
	return Predicate_auth_sentCodeTypeFlashCall
}

func (m *TLAuthSentCodeTypeFlashCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xab03c6d9: func() []byte {
			x.UInt(0xab03c6d9)

			x.String(m.GetPattern())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCodeTypeFlashCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCodeTypeFlashCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCodeTypeFlashCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCodeTypeFlashCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xab03c6d9: func() error {
			m.SetPattern(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCodeTypeFlashCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthSentCodeTypeMissedCall
func MakeTLAuthSentCodeTypeMissedCall(data2 *Auth_SentCodeType) *TLAuthSentCodeTypeMissedCall {
	if data2 == nil {
		return &TLAuthSentCodeTypeMissedCall{Data2: &Auth_SentCodeType{
			PredicateName: Predicate_auth_sentCodeTypeMissedCall,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCodeTypeMissedCall
		return &TLAuthSentCodeTypeMissedCall{Data2: data2}
	}
}

func (m *TLAuthSentCodeTypeMissedCall) To_Auth_SentCodeType() *Auth_SentCodeType {
	m.Data2.PredicateName = Predicate_auth_sentCodeTypeMissedCall
	return m.Data2
}

func (m *TLAuthSentCodeTypeMissedCall) SetPrefix(v string) { m.Data2.Prefix = v }
func (m *TLAuthSentCodeTypeMissedCall) GetPrefix() string  { return m.Data2.Prefix }

func (m *TLAuthSentCodeTypeMissedCall) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeMissedCall) GetLength() int32  { return m.Data2.Length }

func (m *TLAuthSentCodeTypeMissedCall) GetPredicateName() string {
	return Predicate_auth_sentCodeTypeMissedCall
}

func (m *TLAuthSentCodeTypeMissedCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x82006484: func() []byte {
			x.UInt(0x82006484)

			x.String(m.GetPrefix())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCodeTypeMissedCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCodeTypeMissedCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCodeTypeMissedCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCodeTypeMissedCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x82006484: func() error {
			m.SetPrefix(dBuf.String())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCodeTypeMissedCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputSecureFile <--
//  + TL_InputSecureFileUploaded
//  + TL_InputSecureFile
//

func (m *InputSecureFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputSecureFileUploaded:
		t := m.To_InputSecureFileUploaded()
		xBuf = t.Encode(layer)
	case Predicate_inputSecureFile:
		t := m.To_InputSecureFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputSecureFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputSecureFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3334b0f0:
		m2 := MakeTLInputSecureFileUploaded(m)
		m2.Decode(dBuf)
	case 0x5367e5be:
		m2 := MakeTLInputSecureFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputSecureFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputSecureFileUploaded:
		t := m.To_InputSecureFileUploaded()
		return t.DebugString()
	case Predicate_inputSecureFile:
		t := m.To_InputSecureFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputSecureFileUploaded
func (m *InputSecureFile) To_InputSecureFileUploaded() *TLInputSecureFileUploaded {
	m.PredicateName = Predicate_inputSecureFileUploaded
	return &TLInputSecureFileUploaded{
		Data2: m,
	}
}

// To_InputSecureFile
func (m *InputSecureFile) To_InputSecureFile() *TLInputSecureFile {
	m.PredicateName = Predicate_inputSecureFile
	return &TLInputSecureFile{
		Data2: m,
	}
}

// MakeTLInputSecureFileUploaded
func MakeTLInputSecureFileUploaded(data2 *InputSecureFile) *TLInputSecureFileUploaded {
	if data2 == nil {
		return &TLInputSecureFileUploaded{Data2: &InputSecureFile{
			PredicateName: Predicate_inputSecureFileUploaded,
		}}
	} else {
		data2.PredicateName = Predicate_inputSecureFileUploaded
		return &TLInputSecureFileUploaded{Data2: data2}
	}
}

func (m *TLInputSecureFileUploaded) To_InputSecureFile() *InputSecureFile {
	m.Data2.PredicateName = Predicate_inputSecureFileUploaded
	return m.Data2
}

func (m *TLInputSecureFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputSecureFileUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputSecureFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputSecureFileUploaded) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func (m *TLInputSecureFileUploaded) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLInputSecureFileUploaded) GetFileHash() []byte  { return m.Data2.FileHash }

func (m *TLInputSecureFileUploaded) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLInputSecureFileUploaded) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLInputSecureFileUploaded) GetPredicateName() string {
	return Predicate_inputSecureFileUploaded
}

func (m *TLInputSecureFileUploaded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3334b0f0: func() []byte {
			x.UInt(0x3334b0f0)

			x.Long(m.GetId())
			x.Int(m.GetParts())
			x.String(m.GetMd5Checksum())
			x.StringBytes(m.GetFileHash())
			x.StringBytes(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputSecureFileUploaded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputSecureFileUploaded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputSecureFileUploaded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputSecureFileUploaded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3334b0f0: func() error {
			m.SetId(dBuf.Long())
			m.SetParts(dBuf.Int())
			m.SetMd5Checksum(dBuf.String())
			m.SetFileHash(dBuf.StringBytes())
			m.SetSecret(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputSecureFileUploaded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputSecureFile
func MakeTLInputSecureFile(data2 *InputSecureFile) *TLInputSecureFile {
	if data2 == nil {
		return &TLInputSecureFile{Data2: &InputSecureFile{
			PredicateName: Predicate_inputSecureFile,
		}}
	} else {
		data2.PredicateName = Predicate_inputSecureFile
		return &TLInputSecureFile{Data2: data2}
	}
}

func (m *TLInputSecureFile) To_InputSecureFile() *InputSecureFile {
	m.Data2.PredicateName = Predicate_inputSecureFile
	return m.Data2
}

func (m *TLInputSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputSecureFile) GetPredicateName() string {
	return Predicate_inputSecureFile
}

func (m *TLInputSecureFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5367e5be: func() []byte {
			x.UInt(0x5367e5be)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputSecureFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputSecureFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputSecureFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputSecureFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5367e5be: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputSecureFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatOnlines <--
//  + TL_ChatOnlines
//

func (m *ChatOnlines) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatOnlines:
		t := m.To_ChatOnlines()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatOnlines) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatOnlines) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf041e250:
		m2 := MakeTLChatOnlines(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatOnlines) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatOnlines:
		t := m.To_ChatOnlines()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatOnlines
func (m *ChatOnlines) To_ChatOnlines() *TLChatOnlines {
	m.PredicateName = Predicate_chatOnlines
	return &TLChatOnlines{
		Data2: m,
	}
}

// MakeTLChatOnlines
func MakeTLChatOnlines(data2 *ChatOnlines) *TLChatOnlines {
	if data2 == nil {
		return &TLChatOnlines{Data2: &ChatOnlines{
			PredicateName: Predicate_chatOnlines,
		}}
	} else {
		data2.PredicateName = Predicate_chatOnlines
		return &TLChatOnlines{Data2: data2}
	}
}

func (m *TLChatOnlines) To_ChatOnlines() *ChatOnlines {
	m.Data2.PredicateName = Predicate_chatOnlines
	return m.Data2
}

func (m *TLChatOnlines) SetOnlines(v int32) { m.Data2.Onlines = v }
func (m *TLChatOnlines) GetOnlines() int32  { return m.Data2.Onlines }

func (m *TLChatOnlines) GetPredicateName() string {
	return Predicate_chatOnlines
}

func (m *TLChatOnlines) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf041e250: func() []byte {
			x.UInt(0xf041e250)

			x.Int(m.GetOnlines())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatOnlines, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatOnlines, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatOnlines) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatOnlines) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf041e250: func() error {
			m.SetOnlines(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatOnlines) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_WallPapers <--
//  + TL_AccountWallPapersNotModified
//  + TL_AccountWallPapers
//

func (m *Account_WallPapers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_wallPapersNotModified:
		t := m.To_AccountWallPapersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_account_wallPapers:
		t := m.To_AccountWallPapers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_WallPapers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_WallPapers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1c199183:
		m2 := MakeTLAccountWallPapersNotModified(m)
		m2.Decode(dBuf)
	case 0xcdc3858c:
		m2 := MakeTLAccountWallPapers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_WallPapers) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_wallPapersNotModified:
		t := m.To_AccountWallPapersNotModified()
		return t.DebugString()
	case Predicate_account_wallPapers:
		t := m.To_AccountWallPapers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountWallPapersNotModified
func (m *Account_WallPapers) To_AccountWallPapersNotModified() *TLAccountWallPapersNotModified {
	m.PredicateName = Predicate_account_wallPapersNotModified
	return &TLAccountWallPapersNotModified{
		Data2: m,
	}
}

// To_AccountWallPapers
func (m *Account_WallPapers) To_AccountWallPapers() *TLAccountWallPapers {
	m.PredicateName = Predicate_account_wallPapers
	return &TLAccountWallPapers{
		Data2: m,
	}
}

// MakeTLAccountWallPapersNotModified
func MakeTLAccountWallPapersNotModified(data2 *Account_WallPapers) *TLAccountWallPapersNotModified {
	if data2 == nil {
		return &TLAccountWallPapersNotModified{Data2: &Account_WallPapers{
			PredicateName: Predicate_account_wallPapersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_account_wallPapersNotModified
		return &TLAccountWallPapersNotModified{Data2: data2}
	}
}

func (m *TLAccountWallPapersNotModified) To_Account_WallPapers() *Account_WallPapers {
	m.Data2.PredicateName = Predicate_account_wallPapersNotModified
	return m.Data2
}

func (m *TLAccountWallPapersNotModified) GetPredicateName() string {
	return Predicate_account_wallPapersNotModified
}

func (m *TLAccountWallPapersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1c199183: func() []byte {
			x.UInt(0x1c199183)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_wallPapersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_wallPapersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountWallPapersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountWallPapersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1c199183: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountWallPapersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAccountWallPapers
func MakeTLAccountWallPapers(data2 *Account_WallPapers) *TLAccountWallPapers {
	if data2 == nil {
		return &TLAccountWallPapers{Data2: &Account_WallPapers{
			PredicateName: Predicate_account_wallPapers,
		}}
	} else {
		data2.PredicateName = Predicate_account_wallPapers
		return &TLAccountWallPapers{Data2: data2}
	}
}

func (m *TLAccountWallPapers) To_Account_WallPapers() *Account_WallPapers {
	m.Data2.PredicateName = Predicate_account_wallPapers
	return m.Data2
}

func (m *TLAccountWallPapers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAccountWallPapers) GetHash() int64  { return m.Data2.Hash }

func (m *TLAccountWallPapers) SetWallpapers(v []*WallPaper) { m.Data2.Wallpapers = v }
func (m *TLAccountWallPapers) GetWallpapers() []*WallPaper  { return m.Data2.Wallpapers }

func (m *TLAccountWallPapers) GetPredicateName() string {
	return Predicate_account_wallPapers
}

func (m *TLAccountWallPapers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcdc3858c: func() []byte {
			x.UInt(0xcdc3858c)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetWallpapers())))
			for _, v := range m.GetWallpapers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_wallPapers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_wallPapers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountWallPapers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountWallPapers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcdc3858c: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*WallPaper, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &WallPaper{}
				v1[i].Decode(dBuf)
			}
			m.SetWallpapers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountWallPapers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SearchCounter <--
//  + TL_MessagesSearchCounter
//

func (m *Messages_SearchCounter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_searchCounter:
		t := m.To_MessagesSearchCounter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SearchCounter) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SearchCounter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe844ebff:
		m2 := MakeTLMessagesSearchCounter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SearchCounter) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_searchCounter:
		t := m.To_MessagesSearchCounter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSearchCounter
func (m *Messages_SearchCounter) To_MessagesSearchCounter() *TLMessagesSearchCounter {
	m.PredicateName = Predicate_messages_searchCounter
	return &TLMessagesSearchCounter{
		Data2: m,
	}
}

// MakeTLMessagesSearchCounter
func MakeTLMessagesSearchCounter(data2 *Messages_SearchCounter) *TLMessagesSearchCounter {
	if data2 == nil {
		return &TLMessagesSearchCounter{Data2: &Messages_SearchCounter{
			PredicateName: Predicate_messages_searchCounter,
		}}
	} else {
		data2.PredicateName = Predicate_messages_searchCounter
		return &TLMessagesSearchCounter{Data2: data2}
	}
}

func (m *TLMessagesSearchCounter) To_Messages_SearchCounter() *Messages_SearchCounter {
	m.Data2.PredicateName = Predicate_messages_searchCounter
	return m.Data2
}

//// flags
func (m *TLMessagesSearchCounter) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessagesSearchCounter) GetInexact() bool  { return m.Data2.Inexact }

func (m *TLMessagesSearchCounter) SetFilter(v *MessagesFilter) { m.Data2.Filter = v }
func (m *TLMessagesSearchCounter) GetFilter() *MessagesFilter  { return m.Data2.Filter }

func (m *TLMessagesSearchCounter) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesSearchCounter) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesSearchCounter) GetPredicateName() string {
	return Predicate_messages_searchCounter
}

func (m *TLMessagesSearchCounter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe844ebff: func() []byte {
			x.UInt(0xe844ebff)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInexact() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetFilter().Encode(layer))
			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_searchCounter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_searchCounter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchCounter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchCounter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe844ebff: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetInexact(true)
			}

			m2 := &MessagesFilter{}
			m2.Decode(dBuf)
			m.SetFilter(m2)

			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSearchCounter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_TranslatedText <--
//  + TL_MessagesTranslateNoResult
//  + TL_MessagesTranslateResultText
//

func (m *Messages_TranslatedText) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_translateNoResult:
		t := m.To_MessagesTranslateNoResult()
		xBuf = t.Encode(layer)
	case Predicate_messages_translateResultText:
		t := m.To_MessagesTranslateResultText()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_TranslatedText) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_TranslatedText) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x67ca4737:
		m2 := MakeTLMessagesTranslateNoResult(m)
		m2.Decode(dBuf)
	case 0xa214f7d0:
		m2 := MakeTLMessagesTranslateResultText(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_TranslatedText) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_translateNoResult:
		t := m.To_MessagesTranslateNoResult()
		return t.DebugString()
	case Predicate_messages_translateResultText:
		t := m.To_MessagesTranslateResultText()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesTranslateNoResult
func (m *Messages_TranslatedText) To_MessagesTranslateNoResult() *TLMessagesTranslateNoResult {
	m.PredicateName = Predicate_messages_translateNoResult
	return &TLMessagesTranslateNoResult{
		Data2: m,
	}
}

// To_MessagesTranslateResultText
func (m *Messages_TranslatedText) To_MessagesTranslateResultText() *TLMessagesTranslateResultText {
	m.PredicateName = Predicate_messages_translateResultText
	return &TLMessagesTranslateResultText{
		Data2: m,
	}
}

// MakeTLMessagesTranslateNoResult
func MakeTLMessagesTranslateNoResult(data2 *Messages_TranslatedText) *TLMessagesTranslateNoResult {
	if data2 == nil {
		return &TLMessagesTranslateNoResult{Data2: &Messages_TranslatedText{
			PredicateName: Predicate_messages_translateNoResult,
		}}
	} else {
		data2.PredicateName = Predicate_messages_translateNoResult
		return &TLMessagesTranslateNoResult{Data2: data2}
	}
}

func (m *TLMessagesTranslateNoResult) To_Messages_TranslatedText() *Messages_TranslatedText {
	m.Data2.PredicateName = Predicate_messages_translateNoResult
	return m.Data2
}

func (m *TLMessagesTranslateNoResult) GetPredicateName() string {
	return Predicate_messages_translateNoResult
}

func (m *TLMessagesTranslateNoResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x67ca4737: func() []byte {
			x.UInt(0x67ca4737)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_translateNoResult, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_translateNoResult, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesTranslateNoResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesTranslateNoResult) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x67ca4737: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesTranslateNoResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesTranslateResultText
func MakeTLMessagesTranslateResultText(data2 *Messages_TranslatedText) *TLMessagesTranslateResultText {
	if data2 == nil {
		return &TLMessagesTranslateResultText{Data2: &Messages_TranslatedText{
			PredicateName: Predicate_messages_translateResultText,
		}}
	} else {
		data2.PredicateName = Predicate_messages_translateResultText
		return &TLMessagesTranslateResultText{Data2: data2}
	}
}

func (m *TLMessagesTranslateResultText) To_Messages_TranslatedText() *Messages_TranslatedText {
	m.Data2.PredicateName = Predicate_messages_translateResultText
	return m.Data2
}

func (m *TLMessagesTranslateResultText) SetText(v string) { m.Data2.Text = v }
func (m *TLMessagesTranslateResultText) GetText() string  { return m.Data2.Text }

func (m *TLMessagesTranslateResultText) GetPredicateName() string {
	return Predicate_messages_translateResultText
}

func (m *TLMessagesTranslateResultText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa214f7d0: func() []byte {
			x.UInt(0xa214f7d0)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_translateResultText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_translateResultText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesTranslateResultText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesTranslateResultText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa214f7d0: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesTranslateResultText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Error <--
//  + TL_Error
//

func (m *Error) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_error:
		t := m.To_Error()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Error) CalcByteSize(layer int32) int {
	return 0
}

func (m *Error) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc4b9f9bb:
		m2 := MakeTLError(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Error) DebugString() string {
	switch m.PredicateName {
	case Predicate_error:
		t := m.To_Error()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Error
func (m *Error) To_Error() *TLError {
	m.PredicateName = Predicate_error
	return &TLError{
		Data2: m,
	}
}

// MakeTLError
func MakeTLError(data2 *Error) *TLError {
	if data2 == nil {
		return &TLError{Data2: &Error{
			PredicateName: Predicate_error,
		}}
	} else {
		data2.PredicateName = Predicate_error
		return &TLError{Data2: data2}
	}
}

func (m *TLError) To_Error() *Error {
	m.Data2.PredicateName = Predicate_error
	return m.Data2
}

func (m *TLError) SetCode(v int32) { m.Data2.Code = v }
func (m *TLError) GetCode() int32  { return m.Data2.Code }

func (m *TLError) SetText(v string) { m.Data2.Text = v }
func (m *TLError) GetText() string  { return m.Data2.Text }

func (m *TLError) GetPredicateName() string {
	return Predicate_error
}

func (m *TLError) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc4b9f9bb: func() []byte {
			x.UInt(0xc4b9f9bb)

			x.Int(m.GetCode())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_error, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_error, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLError) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLError) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc4b9f9bb: func() error {
			m.SetCode(dBuf.Int())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLError) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputUser <--
//  + TL_InputUserEmpty
//  + TL_InputUserSelf
//  + TL_InputUser
//  + TL_InputUserFromMessage
//

func (m *InputUser) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputUserEmpty:
		t := m.To_InputUserEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputUserSelf:
		t := m.To_InputUserSelf()
		xBuf = t.Encode(layer)
	case Predicate_inputUser:
		t := m.To_InputUser()
		xBuf = t.Encode(layer)
	case Predicate_inputUserFromMessage:
		t := m.To_InputUserFromMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputUser) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb98886cf:
		m2 := MakeTLInputUserEmpty(m)
		m2.Decode(dBuf)
	case 0xf7c1b13f:
		m2 := MakeTLInputUserSelf(m)
		m2.Decode(dBuf)
	case 0xf21158c6:
		m2 := MakeTLInputUser(m)
		m2.Decode(dBuf)
	case 0x1da448e2:
		m2 := MakeTLInputUserFromMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputUser) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputUserEmpty:
		t := m.To_InputUserEmpty()
		return t.DebugString()
	case Predicate_inputUserSelf:
		t := m.To_InputUserSelf()
		return t.DebugString()
	case Predicate_inputUser:
		t := m.To_InputUser()
		return t.DebugString()
	case Predicate_inputUserFromMessage:
		t := m.To_InputUserFromMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputUserEmpty
func (m *InputUser) To_InputUserEmpty() *TLInputUserEmpty {
	m.PredicateName = Predicate_inputUserEmpty
	return &TLInputUserEmpty{
		Data2: m,
	}
}

// To_InputUserSelf
func (m *InputUser) To_InputUserSelf() *TLInputUserSelf {
	m.PredicateName = Predicate_inputUserSelf
	return &TLInputUserSelf{
		Data2: m,
	}
}

// To_InputUser
func (m *InputUser) To_InputUser() *TLInputUser {
	m.PredicateName = Predicate_inputUser
	return &TLInputUser{
		Data2: m,
	}
}

// To_InputUserFromMessage
func (m *InputUser) To_InputUserFromMessage() *TLInputUserFromMessage {
	m.PredicateName = Predicate_inputUserFromMessage
	return &TLInputUserFromMessage{
		Data2: m,
	}
}

// MakeTLInputUserEmpty
func MakeTLInputUserEmpty(data2 *InputUser) *TLInputUserEmpty {
	if data2 == nil {
		return &TLInputUserEmpty{Data2: &InputUser{
			PredicateName: Predicate_inputUserEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputUserEmpty
		return &TLInputUserEmpty{Data2: data2}
	}
}

func (m *TLInputUserEmpty) To_InputUser() *InputUser {
	m.Data2.PredicateName = Predicate_inputUserEmpty
	return m.Data2
}

func (m *TLInputUserEmpty) GetPredicateName() string {
	return Predicate_inputUserEmpty
}

func (m *TLInputUserEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb98886cf: func() []byte {
			x.UInt(0xb98886cf)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputUserEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputUserEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputUserEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputUserEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb98886cf: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputUserEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputUserSelf
func MakeTLInputUserSelf(data2 *InputUser) *TLInputUserSelf {
	if data2 == nil {
		return &TLInputUserSelf{Data2: &InputUser{
			PredicateName: Predicate_inputUserSelf,
		}}
	} else {
		data2.PredicateName = Predicate_inputUserSelf
		return &TLInputUserSelf{Data2: data2}
	}
}

func (m *TLInputUserSelf) To_InputUser() *InputUser {
	m.Data2.PredicateName = Predicate_inputUserSelf
	return m.Data2
}

func (m *TLInputUserSelf) GetPredicateName() string {
	return Predicate_inputUserSelf
}

func (m *TLInputUserSelf) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf7c1b13f: func() []byte {
			x.UInt(0xf7c1b13f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputUserSelf, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputUserSelf, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputUserSelf) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputUserSelf) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf7c1b13f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputUserSelf) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputUser
func MakeTLInputUser(data2 *InputUser) *TLInputUser {
	if data2 == nil {
		return &TLInputUser{Data2: &InputUser{
			PredicateName: Predicate_inputUser,
		}}
	} else {
		data2.PredicateName = Predicate_inputUser
		return &TLInputUser{Data2: data2}
	}
}

func (m *TLInputUser) To_InputUser() *InputUser {
	m.Data2.PredicateName = Predicate_inputUser
	return m.Data2
}

func (m *TLInputUser) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLInputUser) GetUserId() int64  { return m.Data2.UserId }

func (m *TLInputUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputUser) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputUser) GetPredicateName() string {
	return Predicate_inputUser
}

func (m *TLInputUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf21158c6: func() []byte {
			x.UInt(0xf21158c6)

			x.Long(m.GetUserId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf21158c6: func() error {
			m.SetUserId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputUserFromMessage
func MakeTLInputUserFromMessage(data2 *InputUser) *TLInputUserFromMessage {
	if data2 == nil {
		return &TLInputUserFromMessage{Data2: &InputUser{
			PredicateName: Predicate_inputUserFromMessage,
		}}
	} else {
		data2.PredicateName = Predicate_inputUserFromMessage
		return &TLInputUserFromMessage{Data2: data2}
	}
}

func (m *TLInputUserFromMessage) To_InputUser() *InputUser {
	m.Data2.PredicateName = Predicate_inputUserFromMessage
	return m.Data2
}

func (m *TLInputUserFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputUserFromMessage) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputUserFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputUserFromMessage) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLInputUserFromMessage) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLInputUserFromMessage) GetUserId() int64  { return m.Data2.UserId }

func (m *TLInputUserFromMessage) GetPredicateName() string {
	return Predicate_inputUserFromMessage
}

func (m *TLInputUserFromMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1da448e2: func() []byte {
			x.UInt(0x1da448e2)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetMsgId())
			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputUserFromMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputUserFromMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputUserFromMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputUserFromMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1da448e2: func() error {

			m2 := &InputPeer{}
			m2.Decode(dBuf)
			m.SetPeer(m2)

			m.SetMsgId(dBuf.Int())
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputUserFromMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ReportReason <--
//  + TL_InputReportReasonSpam
//  + TL_InputReportReasonViolence
//  + TL_InputReportReasonPornography
//  + TL_InputReportReasonChildAbuse
//  + TL_InputReportReasonOther
//  + TL_InputReportReasonCopyright
//  + TL_InputReportReasonGeoIrrelevant
//  + TL_InputReportReasonFake
//  + TL_InputReportReasonIllegalDrugs
//  + TL_InputReportReasonPersonalDetails
//

func (m *ReportReason) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputReportReasonSpam:
		t := m.To_InputReportReasonSpam()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonViolence:
		t := m.To_InputReportReasonViolence()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonPornography:
		t := m.To_InputReportReasonPornography()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonChildAbuse:
		t := m.To_InputReportReasonChildAbuse()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonOther:
		t := m.To_InputReportReasonOther()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonCopyright:
		t := m.To_InputReportReasonCopyright()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonGeoIrrelevant:
		t := m.To_InputReportReasonGeoIrrelevant()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonFake:
		t := m.To_InputReportReasonFake()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonIllegalDrugs:
		t := m.To_InputReportReasonIllegalDrugs()
		xBuf = t.Encode(layer)
	case Predicate_inputReportReasonPersonalDetails:
		t := m.To_InputReportReasonPersonalDetails()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ReportReason) CalcByteSize(layer int32) int {
	return 0
}

func (m *ReportReason) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x58dbcab8:
		m2 := MakeTLInputReportReasonSpam(m)
		m2.Decode(dBuf)
	case 0x1e22c78d:
		m2 := MakeTLInputReportReasonViolence(m)
		m2.Decode(dBuf)
	case 0x2e59d922:
		m2 := MakeTLInputReportReasonPornography(m)
		m2.Decode(dBuf)
	case 0xadf44ee3:
		m2 := MakeTLInputReportReasonChildAbuse(m)
		m2.Decode(dBuf)
	case 0xc1e4a2b1:
		m2 := MakeTLInputReportReasonOther(m)
		m2.Decode(dBuf)
	case 0x9b89f93a:
		m2 := MakeTLInputReportReasonCopyright(m)
		m2.Decode(dBuf)
	case 0xdbd4feed:
		m2 := MakeTLInputReportReasonGeoIrrelevant(m)
		m2.Decode(dBuf)
	case 0xf5ddd6e7:
		m2 := MakeTLInputReportReasonFake(m)
		m2.Decode(dBuf)
	case 0xa8eb2be:
		m2 := MakeTLInputReportReasonIllegalDrugs(m)
		m2.Decode(dBuf)
	case 0x9ec7863d:
		m2 := MakeTLInputReportReasonPersonalDetails(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ReportReason) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputReportReasonSpam:
		t := m.To_InputReportReasonSpam()
		return t.DebugString()
	case Predicate_inputReportReasonViolence:
		t := m.To_InputReportReasonViolence()
		return t.DebugString()
	case Predicate_inputReportReasonPornography:
		t := m.To_InputReportReasonPornography()
		return t.DebugString()
	case Predicate_inputReportReasonChildAbuse:
		t := m.To_InputReportReasonChildAbuse()
		return t.DebugString()
	case Predicate_inputReportReasonOther:
		t := m.To_InputReportReasonOther()
		return t.DebugString()
	case Predicate_inputReportReasonCopyright:
		t := m.To_InputReportReasonCopyright()
		return t.DebugString()
	case Predicate_inputReportReasonGeoIrrelevant:
		t := m.To_InputReportReasonGeoIrrelevant()
		return t.DebugString()
	case Predicate_inputReportReasonFake:
		t := m.To_InputReportReasonFake()
		return t.DebugString()
	case Predicate_inputReportReasonIllegalDrugs:
		t := m.To_InputReportReasonIllegalDrugs()
		return t.DebugString()
	case Predicate_inputReportReasonPersonalDetails:
		t := m.To_InputReportReasonPersonalDetails()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputReportReasonSpam
func (m *ReportReason) To_InputReportReasonSpam() *TLInputReportReasonSpam {
	m.PredicateName = Predicate_inputReportReasonSpam
	return &TLInputReportReasonSpam{
		Data2: m,
	}
}

// To_InputReportReasonViolence
func (m *ReportReason) To_InputReportReasonViolence() *TLInputReportReasonViolence {
	m.PredicateName = Predicate_inputReportReasonViolence
	return &TLInputReportReasonViolence{
		Data2: m,
	}
}

// To_InputReportReasonPornography
func (m *ReportReason) To_InputReportReasonPornography() *TLInputReportReasonPornography {
	m.PredicateName = Predicate_inputReportReasonPornography
	return &TLInputReportReasonPornography{
		Data2: m,
	}
}

// To_InputReportReasonChildAbuse
func (m *ReportReason) To_InputReportReasonChildAbuse() *TLInputReportReasonChildAbuse {
	m.PredicateName = Predicate_inputReportReasonChildAbuse
	return &TLInputReportReasonChildAbuse{
		Data2: m,
	}
}

// To_InputReportReasonOther
func (m *ReportReason) To_InputReportReasonOther() *TLInputReportReasonOther {
	m.PredicateName = Predicate_inputReportReasonOther
	return &TLInputReportReasonOther{
		Data2: m,
	}
}

// To_InputReportReasonCopyright
func (m *ReportReason) To_InputReportReasonCopyright() *TLInputReportReasonCopyright {
	m.PredicateName = Predicate_inputReportReasonCopyright
	return &TLInputReportReasonCopyright{
		Data2: m,
	}
}

// To_InputReportReasonGeoIrrelevant
func (m *ReportReason) To_InputReportReasonGeoIrrelevant() *TLInputReportReasonGeoIrrelevant {
	m.PredicateName = Predicate_inputReportReasonGeoIrrelevant
	return &TLInputReportReasonGeoIrrelevant{
		Data2: m,
	}
}

// To_InputReportReasonFake
func (m *ReportReason) To_InputReportReasonFake() *TLInputReportReasonFake {
	m.PredicateName = Predicate_inputReportReasonFake
	return &TLInputReportReasonFake{
		Data2: m,
	}
}

// To_InputReportReasonIllegalDrugs
func (m *ReportReason) To_InputReportReasonIllegalDrugs() *TLInputReportReasonIllegalDrugs {
	m.PredicateName = Predicate_inputReportReasonIllegalDrugs
	return &TLInputReportReasonIllegalDrugs{
		Data2: m,
	}
}

// To_InputReportReasonPersonalDetails
func (m *ReportReason) To_InputReportReasonPersonalDetails() *TLInputReportReasonPersonalDetails {
	m.PredicateName = Predicate_inputReportReasonPersonalDetails
	return &TLInputReportReasonPersonalDetails{
		Data2: m,
	}
}

// MakeTLInputReportReasonSpam
func MakeTLInputReportReasonSpam(data2 *ReportReason) *TLInputReportReasonSpam {
	if data2 == nil {
		return &TLInputReportReasonSpam{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonSpam,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonSpam
		return &TLInputReportReasonSpam{Data2: data2}
	}
}

func (m *TLInputReportReasonSpam) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonSpam
	return m.Data2
}

func (m *TLInputReportReasonSpam) GetPredicateName() string {
	return Predicate_inputReportReasonSpam
}

func (m *TLInputReportReasonSpam) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x58dbcab8: func() []byte {
			x.UInt(0x58dbcab8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonSpam, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonSpam, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonSpam) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonSpam) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x58dbcab8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonSpam) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonViolence
func MakeTLInputReportReasonViolence(data2 *ReportReason) *TLInputReportReasonViolence {
	if data2 == nil {
		return &TLInputReportReasonViolence{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonViolence,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonViolence
		return &TLInputReportReasonViolence{Data2: data2}
	}
}

func (m *TLInputReportReasonViolence) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonViolence
	return m.Data2
}

func (m *TLInputReportReasonViolence) GetPredicateName() string {
	return Predicate_inputReportReasonViolence
}

func (m *TLInputReportReasonViolence) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e22c78d: func() []byte {
			x.UInt(0x1e22c78d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonViolence, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonViolence, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonViolence) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonViolence) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e22c78d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonViolence) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonPornography
func MakeTLInputReportReasonPornography(data2 *ReportReason) *TLInputReportReasonPornography {
	if data2 == nil {
		return &TLInputReportReasonPornography{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonPornography,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonPornography
		return &TLInputReportReasonPornography{Data2: data2}
	}
}

func (m *TLInputReportReasonPornography) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonPornography
	return m.Data2
}

func (m *TLInputReportReasonPornography) GetPredicateName() string {
	return Predicate_inputReportReasonPornography
}

func (m *TLInputReportReasonPornography) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2e59d922: func() []byte {
			x.UInt(0x2e59d922)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonPornography, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonPornography, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonPornography) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonPornography) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2e59d922: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonPornography) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonChildAbuse
func MakeTLInputReportReasonChildAbuse(data2 *ReportReason) *TLInputReportReasonChildAbuse {
	if data2 == nil {
		return &TLInputReportReasonChildAbuse{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonChildAbuse,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonChildAbuse
		return &TLInputReportReasonChildAbuse{Data2: data2}
	}
}

func (m *TLInputReportReasonChildAbuse) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonChildAbuse
	return m.Data2
}

func (m *TLInputReportReasonChildAbuse) GetPredicateName() string {
	return Predicate_inputReportReasonChildAbuse
}

func (m *TLInputReportReasonChildAbuse) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xadf44ee3: func() []byte {
			x.UInt(0xadf44ee3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonChildAbuse, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonChildAbuse, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonChildAbuse) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonChildAbuse) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xadf44ee3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonChildAbuse) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonOther
func MakeTLInputReportReasonOther(data2 *ReportReason) *TLInputReportReasonOther {
	if data2 == nil {
		return &TLInputReportReasonOther{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonOther,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonOther
		return &TLInputReportReasonOther{Data2: data2}
	}
}

func (m *TLInputReportReasonOther) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonOther
	return m.Data2
}

func (m *TLInputReportReasonOther) GetPredicateName() string {
	return Predicate_inputReportReasonOther
}

func (m *TLInputReportReasonOther) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc1e4a2b1: func() []byte {
			x.UInt(0xc1e4a2b1)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonOther, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonOther, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonOther) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonOther) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc1e4a2b1: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonOther) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonCopyright
func MakeTLInputReportReasonCopyright(data2 *ReportReason) *TLInputReportReasonCopyright {
	if data2 == nil {
		return &TLInputReportReasonCopyright{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonCopyright,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonCopyright
		return &TLInputReportReasonCopyright{Data2: data2}
	}
}

func (m *TLInputReportReasonCopyright) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonCopyright
	return m.Data2
}

func (m *TLInputReportReasonCopyright) GetPredicateName() string {
	return Predicate_inputReportReasonCopyright
}

func (m *TLInputReportReasonCopyright) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9b89f93a: func() []byte {
			x.UInt(0x9b89f93a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonCopyright, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonCopyright, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonCopyright) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonCopyright) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9b89f93a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonCopyright) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonGeoIrrelevant
func MakeTLInputReportReasonGeoIrrelevant(data2 *ReportReason) *TLInputReportReasonGeoIrrelevant {
	if data2 == nil {
		return &TLInputReportReasonGeoIrrelevant{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonGeoIrrelevant,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonGeoIrrelevant
		return &TLInputReportReasonGeoIrrelevant{Data2: data2}
	}
}

func (m *TLInputReportReasonGeoIrrelevant) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonGeoIrrelevant
	return m.Data2
}

func (m *TLInputReportReasonGeoIrrelevant) GetPredicateName() string {
	return Predicate_inputReportReasonGeoIrrelevant
}

func (m *TLInputReportReasonGeoIrrelevant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdbd4feed: func() []byte {
			x.UInt(0xdbd4feed)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonGeoIrrelevant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonGeoIrrelevant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonGeoIrrelevant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonGeoIrrelevant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdbd4feed: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonGeoIrrelevant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonFake
func MakeTLInputReportReasonFake(data2 *ReportReason) *TLInputReportReasonFake {
	if data2 == nil {
		return &TLInputReportReasonFake{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonFake,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonFake
		return &TLInputReportReasonFake{Data2: data2}
	}
}

func (m *TLInputReportReasonFake) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonFake
	return m.Data2
}

func (m *TLInputReportReasonFake) GetPredicateName() string {
	return Predicate_inputReportReasonFake
}

func (m *TLInputReportReasonFake) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf5ddd6e7: func() []byte {
			x.UInt(0xf5ddd6e7)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonFake, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonFake, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonFake) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonFake) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf5ddd6e7: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonFake) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonIllegalDrugs
func MakeTLInputReportReasonIllegalDrugs(data2 *ReportReason) *TLInputReportReasonIllegalDrugs {
	if data2 == nil {
		return &TLInputReportReasonIllegalDrugs{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonIllegalDrugs,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonIllegalDrugs
		return &TLInputReportReasonIllegalDrugs{Data2: data2}
	}
}

func (m *TLInputReportReasonIllegalDrugs) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonIllegalDrugs
	return m.Data2
}

func (m *TLInputReportReasonIllegalDrugs) GetPredicateName() string {
	return Predicate_inputReportReasonIllegalDrugs
}

func (m *TLInputReportReasonIllegalDrugs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa8eb2be: func() []byte {
			x.UInt(0xa8eb2be)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonIllegalDrugs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonIllegalDrugs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonIllegalDrugs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonIllegalDrugs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa8eb2be: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonIllegalDrugs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputReportReasonPersonalDetails
func MakeTLInputReportReasonPersonalDetails(data2 *ReportReason) *TLInputReportReasonPersonalDetails {
	if data2 == nil {
		return &TLInputReportReasonPersonalDetails{Data2: &ReportReason{
			PredicateName: Predicate_inputReportReasonPersonalDetails,
		}}
	} else {
		data2.PredicateName = Predicate_inputReportReasonPersonalDetails
		return &TLInputReportReasonPersonalDetails{Data2: data2}
	}
}

func (m *TLInputReportReasonPersonalDetails) To_ReportReason() *ReportReason {
	m.Data2.PredicateName = Predicate_inputReportReasonPersonalDetails
	return m.Data2
}

func (m *TLInputReportReasonPersonalDetails) GetPredicateName() string {
	return Predicate_inputReportReasonPersonalDetails
}

func (m *TLInputReportReasonPersonalDetails) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9ec7863d: func() []byte {
			x.UInt(0x9ec7863d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputReportReasonPersonalDetails, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputReportReasonPersonalDetails, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputReportReasonPersonalDetails) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputReportReasonPersonalDetails) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9ec7863d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputReportReasonPersonalDetails) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Photos_Photo <--
//  + TL_PhotosPhoto
//

func (m *Photos_Photo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_photos_photo:
		t := m.To_PhotosPhoto()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Photos_Photo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Photos_Photo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x20212ca8:
		m2 := MakeTLPhotosPhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Photos_Photo) DebugString() string {
	switch m.PredicateName {
	case Predicate_photos_photo:
		t := m.To_PhotosPhoto()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhotosPhoto
func (m *Photos_Photo) To_PhotosPhoto() *TLPhotosPhoto {
	m.PredicateName = Predicate_photos_photo
	return &TLPhotosPhoto{
		Data2: m,
	}
}

// MakeTLPhotosPhoto
func MakeTLPhotosPhoto(data2 *Photos_Photo) *TLPhotosPhoto {
	if data2 == nil {
		return &TLPhotosPhoto{Data2: &Photos_Photo{
			PredicateName: Predicate_photos_photo,
		}}
	} else {
		data2.PredicateName = Predicate_photos_photo
		return &TLPhotosPhoto{Data2: data2}
	}
}

func (m *TLPhotosPhoto) To_Photos_Photo() *Photos_Photo {
	m.Data2.PredicateName = Predicate_photos_photo
	return m.Data2
}

func (m *TLPhotosPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLPhotosPhoto) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLPhotosPhoto) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhoto) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhotosPhoto) GetPredicateName() string {
	return Predicate_photos_photo
}

func (m *TLPhotosPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x20212ca8: func() []byte {
			x.UInt(0x20212ca8)

			x.Bytes(m.GetPhoto().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photos_photo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photos_photo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotosPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x20212ca8: func() error {

			m0 := &Photo{}
			m0.Decode(dBuf)
			m.SetPhoto(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotosPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPrivacyKey <--
//  + TL_InputPrivacyKeyStatusTimestamp
//  + TL_InputPrivacyKeyChatInvite
//  + TL_InputPrivacyKeyPhoneCall
//  + TL_InputPrivacyKeyPhoneP2P
//  + TL_InputPrivacyKeyForwards
//  + TL_InputPrivacyKeyProfilePhoto
//  + TL_InputPrivacyKeyPhoneNumber
//  + TL_InputPrivacyKeyAddedByPhone
//

func (m *InputPrivacyKey) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPrivacyKeyStatusTimestamp:
		t := m.To_InputPrivacyKeyStatusTimestamp()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyChatInvite:
		t := m.To_InputPrivacyKeyChatInvite()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyPhoneCall:
		t := m.To_InputPrivacyKeyPhoneCall()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyPhoneP2P:
		t := m.To_InputPrivacyKeyPhoneP2P()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyForwards:
		t := m.To_InputPrivacyKeyForwards()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyProfilePhoto:
		t := m.To_InputPrivacyKeyProfilePhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyPhoneNumber:
		t := m.To_InputPrivacyKeyPhoneNumber()
		xBuf = t.Encode(layer)
	case Predicate_inputPrivacyKeyAddedByPhone:
		t := m.To_InputPrivacyKeyAddedByPhone()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPrivacyKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPrivacyKey) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4f96cb18:
		m2 := MakeTLInputPrivacyKeyStatusTimestamp(m)
		m2.Decode(dBuf)
	case 0xbdfb0426:
		m2 := MakeTLInputPrivacyKeyChatInvite(m)
		m2.Decode(dBuf)
	case 0xfabadc5f:
		m2 := MakeTLInputPrivacyKeyPhoneCall(m)
		m2.Decode(dBuf)
	case 0xdb9e70d2:
		m2 := MakeTLInputPrivacyKeyPhoneP2P(m)
		m2.Decode(dBuf)
	case 0xa4dd4c08:
		m2 := MakeTLInputPrivacyKeyForwards(m)
		m2.Decode(dBuf)
	case 0x5719bacc:
		m2 := MakeTLInputPrivacyKeyProfilePhoto(m)
		m2.Decode(dBuf)
	case 0x352dafa:
		m2 := MakeTLInputPrivacyKeyPhoneNumber(m)
		m2.Decode(dBuf)
	case 0xd1219bdd:
		m2 := MakeTLInputPrivacyKeyAddedByPhone(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPrivacyKey) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPrivacyKeyStatusTimestamp:
		t := m.To_InputPrivacyKeyStatusTimestamp()
		return t.DebugString()
	case Predicate_inputPrivacyKeyChatInvite:
		t := m.To_InputPrivacyKeyChatInvite()
		return t.DebugString()
	case Predicate_inputPrivacyKeyPhoneCall:
		t := m.To_InputPrivacyKeyPhoneCall()
		return t.DebugString()
	case Predicate_inputPrivacyKeyPhoneP2P:
		t := m.To_InputPrivacyKeyPhoneP2P()
		return t.DebugString()
	case Predicate_inputPrivacyKeyForwards:
		t := m.To_InputPrivacyKeyForwards()
		return t.DebugString()
	case Predicate_inputPrivacyKeyProfilePhoto:
		t := m.To_InputPrivacyKeyProfilePhoto()
		return t.DebugString()
	case Predicate_inputPrivacyKeyPhoneNumber:
		t := m.To_InputPrivacyKeyPhoneNumber()
		return t.DebugString()
	case Predicate_inputPrivacyKeyAddedByPhone:
		t := m.To_InputPrivacyKeyAddedByPhone()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPrivacyKeyStatusTimestamp
func (m *InputPrivacyKey) To_InputPrivacyKeyStatusTimestamp() *TLInputPrivacyKeyStatusTimestamp {
	m.PredicateName = Predicate_inputPrivacyKeyStatusTimestamp
	return &TLInputPrivacyKeyStatusTimestamp{
		Data2: m,
	}
}

// To_InputPrivacyKeyChatInvite
func (m *InputPrivacyKey) To_InputPrivacyKeyChatInvite() *TLInputPrivacyKeyChatInvite {
	m.PredicateName = Predicate_inputPrivacyKeyChatInvite
	return &TLInputPrivacyKeyChatInvite{
		Data2: m,
	}
}

// To_InputPrivacyKeyPhoneCall
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneCall() *TLInputPrivacyKeyPhoneCall {
	m.PredicateName = Predicate_inputPrivacyKeyPhoneCall
	return &TLInputPrivacyKeyPhoneCall{
		Data2: m,
	}
}

// To_InputPrivacyKeyPhoneP2P
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneP2P() *TLInputPrivacyKeyPhoneP2P {
	m.PredicateName = Predicate_inputPrivacyKeyPhoneP2P
	return &TLInputPrivacyKeyPhoneP2P{
		Data2: m,
	}
}

// To_InputPrivacyKeyForwards
func (m *InputPrivacyKey) To_InputPrivacyKeyForwards() *TLInputPrivacyKeyForwards {
	m.PredicateName = Predicate_inputPrivacyKeyForwards
	return &TLInputPrivacyKeyForwards{
		Data2: m,
	}
}

// To_InputPrivacyKeyProfilePhoto
func (m *InputPrivacyKey) To_InputPrivacyKeyProfilePhoto() *TLInputPrivacyKeyProfilePhoto {
	m.PredicateName = Predicate_inputPrivacyKeyProfilePhoto
	return &TLInputPrivacyKeyProfilePhoto{
		Data2: m,
	}
}

// To_InputPrivacyKeyPhoneNumber
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneNumber() *TLInputPrivacyKeyPhoneNumber {
	m.PredicateName = Predicate_inputPrivacyKeyPhoneNumber
	return &TLInputPrivacyKeyPhoneNumber{
		Data2: m,
	}
}

// To_InputPrivacyKeyAddedByPhone
func (m *InputPrivacyKey) To_InputPrivacyKeyAddedByPhone() *TLInputPrivacyKeyAddedByPhone {
	m.PredicateName = Predicate_inputPrivacyKeyAddedByPhone
	return &TLInputPrivacyKeyAddedByPhone{
		Data2: m,
	}
}

// MakeTLInputPrivacyKeyStatusTimestamp
func MakeTLInputPrivacyKeyStatusTimestamp(data2 *InputPrivacyKey) *TLInputPrivacyKeyStatusTimestamp {
	if data2 == nil {
		return &TLInputPrivacyKeyStatusTimestamp{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyStatusTimestamp,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyStatusTimestamp
		return &TLInputPrivacyKeyStatusTimestamp{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyStatusTimestamp) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyStatusTimestamp
	return m.Data2
}

func (m *TLInputPrivacyKeyStatusTimestamp) GetPredicateName() string {
	return Predicate_inputPrivacyKeyStatusTimestamp
}

func (m *TLInputPrivacyKeyStatusTimestamp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4f96cb18: func() []byte {
			x.UInt(0x4f96cb18)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyStatusTimestamp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyStatusTimestamp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyStatusTimestamp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyStatusTimestamp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4f96cb18: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyStatusTimestamp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyChatInvite
func MakeTLInputPrivacyKeyChatInvite(data2 *InputPrivacyKey) *TLInputPrivacyKeyChatInvite {
	if data2 == nil {
		return &TLInputPrivacyKeyChatInvite{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyChatInvite,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyChatInvite
		return &TLInputPrivacyKeyChatInvite{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyChatInvite) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyChatInvite
	return m.Data2
}

func (m *TLInputPrivacyKeyChatInvite) GetPredicateName() string {
	return Predicate_inputPrivacyKeyChatInvite
}

func (m *TLInputPrivacyKeyChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbdfb0426: func() []byte {
			x.UInt(0xbdfb0426)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyChatInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyChatInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyChatInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbdfb0426: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyPhoneCall
func MakeTLInputPrivacyKeyPhoneCall(data2 *InputPrivacyKey) *TLInputPrivacyKeyPhoneCall {
	if data2 == nil {
		return &TLInputPrivacyKeyPhoneCall{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyPhoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyPhoneCall
		return &TLInputPrivacyKeyPhoneCall{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyPhoneCall) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyPhoneCall
	return m.Data2
}

func (m *TLInputPrivacyKeyPhoneCall) GetPredicateName() string {
	return Predicate_inputPrivacyKeyPhoneCall
}

func (m *TLInputPrivacyKeyPhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfabadc5f: func() []byte {
			x.UInt(0xfabadc5f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyPhoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyPhoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyPhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfabadc5f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyPhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyPhoneP2P
func MakeTLInputPrivacyKeyPhoneP2P(data2 *InputPrivacyKey) *TLInputPrivacyKeyPhoneP2P {
	if data2 == nil {
		return &TLInputPrivacyKeyPhoneP2P{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyPhoneP2P,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyPhoneP2P
		return &TLInputPrivacyKeyPhoneP2P{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyPhoneP2P) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyPhoneP2P
	return m.Data2
}

func (m *TLInputPrivacyKeyPhoneP2P) GetPredicateName() string {
	return Predicate_inputPrivacyKeyPhoneP2P
}

func (m *TLInputPrivacyKeyPhoneP2P) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb9e70d2: func() []byte {
			x.UInt(0xdb9e70d2)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyPhoneP2P, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyPhoneP2P, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyPhoneP2P) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyPhoneP2P) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb9e70d2: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyPhoneP2P) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyForwards
func MakeTLInputPrivacyKeyForwards(data2 *InputPrivacyKey) *TLInputPrivacyKeyForwards {
	if data2 == nil {
		return &TLInputPrivacyKeyForwards{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyForwards,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyForwards
		return &TLInputPrivacyKeyForwards{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyForwards) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyForwards
	return m.Data2
}

func (m *TLInputPrivacyKeyForwards) GetPredicateName() string {
	return Predicate_inputPrivacyKeyForwards
}

func (m *TLInputPrivacyKeyForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa4dd4c08: func() []byte {
			x.UInt(0xa4dd4c08)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyForwards, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyForwards, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyForwards) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa4dd4c08: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyProfilePhoto
func MakeTLInputPrivacyKeyProfilePhoto(data2 *InputPrivacyKey) *TLInputPrivacyKeyProfilePhoto {
	if data2 == nil {
		return &TLInputPrivacyKeyProfilePhoto{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyProfilePhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyProfilePhoto
		return &TLInputPrivacyKeyProfilePhoto{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyProfilePhoto) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyProfilePhoto
	return m.Data2
}

func (m *TLInputPrivacyKeyProfilePhoto) GetPredicateName() string {
	return Predicate_inputPrivacyKeyProfilePhoto
}

func (m *TLInputPrivacyKeyProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5719bacc: func() []byte {
			x.UInt(0x5719bacc)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyProfilePhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyProfilePhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyProfilePhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5719bacc: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyPhoneNumber
func MakeTLInputPrivacyKeyPhoneNumber(data2 *InputPrivacyKey) *TLInputPrivacyKeyPhoneNumber {
	if data2 == nil {
		return &TLInputPrivacyKeyPhoneNumber{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyPhoneNumber,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyPhoneNumber
		return &TLInputPrivacyKeyPhoneNumber{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyPhoneNumber) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyPhoneNumber
	return m.Data2
}

func (m *TLInputPrivacyKeyPhoneNumber) GetPredicateName() string {
	return Predicate_inputPrivacyKeyPhoneNumber
}

func (m *TLInputPrivacyKeyPhoneNumber) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x352dafa: func() []byte {
			x.UInt(0x352dafa)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyPhoneNumber, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyPhoneNumber, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyPhoneNumber) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyPhoneNumber) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x352dafa: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyPhoneNumber) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPrivacyKeyAddedByPhone
func MakeTLInputPrivacyKeyAddedByPhone(data2 *InputPrivacyKey) *TLInputPrivacyKeyAddedByPhone {
	if data2 == nil {
		return &TLInputPrivacyKeyAddedByPhone{Data2: &InputPrivacyKey{
			PredicateName: Predicate_inputPrivacyKeyAddedByPhone,
		}}
	} else {
		data2.PredicateName = Predicate_inputPrivacyKeyAddedByPhone
		return &TLInputPrivacyKeyAddedByPhone{Data2: data2}
	}
}

func (m *TLInputPrivacyKeyAddedByPhone) To_InputPrivacyKey() *InputPrivacyKey {
	m.Data2.PredicateName = Predicate_inputPrivacyKeyAddedByPhone
	return m.Data2
}

func (m *TLInputPrivacyKeyAddedByPhone) GetPredicateName() string {
	return Predicate_inputPrivacyKeyAddedByPhone
}

func (m *TLInputPrivacyKeyAddedByPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd1219bdd: func() []byte {
			x.UInt(0xd1219bdd)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPrivacyKeyAddedByPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPrivacyKeyAddedByPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPrivacyKeyAddedByPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPrivacyKeyAddedByPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd1219bdd: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPrivacyKeyAddedByPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecurePlainData <--
//  + TL_SecurePlainPhone
//  + TL_SecurePlainEmail
//

func (m *SecurePlainData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_securePlainPhone:
		t := m.To_SecurePlainPhone()
		xBuf = t.Encode(layer)
	case Predicate_securePlainEmail:
		t := m.To_SecurePlainEmail()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecurePlainData) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecurePlainData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7d6099dd:
		m2 := MakeTLSecurePlainPhone(m)
		m2.Decode(dBuf)
	case 0x21ec5a5f:
		m2 := MakeTLSecurePlainEmail(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecurePlainData) DebugString() string {
	switch m.PredicateName {
	case Predicate_securePlainPhone:
		t := m.To_SecurePlainPhone()
		return t.DebugString()
	case Predicate_securePlainEmail:
		t := m.To_SecurePlainEmail()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecurePlainPhone
func (m *SecurePlainData) To_SecurePlainPhone() *TLSecurePlainPhone {
	m.PredicateName = Predicate_securePlainPhone
	return &TLSecurePlainPhone{
		Data2: m,
	}
}

// To_SecurePlainEmail
func (m *SecurePlainData) To_SecurePlainEmail() *TLSecurePlainEmail {
	m.PredicateName = Predicate_securePlainEmail
	return &TLSecurePlainEmail{
		Data2: m,
	}
}

// MakeTLSecurePlainPhone
func MakeTLSecurePlainPhone(data2 *SecurePlainData) *TLSecurePlainPhone {
	if data2 == nil {
		return &TLSecurePlainPhone{Data2: &SecurePlainData{
			PredicateName: Predicate_securePlainPhone,
		}}
	} else {
		data2.PredicateName = Predicate_securePlainPhone
		return &TLSecurePlainPhone{Data2: data2}
	}
}

func (m *TLSecurePlainPhone) To_SecurePlainData() *SecurePlainData {
	m.Data2.PredicateName = Predicate_securePlainPhone
	return m.Data2
}

func (m *TLSecurePlainPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSecurePlainPhone) GetPhone() string  { return m.Data2.Phone }

func (m *TLSecurePlainPhone) GetPredicateName() string {
	return Predicate_securePlainPhone
}

func (m *TLSecurePlainPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7d6099dd: func() []byte {
			x.UInt(0x7d6099dd)

			x.String(m.GetPhone())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_securePlainPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_securePlainPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecurePlainPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecurePlainPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7d6099dd: func() error {
			m.SetPhone(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecurePlainPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecurePlainEmail
func MakeTLSecurePlainEmail(data2 *SecurePlainData) *TLSecurePlainEmail {
	if data2 == nil {
		return &TLSecurePlainEmail{Data2: &SecurePlainData{
			PredicateName: Predicate_securePlainEmail,
		}}
	} else {
		data2.PredicateName = Predicate_securePlainEmail
		return &TLSecurePlainEmail{Data2: data2}
	}
}

func (m *TLSecurePlainEmail) To_SecurePlainData() *SecurePlainData {
	m.Data2.PredicateName = Predicate_securePlainEmail
	return m.Data2
}

func (m *TLSecurePlainEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLSecurePlainEmail) GetEmail() string  { return m.Data2.Email }

func (m *TLSecurePlainEmail) GetPredicateName() string {
	return Predicate_securePlainEmail
}

func (m *TLSecurePlainEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x21ec5a5f: func() []byte {
			x.UInt(0x21ec5a5f)

			x.String(m.GetEmail())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_securePlainEmail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_securePlainEmail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecurePlainEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecurePlainEmail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x21ec5a5f: func() error {
			m.SetEmail(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecurePlainEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Users_UserFull <--
//  + TL_UsersUserFull
//

func (m *Users_UserFull) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_users_userFull:
		t := m.To_UsersUserFull()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Users_UserFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *Users_UserFull) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3b6d152e:
		m2 := MakeTLUsersUserFull(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Users_UserFull) DebugString() string {
	switch m.PredicateName {
	case Predicate_users_userFull:
		t := m.To_UsersUserFull()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UsersUserFull
func (m *Users_UserFull) To_UsersUserFull() *TLUsersUserFull {
	m.PredicateName = Predicate_users_userFull
	return &TLUsersUserFull{
		Data2: m,
	}
}

// MakeTLUsersUserFull
func MakeTLUsersUserFull(data2 *Users_UserFull) *TLUsersUserFull {
	if data2 == nil {
		return &TLUsersUserFull{Data2: &Users_UserFull{
			PredicateName: Predicate_users_userFull,
		}}
	} else {
		data2.PredicateName = Predicate_users_userFull
		return &TLUsersUserFull{Data2: data2}
	}
}

func (m *TLUsersUserFull) To_Users_UserFull() *Users_UserFull {
	m.Data2.PredicateName = Predicate_users_userFull
	return m.Data2
}

func (m *TLUsersUserFull) SetFullUser(v *UserFull) { m.Data2.FullUser = v }
func (m *TLUsersUserFull) GetFullUser() *UserFull  { return m.Data2.FullUser }

func (m *TLUsersUserFull) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUsersUserFull) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUsersUserFull) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUsersUserFull) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUsersUserFull) GetPredicateName() string {
	return Predicate_users_userFull
}

func (m *TLUsersUserFull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3b6d152e: func() []byte {
			x.UInt(0x3b6d152e)

			x.Bytes(m.GetFullUser().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_users_userFull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_users_userFull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUsersUserFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersUserFull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3b6d152e: func() error {

			m0 := &UserFull{}
			m0.Decode(dBuf)
			m.SetFullUser(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUsersUserFull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PeerSettings <--
//  + TL_PeerSettings
//

func (m *PeerSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerSettings:
		t := m.To_PeerSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PeerSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *PeerSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa518110d:
		m2 := MakeTLPeerSettings(m)
		m2.Decode(dBuf)
	case 0x733f2961:
		m2 := MakeTLPeerSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PeerSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerSettings:
		t := m.To_PeerSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerSettings
func (m *PeerSettings) To_PeerSettings() *TLPeerSettings {
	m.PredicateName = Predicate_peerSettings
	return &TLPeerSettings{
		Data2: m,
	}
}

// MakeTLPeerSettings
func MakeTLPeerSettings(data2 *PeerSettings) *TLPeerSettings {
	if data2 == nil {
		return &TLPeerSettings{Data2: &PeerSettings{
			PredicateName: Predicate_peerSettings,
		}}
	} else {
		data2.PredicateName = Predicate_peerSettings
		return &TLPeerSettings{Data2: data2}
	}
}

func (m *TLPeerSettings) To_PeerSettings() *PeerSettings {
	m.Data2.PredicateName = Predicate_peerSettings
	return m.Data2
}

//// flags
func (m *TLPeerSettings) SetReportSpam(v bool) { m.Data2.ReportSpam = v }
func (m *TLPeerSettings) GetReportSpam() bool  { return m.Data2.ReportSpam }

func (m *TLPeerSettings) SetAddContact(v bool) { m.Data2.AddContact = v }
func (m *TLPeerSettings) GetAddContact() bool  { return m.Data2.AddContact }

func (m *TLPeerSettings) SetBlockContact(v bool) { m.Data2.BlockContact = v }
func (m *TLPeerSettings) GetBlockContact() bool  { return m.Data2.BlockContact }

func (m *TLPeerSettings) SetShareContact(v bool) { m.Data2.ShareContact = v }
func (m *TLPeerSettings) GetShareContact() bool  { return m.Data2.ShareContact }

func (m *TLPeerSettings) SetNeedContactsException(v bool) { m.Data2.NeedContactsException = v }
func (m *TLPeerSettings) GetNeedContactsException() bool  { return m.Data2.NeedContactsException }

func (m *TLPeerSettings) SetReportGeo(v bool) { m.Data2.ReportGeo = v }
func (m *TLPeerSettings) GetReportGeo() bool  { return m.Data2.ReportGeo }

func (m *TLPeerSettings) SetAutoarchived(v bool) { m.Data2.Autoarchived = v }
func (m *TLPeerSettings) GetAutoarchived() bool  { return m.Data2.Autoarchived }

func (m *TLPeerSettings) SetInviteMembers(v bool) { m.Data2.InviteMembers = v }
func (m *TLPeerSettings) GetInviteMembers() bool  { return m.Data2.InviteMembers }

func (m *TLPeerSettings) SetRequestChatBroadcast(v bool) { m.Data2.RequestChatBroadcast = v }
func (m *TLPeerSettings) GetRequestChatBroadcast() bool  { return m.Data2.RequestChatBroadcast }

func (m *TLPeerSettings) SetGeoDistance(v *types.Int32Value) { m.Data2.GeoDistance = v }
func (m *TLPeerSettings) GetGeoDistance() *types.Int32Value  { return m.Data2.GeoDistance }

func (m *TLPeerSettings) SetRequestChatTitle(v *types.StringValue) { m.Data2.RequestChatTitle = v }
func (m *TLPeerSettings) GetRequestChatTitle() *types.StringValue  { return m.Data2.RequestChatTitle }

func (m *TLPeerSettings) SetRequestChatDate(v *types.Int32Value) { m.Data2.RequestChatDate = v }
func (m *TLPeerSettings) GetRequestChatDate() *types.Int32Value  { return m.Data2.RequestChatDate }

func (m *TLPeerSettings) GetPredicateName() string {
	return Predicate_peerSettings
}

func (m *TLPeerSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa518110d: func() []byte {
			x.UInt(0xa518110d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReportSpam() == true {
					flags |= 1 << 0
				}
				if m.GetAddContact() == true {
					flags |= 1 << 1
				}
				if m.GetBlockContact() == true {
					flags |= 1 << 2
				}
				if m.GetShareContact() == true {
					flags |= 1 << 3
				}
				if m.GetNeedContactsException() == true {
					flags |= 1 << 4
				}
				if m.GetReportGeo() == true {
					flags |= 1 << 5
				}
				if m.GetAutoarchived() == true {
					flags |= 1 << 7
				}
				if m.GetInviteMembers() == true {
					flags |= 1 << 8
				}
				if m.GetRequestChatBroadcast() == true {
					flags |= 1 << 10
				}
				if m.GetGeoDistance() != nil {
					flags |= 1 << 6
				}
				if m.GetRequestChatTitle() != nil {
					flags |= 1 << 9
				}
				if m.GetRequestChatDate() != nil {
					flags |= 1 << 9
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetGeoDistance() != nil {
				x.Int(m.GetGeoDistance().Value)
			}

			if m.GetRequestChatTitle() != nil {
				x.String(m.GetRequestChatTitle().Value)
			}

			if m.GetRequestChatDate() != nil {
				x.Int(m.GetRequestChatDate().Value)
			}

			return x.GetBuf()
		},
		0x733f2961: func() []byte {
			x.UInt(0x733f2961)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReportSpam() == true {
					flags |= 1 << 0
				}
				if m.GetAddContact() == true {
					flags |= 1 << 1
				}
				if m.GetBlockContact() == true {
					flags |= 1 << 2
				}
				if m.GetShareContact() == true {
					flags |= 1 << 3
				}
				if m.GetNeedContactsException() == true {
					flags |= 1 << 4
				}
				if m.GetReportGeo() == true {
					flags |= 1 << 5
				}
				if m.GetAutoarchived() == true {
					flags |= 1 << 7
				}
				if m.GetInviteMembers() == true {
					flags |= 1 << 8
				}
				if m.GetGeoDistance() != nil {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetGeoDistance() != nil {
				x.Int(m.GetGeoDistance().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa518110d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetReportSpam(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetAddContact(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetBlockContact(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetShareContact(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetNeedContactsException(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetReportGeo(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetAutoarchived(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetInviteMembers(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetRequestChatBroadcast(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetGeoDistance(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 9)) != 0 {
				m.SetRequestChatTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 9)) != 0 {
				m.SetRequestChatDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
		0x733f2961: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetReportSpam(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetAddContact(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetBlockContact(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetShareContact(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetNeedContactsException(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetReportGeo(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetAutoarchived(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetInviteMembers(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetGeoDistance(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelMessagesFilter <--
//  + TL_ChannelMessagesFilterEmpty
//  + TL_ChannelMessagesFilter
//

func (m *ChannelMessagesFilter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelMessagesFilterEmpty:
		t := m.To_ChannelMessagesFilterEmpty()
		xBuf = t.Encode(layer)
	case Predicate_channelMessagesFilter:
		t := m.To_ChannelMessagesFilter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelMessagesFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelMessagesFilter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x94d42ee7:
		m2 := MakeTLChannelMessagesFilterEmpty(m)
		m2.Decode(dBuf)
	case 0xcd77d957:
		m2 := MakeTLChannelMessagesFilter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelMessagesFilter) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelMessagesFilterEmpty:
		t := m.To_ChannelMessagesFilterEmpty()
		return t.DebugString()
	case Predicate_channelMessagesFilter:
		t := m.To_ChannelMessagesFilter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelMessagesFilterEmpty
func (m *ChannelMessagesFilter) To_ChannelMessagesFilterEmpty() *TLChannelMessagesFilterEmpty {
	m.PredicateName = Predicate_channelMessagesFilterEmpty
	return &TLChannelMessagesFilterEmpty{
		Data2: m,
	}
}

// To_ChannelMessagesFilter
func (m *ChannelMessagesFilter) To_ChannelMessagesFilter() *TLChannelMessagesFilter {
	m.PredicateName = Predicate_channelMessagesFilter
	return &TLChannelMessagesFilter{
		Data2: m,
	}
}

// MakeTLChannelMessagesFilterEmpty
func MakeTLChannelMessagesFilterEmpty(data2 *ChannelMessagesFilter) *TLChannelMessagesFilterEmpty {
	if data2 == nil {
		return &TLChannelMessagesFilterEmpty{Data2: &ChannelMessagesFilter{
			PredicateName: Predicate_channelMessagesFilterEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_channelMessagesFilterEmpty
		return &TLChannelMessagesFilterEmpty{Data2: data2}
	}
}

func (m *TLChannelMessagesFilterEmpty) To_ChannelMessagesFilter() *ChannelMessagesFilter {
	m.Data2.PredicateName = Predicate_channelMessagesFilterEmpty
	return m.Data2
}

func (m *TLChannelMessagesFilterEmpty) GetPredicateName() string {
	return Predicate_channelMessagesFilterEmpty
}

func (m *TLChannelMessagesFilterEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x94d42ee7: func() []byte {
			x.UInt(0x94d42ee7)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelMessagesFilterEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelMessagesFilterEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelMessagesFilterEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelMessagesFilterEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x94d42ee7: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelMessagesFilterEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelMessagesFilter
func MakeTLChannelMessagesFilter(data2 *ChannelMessagesFilter) *TLChannelMessagesFilter {
	if data2 == nil {
		return &TLChannelMessagesFilter{Data2: &ChannelMessagesFilter{
			PredicateName: Predicate_channelMessagesFilter,
		}}
	} else {
		data2.PredicateName = Predicate_channelMessagesFilter
		return &TLChannelMessagesFilter{Data2: data2}
	}
}

func (m *TLChannelMessagesFilter) To_ChannelMessagesFilter() *ChannelMessagesFilter {
	m.Data2.PredicateName = Predicate_channelMessagesFilter
	return m.Data2
}

//// flags
func (m *TLChannelMessagesFilter) SetExcludeNewMessages(v bool) { m.Data2.ExcludeNewMessages = v }
func (m *TLChannelMessagesFilter) GetExcludeNewMessages() bool  { return m.Data2.ExcludeNewMessages }

func (m *TLChannelMessagesFilter) SetRanges(v []*MessageRange) { m.Data2.Ranges = v }
func (m *TLChannelMessagesFilter) GetRanges() []*MessageRange  { return m.Data2.Ranges }

func (m *TLChannelMessagesFilter) GetPredicateName() string {
	return Predicate_channelMessagesFilter
}

func (m *TLChannelMessagesFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcd77d957: func() []byte {
			x.UInt(0xcd77d957)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetExcludeNewMessages() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRanges())))
			for _, v := range m.GetRanges() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelMessagesFilter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelMessagesFilter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelMessagesFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelMessagesFilter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcd77d957: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetExcludeNewMessages(true)
			}
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*MessageRange, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &MessageRange{}
				v2[i].Decode(dBuf)
			}
			m.SetRanges(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelMessagesFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCall <--
//  + TL_PhoneCallEmpty
//  + TL_PhoneCallWaiting
//  + TL_PhoneCallRequested
//  + TL_PhoneCallAccepted
//  + TL_PhoneCall
//  + TL_PhoneCallDiscarded
//

func (m *PhoneCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phoneCallEmpty:
		t := m.To_PhoneCallEmpty()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallWaiting:
		t := m.To_PhoneCallWaiting()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallRequested:
		t := m.To_PhoneCallRequested()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallAccepted:
		t := m.To_PhoneCallAccepted()
		xBuf = t.Encode(layer)
	case Predicate_phoneCall:
		t := m.To_PhoneCall()
		xBuf = t.Encode(layer)
	case Predicate_phoneCallDiscarded:
		t := m.To_PhoneCallDiscarded()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *PhoneCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5366c915:
		m2 := MakeTLPhoneCallEmpty(m)
		m2.Decode(dBuf)
	case 0xc5226f17:
		m2 := MakeTLPhoneCallWaiting(m)
		m2.Decode(dBuf)
	case 0x14b0ed0c:
		m2 := MakeTLPhoneCallRequested(m)
		m2.Decode(dBuf)
	case 0x3660c311:
		m2 := MakeTLPhoneCallAccepted(m)
		m2.Decode(dBuf)
	case 0x967f7c67:
		m2 := MakeTLPhoneCall(m)
		m2.Decode(dBuf)
	case 0x50ca4de1:
		m2 := MakeTLPhoneCallDiscarded(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PhoneCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_phoneCallEmpty:
		t := m.To_PhoneCallEmpty()
		return t.DebugString()
	case Predicate_phoneCallWaiting:
		t := m.To_PhoneCallWaiting()
		return t.DebugString()
	case Predicate_phoneCallRequested:
		t := m.To_PhoneCallRequested()
		return t.DebugString()
	case Predicate_phoneCallAccepted:
		t := m.To_PhoneCallAccepted()
		return t.DebugString()
	case Predicate_phoneCall:
		t := m.To_PhoneCall()
		return t.DebugString()
	case Predicate_phoneCallDiscarded:
		t := m.To_PhoneCallDiscarded()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneCallEmpty
func (m *PhoneCall) To_PhoneCallEmpty() *TLPhoneCallEmpty {
	m.PredicateName = Predicate_phoneCallEmpty
	return &TLPhoneCallEmpty{
		Data2: m,
	}
}

// To_PhoneCallWaiting
func (m *PhoneCall) To_PhoneCallWaiting() *TLPhoneCallWaiting {
	m.PredicateName = Predicate_phoneCallWaiting
	return &TLPhoneCallWaiting{
		Data2: m,
	}
}

// To_PhoneCallRequested
func (m *PhoneCall) To_PhoneCallRequested() *TLPhoneCallRequested {
	m.PredicateName = Predicate_phoneCallRequested
	return &TLPhoneCallRequested{
		Data2: m,
	}
}

// To_PhoneCallAccepted
func (m *PhoneCall) To_PhoneCallAccepted() *TLPhoneCallAccepted {
	m.PredicateName = Predicate_phoneCallAccepted
	return &TLPhoneCallAccepted{
		Data2: m,
	}
}

// To_PhoneCall
func (m *PhoneCall) To_PhoneCall() *TLPhoneCall {
	m.PredicateName = Predicate_phoneCall
	return &TLPhoneCall{
		Data2: m,
	}
}

// To_PhoneCallDiscarded
func (m *PhoneCall) To_PhoneCallDiscarded() *TLPhoneCallDiscarded {
	m.PredicateName = Predicate_phoneCallDiscarded
	return &TLPhoneCallDiscarded{
		Data2: m,
	}
}

// MakeTLPhoneCallEmpty
func MakeTLPhoneCallEmpty(data2 *PhoneCall) *TLPhoneCallEmpty {
	if data2 == nil {
		return &TLPhoneCallEmpty{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCallEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallEmpty
		return &TLPhoneCallEmpty{Data2: data2}
	}
}

func (m *TLPhoneCallEmpty) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCallEmpty
	return m.Data2
}

func (m *TLPhoneCallEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallEmpty) GetPredicateName() string {
	return Predicate_phoneCallEmpty
}

func (m *TLPhoneCallEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5366c915: func() []byte {
			x.UInt(0x5366c915)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5366c915: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallWaiting
func MakeTLPhoneCallWaiting(data2 *PhoneCall) *TLPhoneCallWaiting {
	if data2 == nil {
		return &TLPhoneCallWaiting{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCallWaiting,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallWaiting
		return &TLPhoneCallWaiting{Data2: data2}
	}
}

func (m *TLPhoneCallWaiting) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCallWaiting
	return m.Data2
}

//// flags
func (m *TLPhoneCallWaiting) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallWaiting) GetVideo() bool  { return m.Data2.Video }

func (m *TLPhoneCallWaiting) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWaiting) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWaiting) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallWaiting) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallWaiting) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLPhoneCallWaiting) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLPhoneCallWaiting) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallWaiting) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLPhoneCallWaiting) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallWaiting) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCallWaiting) SetReceiveDate(v *types.Int32Value) { m.Data2.ReceiveDate = v }
func (m *TLPhoneCallWaiting) GetReceiveDate() *types.Int32Value  { return m.Data2.ReceiveDate }

func (m *TLPhoneCallWaiting) GetPredicateName() string {
	return Predicate_phoneCallWaiting
}

func (m *TLPhoneCallWaiting) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc5226f17: func() []byte {
			x.UInt(0xc5226f17)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideo() == true {
					flags |= 1 << 6
				}

				if m.GetReceiveDate() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.Bytes(m.GetProtocol().Encode(layer))
			if m.GetReceiveDate() != nil {
				x.Int(m.GetReceiveDate().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallWaiting, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallWaiting, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallWaiting) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallWaiting) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc5226f17: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 6)) != 0 {
				m.SetVideo(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())

			m7 := &PhoneCallProtocol{}
			m7.Decode(dBuf)
			m.SetProtocol(m7)

			if (flags & (1 << 0)) != 0 {
				m.SetReceiveDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallWaiting) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallRequested
func MakeTLPhoneCallRequested(data2 *PhoneCall) *TLPhoneCallRequested {
	if data2 == nil {
		return &TLPhoneCallRequested{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCallRequested,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallRequested
		return &TLPhoneCallRequested{Data2: data2}
	}
}

func (m *TLPhoneCallRequested) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCallRequested
	return m.Data2
}

//// flags
func (m *TLPhoneCallRequested) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallRequested) GetVideo() bool  { return m.Data2.Video }

func (m *TLPhoneCallRequested) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallRequested) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallRequested) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallRequested) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallRequested) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLPhoneCallRequested) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLPhoneCallRequested) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallRequested) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLPhoneCallRequested) SetGAHash(v []byte) { m.Data2.GAHash = v }
func (m *TLPhoneCallRequested) GetGAHash() []byte  { return m.Data2.GAHash }

func (m *TLPhoneCallRequested) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallRequested) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCallRequested) GetPredicateName() string {
	return Predicate_phoneCallRequested
}

func (m *TLPhoneCallRequested) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x14b0ed0c: func() []byte {
			x.UInt(0x14b0ed0c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideo() == true {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.StringBytes(m.GetGAHash())
			x.Bytes(m.GetProtocol().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallRequested, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallRequested, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallRequested) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallRequested) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x14b0ed0c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 6)) != 0 {
				m.SetVideo(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			m.SetGAHash(dBuf.StringBytes())

			m7 := &PhoneCallProtocol{}
			m7.Decode(dBuf)
			m.SetProtocol(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallRequested) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallAccepted
func MakeTLPhoneCallAccepted(data2 *PhoneCall) *TLPhoneCallAccepted {
	if data2 == nil {
		return &TLPhoneCallAccepted{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCallAccepted,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallAccepted
		return &TLPhoneCallAccepted{Data2: data2}
	}
}

func (m *TLPhoneCallAccepted) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCallAccepted
	return m.Data2
}

//// flags
func (m *TLPhoneCallAccepted) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallAccepted) GetVideo() bool  { return m.Data2.Video }

func (m *TLPhoneCallAccepted) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallAccepted) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallAccepted) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallAccepted) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCallAccepted) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallAccepted) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCallAccepted) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLPhoneCallAccepted) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLPhoneCallAccepted) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallAccepted) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLPhoneCallAccepted) SetGB(v []byte) { m.Data2.GB = v }
func (m *TLPhoneCallAccepted) GetGB() []byte  { return m.Data2.GB }

func (m *TLPhoneCallAccepted) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallAccepted) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCallAccepted) GetPredicateName() string {
	return Predicate_phoneCallAccepted
}

func (m *TLPhoneCallAccepted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3660c311: func() []byte {
			x.UInt(0x3660c311)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideo() == true {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.StringBytes(m.GetGB())
			x.Bytes(m.GetProtocol().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallAccepted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallAccepted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallAccepted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallAccepted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3660c311: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 6)) != 0 {
				m.SetVideo(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			m.SetGB(dBuf.StringBytes())

			m7 := &PhoneCallProtocol{}
			m7.Decode(dBuf)
			m.SetProtocol(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallAccepted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCall
func MakeTLPhoneCall(data2 *PhoneCall) *TLPhoneCall {
	if data2 == nil {
		return &TLPhoneCall{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCall
		return &TLPhoneCall{Data2: data2}
	}
}

func (m *TLPhoneCall) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCall
	return m.Data2
}

//// flags
func (m *TLPhoneCall) SetP2PAllowed(v bool) { m.Data2.P2PAllowed = v }
func (m *TLPhoneCall) GetP2PAllowed() bool  { return m.Data2.P2PAllowed }

func (m *TLPhoneCall) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCall) GetVideo() bool  { return m.Data2.Video }

func (m *TLPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCall) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoneCall) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCall) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoneCall) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLPhoneCall) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLPhoneCall) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLPhoneCall) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLPhoneCall) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLPhoneCall) GetGAOrB() []byte  { return m.Data2.GAOrB }

func (m *TLPhoneCall) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLPhoneCall) GetKeyFingerprint() int64  { return m.Data2.KeyFingerprint }

func (m *TLPhoneCall) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCall) GetProtocol() *PhoneCallProtocol  { return m.Data2.Protocol }

func (m *TLPhoneCall) SetConnections(v []*PhoneConnection) { m.Data2.Connections = v }
func (m *TLPhoneCall) GetConnections() []*PhoneConnection  { return m.Data2.Connections }

func (m *TLPhoneCall) SetStartDate(v int32) { m.Data2.StartDate = v }
func (m *TLPhoneCall) GetStartDate() int32  { return m.Data2.StartDate }

func (m *TLPhoneCall) GetPredicateName() string {
	return Predicate_phoneCall
}

func (m *TLPhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x967f7c67: func() []byte {
			x.UInt(0x967f7c67)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetP2PAllowed() == true {
					flags |= 1 << 5
				}
				if m.GetVideo() == true {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.StringBytes(m.GetGAOrB())
			x.Long(m.GetKeyFingerprint())
			x.Bytes(m.GetProtocol().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetConnections())))
			for _, v := range m.GetConnections() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetStartDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x967f7c67: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 5)) != 0 {
				m.SetP2PAllowed(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetVideo(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			m.SetGAOrB(dBuf.StringBytes())
			m.SetKeyFingerprint(dBuf.Long())

			m7 := &PhoneCallProtocol{}
			m7.Decode(dBuf)
			m.SetProtocol(m7)

			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*PhoneConnection, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &PhoneConnection{}
				v14[i].Decode(dBuf)
			}
			m.SetConnections(v14)

			m.SetStartDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoneCallDiscarded
func MakeTLPhoneCallDiscarded(data2 *PhoneCall) *TLPhoneCallDiscarded {
	if data2 == nil {
		return &TLPhoneCallDiscarded{Data2: &PhoneCall{
			PredicateName: Predicate_phoneCallDiscarded,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallDiscarded
		return &TLPhoneCallDiscarded{Data2: data2}
	}
}

func (m *TLPhoneCallDiscarded) To_PhoneCall() *PhoneCall {
	m.Data2.PredicateName = Predicate_phoneCallDiscarded
	return m.Data2
}

//// flags
func (m *TLPhoneCallDiscarded) SetNeedRating(v bool) { m.Data2.NeedRating = v }
func (m *TLPhoneCallDiscarded) GetNeedRating() bool  { return m.Data2.NeedRating }

func (m *TLPhoneCallDiscarded) SetNeedDebug(v bool) { m.Data2.NeedDebug = v }
func (m *TLPhoneCallDiscarded) GetNeedDebug() bool  { return m.Data2.NeedDebug }

func (m *TLPhoneCallDiscarded) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallDiscarded) GetVideo() bool  { return m.Data2.Video }

func (m *TLPhoneCallDiscarded) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallDiscarded) GetId() int64  { return m.Data2.Id }

func (m *TLPhoneCallDiscarded) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLPhoneCallDiscarded) GetReason() *PhoneCallDiscardReason  { return m.Data2.Reason }

func (m *TLPhoneCallDiscarded) SetDuration(v *types.Int32Value) { m.Data2.Duration = v }
func (m *TLPhoneCallDiscarded) GetDuration() *types.Int32Value  { return m.Data2.Duration }

func (m *TLPhoneCallDiscarded) GetPredicateName() string {
	return Predicate_phoneCallDiscarded
}

func (m *TLPhoneCallDiscarded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x50ca4de1: func() []byte {
			x.UInt(0x50ca4de1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNeedRating() == true {
					flags |= 1 << 2
				}
				if m.GetNeedDebug() == true {
					flags |= 1 << 3
				}
				if m.GetVideo() == true {
					flags |= 1 << 6
				}

				if m.GetReason() != nil {
					flags |= 1 << 0
				}
				if m.GetDuration() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			if m.GetReason() != nil {
				x.Bytes(m.GetReason().Encode(layer))
			}

			if m.GetDuration() != nil {
				x.Int(m.GetDuration().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallDiscarded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallDiscarded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallDiscarded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallDiscarded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x50ca4de1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetNeedRating(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetNeedDebug(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetVideo(true)
			}
			m.SetId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m18 := &PhoneCallDiscardReason{}
				m18.Decode(dBuf)
				m.SetReason(m18)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetDuration(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallDiscarded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_SupportName <--
//  + TL_HelpSupportName
//

func (m *Help_SupportName) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_supportName:
		t := m.To_HelpSupportName()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_SupportName) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_SupportName) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8c05f1c9:
		m2 := MakeTLHelpSupportName(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_SupportName) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_supportName:
		t := m.To_HelpSupportName()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpSupportName
func (m *Help_SupportName) To_HelpSupportName() *TLHelpSupportName {
	m.PredicateName = Predicate_help_supportName
	return &TLHelpSupportName{
		Data2: m,
	}
}

// MakeTLHelpSupportName
func MakeTLHelpSupportName(data2 *Help_SupportName) *TLHelpSupportName {
	if data2 == nil {
		return &TLHelpSupportName{Data2: &Help_SupportName{
			PredicateName: Predicate_help_supportName,
		}}
	} else {
		data2.PredicateName = Predicate_help_supportName
		return &TLHelpSupportName{Data2: data2}
	}
}

func (m *TLHelpSupportName) To_Help_SupportName() *Help_SupportName {
	m.Data2.PredicateName = Predicate_help_supportName
	return m.Data2
}

func (m *TLHelpSupportName) SetName(v string) { m.Data2.Name = v }
func (m *TLHelpSupportName) GetName() string  { return m.Data2.Name }

func (m *TLHelpSupportName) GetPredicateName() string {
	return Predicate_help_supportName
}

func (m *TLHelpSupportName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c05f1c9: func() []byte {
			x.UInt(0x8c05f1c9)

			x.String(m.GetName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_supportName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_supportName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpSupportName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpSupportName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c05f1c9: func() error {
			m.SetName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpSupportName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatInviteImporter <--
//  + TL_ChatInviteImporter
//

func (m *ChatInviteImporter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatInviteImporter:
		t := m.To_ChatInviteImporter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatInviteImporter) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatInviteImporter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8c5adfd9:
		m2 := MakeTLChatInviteImporter(m)
		m2.Decode(dBuf)
	case 0xb5cd5f4:
		m2 := MakeTLChatInviteImporter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatInviteImporter) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatInviteImporter:
		t := m.To_ChatInviteImporter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatInviteImporter
func (m *ChatInviteImporter) To_ChatInviteImporter() *TLChatInviteImporter {
	m.PredicateName = Predicate_chatInviteImporter
	return &TLChatInviteImporter{
		Data2: m,
	}
}

// MakeTLChatInviteImporter
func MakeTLChatInviteImporter(data2 *ChatInviteImporter) *TLChatInviteImporter {
	if data2 == nil {
		return &TLChatInviteImporter{Data2: &ChatInviteImporter{
			PredicateName: Predicate_chatInviteImporter,
		}}
	} else {
		data2.PredicateName = Predicate_chatInviteImporter
		return &TLChatInviteImporter{Data2: data2}
	}
}

func (m *TLChatInviteImporter) To_ChatInviteImporter() *ChatInviteImporter {
	m.Data2.PredicateName = Predicate_chatInviteImporter
	return m.Data2
}

//// flags
func (m *TLChatInviteImporter) SetRequested(v bool) { m.Data2.Requested = v }
func (m *TLChatInviteImporter) GetRequested() bool  { return m.Data2.Requested }

func (m *TLChatInviteImporter) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChatInviteImporter) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChatInviteImporter) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatInviteImporter) GetDate() int32  { return m.Data2.Date }

func (m *TLChatInviteImporter) SetAbout(v *types.StringValue) { m.Data2.About = v }
func (m *TLChatInviteImporter) GetAbout() *types.StringValue  { return m.Data2.About }

func (m *TLChatInviteImporter) SetApprovedBy(v *types.Int64Value) { m.Data2.ApprovedBy = v }
func (m *TLChatInviteImporter) GetApprovedBy() *types.Int64Value  { return m.Data2.ApprovedBy }

func (m *TLChatInviteImporter) GetPredicateName() string {
	return Predicate_chatInviteImporter
}

func (m *TLChatInviteImporter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c5adfd9: func() []byte {
			x.UInt(0x8c5adfd9)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRequested() == true {
					flags |= 1 << 0
				}

				if m.GetAbout() != nil {
					flags |= 1 << 2
				}
				if m.GetApprovedBy() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			if m.GetAbout() != nil {
				x.String(m.GetAbout().Value)
			}

			if m.GetApprovedBy() != nil {
				x.Long(m.GetApprovedBy().Value)
			}

			return x.GetBuf()
		},
		0xb5cd5f4: func() []byte {
			x.UInt(0xb5cd5f4)

			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatInviteImporter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatInviteImporter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatInviteImporter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatInviteImporter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c5adfd9: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRequested(true)
			}
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m.SetAbout(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetApprovedBy(&types.Int64Value{Value: dBuf.Long()})
			}

			return dBuf.GetError()
		},
		0xb5cd5f4: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatInviteImporter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SponsoredMessages <--
//  + TL_MessagesSponsoredMessages
//

func (m *Messages_SponsoredMessages) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_sponsoredMessages:
		t := m.To_MessagesSponsoredMessages()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SponsoredMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SponsoredMessages) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x65a4c7d5:
		m2 := MakeTLMessagesSponsoredMessages(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SponsoredMessages) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_sponsoredMessages:
		t := m.To_MessagesSponsoredMessages()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSponsoredMessages
func (m *Messages_SponsoredMessages) To_MessagesSponsoredMessages() *TLMessagesSponsoredMessages {
	m.PredicateName = Predicate_messages_sponsoredMessages
	return &TLMessagesSponsoredMessages{
		Data2: m,
	}
}

// MakeTLMessagesSponsoredMessages
func MakeTLMessagesSponsoredMessages(data2 *Messages_SponsoredMessages) *TLMessagesSponsoredMessages {
	if data2 == nil {
		return &TLMessagesSponsoredMessages{Data2: &Messages_SponsoredMessages{
			PredicateName: Predicate_messages_sponsoredMessages,
		}}
	} else {
		data2.PredicateName = Predicate_messages_sponsoredMessages
		return &TLMessagesSponsoredMessages{Data2: data2}
	}
}

func (m *TLMessagesSponsoredMessages) To_Messages_SponsoredMessages() *Messages_SponsoredMessages {
	m.Data2.PredicateName = Predicate_messages_sponsoredMessages
	return m.Data2
}

func (m *TLMessagesSponsoredMessages) SetMessages(v []*SponsoredMessage) { m.Data2.Messages = v }
func (m *TLMessagesSponsoredMessages) GetMessages() []*SponsoredMessage  { return m.Data2.Messages }

func (m *TLMessagesSponsoredMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesSponsoredMessages) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesSponsoredMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesSponsoredMessages) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesSponsoredMessages) GetPredicateName() string {
	return Predicate_messages_sponsoredMessages
}

func (m *TLMessagesSponsoredMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x65a4c7d5: func() []byte {
			x.UInt(0x65a4c7d5)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_sponsoredMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_sponsoredMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSponsoredMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSponsoredMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x65a4c7d5: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*SponsoredMessage, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &SponsoredMessage{}
				v0[i].Decode(dBuf)
			}
			m.SetMessages(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSponsoredMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BotInfo <--
//  + TL_BotInfo
//

func (m *BotInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_botInfo:
		t := m.To_BotInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BotInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *BotInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1b74b335:
		m2 := MakeTLBotInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BotInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_botInfo:
		t := m.To_BotInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BotInfo
func (m *BotInfo) To_BotInfo() *TLBotInfo {
	m.PredicateName = Predicate_botInfo
	return &TLBotInfo{
		Data2: m,
	}
}

// MakeTLBotInfo
func MakeTLBotInfo(data2 *BotInfo) *TLBotInfo {
	if data2 == nil {
		return &TLBotInfo{Data2: &BotInfo{
			PredicateName: Predicate_botInfo,
		}}
	} else {
		data2.PredicateName = Predicate_botInfo
		return &TLBotInfo{Data2: data2}
	}
}

func (m *TLBotInfo) To_BotInfo() *BotInfo {
	m.Data2.PredicateName = Predicate_botInfo
	return m.Data2
}

func (m *TLBotInfo) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLBotInfo) GetUserId() int64  { return m.Data2.UserId }

func (m *TLBotInfo) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInfo) GetDescription() string  { return m.Data2.Description }

func (m *TLBotInfo) SetCommands(v []*BotCommand) { m.Data2.Commands = v }
func (m *TLBotInfo) GetCommands() []*BotCommand  { return m.Data2.Commands }

func (m *TLBotInfo) GetPredicateName() string {
	return Predicate_botInfo
}

func (m *TLBotInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b74b335: func() []byte {
			x.UInt(0x1b74b335)

			x.Long(m.GetUserId())
			x.String(m.GetDescription())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCommands())))
			for _, v := range m.GetCommands() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b74b335: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDescription(dBuf.String())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*BotCommand, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &BotCommand{}
				v2[i].Decode(dBuf)
			}
			m.SetCommands(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// FileHash <--
//  + TL_FileHash
//

func (m *FileHash) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_fileHash:
		t := m.To_FileHash()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *FileHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *FileHash) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6242c773:
		m2 := MakeTLFileHash(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *FileHash) DebugString() string {
	switch m.PredicateName {
	case Predicate_fileHash:
		t := m.To_FileHash()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_FileHash
func (m *FileHash) To_FileHash() *TLFileHash {
	m.PredicateName = Predicate_fileHash
	return &TLFileHash{
		Data2: m,
	}
}

// MakeTLFileHash
func MakeTLFileHash(data2 *FileHash) *TLFileHash {
	if data2 == nil {
		return &TLFileHash{Data2: &FileHash{
			PredicateName: Predicate_fileHash,
		}}
	} else {
		data2.PredicateName = Predicate_fileHash
		return &TLFileHash{Data2: data2}
	}
}

func (m *TLFileHash) To_FileHash() *FileHash {
	m.Data2.PredicateName = Predicate_fileHash
	return m.Data2
}

func (m *TLFileHash) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLFileHash) GetOffset() int32  { return m.Data2.Offset }

func (m *TLFileHash) SetLimit(v int32) { m.Data2.Limit = v }
func (m *TLFileHash) GetLimit() int32  { return m.Data2.Limit }

func (m *TLFileHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLFileHash) GetHash() []byte  { return m.Data2.Hash }

func (m *TLFileHash) GetPredicateName() string {
	return Predicate_fileHash
}

func (m *TLFileHash) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6242c773: func() []byte {
			x.UInt(0x6242c773)

			x.Int(m.GetOffset())
			x.Int(m.GetLimit())
			x.StringBytes(m.GetHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_fileHash, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_fileHash, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLFileHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFileHash) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6242c773: func() error {
			m.SetOffset(dBuf.Int())
			m.SetLimit(dBuf.Int())
			m.SetHash(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLFileHash) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_Themes <--
//  + TL_AccountThemesNotModified
//  + TL_AccountThemes
//

func (m *Account_Themes) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_themesNotModified:
		t := m.To_AccountThemesNotModified()
		xBuf = t.Encode(layer)
	case Predicate_account_themes:
		t := m.To_AccountThemes()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_Themes) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_Themes) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf41eb622:
		m2 := MakeTLAccountThemesNotModified(m)
		m2.Decode(dBuf)
	case 0x9a3d8c6d:
		m2 := MakeTLAccountThemes(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_Themes) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_themesNotModified:
		t := m.To_AccountThemesNotModified()
		return t.DebugString()
	case Predicate_account_themes:
		t := m.To_AccountThemes()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountThemesNotModified
func (m *Account_Themes) To_AccountThemesNotModified() *TLAccountThemesNotModified {
	m.PredicateName = Predicate_account_themesNotModified
	return &TLAccountThemesNotModified{
		Data2: m,
	}
}

// To_AccountThemes
func (m *Account_Themes) To_AccountThemes() *TLAccountThemes {
	m.PredicateName = Predicate_account_themes
	return &TLAccountThemes{
		Data2: m,
	}
}

// MakeTLAccountThemesNotModified
func MakeTLAccountThemesNotModified(data2 *Account_Themes) *TLAccountThemesNotModified {
	if data2 == nil {
		return &TLAccountThemesNotModified{Data2: &Account_Themes{
			PredicateName: Predicate_account_themesNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_account_themesNotModified
		return &TLAccountThemesNotModified{Data2: data2}
	}
}

func (m *TLAccountThemesNotModified) To_Account_Themes() *Account_Themes {
	m.Data2.PredicateName = Predicate_account_themesNotModified
	return m.Data2
}

func (m *TLAccountThemesNotModified) GetPredicateName() string {
	return Predicate_account_themesNotModified
}

func (m *TLAccountThemesNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf41eb622: func() []byte {
			x.UInt(0xf41eb622)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_themesNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_themesNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountThemesNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountThemesNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf41eb622: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountThemesNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAccountThemes
func MakeTLAccountThemes(data2 *Account_Themes) *TLAccountThemes {
	if data2 == nil {
		return &TLAccountThemes{Data2: &Account_Themes{
			PredicateName: Predicate_account_themes,
		}}
	} else {
		data2.PredicateName = Predicate_account_themes
		return &TLAccountThemes{Data2: data2}
	}
}

func (m *TLAccountThemes) To_Account_Themes() *Account_Themes {
	m.Data2.PredicateName = Predicate_account_themes
	return m.Data2
}

func (m *TLAccountThemes) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAccountThemes) GetHash() int64  { return m.Data2.Hash }

func (m *TLAccountThemes) SetThemes(v []*Theme) { m.Data2.Themes = v }
func (m *TLAccountThemes) GetThemes() []*Theme  { return m.Data2.Themes }

func (m *TLAccountThemes) GetPredicateName() string {
	return Predicate_account_themes
}

func (m *TLAccountThemes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9a3d8c6d: func() []byte {
			x.UInt(0x9a3d8c6d)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetThemes())))
			for _, v := range m.GetThemes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_themes, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_themes, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountThemes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountThemes) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9a3d8c6d: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Theme, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Theme{}
				v1[i].Decode(dBuf)
			}
			m.SetThemes(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountThemes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Int64 <--
//  + TL_Long
//  + TL_Int64
//

func (m *Int64) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_long:
		t := m.To_Long()
		xBuf = t.Encode(layer)
	case Predicate_int64:
		t := m.To_Int64()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Int64) CalcByteSize(layer int32) int {
	return 0
}

func (m *Int64) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4ab29f6d:
		m2 := MakeTLLong(m)
		m2.Decode(dBuf)
	case 0xa2813660:
		m2 := MakeTLInt64(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Int64) DebugString() string {
	switch m.PredicateName {
	case Predicate_long:
		t := m.To_Long()
		return t.DebugString()
	case Predicate_int64:
		t := m.To_Int64()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Long
func (m *Int64) To_Long() *TLLong {
	m.PredicateName = Predicate_long
	return &TLLong{
		Data2: m,
	}
}

// To_Int64
func (m *Int64) To_Int64() *TLInt64 {
	m.PredicateName = Predicate_int64
	return &TLInt64{
		Data2: m,
	}
}

// MakeTLLong
func MakeTLLong(data2 *Int64) *TLLong {
	if data2 == nil {
		return &TLLong{Data2: &Int64{
			PredicateName: Predicate_long,
		}}
	} else {
		data2.PredicateName = Predicate_long
		return &TLLong{Data2: data2}
	}
}

func (m *TLLong) To_Int64() *Int64 {
	m.Data2.PredicateName = Predicate_long
	return m.Data2
}

func (m *TLLong) SetV(v int64) { m.Data2.V = v }
func (m *TLLong) GetV() int64  { return m.Data2.V }

func (m *TLLong) GetPredicateName() string {
	return Predicate_long
}

func (m *TLLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4ab29f6d: func() []byte {
			x.UInt(0x4ab29f6d)

			x.Long(m.GetV())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_long, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_long, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4ab29f6d: func() error {
			m.SetV(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInt64
func MakeTLInt64(data2 *Int64) *TLInt64 {
	if data2 == nil {
		return &TLInt64{Data2: &Int64{
			PredicateName: Predicate_int64,
		}}
	} else {
		data2.PredicateName = Predicate_int64
		return &TLInt64{Data2: data2}
	}
}

func (m *TLInt64) To_Int64() *Int64 {
	m.Data2.PredicateName = Predicate_int64
	return m.Data2
}

func (m *TLInt64) SetV(v int64) { m.Data2.V = v }
func (m *TLInt64) GetV() int64  { return m.Data2.V }

func (m *TLInt64) GetPredicateName() string {
	return Predicate_int64
}

func (m *TLInt64) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa2813660: func() []byte {
			x.UInt(0xa2813660)

			x.Long(m.GetV())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_int64, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_int64, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInt64) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInt64) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa2813660: func() error {
			m.SetV(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInt64) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputNotifyPeer <--
//  + TL_InputNotifyPeer
//  + TL_InputNotifyUsers
//  + TL_InputNotifyChats
//  + TL_InputNotifyBroadcasts
//

func (m *InputNotifyPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputNotifyPeer:
		t := m.To_InputNotifyPeer()
		xBuf = t.Encode(layer)
	case Predicate_inputNotifyUsers:
		t := m.To_InputNotifyUsers()
		xBuf = t.Encode(layer)
	case Predicate_inputNotifyChats:
		t := m.To_InputNotifyChats()
		xBuf = t.Encode(layer)
	case Predicate_inputNotifyBroadcasts:
		t := m.To_InputNotifyBroadcasts()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputNotifyPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputNotifyPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb8bc5b0c:
		m2 := MakeTLInputNotifyPeer(m)
		m2.Decode(dBuf)
	case 0x193b4417:
		m2 := MakeTLInputNotifyUsers(m)
		m2.Decode(dBuf)
	case 0x4a95e84e:
		m2 := MakeTLInputNotifyChats(m)
		m2.Decode(dBuf)
	case 0xb1db7c7e:
		m2 := MakeTLInputNotifyBroadcasts(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputNotifyPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputNotifyPeer:
		t := m.To_InputNotifyPeer()
		return t.DebugString()
	case Predicate_inputNotifyUsers:
		t := m.To_InputNotifyUsers()
		return t.DebugString()
	case Predicate_inputNotifyChats:
		t := m.To_InputNotifyChats()
		return t.DebugString()
	case Predicate_inputNotifyBroadcasts:
		t := m.To_InputNotifyBroadcasts()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputNotifyPeer
func (m *InputNotifyPeer) To_InputNotifyPeer() *TLInputNotifyPeer {
	m.PredicateName = Predicate_inputNotifyPeer
	return &TLInputNotifyPeer{
		Data2: m,
	}
}

// To_InputNotifyUsers
func (m *InputNotifyPeer) To_InputNotifyUsers() *TLInputNotifyUsers {
	m.PredicateName = Predicate_inputNotifyUsers
	return &TLInputNotifyUsers{
		Data2: m,
	}
}

// To_InputNotifyChats
func (m *InputNotifyPeer) To_InputNotifyChats() *TLInputNotifyChats {
	m.PredicateName = Predicate_inputNotifyChats
	return &TLInputNotifyChats{
		Data2: m,
	}
}

// To_InputNotifyBroadcasts
func (m *InputNotifyPeer) To_InputNotifyBroadcasts() *TLInputNotifyBroadcasts {
	m.PredicateName = Predicate_inputNotifyBroadcasts
	return &TLInputNotifyBroadcasts{
		Data2: m,
	}
}

// MakeTLInputNotifyPeer
func MakeTLInputNotifyPeer(data2 *InputNotifyPeer) *TLInputNotifyPeer {
	if data2 == nil {
		return &TLInputNotifyPeer{Data2: &InputNotifyPeer{
			PredicateName: Predicate_inputNotifyPeer,
		}}
	} else {
		data2.PredicateName = Predicate_inputNotifyPeer
		return &TLInputNotifyPeer{Data2: data2}
	}
}

func (m *TLInputNotifyPeer) To_InputNotifyPeer() *InputNotifyPeer {
	m.Data2.PredicateName = Predicate_inputNotifyPeer
	return m.Data2
}

func (m *TLInputNotifyPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputNotifyPeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputNotifyPeer) GetPredicateName() string {
	return Predicate_inputNotifyPeer
}

func (m *TLInputNotifyPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb8bc5b0c: func() []byte {
			x.UInt(0xb8bc5b0c)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputNotifyPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputNotifyPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputNotifyPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputNotifyPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb8bc5b0c: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputNotifyPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputNotifyUsers
func MakeTLInputNotifyUsers(data2 *InputNotifyPeer) *TLInputNotifyUsers {
	if data2 == nil {
		return &TLInputNotifyUsers{Data2: &InputNotifyPeer{
			PredicateName: Predicate_inputNotifyUsers,
		}}
	} else {
		data2.PredicateName = Predicate_inputNotifyUsers
		return &TLInputNotifyUsers{Data2: data2}
	}
}

func (m *TLInputNotifyUsers) To_InputNotifyPeer() *InputNotifyPeer {
	m.Data2.PredicateName = Predicate_inputNotifyUsers
	return m.Data2
}

func (m *TLInputNotifyUsers) GetPredicateName() string {
	return Predicate_inputNotifyUsers
}

func (m *TLInputNotifyUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x193b4417: func() []byte {
			x.UInt(0x193b4417)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputNotifyUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputNotifyUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputNotifyUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputNotifyUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x193b4417: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputNotifyUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputNotifyChats
func MakeTLInputNotifyChats(data2 *InputNotifyPeer) *TLInputNotifyChats {
	if data2 == nil {
		return &TLInputNotifyChats{Data2: &InputNotifyPeer{
			PredicateName: Predicate_inputNotifyChats,
		}}
	} else {
		data2.PredicateName = Predicate_inputNotifyChats
		return &TLInputNotifyChats{Data2: data2}
	}
}

func (m *TLInputNotifyChats) To_InputNotifyPeer() *InputNotifyPeer {
	m.Data2.PredicateName = Predicate_inputNotifyChats
	return m.Data2
}

func (m *TLInputNotifyChats) GetPredicateName() string {
	return Predicate_inputNotifyChats
}

func (m *TLInputNotifyChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4a95e84e: func() []byte {
			x.UInt(0x4a95e84e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputNotifyChats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputNotifyChats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputNotifyChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputNotifyChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4a95e84e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputNotifyChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputNotifyBroadcasts
func MakeTLInputNotifyBroadcasts(data2 *InputNotifyPeer) *TLInputNotifyBroadcasts {
	if data2 == nil {
		return &TLInputNotifyBroadcasts{Data2: &InputNotifyPeer{
			PredicateName: Predicate_inputNotifyBroadcasts,
		}}
	} else {
		data2.PredicateName = Predicate_inputNotifyBroadcasts
		return &TLInputNotifyBroadcasts{Data2: data2}
	}
}

func (m *TLInputNotifyBroadcasts) To_InputNotifyPeer() *InputNotifyPeer {
	m.Data2.PredicateName = Predicate_inputNotifyBroadcasts
	return m.Data2
}

func (m *TLInputNotifyBroadcasts) GetPredicateName() string {
	return Predicate_inputNotifyBroadcasts
}

func (m *TLInputNotifyBroadcasts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb1db7c7e: func() []byte {
			x.UInt(0xb1db7c7e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputNotifyBroadcasts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputNotifyBroadcasts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputNotifyBroadcasts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputNotifyBroadcasts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb1db7c7e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputNotifyBroadcasts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputEncryptedChat <--
//  + TL_InputEncryptedChat
//

func (m *InputEncryptedChat) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputEncryptedChat:
		t := m.To_InputEncryptedChat()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputEncryptedChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputEncryptedChat) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf141b5e1:
		m2 := MakeTLInputEncryptedChat(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputEncryptedChat) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputEncryptedChat:
		t := m.To_InputEncryptedChat()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputEncryptedChat
func (m *InputEncryptedChat) To_InputEncryptedChat() *TLInputEncryptedChat {
	m.PredicateName = Predicate_inputEncryptedChat
	return &TLInputEncryptedChat{
		Data2: m,
	}
}

// MakeTLInputEncryptedChat
func MakeTLInputEncryptedChat(data2 *InputEncryptedChat) *TLInputEncryptedChat {
	if data2 == nil {
		return &TLInputEncryptedChat{Data2: &InputEncryptedChat{
			PredicateName: Predicate_inputEncryptedChat,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedChat
		return &TLInputEncryptedChat{Data2: data2}
	}
}

func (m *TLInputEncryptedChat) To_InputEncryptedChat() *InputEncryptedChat {
	m.Data2.PredicateName = Predicate_inputEncryptedChat
	return m.Data2
}

func (m *TLInputEncryptedChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLInputEncryptedChat) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLInputEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedChat) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputEncryptedChat) GetPredicateName() string {
	return Predicate_inputEncryptedChat
}

func (m *TLInputEncryptedChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf141b5e1: func() []byte {
			x.UInt(0xf141b5e1)

			x.Int(m.GetChatId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf141b5e1: func() error {
			m.SetChatId(dBuf.Int())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WebDocument <--
//  + TL_WebDocument
//  + TL_WebDocumentNoProxy
//

func (m *WebDocument) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_webDocument:
		t := m.To_WebDocument()
		xBuf = t.Encode(layer)
	case Predicate_webDocumentNoProxy:
		t := m.To_WebDocumentNoProxy()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WebDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *WebDocument) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1c570ed1:
		m2 := MakeTLWebDocument(m)
		m2.Decode(dBuf)
	case 0xf9c8bcc6:
		m2 := MakeTLWebDocumentNoProxy(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WebDocument) DebugString() string {
	switch m.PredicateName {
	case Predicate_webDocument:
		t := m.To_WebDocument()
		return t.DebugString()
	case Predicate_webDocumentNoProxy:
		t := m.To_WebDocumentNoProxy()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WebDocument
func (m *WebDocument) To_WebDocument() *TLWebDocument {
	m.PredicateName = Predicate_webDocument
	return &TLWebDocument{
		Data2: m,
	}
}

// To_WebDocumentNoProxy
func (m *WebDocument) To_WebDocumentNoProxy() *TLWebDocumentNoProxy {
	m.PredicateName = Predicate_webDocumentNoProxy
	return &TLWebDocumentNoProxy{
		Data2: m,
	}
}

// MakeTLWebDocument
func MakeTLWebDocument(data2 *WebDocument) *TLWebDocument {
	if data2 == nil {
		return &TLWebDocument{Data2: &WebDocument{
			PredicateName: Predicate_webDocument,
		}}
	} else {
		data2.PredicateName = Predicate_webDocument
		return &TLWebDocument{Data2: data2}
	}
}

func (m *TLWebDocument) To_WebDocument() *WebDocument {
	m.Data2.PredicateName = Predicate_webDocument
	return m.Data2
}

func (m *TLWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocument) GetUrl() string  { return m.Data2.Url }

func (m *TLWebDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWebDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLWebDocument) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLWebDocument) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func (m *TLWebDocument) GetPredicateName() string {
	return Predicate_webDocument
}

func (m *TLWebDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1c570ed1: func() []byte {
			x.UInt(0x1c570ed1)

			x.String(m.GetUrl())
			x.Long(m.GetAccessHash())
			x.Int(m.GetSize2())
			x.String(m.GetMimeType())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAttributes())))
			for _, v := range m.GetAttributes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1c570ed1: func() error {
			m.SetUrl(dBuf.String())
			m.SetAccessHash(dBuf.Long())
			m.SetSize2(dBuf.Int())
			m.SetMimeType(dBuf.String())
			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*DocumentAttribute, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &DocumentAttribute{}
				v4[i].Decode(dBuf)
			}
			m.SetAttributes(v4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLWebDocumentNoProxy
func MakeTLWebDocumentNoProxy(data2 *WebDocument) *TLWebDocumentNoProxy {
	if data2 == nil {
		return &TLWebDocumentNoProxy{Data2: &WebDocument{
			PredicateName: Predicate_webDocumentNoProxy,
		}}
	} else {
		data2.PredicateName = Predicate_webDocumentNoProxy
		return &TLWebDocumentNoProxy{Data2: data2}
	}
}

func (m *TLWebDocumentNoProxy) To_WebDocument() *WebDocument {
	m.Data2.PredicateName = Predicate_webDocumentNoProxy
	return m.Data2
}

func (m *TLWebDocumentNoProxy) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocumentNoProxy) GetUrl() string  { return m.Data2.Url }

func (m *TLWebDocumentNoProxy) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLWebDocumentNoProxy) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLWebDocumentNoProxy) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocumentNoProxy) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLWebDocumentNoProxy) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocumentNoProxy) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func (m *TLWebDocumentNoProxy) GetPredicateName() string {
	return Predicate_webDocumentNoProxy
}

func (m *TLWebDocumentNoProxy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf9c8bcc6: func() []byte {
			x.UInt(0xf9c8bcc6)

			x.String(m.GetUrl())
			x.Int(m.GetSize2())
			x.String(m.GetMimeType())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAttributes())))
			for _, v := range m.GetAttributes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webDocumentNoProxy, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webDocumentNoProxy, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebDocumentNoProxy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebDocumentNoProxy) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf9c8bcc6: func() error {
			m.SetUrl(dBuf.String())
			m.SetSize2(dBuf.Int())
			m.SetMimeType(dBuf.String())
			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*DocumentAttribute, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &DocumentAttribute{}
				v4[i].Decode(dBuf)
			}
			m.SetAttributes(v4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebDocumentNoProxy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Upload_CdnFile <--
//  + TL_UploadCdnFileReuploadNeeded
//  + TL_UploadCdnFile
//

func (m *Upload_CdnFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_upload_cdnFileReuploadNeeded:
		t := m.To_UploadCdnFileReuploadNeeded()
		xBuf = t.Encode(layer)
	case Predicate_upload_cdnFile:
		t := m.To_UploadCdnFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Upload_CdnFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *Upload_CdnFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xeea8e46e:
		m2 := MakeTLUploadCdnFileReuploadNeeded(m)
		m2.Decode(dBuf)
	case 0xa99fca4f:
		m2 := MakeTLUploadCdnFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Upload_CdnFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_upload_cdnFileReuploadNeeded:
		t := m.To_UploadCdnFileReuploadNeeded()
		return t.DebugString()
	case Predicate_upload_cdnFile:
		t := m.To_UploadCdnFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UploadCdnFileReuploadNeeded
func (m *Upload_CdnFile) To_UploadCdnFileReuploadNeeded() *TLUploadCdnFileReuploadNeeded {
	m.PredicateName = Predicate_upload_cdnFileReuploadNeeded
	return &TLUploadCdnFileReuploadNeeded{
		Data2: m,
	}
}

// To_UploadCdnFile
func (m *Upload_CdnFile) To_UploadCdnFile() *TLUploadCdnFile {
	m.PredicateName = Predicate_upload_cdnFile
	return &TLUploadCdnFile{
		Data2: m,
	}
}

// MakeTLUploadCdnFileReuploadNeeded
func MakeTLUploadCdnFileReuploadNeeded(data2 *Upload_CdnFile) *TLUploadCdnFileReuploadNeeded {
	if data2 == nil {
		return &TLUploadCdnFileReuploadNeeded{Data2: &Upload_CdnFile{
			PredicateName: Predicate_upload_cdnFileReuploadNeeded,
		}}
	} else {
		data2.PredicateName = Predicate_upload_cdnFileReuploadNeeded
		return &TLUploadCdnFileReuploadNeeded{Data2: data2}
	}
}

func (m *TLUploadCdnFileReuploadNeeded) To_Upload_CdnFile() *Upload_CdnFile {
	m.Data2.PredicateName = Predicate_upload_cdnFileReuploadNeeded
	return m.Data2
}

func (m *TLUploadCdnFileReuploadNeeded) SetRequestToken(v []byte) { m.Data2.RequestToken = v }
func (m *TLUploadCdnFileReuploadNeeded) GetRequestToken() []byte  { return m.Data2.RequestToken }

func (m *TLUploadCdnFileReuploadNeeded) GetPredicateName() string {
	return Predicate_upload_cdnFileReuploadNeeded
}

func (m *TLUploadCdnFileReuploadNeeded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeea8e46e: func() []byte {
			x.UInt(0xeea8e46e)

			x.StringBytes(m.GetRequestToken())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_upload_cdnFileReuploadNeeded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_upload_cdnFileReuploadNeeded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUploadCdnFileReuploadNeeded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadCdnFileReuploadNeeded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeea8e46e: func() error {
			m.SetRequestToken(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUploadCdnFileReuploadNeeded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUploadCdnFile
func MakeTLUploadCdnFile(data2 *Upload_CdnFile) *TLUploadCdnFile {
	if data2 == nil {
		return &TLUploadCdnFile{Data2: &Upload_CdnFile{
			PredicateName: Predicate_upload_cdnFile,
		}}
	} else {
		data2.PredicateName = Predicate_upload_cdnFile
		return &TLUploadCdnFile{Data2: data2}
	}
}

func (m *TLUploadCdnFile) To_Upload_CdnFile() *Upload_CdnFile {
	m.Data2.PredicateName = Predicate_upload_cdnFile
	return m.Data2
}

func (m *TLUploadCdnFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadCdnFile) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLUploadCdnFile) GetPredicateName() string {
	return Predicate_upload_cdnFile
}

func (m *TLUploadCdnFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa99fca4f: func() []byte {
			x.UInt(0xa99fca4f)

			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_upload_cdnFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_upload_cdnFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUploadCdnFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadCdnFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa99fca4f: func() error {
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUploadCdnFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputDialogPeer <--
//  + TL_InputDialogPeer
//  + TL_InputDialogPeerFolder
//

func (m *InputDialogPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputDialogPeer:
		t := m.To_InputDialogPeer()
		xBuf = t.Encode(layer)
	case Predicate_inputDialogPeerFolder:
		t := m.To_InputDialogPeerFolder()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputDialogPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputDialogPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfcaafeb7:
		m2 := MakeTLInputDialogPeer(m)
		m2.Decode(dBuf)
	case 0x64600527:
		m2 := MakeTLInputDialogPeerFolder(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputDialogPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputDialogPeer:
		t := m.To_InputDialogPeer()
		return t.DebugString()
	case Predicate_inputDialogPeerFolder:
		t := m.To_InputDialogPeerFolder()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputDialogPeer
func (m *InputDialogPeer) To_InputDialogPeer() *TLInputDialogPeer {
	m.PredicateName = Predicate_inputDialogPeer
	return &TLInputDialogPeer{
		Data2: m,
	}
}

// To_InputDialogPeerFolder
func (m *InputDialogPeer) To_InputDialogPeerFolder() *TLInputDialogPeerFolder {
	m.PredicateName = Predicate_inputDialogPeerFolder
	return &TLInputDialogPeerFolder{
		Data2: m,
	}
}

// MakeTLInputDialogPeer
func MakeTLInputDialogPeer(data2 *InputDialogPeer) *TLInputDialogPeer {
	if data2 == nil {
		return &TLInputDialogPeer{Data2: &InputDialogPeer{
			PredicateName: Predicate_inputDialogPeer,
		}}
	} else {
		data2.PredicateName = Predicate_inputDialogPeer
		return &TLInputDialogPeer{Data2: data2}
	}
}

func (m *TLInputDialogPeer) To_InputDialogPeer() *InputDialogPeer {
	m.Data2.PredicateName = Predicate_inputDialogPeer
	return m.Data2
}

func (m *TLInputDialogPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputDialogPeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputDialogPeer) GetPredicateName() string {
	return Predicate_inputDialogPeer
}

func (m *TLInputDialogPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfcaafeb7: func() []byte {
			x.UInt(0xfcaafeb7)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputDialogPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputDialogPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputDialogPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputDialogPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfcaafeb7: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputDialogPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputDialogPeerFolder
func MakeTLInputDialogPeerFolder(data2 *InputDialogPeer) *TLInputDialogPeerFolder {
	if data2 == nil {
		return &TLInputDialogPeerFolder{Data2: &InputDialogPeer{
			PredicateName: Predicate_inputDialogPeerFolder,
		}}
	} else {
		data2.PredicateName = Predicate_inputDialogPeerFolder
		return &TLInputDialogPeerFolder{Data2: data2}
	}
}

func (m *TLInputDialogPeerFolder) To_InputDialogPeer() *InputDialogPeer {
	m.Data2.PredicateName = Predicate_inputDialogPeerFolder
	return m.Data2
}

func (m *TLInputDialogPeerFolder) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLInputDialogPeerFolder) GetFolderId() int32  { return m.Data2.FolderId }

func (m *TLInputDialogPeerFolder) GetPredicateName() string {
	return Predicate_inputDialogPeerFolder
}

func (m *TLInputDialogPeerFolder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64600527: func() []byte {
			x.UInt(0x64600527)

			x.Int(m.GetFolderId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputDialogPeerFolder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputDialogPeerFolder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputDialogPeerFolder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputDialogPeerFolder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64600527: func() error {
			m.SetFolderId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputDialogPeerFolder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureValueType <--
//  + TL_SecureValueTypePersonalDetails
//  + TL_SecureValueTypePassport
//  + TL_SecureValueTypeDriverLicense
//  + TL_SecureValueTypeIdentityCard
//  + TL_SecureValueTypeInternalPassport
//  + TL_SecureValueTypeAddress
//  + TL_SecureValueTypeUtilityBill
//  + TL_SecureValueTypeBankStatement
//  + TL_SecureValueTypeRentalAgreement
//  + TL_SecureValueTypePassportRegistration
//  + TL_SecureValueTypeTemporaryRegistration
//  + TL_SecureValueTypePhone
//  + TL_SecureValueTypeEmail
//

func (m *SecureValueType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureValueTypePersonalDetails:
		t := m.To_SecureValueTypePersonalDetails()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypePassport:
		t := m.To_SecureValueTypePassport()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeDriverLicense:
		t := m.To_SecureValueTypeDriverLicense()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeIdentityCard:
		t := m.To_SecureValueTypeIdentityCard()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeInternalPassport:
		t := m.To_SecureValueTypeInternalPassport()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeAddress:
		t := m.To_SecureValueTypeAddress()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeUtilityBill:
		t := m.To_SecureValueTypeUtilityBill()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeBankStatement:
		t := m.To_SecureValueTypeBankStatement()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeRentalAgreement:
		t := m.To_SecureValueTypeRentalAgreement()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypePassportRegistration:
		t := m.To_SecureValueTypePassportRegistration()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeTemporaryRegistration:
		t := m.To_SecureValueTypeTemporaryRegistration()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypePhone:
		t := m.To_SecureValueTypePhone()
		xBuf = t.Encode(layer)
	case Predicate_secureValueTypeEmail:
		t := m.To_SecureValueTypeEmail()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureValueType) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureValueType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9d2a81e3:
		m2 := MakeTLSecureValueTypePersonalDetails(m)
		m2.Decode(dBuf)
	case 0x3dac6a00:
		m2 := MakeTLSecureValueTypePassport(m)
		m2.Decode(dBuf)
	case 0x6e425c4:
		m2 := MakeTLSecureValueTypeDriverLicense(m)
		m2.Decode(dBuf)
	case 0xa0d0744b:
		m2 := MakeTLSecureValueTypeIdentityCard(m)
		m2.Decode(dBuf)
	case 0x99a48f23:
		m2 := MakeTLSecureValueTypeInternalPassport(m)
		m2.Decode(dBuf)
	case 0xcbe31e26:
		m2 := MakeTLSecureValueTypeAddress(m)
		m2.Decode(dBuf)
	case 0xfc36954e:
		m2 := MakeTLSecureValueTypeUtilityBill(m)
		m2.Decode(dBuf)
	case 0x89137c0d:
		m2 := MakeTLSecureValueTypeBankStatement(m)
		m2.Decode(dBuf)
	case 0x8b883488:
		m2 := MakeTLSecureValueTypeRentalAgreement(m)
		m2.Decode(dBuf)
	case 0x99e3806a:
		m2 := MakeTLSecureValueTypePassportRegistration(m)
		m2.Decode(dBuf)
	case 0xea02ec33:
		m2 := MakeTLSecureValueTypeTemporaryRegistration(m)
		m2.Decode(dBuf)
	case 0xb320aadb:
		m2 := MakeTLSecureValueTypePhone(m)
		m2.Decode(dBuf)
	case 0x8e3ca7ee:
		m2 := MakeTLSecureValueTypeEmail(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureValueType) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureValueTypePersonalDetails:
		t := m.To_SecureValueTypePersonalDetails()
		return t.DebugString()
	case Predicate_secureValueTypePassport:
		t := m.To_SecureValueTypePassport()
		return t.DebugString()
	case Predicate_secureValueTypeDriverLicense:
		t := m.To_SecureValueTypeDriverLicense()
		return t.DebugString()
	case Predicate_secureValueTypeIdentityCard:
		t := m.To_SecureValueTypeIdentityCard()
		return t.DebugString()
	case Predicate_secureValueTypeInternalPassport:
		t := m.To_SecureValueTypeInternalPassport()
		return t.DebugString()
	case Predicate_secureValueTypeAddress:
		t := m.To_SecureValueTypeAddress()
		return t.DebugString()
	case Predicate_secureValueTypeUtilityBill:
		t := m.To_SecureValueTypeUtilityBill()
		return t.DebugString()
	case Predicate_secureValueTypeBankStatement:
		t := m.To_SecureValueTypeBankStatement()
		return t.DebugString()
	case Predicate_secureValueTypeRentalAgreement:
		t := m.To_SecureValueTypeRentalAgreement()
		return t.DebugString()
	case Predicate_secureValueTypePassportRegistration:
		t := m.To_SecureValueTypePassportRegistration()
		return t.DebugString()
	case Predicate_secureValueTypeTemporaryRegistration:
		t := m.To_SecureValueTypeTemporaryRegistration()
		return t.DebugString()
	case Predicate_secureValueTypePhone:
		t := m.To_SecureValueTypePhone()
		return t.DebugString()
	case Predicate_secureValueTypeEmail:
		t := m.To_SecureValueTypeEmail()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureValueTypePersonalDetails
func (m *SecureValueType) To_SecureValueTypePersonalDetails() *TLSecureValueTypePersonalDetails {
	m.PredicateName = Predicate_secureValueTypePersonalDetails
	return &TLSecureValueTypePersonalDetails{
		Data2: m,
	}
}

// To_SecureValueTypePassport
func (m *SecureValueType) To_SecureValueTypePassport() *TLSecureValueTypePassport {
	m.PredicateName = Predicate_secureValueTypePassport
	return &TLSecureValueTypePassport{
		Data2: m,
	}
}

// To_SecureValueTypeDriverLicense
func (m *SecureValueType) To_SecureValueTypeDriverLicense() *TLSecureValueTypeDriverLicense {
	m.PredicateName = Predicate_secureValueTypeDriverLicense
	return &TLSecureValueTypeDriverLicense{
		Data2: m,
	}
}

// To_SecureValueTypeIdentityCard
func (m *SecureValueType) To_SecureValueTypeIdentityCard() *TLSecureValueTypeIdentityCard {
	m.PredicateName = Predicate_secureValueTypeIdentityCard
	return &TLSecureValueTypeIdentityCard{
		Data2: m,
	}
}

// To_SecureValueTypeInternalPassport
func (m *SecureValueType) To_SecureValueTypeInternalPassport() *TLSecureValueTypeInternalPassport {
	m.PredicateName = Predicate_secureValueTypeInternalPassport
	return &TLSecureValueTypeInternalPassport{
		Data2: m,
	}
}

// To_SecureValueTypeAddress
func (m *SecureValueType) To_SecureValueTypeAddress() *TLSecureValueTypeAddress {
	m.PredicateName = Predicate_secureValueTypeAddress
	return &TLSecureValueTypeAddress{
		Data2: m,
	}
}

// To_SecureValueTypeUtilityBill
func (m *SecureValueType) To_SecureValueTypeUtilityBill() *TLSecureValueTypeUtilityBill {
	m.PredicateName = Predicate_secureValueTypeUtilityBill
	return &TLSecureValueTypeUtilityBill{
		Data2: m,
	}
}

// To_SecureValueTypeBankStatement
func (m *SecureValueType) To_SecureValueTypeBankStatement() *TLSecureValueTypeBankStatement {
	m.PredicateName = Predicate_secureValueTypeBankStatement
	return &TLSecureValueTypeBankStatement{
		Data2: m,
	}
}

// To_SecureValueTypeRentalAgreement
func (m *SecureValueType) To_SecureValueTypeRentalAgreement() *TLSecureValueTypeRentalAgreement {
	m.PredicateName = Predicate_secureValueTypeRentalAgreement
	return &TLSecureValueTypeRentalAgreement{
		Data2: m,
	}
}

// To_SecureValueTypePassportRegistration
func (m *SecureValueType) To_SecureValueTypePassportRegistration() *TLSecureValueTypePassportRegistration {
	m.PredicateName = Predicate_secureValueTypePassportRegistration
	return &TLSecureValueTypePassportRegistration{
		Data2: m,
	}
}

// To_SecureValueTypeTemporaryRegistration
func (m *SecureValueType) To_SecureValueTypeTemporaryRegistration() *TLSecureValueTypeTemporaryRegistration {
	m.PredicateName = Predicate_secureValueTypeTemporaryRegistration
	return &TLSecureValueTypeTemporaryRegistration{
		Data2: m,
	}
}

// To_SecureValueTypePhone
func (m *SecureValueType) To_SecureValueTypePhone() *TLSecureValueTypePhone {
	m.PredicateName = Predicate_secureValueTypePhone
	return &TLSecureValueTypePhone{
		Data2: m,
	}
}

// To_SecureValueTypeEmail
func (m *SecureValueType) To_SecureValueTypeEmail() *TLSecureValueTypeEmail {
	m.PredicateName = Predicate_secureValueTypeEmail
	return &TLSecureValueTypeEmail{
		Data2: m,
	}
}

// MakeTLSecureValueTypePersonalDetails
func MakeTLSecureValueTypePersonalDetails(data2 *SecureValueType) *TLSecureValueTypePersonalDetails {
	if data2 == nil {
		return &TLSecureValueTypePersonalDetails{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypePersonalDetails,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypePersonalDetails
		return &TLSecureValueTypePersonalDetails{Data2: data2}
	}
}

func (m *TLSecureValueTypePersonalDetails) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypePersonalDetails
	return m.Data2
}

func (m *TLSecureValueTypePersonalDetails) GetPredicateName() string {
	return Predicate_secureValueTypePersonalDetails
}

func (m *TLSecureValueTypePersonalDetails) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9d2a81e3: func() []byte {
			x.UInt(0x9d2a81e3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypePersonalDetails, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypePersonalDetails, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypePersonalDetails) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypePersonalDetails) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9d2a81e3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypePersonalDetails) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypePassport
func MakeTLSecureValueTypePassport(data2 *SecureValueType) *TLSecureValueTypePassport {
	if data2 == nil {
		return &TLSecureValueTypePassport{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypePassport,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypePassport
		return &TLSecureValueTypePassport{Data2: data2}
	}
}

func (m *TLSecureValueTypePassport) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypePassport
	return m.Data2
}

func (m *TLSecureValueTypePassport) GetPredicateName() string {
	return Predicate_secureValueTypePassport
}

func (m *TLSecureValueTypePassport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3dac6a00: func() []byte {
			x.UInt(0x3dac6a00)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypePassport, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypePassport, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypePassport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypePassport) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3dac6a00: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypePassport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeDriverLicense
func MakeTLSecureValueTypeDriverLicense(data2 *SecureValueType) *TLSecureValueTypeDriverLicense {
	if data2 == nil {
		return &TLSecureValueTypeDriverLicense{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeDriverLicense,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeDriverLicense
		return &TLSecureValueTypeDriverLicense{Data2: data2}
	}
}

func (m *TLSecureValueTypeDriverLicense) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeDriverLicense
	return m.Data2
}

func (m *TLSecureValueTypeDriverLicense) GetPredicateName() string {
	return Predicate_secureValueTypeDriverLicense
}

func (m *TLSecureValueTypeDriverLicense) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6e425c4: func() []byte {
			x.UInt(0x6e425c4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeDriverLicense, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeDriverLicense, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeDriverLicense) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeDriverLicense) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6e425c4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeDriverLicense) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeIdentityCard
func MakeTLSecureValueTypeIdentityCard(data2 *SecureValueType) *TLSecureValueTypeIdentityCard {
	if data2 == nil {
		return &TLSecureValueTypeIdentityCard{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeIdentityCard,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeIdentityCard
		return &TLSecureValueTypeIdentityCard{Data2: data2}
	}
}

func (m *TLSecureValueTypeIdentityCard) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeIdentityCard
	return m.Data2
}

func (m *TLSecureValueTypeIdentityCard) GetPredicateName() string {
	return Predicate_secureValueTypeIdentityCard
}

func (m *TLSecureValueTypeIdentityCard) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa0d0744b: func() []byte {
			x.UInt(0xa0d0744b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeIdentityCard, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeIdentityCard, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeIdentityCard) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeIdentityCard) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa0d0744b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeIdentityCard) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeInternalPassport
func MakeTLSecureValueTypeInternalPassport(data2 *SecureValueType) *TLSecureValueTypeInternalPassport {
	if data2 == nil {
		return &TLSecureValueTypeInternalPassport{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeInternalPassport,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeInternalPassport
		return &TLSecureValueTypeInternalPassport{Data2: data2}
	}
}

func (m *TLSecureValueTypeInternalPassport) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeInternalPassport
	return m.Data2
}

func (m *TLSecureValueTypeInternalPassport) GetPredicateName() string {
	return Predicate_secureValueTypeInternalPassport
}

func (m *TLSecureValueTypeInternalPassport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x99a48f23: func() []byte {
			x.UInt(0x99a48f23)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeInternalPassport, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeInternalPassport, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeInternalPassport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeInternalPassport) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x99a48f23: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeInternalPassport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeAddress
func MakeTLSecureValueTypeAddress(data2 *SecureValueType) *TLSecureValueTypeAddress {
	if data2 == nil {
		return &TLSecureValueTypeAddress{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeAddress,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeAddress
		return &TLSecureValueTypeAddress{Data2: data2}
	}
}

func (m *TLSecureValueTypeAddress) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeAddress
	return m.Data2
}

func (m *TLSecureValueTypeAddress) GetPredicateName() string {
	return Predicate_secureValueTypeAddress
}

func (m *TLSecureValueTypeAddress) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcbe31e26: func() []byte {
			x.UInt(0xcbe31e26)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeAddress, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeAddress, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeAddress) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeAddress) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcbe31e26: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeAddress) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeUtilityBill
func MakeTLSecureValueTypeUtilityBill(data2 *SecureValueType) *TLSecureValueTypeUtilityBill {
	if data2 == nil {
		return &TLSecureValueTypeUtilityBill{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeUtilityBill,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeUtilityBill
		return &TLSecureValueTypeUtilityBill{Data2: data2}
	}
}

func (m *TLSecureValueTypeUtilityBill) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeUtilityBill
	return m.Data2
}

func (m *TLSecureValueTypeUtilityBill) GetPredicateName() string {
	return Predicate_secureValueTypeUtilityBill
}

func (m *TLSecureValueTypeUtilityBill) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfc36954e: func() []byte {
			x.UInt(0xfc36954e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeUtilityBill, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeUtilityBill, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeUtilityBill) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeUtilityBill) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfc36954e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeUtilityBill) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeBankStatement
func MakeTLSecureValueTypeBankStatement(data2 *SecureValueType) *TLSecureValueTypeBankStatement {
	if data2 == nil {
		return &TLSecureValueTypeBankStatement{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeBankStatement,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeBankStatement
		return &TLSecureValueTypeBankStatement{Data2: data2}
	}
}

func (m *TLSecureValueTypeBankStatement) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeBankStatement
	return m.Data2
}

func (m *TLSecureValueTypeBankStatement) GetPredicateName() string {
	return Predicate_secureValueTypeBankStatement
}

func (m *TLSecureValueTypeBankStatement) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x89137c0d: func() []byte {
			x.UInt(0x89137c0d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeBankStatement, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeBankStatement, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeBankStatement) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeBankStatement) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x89137c0d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeBankStatement) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeRentalAgreement
func MakeTLSecureValueTypeRentalAgreement(data2 *SecureValueType) *TLSecureValueTypeRentalAgreement {
	if data2 == nil {
		return &TLSecureValueTypeRentalAgreement{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeRentalAgreement,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeRentalAgreement
		return &TLSecureValueTypeRentalAgreement{Data2: data2}
	}
}

func (m *TLSecureValueTypeRentalAgreement) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeRentalAgreement
	return m.Data2
}

func (m *TLSecureValueTypeRentalAgreement) GetPredicateName() string {
	return Predicate_secureValueTypeRentalAgreement
}

func (m *TLSecureValueTypeRentalAgreement) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8b883488: func() []byte {
			x.UInt(0x8b883488)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeRentalAgreement, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeRentalAgreement, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeRentalAgreement) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeRentalAgreement) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8b883488: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeRentalAgreement) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypePassportRegistration
func MakeTLSecureValueTypePassportRegistration(data2 *SecureValueType) *TLSecureValueTypePassportRegistration {
	if data2 == nil {
		return &TLSecureValueTypePassportRegistration{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypePassportRegistration,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypePassportRegistration
		return &TLSecureValueTypePassportRegistration{Data2: data2}
	}
}

func (m *TLSecureValueTypePassportRegistration) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypePassportRegistration
	return m.Data2
}

func (m *TLSecureValueTypePassportRegistration) GetPredicateName() string {
	return Predicate_secureValueTypePassportRegistration
}

func (m *TLSecureValueTypePassportRegistration) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x99e3806a: func() []byte {
			x.UInt(0x99e3806a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypePassportRegistration, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypePassportRegistration, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypePassportRegistration) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypePassportRegistration) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x99e3806a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypePassportRegistration) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeTemporaryRegistration
func MakeTLSecureValueTypeTemporaryRegistration(data2 *SecureValueType) *TLSecureValueTypeTemporaryRegistration {
	if data2 == nil {
		return &TLSecureValueTypeTemporaryRegistration{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeTemporaryRegistration,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeTemporaryRegistration
		return &TLSecureValueTypeTemporaryRegistration{Data2: data2}
	}
}

func (m *TLSecureValueTypeTemporaryRegistration) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeTemporaryRegistration
	return m.Data2
}

func (m *TLSecureValueTypeTemporaryRegistration) GetPredicateName() string {
	return Predicate_secureValueTypeTemporaryRegistration
}

func (m *TLSecureValueTypeTemporaryRegistration) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xea02ec33: func() []byte {
			x.UInt(0xea02ec33)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeTemporaryRegistration, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeTemporaryRegistration, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeTemporaryRegistration) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeTemporaryRegistration) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xea02ec33: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeTemporaryRegistration) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypePhone
func MakeTLSecureValueTypePhone(data2 *SecureValueType) *TLSecureValueTypePhone {
	if data2 == nil {
		return &TLSecureValueTypePhone{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypePhone,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypePhone
		return &TLSecureValueTypePhone{Data2: data2}
	}
}

func (m *TLSecureValueTypePhone) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypePhone
	return m.Data2
}

func (m *TLSecureValueTypePhone) GetPredicateName() string {
	return Predicate_secureValueTypePhone
}

func (m *TLSecureValueTypePhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb320aadb: func() []byte {
			x.UInt(0xb320aadb)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypePhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypePhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypePhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypePhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb320aadb: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypePhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureValueTypeEmail
func MakeTLSecureValueTypeEmail(data2 *SecureValueType) *TLSecureValueTypeEmail {
	if data2 == nil {
		return &TLSecureValueTypeEmail{Data2: &SecureValueType{
			PredicateName: Predicate_secureValueTypeEmail,
		}}
	} else {
		data2.PredicateName = Predicate_secureValueTypeEmail
		return &TLSecureValueTypeEmail{Data2: data2}
	}
}

func (m *TLSecureValueTypeEmail) To_SecureValueType() *SecureValueType {
	m.Data2.PredicateName = Predicate_secureValueTypeEmail
	return m.Data2
}

func (m *TLSecureValueTypeEmail) GetPredicateName() string {
	return Predicate_secureValueTypeEmail
}

func (m *TLSecureValueTypeEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8e3ca7ee: func() []byte {
			x.UInt(0x8e3ca7ee)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValueTypeEmail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValueTypeEmail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValueTypeEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValueTypeEmail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8e3ca7ee: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValueTypeEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// RestrictionReason <--
//  + TL_RestrictionReason
//

func (m *RestrictionReason) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_restrictionReason:
		t := m.To_RestrictionReason()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *RestrictionReason) CalcByteSize(layer int32) int {
	return 0
}

func (m *RestrictionReason) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd072acb4:
		m2 := MakeTLRestrictionReason(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *RestrictionReason) DebugString() string {
	switch m.PredicateName {
	case Predicate_restrictionReason:
		t := m.To_RestrictionReason()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_RestrictionReason
func (m *RestrictionReason) To_RestrictionReason() *TLRestrictionReason {
	m.PredicateName = Predicate_restrictionReason
	return &TLRestrictionReason{
		Data2: m,
	}
}

// MakeTLRestrictionReason
func MakeTLRestrictionReason(data2 *RestrictionReason) *TLRestrictionReason {
	if data2 == nil {
		return &TLRestrictionReason{Data2: &RestrictionReason{
			PredicateName: Predicate_restrictionReason,
		}}
	} else {
		data2.PredicateName = Predicate_restrictionReason
		return &TLRestrictionReason{Data2: data2}
	}
}

func (m *TLRestrictionReason) To_RestrictionReason() *RestrictionReason {
	m.Data2.PredicateName = Predicate_restrictionReason
	return m.Data2
}

func (m *TLRestrictionReason) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLRestrictionReason) GetPlatform() string  { return m.Data2.Platform }

func (m *TLRestrictionReason) SetReason(v string) { m.Data2.Reason = v }
func (m *TLRestrictionReason) GetReason() string  { return m.Data2.Reason }

func (m *TLRestrictionReason) SetText(v string) { m.Data2.Text = v }
func (m *TLRestrictionReason) GetText() string  { return m.Data2.Text }

func (m *TLRestrictionReason) GetPredicateName() string {
	return Predicate_restrictionReason
}

func (m *TLRestrictionReason) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd072acb4: func() []byte {
			x.UInt(0xd072acb4)

			x.String(m.GetPlatform())
			x.String(m.GetReason())
			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_restrictionReason, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_restrictionReason, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRestrictionReason) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRestrictionReason) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd072acb4: func() error {
			m.SetPlatform(dBuf.String())
			m.SetReason(dBuf.String())
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRestrictionReason) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GroupCallParticipant <--
//  + TL_GroupCallParticipant
//

func (m *GroupCallParticipant) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_groupCallParticipant:
		t := m.To_GroupCallParticipant()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GroupCallParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *GroupCallParticipant) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xeba636fe:
		m2 := MakeTLGroupCallParticipant(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GroupCallParticipant) DebugString() string {
	switch m.PredicateName {
	case Predicate_groupCallParticipant:
		t := m.To_GroupCallParticipant()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GroupCallParticipant
func (m *GroupCallParticipant) To_GroupCallParticipant() *TLGroupCallParticipant {
	m.PredicateName = Predicate_groupCallParticipant
	return &TLGroupCallParticipant{
		Data2: m,
	}
}

// MakeTLGroupCallParticipant
func MakeTLGroupCallParticipant(data2 *GroupCallParticipant) *TLGroupCallParticipant {
	if data2 == nil {
		return &TLGroupCallParticipant{Data2: &GroupCallParticipant{
			PredicateName: Predicate_groupCallParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_groupCallParticipant
		return &TLGroupCallParticipant{Data2: data2}
	}
}

func (m *TLGroupCallParticipant) To_GroupCallParticipant() *GroupCallParticipant {
	m.Data2.PredicateName = Predicate_groupCallParticipant
	return m.Data2
}

//// flags
func (m *TLGroupCallParticipant) SetMuted(v bool) { m.Data2.Muted = v }
func (m *TLGroupCallParticipant) GetMuted() bool  { return m.Data2.Muted }

func (m *TLGroupCallParticipant) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLGroupCallParticipant) GetLeft() bool  { return m.Data2.Left }

func (m *TLGroupCallParticipant) SetCanSelfUnmute(v bool) { m.Data2.CanSelfUnmute = v }
func (m *TLGroupCallParticipant) GetCanSelfUnmute() bool  { return m.Data2.CanSelfUnmute }

func (m *TLGroupCallParticipant) SetJustJoined(v bool) { m.Data2.JustJoined = v }
func (m *TLGroupCallParticipant) GetJustJoined() bool  { return m.Data2.JustJoined }

func (m *TLGroupCallParticipant) SetVersioned(v bool) { m.Data2.Versioned = v }
func (m *TLGroupCallParticipant) GetVersioned() bool  { return m.Data2.Versioned }

func (m *TLGroupCallParticipant) SetMin(v bool) { m.Data2.Min = v }
func (m *TLGroupCallParticipant) GetMin() bool  { return m.Data2.Min }

func (m *TLGroupCallParticipant) SetMutedByYou(v bool) { m.Data2.MutedByYou = v }
func (m *TLGroupCallParticipant) GetMutedByYou() bool  { return m.Data2.MutedByYou }

func (m *TLGroupCallParticipant) SetVolumeByAdmin(v bool) { m.Data2.VolumeByAdmin = v }
func (m *TLGroupCallParticipant) GetVolumeByAdmin() bool  { return m.Data2.VolumeByAdmin }

func (m *TLGroupCallParticipant) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLGroupCallParticipant) GetSelf() bool  { return m.Data2.Self }

func (m *TLGroupCallParticipant) SetVideoJoined(v bool) { m.Data2.VideoJoined = v }
func (m *TLGroupCallParticipant) GetVideoJoined() bool  { return m.Data2.VideoJoined }

func (m *TLGroupCallParticipant) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLGroupCallParticipant) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLGroupCallParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLGroupCallParticipant) GetDate() int32  { return m.Data2.Date }

func (m *TLGroupCallParticipant) SetActiveDate(v *types.Int32Value) { m.Data2.ActiveDate = v }
func (m *TLGroupCallParticipant) GetActiveDate() *types.Int32Value  { return m.Data2.ActiveDate }

func (m *TLGroupCallParticipant) SetSource(v int32) { m.Data2.Source = v }
func (m *TLGroupCallParticipant) GetSource() int32  { return m.Data2.Source }

func (m *TLGroupCallParticipant) SetVolume(v *types.Int32Value) { m.Data2.Volume = v }
func (m *TLGroupCallParticipant) GetVolume() *types.Int32Value  { return m.Data2.Volume }

func (m *TLGroupCallParticipant) SetAbout(v *types.StringValue) { m.Data2.About = v }
func (m *TLGroupCallParticipant) GetAbout() *types.StringValue  { return m.Data2.About }

func (m *TLGroupCallParticipant) SetRaiseHandRating(v *types.Int64Value) { m.Data2.RaiseHandRating = v }
func (m *TLGroupCallParticipant) GetRaiseHandRating() *types.Int64Value {
	return m.Data2.RaiseHandRating
}

func (m *TLGroupCallParticipant) SetVideo(v *GroupCallParticipantVideo) { m.Data2.Video = v }
func (m *TLGroupCallParticipant) GetVideo() *GroupCallParticipantVideo  { return m.Data2.Video }

func (m *TLGroupCallParticipant) SetPresentation(v *GroupCallParticipantVideo) {
	m.Data2.Presentation = v
}
func (m *TLGroupCallParticipant) GetPresentation() *GroupCallParticipantVideo {
	return m.Data2.Presentation
}

func (m *TLGroupCallParticipant) GetPredicateName() string {
	return Predicate_groupCallParticipant
}

func (m *TLGroupCallParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeba636fe: func() []byte {
			x.UInt(0xeba636fe)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMuted() == true {
					flags |= 1 << 0
				}
				if m.GetLeft() == true {
					flags |= 1 << 1
				}
				if m.GetCanSelfUnmute() == true {
					flags |= 1 << 2
				}
				if m.GetJustJoined() == true {
					flags |= 1 << 4
				}
				if m.GetVersioned() == true {
					flags |= 1 << 5
				}
				if m.GetMin() == true {
					flags |= 1 << 8
				}
				if m.GetMutedByYou() == true {
					flags |= 1 << 9
				}
				if m.GetVolumeByAdmin() == true {
					flags |= 1 << 10
				}
				if m.GetSelf() == true {
					flags |= 1 << 12
				}
				if m.GetVideoJoined() == true {
					flags |= 1 << 15
				}

				if m.GetActiveDate() != nil {
					flags |= 1 << 3
				}

				if m.GetVolume() != nil {
					flags |= 1 << 7
				}
				if m.GetAbout() != nil {
					flags |= 1 << 11
				}
				if m.GetRaiseHandRating() != nil {
					flags |= 1 << 13
				}
				if m.GetVideo() != nil {
					flags |= 1 << 6
				}
				if m.GetPresentation() != nil {
					flags |= 1 << 14
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetDate())
			if m.GetActiveDate() != nil {
				x.Int(m.GetActiveDate().Value)
			}

			x.Int(m.GetSource())
			if m.GetVolume() != nil {
				x.Int(m.GetVolume().Value)
			}

			if m.GetAbout() != nil {
				x.String(m.GetAbout().Value)
			}

			if m.GetRaiseHandRating() != nil {
				x.Long(m.GetRaiseHandRating().Value)
			}

			if m.GetVideo() != nil {
				x.Bytes(m.GetVideo().Encode(layer))
			}

			if m.GetPresentation() != nil {
				x.Bytes(m.GetPresentation().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCallParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCallParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCallParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCallParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeba636fe: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMuted(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetLeft(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetCanSelfUnmute(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetJustJoined(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetVersioned(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetMutedByYou(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetVolumeByAdmin(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetSelf(true)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetVideoJoined(true)
			}

			m11 := &Peer{}
			m11.Decode(dBuf)
			m.SetPeer(m11)

			m.SetDate(dBuf.Int())
			if (flags & (1 << 3)) != 0 {
				m.SetActiveDate(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetSource(dBuf.Int())
			if (flags & (1 << 7)) != 0 {
				m.SetVolume(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetAbout(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 13)) != 0 {
				m.SetRaiseHandRating(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 6)) != 0 {
				m18 := &GroupCallParticipantVideo{}
				m18.Decode(dBuf)
				m.SetVideo(m18)
			}
			if (flags & (1 << 14)) != 0 {
				m19 := &GroupCallParticipantVideo{}
				m19.Decode(dBuf)
				m.SetPresentation(m19)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCallParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Null <--
//  + TL_Null
//

func (m *Null) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_null:
		t := m.To_Null()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Null) CalcByteSize(layer int32) int {
	return 0
}

func (m *Null) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x56730bcc:
		m2 := MakeTLNull(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Null) DebugString() string {
	switch m.PredicateName {
	case Predicate_null:
		t := m.To_Null()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Null
func (m *Null) To_Null() *TLNull {
	m.PredicateName = Predicate_null
	return &TLNull{
		Data2: m,
	}
}

// MakeTLNull
func MakeTLNull(data2 *Null) *TLNull {
	if data2 == nil {
		return &TLNull{Data2: &Null{
			PredicateName: Predicate_null,
		}}
	} else {
		data2.PredicateName = Predicate_null
		return &TLNull{Data2: data2}
	}
}

func (m *TLNull) To_Null() *Null {
	m.Data2.PredicateName = Predicate_null
	return m.Data2
}

func (m *TLNull) GetPredicateName() string {
	return Predicate_null
}

func (m *TLNull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56730bcc: func() []byte {
			x.UInt(0x56730bcc)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_null, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_null, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56730bcc: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Updates_ChannelDifference <--
//  + TL_UpdatesChannelDifferenceEmpty
//  + TL_UpdatesChannelDifferenceTooLong
//  + TL_UpdatesChannelDifference
//

func (m *Updates_ChannelDifference) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updates_channelDifferenceEmpty:
		t := m.To_UpdatesChannelDifferenceEmpty()
		xBuf = t.Encode(layer)
	case Predicate_updates_channelDifferenceTooLong:
		t := m.To_UpdatesChannelDifferenceTooLong()
		xBuf = t.Encode(layer)
	case Predicate_updates_channelDifference:
		t := m.To_UpdatesChannelDifference()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Updates_ChannelDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *Updates_ChannelDifference) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3e11affb:
		m2 := MakeTLUpdatesChannelDifferenceEmpty(m)
		m2.Decode(dBuf)
	case 0xa4bcc6fe:
		m2 := MakeTLUpdatesChannelDifferenceTooLong(m)
		m2.Decode(dBuf)
	case 0x2064674e:
		m2 := MakeTLUpdatesChannelDifference(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Updates_ChannelDifference) DebugString() string {
	switch m.PredicateName {
	case Predicate_updates_channelDifferenceEmpty:
		t := m.To_UpdatesChannelDifferenceEmpty()
		return t.DebugString()
	case Predicate_updates_channelDifferenceTooLong:
		t := m.To_UpdatesChannelDifferenceTooLong()
		return t.DebugString()
	case Predicate_updates_channelDifference:
		t := m.To_UpdatesChannelDifference()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdatesChannelDifferenceEmpty
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceEmpty() *TLUpdatesChannelDifferenceEmpty {
	m.PredicateName = Predicate_updates_channelDifferenceEmpty
	return &TLUpdatesChannelDifferenceEmpty{
		Data2: m,
	}
}

// To_UpdatesChannelDifferenceTooLong
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceTooLong() *TLUpdatesChannelDifferenceTooLong {
	m.PredicateName = Predicate_updates_channelDifferenceTooLong
	return &TLUpdatesChannelDifferenceTooLong{
		Data2: m,
	}
}

// To_UpdatesChannelDifference
func (m *Updates_ChannelDifference) To_UpdatesChannelDifference() *TLUpdatesChannelDifference {
	m.PredicateName = Predicate_updates_channelDifference
	return &TLUpdatesChannelDifference{
		Data2: m,
	}
}

// MakeTLUpdatesChannelDifferenceEmpty
func MakeTLUpdatesChannelDifferenceEmpty(data2 *Updates_ChannelDifference) *TLUpdatesChannelDifferenceEmpty {
	if data2 == nil {
		return &TLUpdatesChannelDifferenceEmpty{Data2: &Updates_ChannelDifference{
			PredicateName: Predicate_updates_channelDifferenceEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_updates_channelDifferenceEmpty
		return &TLUpdatesChannelDifferenceEmpty{Data2: data2}
	}
}

func (m *TLUpdatesChannelDifferenceEmpty) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	m.Data2.PredicateName = Predicate_updates_channelDifferenceEmpty
	return m.Data2
}

//// flags
func (m *TLUpdatesChannelDifferenceEmpty) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceEmpty) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesChannelDifferenceEmpty) SetTimeout(v *types.Int32Value) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetTimeout() *types.Int32Value  { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifferenceEmpty) GetPredicateName() string {
	return Predicate_updates_channelDifferenceEmpty
}

func (m *TLUpdatesChannelDifferenceEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3e11affb: func() []byte {
			x.UInt(0x3e11affb)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFinal() == true {
					flags |= 1 << 0
				}

				if m.GetTimeout() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetPts())
			if m.GetTimeout() != nil {
				x.Int(m.GetTimeout().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_channelDifferenceEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_channelDifferenceEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesChannelDifferenceEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesChannelDifferenceEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3e11affb: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFinal(true)
			}
			m.SetPts(dBuf.Int())
			if (flags & (1 << 1)) != 0 {
				m.SetTimeout(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesChannelDifferenceEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesChannelDifferenceTooLong
func MakeTLUpdatesChannelDifferenceTooLong(data2 *Updates_ChannelDifference) *TLUpdatesChannelDifferenceTooLong {
	if data2 == nil {
		return &TLUpdatesChannelDifferenceTooLong{Data2: &Updates_ChannelDifference{
			PredicateName: Predicate_updates_channelDifferenceTooLong,
		}}
	} else {
		data2.PredicateName = Predicate_updates_channelDifferenceTooLong
		return &TLUpdatesChannelDifferenceTooLong{Data2: data2}
	}
}

func (m *TLUpdatesChannelDifferenceTooLong) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	m.Data2.PredicateName = Predicate_updates_channelDifferenceTooLong
	return m.Data2
}

//// flags
func (m *TLUpdatesChannelDifferenceTooLong) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceTooLong) SetTimeout(v *types.Int32Value) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetTimeout() *types.Int32Value  { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifferenceTooLong) SetDialog(v *Dialog) { m.Data2.Dialog = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetDialog() *Dialog  { return m.Data2.Dialog }

func (m *TLUpdatesChannelDifferenceTooLong) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLUpdatesChannelDifferenceTooLong) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesChannelDifferenceTooLong) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesChannelDifferenceTooLong) GetPredicateName() string {
	return Predicate_updates_channelDifferenceTooLong
}

func (m *TLUpdatesChannelDifferenceTooLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa4bcc6fe: func() []byte {
			x.UInt(0xa4bcc6fe)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFinal() == true {
					flags |= 1 << 0
				}
				if m.GetTimeout() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetTimeout() != nil {
				x.Int(m.GetTimeout().Value)
			}

			x.Bytes(m.GetDialog().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_channelDifferenceTooLong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_channelDifferenceTooLong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesChannelDifferenceTooLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesChannelDifferenceTooLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa4bcc6fe: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFinal(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetTimeout(&types.Int32Value{Value: dBuf.Int()})
			}

			m4 := &Dialog{}
			m4.Decode(dBuf)
			m.SetDialog(m4)

			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*Message, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &Message{}
				v5[i].Decode(dBuf)
			}
			m.SetMessages(v5)

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*Chat, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &Chat{}
				v6[i].Decode(dBuf)
			}
			m.SetChats(v6)

			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*User, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &User{}
				v7[i].Decode(dBuf)
			}
			m.SetUsers(v7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesChannelDifferenceTooLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesChannelDifference
func MakeTLUpdatesChannelDifference(data2 *Updates_ChannelDifference) *TLUpdatesChannelDifference {
	if data2 == nil {
		return &TLUpdatesChannelDifference{Data2: &Updates_ChannelDifference{
			PredicateName: Predicate_updates_channelDifference,
		}}
	} else {
		data2.PredicateName = Predicate_updates_channelDifference
		return &TLUpdatesChannelDifference{Data2: data2}
	}
}

func (m *TLUpdatesChannelDifference) To_Updates_ChannelDifference() *Updates_ChannelDifference {
	m.Data2.PredicateName = Predicate_updates_channelDifference
	return m.Data2
}

//// flags
func (m *TLUpdatesChannelDifference) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifference) GetFinal() bool  { return m.Data2.Final }

func (m *TLUpdatesChannelDifference) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifference) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesChannelDifference) SetTimeout(v *types.Int32Value) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifference) GetTimeout() *types.Int32Value  { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesChannelDifference) GetNewMessages() []*Message  { return m.Data2.NewMessages }

func (m *TLUpdatesChannelDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesChannelDifference) GetOtherUpdates() []*Update  { return m.Data2.OtherUpdates }

func (m *TLUpdatesChannelDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifference) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesChannelDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifference) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesChannelDifference) GetPredicateName() string {
	return Predicate_updates_channelDifference
}

func (m *TLUpdatesChannelDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2064674e: func() []byte {
			x.UInt(0x2064674e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFinal() == true {
					flags |= 1 << 0
				}

				if m.GetTimeout() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetPts())
			if m.GetTimeout() != nil {
				x.Int(m.GetTimeout().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetNewMessages())))
			for _, v := range m.GetNewMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetOtherUpdates())))
			for _, v := range m.GetOtherUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_channelDifference, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_channelDifference, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesChannelDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesChannelDifference) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2064674e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFinal(true)
			}
			m.SetPts(dBuf.Int())
			if (flags & (1 << 1)) != 0 {
				m.SetTimeout(&types.Int32Value{Value: dBuf.Int()})
			}

			c8 := dBuf.Int()
			if c8 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
				return dBuf.GetError()
			}
			l8 := dBuf.Int()
			v8 := make([]*Message, l8)
			for i := int32(0); i < l8; i++ {
				v8[i] = &Message{}
				v8[i].Decode(dBuf)
			}
			m.SetNewMessages(v8)

			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*Update, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &Update{}
				v9[i].Decode(dBuf)
			}
			m.SetOtherUpdates(v9)

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*Chat, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &Chat{}
				v6[i].Decode(dBuf)
			}
			m.SetChats(v6)

			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*User, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &User{}
				v7[i].Decode(dBuf)
			}
			m.SetUsers(v7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesChannelDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_MessageEditData <--
//  + TL_MessagesMessageEditData
//

func (m *Messages_MessageEditData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_messageEditData:
		t := m.To_MessagesMessageEditData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_MessageEditData) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_MessageEditData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x26b5dde6:
		m2 := MakeTLMessagesMessageEditData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_MessageEditData) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_messageEditData:
		t := m.To_MessagesMessageEditData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesMessageEditData
func (m *Messages_MessageEditData) To_MessagesMessageEditData() *TLMessagesMessageEditData {
	m.PredicateName = Predicate_messages_messageEditData
	return &TLMessagesMessageEditData{
		Data2: m,
	}
}

// MakeTLMessagesMessageEditData
func MakeTLMessagesMessageEditData(data2 *Messages_MessageEditData) *TLMessagesMessageEditData {
	if data2 == nil {
		return &TLMessagesMessageEditData{Data2: &Messages_MessageEditData{
			PredicateName: Predicate_messages_messageEditData,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messageEditData
		return &TLMessagesMessageEditData{Data2: data2}
	}
}

func (m *TLMessagesMessageEditData) To_Messages_MessageEditData() *Messages_MessageEditData {
	m.Data2.PredicateName = Predicate_messages_messageEditData
	return m.Data2
}

//// flags
func (m *TLMessagesMessageEditData) SetCaption(v bool) { m.Data2.Caption = v }
func (m *TLMessagesMessageEditData) GetCaption() bool  { return m.Data2.Caption }

func (m *TLMessagesMessageEditData) GetPredicateName() string {
	return Predicate_messages_messageEditData
}

func (m *TLMessagesMessageEditData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x26b5dde6: func() []byte {
			x.UInt(0x26b5dde6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCaption() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messageEditData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messageEditData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessageEditData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessageEditData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x26b5dde6: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCaption(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessageEditData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// TopPeerCategoryPeers <--
//  + TL_TopPeerCategoryPeers
//

func (m *TopPeerCategoryPeers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_topPeerCategoryPeers:
		t := m.To_TopPeerCategoryPeers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *TopPeerCategoryPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TopPeerCategoryPeers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfb834291:
		m2 := MakeTLTopPeerCategoryPeers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *TopPeerCategoryPeers) DebugString() string {
	switch m.PredicateName {
	case Predicate_topPeerCategoryPeers:
		t := m.To_TopPeerCategoryPeers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TopPeerCategoryPeers
func (m *TopPeerCategoryPeers) To_TopPeerCategoryPeers() *TLTopPeerCategoryPeers {
	m.PredicateName = Predicate_topPeerCategoryPeers
	return &TLTopPeerCategoryPeers{
		Data2: m,
	}
}

// MakeTLTopPeerCategoryPeers
func MakeTLTopPeerCategoryPeers(data2 *TopPeerCategoryPeers) *TLTopPeerCategoryPeers {
	if data2 == nil {
		return &TLTopPeerCategoryPeers{Data2: &TopPeerCategoryPeers{
			PredicateName: Predicate_topPeerCategoryPeers,
		}}
	} else {
		data2.PredicateName = Predicate_topPeerCategoryPeers
		return &TLTopPeerCategoryPeers{Data2: data2}
	}
}

func (m *TLTopPeerCategoryPeers) To_TopPeerCategoryPeers() *TopPeerCategoryPeers {
	m.Data2.PredicateName = Predicate_topPeerCategoryPeers
	return m.Data2
}

func (m *TLTopPeerCategoryPeers) SetCategory(v *TopPeerCategory) { m.Data2.Category = v }
func (m *TLTopPeerCategoryPeers) GetCategory() *TopPeerCategory  { return m.Data2.Category }

func (m *TLTopPeerCategoryPeers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLTopPeerCategoryPeers) GetCount() int32  { return m.Data2.Count }

func (m *TLTopPeerCategoryPeers) SetPeers(v []*TopPeer) { m.Data2.Peers = v }
func (m *TLTopPeerCategoryPeers) GetPeers() []*TopPeer  { return m.Data2.Peers }

func (m *TLTopPeerCategoryPeers) GetPredicateName() string {
	return Predicate_topPeerCategoryPeers
}

func (m *TLTopPeerCategoryPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfb834291: func() []byte {
			x.UInt(0xfb834291)

			x.Bytes(m.GetCategory().Encode(layer))
			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPeers())))
			for _, v := range m.GetPeers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeerCategoryPeers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeerCategoryPeers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeerCategoryPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeerCategoryPeers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfb834291: func() error {

			m0 := &TopPeerCategory{}
			m0.Decode(dBuf)
			m.SetCategory(m0)

			m.SetCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*TopPeer, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &TopPeer{}
				v2[i].Decode(dBuf)
			}
			m.SetPeers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeerCategoryPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventsFilter <--
//  + TL_ChannelAdminLogEventsFilter
//

func (m *ChannelAdminLogEventsFilter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelAdminLogEventsFilter:
		t := m.To_ChannelAdminLogEventsFilter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelAdminLogEventsFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelAdminLogEventsFilter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xea107ae4:
		m2 := MakeTLChannelAdminLogEventsFilter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelAdminLogEventsFilter) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelAdminLogEventsFilter:
		t := m.To_ChannelAdminLogEventsFilter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelAdminLogEventsFilter
func (m *ChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *TLChannelAdminLogEventsFilter {
	m.PredicateName = Predicate_channelAdminLogEventsFilter
	return &TLChannelAdminLogEventsFilter{
		Data2: m,
	}
}

// MakeTLChannelAdminLogEventsFilter
func MakeTLChannelAdminLogEventsFilter(data2 *ChannelAdminLogEventsFilter) *TLChannelAdminLogEventsFilter {
	if data2 == nil {
		return &TLChannelAdminLogEventsFilter{Data2: &ChannelAdminLogEventsFilter{
			PredicateName: Predicate_channelAdminLogEventsFilter,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEventsFilter
		return &TLChannelAdminLogEventsFilter{Data2: data2}
	}
}

func (m *TLChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *ChannelAdminLogEventsFilter {
	m.Data2.PredicateName = Predicate_channelAdminLogEventsFilter
	return m.Data2
}

//// flags
func (m *TLChannelAdminLogEventsFilter) SetJoin(v bool) { m.Data2.Join = v }
func (m *TLChannelAdminLogEventsFilter) GetJoin() bool  { return m.Data2.Join }

func (m *TLChannelAdminLogEventsFilter) SetLeave(v bool) { m.Data2.Leave = v }
func (m *TLChannelAdminLogEventsFilter) GetLeave() bool  { return m.Data2.Leave }

func (m *TLChannelAdminLogEventsFilter) SetInvite(v bool) { m.Data2.Invite = v }
func (m *TLChannelAdminLogEventsFilter) GetInvite() bool  { return m.Data2.Invite }

func (m *TLChannelAdminLogEventsFilter) SetBan(v bool) { m.Data2.Ban = v }
func (m *TLChannelAdminLogEventsFilter) GetBan() bool  { return m.Data2.Ban }

func (m *TLChannelAdminLogEventsFilter) SetUnban(v bool) { m.Data2.Unban = v }
func (m *TLChannelAdminLogEventsFilter) GetUnban() bool  { return m.Data2.Unban }

func (m *TLChannelAdminLogEventsFilter) SetKick(v bool) { m.Data2.Kick = v }
func (m *TLChannelAdminLogEventsFilter) GetKick() bool  { return m.Data2.Kick }

func (m *TLChannelAdminLogEventsFilter) SetUnkick(v bool) { m.Data2.Unkick = v }
func (m *TLChannelAdminLogEventsFilter) GetUnkick() bool  { return m.Data2.Unkick }

func (m *TLChannelAdminLogEventsFilter) SetPromote(v bool) { m.Data2.Promote = v }
func (m *TLChannelAdminLogEventsFilter) GetPromote() bool  { return m.Data2.Promote }

func (m *TLChannelAdminLogEventsFilter) SetDemote(v bool) { m.Data2.Demote = v }
func (m *TLChannelAdminLogEventsFilter) GetDemote() bool  { return m.Data2.Demote }

func (m *TLChannelAdminLogEventsFilter) SetInfo(v bool) { m.Data2.Info = v }
func (m *TLChannelAdminLogEventsFilter) GetInfo() bool  { return m.Data2.Info }

func (m *TLChannelAdminLogEventsFilter) SetSettings(v bool) { m.Data2.Settings = v }
func (m *TLChannelAdminLogEventsFilter) GetSettings() bool  { return m.Data2.Settings }

func (m *TLChannelAdminLogEventsFilter) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLChannelAdminLogEventsFilter) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLChannelAdminLogEventsFilter) SetEdit(v bool) { m.Data2.Edit = v }
func (m *TLChannelAdminLogEventsFilter) GetEdit() bool  { return m.Data2.Edit }

func (m *TLChannelAdminLogEventsFilter) SetDelete(v bool) { m.Data2.Delete = v }
func (m *TLChannelAdminLogEventsFilter) GetDelete() bool  { return m.Data2.Delete }

func (m *TLChannelAdminLogEventsFilter) SetGroupCall(v bool) { m.Data2.GroupCall = v }
func (m *TLChannelAdminLogEventsFilter) GetGroupCall() bool  { return m.Data2.GroupCall }

func (m *TLChannelAdminLogEventsFilter) SetInvites(v bool) { m.Data2.Invites = v }
func (m *TLChannelAdminLogEventsFilter) GetInvites() bool  { return m.Data2.Invites }

func (m *TLChannelAdminLogEventsFilter) SetSend(v bool) { m.Data2.Send = v }
func (m *TLChannelAdminLogEventsFilter) GetSend() bool  { return m.Data2.Send }

func (m *TLChannelAdminLogEventsFilter) GetPredicateName() string {
	return Predicate_channelAdminLogEventsFilter
}

func (m *TLChannelAdminLogEventsFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xea107ae4: func() []byte {
			x.UInt(0xea107ae4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetJoin() == true {
					flags |= 1 << 0
				}
				if m.GetLeave() == true {
					flags |= 1 << 1
				}
				if m.GetInvite() == true {
					flags |= 1 << 2
				}
				if m.GetBan() == true {
					flags |= 1 << 3
				}
				if m.GetUnban() == true {
					flags |= 1 << 4
				}
				if m.GetKick() == true {
					flags |= 1 << 5
				}
				if m.GetUnkick() == true {
					flags |= 1 << 6
				}
				if m.GetPromote() == true {
					flags |= 1 << 7
				}
				if m.GetDemote() == true {
					flags |= 1 << 8
				}
				if m.GetInfo() == true {
					flags |= 1 << 9
				}
				if m.GetSettings() == true {
					flags |= 1 << 10
				}
				if m.GetPinned() == true {
					flags |= 1 << 11
				}
				if m.GetEdit() == true {
					flags |= 1 << 12
				}
				if m.GetDelete() == true {
					flags |= 1 << 13
				}
				if m.GetGroupCall() == true {
					flags |= 1 << 14
				}
				if m.GetInvites() == true {
					flags |= 1 << 15
				}
				if m.GetSend() == true {
					flags |= 1 << 16
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEventsFilter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEventsFilter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEventsFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEventsFilter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xea107ae4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetJoin(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetLeave(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetInvite(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetBan(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetUnban(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetKick(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetUnkick(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetPromote(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetDemote(true)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetInfo(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetSettings(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetEdit(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetDelete(true)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetGroupCall(true)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetInvites(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetSend(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEventsFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_SentEmailCode <--
//  + TL_AccountSentEmailCode
//

func (m *Account_SentEmailCode) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_sentEmailCode:
		t := m.To_AccountSentEmailCode()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_SentEmailCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_SentEmailCode) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x811f854f:
		m2 := MakeTLAccountSentEmailCode(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_SentEmailCode) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_sentEmailCode:
		t := m.To_AccountSentEmailCode()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountSentEmailCode
func (m *Account_SentEmailCode) To_AccountSentEmailCode() *TLAccountSentEmailCode {
	m.PredicateName = Predicate_account_sentEmailCode
	return &TLAccountSentEmailCode{
		Data2: m,
	}
}

// MakeTLAccountSentEmailCode
func MakeTLAccountSentEmailCode(data2 *Account_SentEmailCode) *TLAccountSentEmailCode {
	if data2 == nil {
		return &TLAccountSentEmailCode{Data2: &Account_SentEmailCode{
			PredicateName: Predicate_account_sentEmailCode,
		}}
	} else {
		data2.PredicateName = Predicate_account_sentEmailCode
		return &TLAccountSentEmailCode{Data2: data2}
	}
}

func (m *TLAccountSentEmailCode) To_Account_SentEmailCode() *Account_SentEmailCode {
	m.Data2.PredicateName = Predicate_account_sentEmailCode
	return m.Data2
}

func (m *TLAccountSentEmailCode) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAccountSentEmailCode) GetEmailPattern() string  { return m.Data2.EmailPattern }

func (m *TLAccountSentEmailCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAccountSentEmailCode) GetLength() int32  { return m.Data2.Length }

func (m *TLAccountSentEmailCode) GetPredicateName() string {
	return Predicate_account_sentEmailCode
}

func (m *TLAccountSentEmailCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x811f854f: func() []byte {
			x.UInt(0x811f854f)

			x.String(m.GetEmailPattern())
			x.Int(m.GetLength())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_sentEmailCode, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_sentEmailCode, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountSentEmailCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSentEmailCode) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x811f854f: func() error {
			m.SetEmailPattern(dBuf.String())
			m.SetLength(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountSentEmailCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Double <--
//  + TL_Double
//

func (m *Double) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_double:
		t := m.To_Double()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Double) CalcByteSize(layer int32) int {
	return 0
}

func (m *Double) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x554d59c8:
		m2 := MakeTLDouble(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Double) DebugString() string {
	switch m.PredicateName {
	case Predicate_double:
		t := m.To_Double()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Double
func (m *Double) To_Double() *TLDouble {
	m.PredicateName = Predicate_double
	return &TLDouble{
		Data2: m,
	}
}

// MakeTLDouble
func MakeTLDouble(data2 *Double) *TLDouble {
	if data2 == nil {
		return &TLDouble{Data2: &Double{
			PredicateName: Predicate_double,
		}}
	} else {
		data2.PredicateName = Predicate_double
		return &TLDouble{Data2: data2}
	}
}

func (m *TLDouble) To_Double() *Double {
	m.Data2.PredicateName = Predicate_double
	return m.Data2
}

func (m *TLDouble) SetV(v float64) { m.Data2.V = v }
func (m *TLDouble) GetV() float64  { return m.Data2.V }

func (m *TLDouble) GetPredicateName() string {
	return Predicate_double
}

func (m *TLDouble) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x554d59c8: func() []byte {
			x.UInt(0x554d59c8)

			x.Double(m.GetV())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_double, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_double, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDouble) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDouble) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x554d59c8: func() error {
			m.SetV(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDouble) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageBox <--
//  + TL_MessageBox
//

func (m *MessageBox) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageBox:
		t := m.To_MessageBox()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageBox) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageBox) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x2a35aa8:
		m2 := MakeTLMessageBox(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageBox) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageBox:
		t := m.To_MessageBox()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageBox
func (m *MessageBox) To_MessageBox() *TLMessageBox {
	m.PredicateName = Predicate_messageBox
	return &TLMessageBox{
		Data2: m,
	}
}

// MakeTLMessageBox
func MakeTLMessageBox(data2 *MessageBox) *TLMessageBox {
	if data2 == nil {
		return &TLMessageBox{Data2: &MessageBox{
			PredicateName: Predicate_messageBox,
		}}
	} else {
		data2.PredicateName = Predicate_messageBox
		return &TLMessageBox{Data2: data2}
	}
}

func (m *TLMessageBox) To_MessageBox() *MessageBox {
	m.Data2.PredicateName = Predicate_messageBox
	return m.Data2
}

//// flags
func (m *TLMessageBox) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageBox) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageBox) SetMessageId(v int32) { m.Data2.MessageId = v }
func (m *TLMessageBox) GetMessageId() int32  { return m.Data2.MessageId }

func (m *TLMessageBox) SetSenderUserId(v int64) { m.Data2.SenderUserId = v }
func (m *TLMessageBox) GetSenderUserId() int64  { return m.Data2.SenderUserId }

func (m *TLMessageBox) SetPeerType(v int32) { m.Data2.PeerType = v }
func (m *TLMessageBox) GetPeerType() int32  { return m.Data2.PeerType }

func (m *TLMessageBox) SetPeerId(v int64) { m.Data2.PeerId = v }
func (m *TLMessageBox) GetPeerId() int64  { return m.Data2.PeerId }

func (m *TLMessageBox) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLMessageBox) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLMessageBox) SetDialogId1(v int64) { m.Data2.DialogId1 = v }
func (m *TLMessageBox) GetDialogId1() int64  { return m.Data2.DialogId1 }

func (m *TLMessageBox) SetDialogId2(v int64) { m.Data2.DialogId2 = v }
func (m *TLMessageBox) GetDialogId2() int64  { return m.Data2.DialogId2 }

func (m *TLMessageBox) SetDialogMessageId(v int64) { m.Data2.DialogMessageId = v }
func (m *TLMessageBox) GetDialogMessageId() int64  { return m.Data2.DialogMessageId }

func (m *TLMessageBox) SetMessageFilterType(v int32) { m.Data2.MessageFilterType = v }
func (m *TLMessageBox) GetMessageFilterType() int32  { return m.Data2.MessageFilterType }

func (m *TLMessageBox) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLMessageBox) GetMessage() *Message  { return m.Data2.Message }

func (m *TLMessageBox) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessageBox) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLMessageBox) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessageBox) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLMessageBox) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLMessageBox) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLMessageBox) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessageBox) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessageBox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessageBox) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLMessageBox) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessageBox) GetViews() int32  { return m.Data2.Views }

func (m *TLMessageBox) SetReplyOwnerId(v int64) { m.Data2.ReplyOwnerId = v }
func (m *TLMessageBox) GetReplyOwnerId() int64  { return m.Data2.ReplyOwnerId }

func (m *TLMessageBox) SetForwards(v int32) { m.Data2.Forwards = v }
func (m *TLMessageBox) GetForwards() int32  { return m.Data2.Forwards }

func (m *TLMessageBox) SetReaction(v string) { m.Data2.Reaction = v }
func (m *TLMessageBox) GetReaction() string  { return m.Data2.Reaction }

func (m *TLMessageBox) SetCommentGroupId(v int64) { m.Data2.CommentGroupId = v }
func (m *TLMessageBox) GetCommentGroupId() int64  { return m.Data2.CommentGroupId }

func (m *TLMessageBox) SetReplyChannelId(v int64) { m.Data2.ReplyChannelId = v }
func (m *TLMessageBox) GetReplyChannelId() int64  { return m.Data2.ReplyChannelId }

func (m *TLMessageBox) SetReplyChannelMessageId(v int32) { m.Data2.ReplyChannelMessageId = v }
func (m *TLMessageBox) GetReplyChannelMessageId() int32  { return m.Data2.ReplyChannelMessageId }

func (m *TLMessageBox) GetPredicateName() string {
	return Predicate_messageBox
}

func (m *TLMessageBox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2a35aa8: func() []byte {
			x.UInt(0x2a35aa8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMentioned() == true {
					flags |= 1 << 0
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 1
				}
				if m.GetPinned() == true {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			x.Int(m.GetMessageId())
			x.Long(m.GetSenderUserId())
			x.Int(m.GetPeerType())
			x.Long(m.GetPeerId())
			x.Long(m.GetRandomId())
			x.Long(m.GetDialogId1())
			x.Long(m.GetDialogId2())
			x.Long(m.GetDialogMessageId())
			x.Int(m.GetMessageFilterType())
			x.Bytes(m.GetMessage().Encode(layer))
			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetViews())
			x.Long(m.GetReplyOwnerId())
			x.Int(m.GetForwards())
			x.String(m.GetReaction())
			x.Long(m.GetCommentGroupId())
			x.Long(m.GetReplyChannelId())
			x.Int(m.GetReplyChannelMessageId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageBox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageBox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageBox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageBox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2a35aa8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUserId(dBuf.Long())
			m.SetMessageId(dBuf.Int())
			m.SetSenderUserId(dBuf.Long())
			m.SetPeerType(dBuf.Int())
			m.SetPeerId(dBuf.Long())
			m.SetRandomId(dBuf.Long())
			m.SetDialogId1(dBuf.Long())
			m.SetDialogId2(dBuf.Long())
			m.SetDialogMessageId(dBuf.Long())
			m.SetMessageFilterType(dBuf.Int())

			m11 := &Message{}
			m11.Decode(dBuf)
			m.SetMessage(m11)

			if (flags & (1 << 0)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetPinned(true)
			}
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetViews(dBuf.Int())
			m.SetReplyOwnerId(dBuf.Long())
			m.SetForwards(dBuf.Int())
			m.SetReaction(dBuf.String())
			m.SetCommentGroupId(dBuf.Long())
			m.SetReplyChannelId(dBuf.Long())
			m.SetReplyChannelMessageId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageBox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// CodeSettings <--
//  + TL_CodeSettings
//

func (m *CodeSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_codeSettings:
		t := m.To_CodeSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *CodeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *CodeSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8a6469c2:
		m2 := MakeTLCodeSettings(m)
		m2.Decode(dBuf)
	case 0xdebebe83:
		m2 := MakeTLCodeSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *CodeSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_codeSettings:
		t := m.To_CodeSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_CodeSettings
func (m *CodeSettings) To_CodeSettings() *TLCodeSettings {
	m.PredicateName = Predicate_codeSettings
	return &TLCodeSettings{
		Data2: m,
	}
}

// MakeTLCodeSettings
func MakeTLCodeSettings(data2 *CodeSettings) *TLCodeSettings {
	if data2 == nil {
		return &TLCodeSettings{Data2: &CodeSettings{
			PredicateName: Predicate_codeSettings,
		}}
	} else {
		data2.PredicateName = Predicate_codeSettings
		return &TLCodeSettings{Data2: data2}
	}
}

func (m *TLCodeSettings) To_CodeSettings() *CodeSettings {
	m.Data2.PredicateName = Predicate_codeSettings
	return m.Data2
}

//// flags
func (m *TLCodeSettings) SetAllowFlashcall(v bool) { m.Data2.AllowFlashcall = v }
func (m *TLCodeSettings) GetAllowFlashcall() bool  { return m.Data2.AllowFlashcall }

func (m *TLCodeSettings) SetCurrentNumber(v bool) { m.Data2.CurrentNumber = v }
func (m *TLCodeSettings) GetCurrentNumber() bool  { return m.Data2.CurrentNumber }

func (m *TLCodeSettings) SetAllowAppHash(v bool) { m.Data2.AllowAppHash = v }
func (m *TLCodeSettings) GetAllowAppHash() bool  { return m.Data2.AllowAppHash }

func (m *TLCodeSettings) SetAllowMissedCall(v bool) { m.Data2.AllowMissedCall = v }
func (m *TLCodeSettings) GetAllowMissedCall() bool  { return m.Data2.AllowMissedCall }

func (m *TLCodeSettings) SetLogoutTokens(v [][]byte) { m.Data2.LogoutTokens = v }
func (m *TLCodeSettings) GetLogoutTokens() [][]byte  { return m.Data2.LogoutTokens }

func (m *TLCodeSettings) GetPredicateName() string {
	return Predicate_codeSettings
}

func (m *TLCodeSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8a6469c2: func() []byte {
			x.UInt(0x8a6469c2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAllowFlashcall() == true {
					flags |= 1 << 0
				}
				if m.GetCurrentNumber() == true {
					flags |= 1 << 1
				}
				if m.GetAllowAppHash() == true {
					flags |= 1 << 4
				}
				if m.GetAllowMissedCall() == true {
					flags |= 1 << 5
				}
				if m.GetLogoutTokens() != nil {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetLogoutTokens() != nil {
				x.VectorBytes(m.GetLogoutTokens())
			}
			return x.GetBuf()
		},
		0xdebebe83: func() []byte {
			x.UInt(0xdebebe83)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAllowFlashcall() == true {
					flags |= 1 << 0
				}
				if m.GetCurrentNumber() == true {
					flags |= 1 << 1
				}
				if m.GetAllowAppHash() == true {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_codeSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_codeSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLCodeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLCodeSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8a6469c2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetAllowFlashcall(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetCurrentNumber(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetAllowAppHash(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetAllowMissedCall(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetLogoutTokens(dBuf.VectorBytes())
			}
			return dBuf.GetError()
		},
		0xdebebe83: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetAllowFlashcall(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetCurrentNumber(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetAllowAppHash(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLCodeSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_AutoDownloadSettings <--
//  + TL_AccountAutoDownloadSettings
//

func (m *Account_AutoDownloadSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_autoDownloadSettings:
		t := m.To_AccountAutoDownloadSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_AutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_AutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x63cacf26:
		m2 := MakeTLAccountAutoDownloadSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_AutoDownloadSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_autoDownloadSettings:
		t := m.To_AccountAutoDownloadSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountAutoDownloadSettings
func (m *Account_AutoDownloadSettings) To_AccountAutoDownloadSettings() *TLAccountAutoDownloadSettings {
	m.PredicateName = Predicate_account_autoDownloadSettings
	return &TLAccountAutoDownloadSettings{
		Data2: m,
	}
}

// MakeTLAccountAutoDownloadSettings
func MakeTLAccountAutoDownloadSettings(data2 *Account_AutoDownloadSettings) *TLAccountAutoDownloadSettings {
	if data2 == nil {
		return &TLAccountAutoDownloadSettings{Data2: &Account_AutoDownloadSettings{
			PredicateName: Predicate_account_autoDownloadSettings,
		}}
	} else {
		data2.PredicateName = Predicate_account_autoDownloadSettings
		return &TLAccountAutoDownloadSettings{Data2: data2}
	}
}

func (m *TLAccountAutoDownloadSettings) To_Account_AutoDownloadSettings() *Account_AutoDownloadSettings {
	m.Data2.PredicateName = Predicate_account_autoDownloadSettings
	return m.Data2
}

func (m *TLAccountAutoDownloadSettings) SetLow(v *AutoDownloadSettings) { m.Data2.Low = v }
func (m *TLAccountAutoDownloadSettings) GetLow() *AutoDownloadSettings  { return m.Data2.Low }

func (m *TLAccountAutoDownloadSettings) SetMedium(v *AutoDownloadSettings) { m.Data2.Medium = v }
func (m *TLAccountAutoDownloadSettings) GetMedium() *AutoDownloadSettings  { return m.Data2.Medium }

func (m *TLAccountAutoDownloadSettings) SetHigh(v *AutoDownloadSettings) { m.Data2.High = v }
func (m *TLAccountAutoDownloadSettings) GetHigh() *AutoDownloadSettings  { return m.Data2.High }

func (m *TLAccountAutoDownloadSettings) GetPredicateName() string {
	return Predicate_account_autoDownloadSettings
}

func (m *TLAccountAutoDownloadSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x63cacf26: func() []byte {
			x.UInt(0x63cacf26)

			x.Bytes(m.GetLow().Encode(layer))
			x.Bytes(m.GetMedium().Encode(layer))
			x.Bytes(m.GetHigh().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_autoDownloadSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_autoDownloadSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountAutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountAutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x63cacf26: func() error {

			m0 := &AutoDownloadSettings{}
			m0.Decode(dBuf)
			m.SetLow(m0)

			m1 := &AutoDownloadSettings{}
			m1.Decode(dBuf)
			m.SetMedium(m1)

			m2 := &AutoDownloadSettings{}
			m2.Decode(dBuf)
			m.SetHigh(m2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountAutoDownloadSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// True <--
//  + TL_True
//

func (m *True) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_true:
		t := m.To_True()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *True) CalcByteSize(layer int32) int {
	return 0
}

func (m *True) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3fedd339:
		m2 := MakeTLTrue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *True) DebugString() string {
	switch m.PredicateName {
	case Predicate_true:
		t := m.To_True()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_True
func (m *True) To_True() *TLTrue {
	m.PredicateName = Predicate_true
	return &TLTrue{
		Data2: m,
	}
}

// MakeTLTrue
func MakeTLTrue(data2 *True) *TLTrue {
	if data2 == nil {
		return &TLTrue{Data2: &True{
			PredicateName: Predicate_true,
		}}
	} else {
		data2.PredicateName = Predicate_true
		return &TLTrue{Data2: data2}
	}
}

func (m *TLTrue) To_True() *True {
	m.Data2.PredicateName = Predicate_true
	return m.Data2
}

func (m *TLTrue) GetPredicateName() string {
	return Predicate_true
}

func (m *TLTrue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3fedd339: func() []byte {
			x.UInt(0x3fedd339)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_true, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_true, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTrue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTrue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3fedd339: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTrue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputMedia <--
//  + TL_InputMediaEmpty
//  + TL_InputMediaUploadedPhoto
//  + TL_InputMediaPhoto
//  + TL_InputMediaGeoPoint
//  + TL_InputMediaContact
//  + TL_InputMediaUploadedDocument
//  + TL_InputMediaDocument
//  + TL_InputMediaVenue
//  + TL_InputMediaPhotoExternal
//  + TL_InputMediaDocumentExternal
//  + TL_InputMediaGame
//  + TL_InputMediaInvoice
//  + TL_InputMediaGeoLive
//  + TL_InputMediaPoll
//  + TL_InputMediaDice
//  + TL_InputMediaBizDataRaw
//

func (m *InputMedia) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputMediaEmpty:
		t := m.To_InputMediaEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaUploadedPhoto:
		t := m.To_InputMediaUploadedPhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaPhoto:
		t := m.To_InputMediaPhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaGeoPoint:
		t := m.To_InputMediaGeoPoint()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaContact:
		t := m.To_InputMediaContact()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaUploadedDocument:
		t := m.To_InputMediaUploadedDocument()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaDocument:
		t := m.To_InputMediaDocument()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaVenue:
		t := m.To_InputMediaVenue()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaPhotoExternal:
		t := m.To_InputMediaPhotoExternal()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaDocumentExternal:
		t := m.To_InputMediaDocumentExternal()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaGame:
		t := m.To_InputMediaGame()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaInvoice:
		t := m.To_InputMediaInvoice()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaGeoLive:
		t := m.To_InputMediaGeoLive()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaPoll:
		t := m.To_InputMediaPoll()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaDice:
		t := m.To_InputMediaDice()
		xBuf = t.Encode(layer)
	case Predicate_inputMediaBizDataRaw:
		t := m.To_InputMediaBizDataRaw()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputMedia) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9664f57f:
		m2 := MakeTLInputMediaEmpty(m)
		m2.Decode(dBuf)
	case 0x1e287d04:
		m2 := MakeTLInputMediaUploadedPhoto(m)
		m2.Decode(dBuf)
	case 0xb3ba0635:
		m2 := MakeTLInputMediaPhoto(m)
		m2.Decode(dBuf)
	case 0xf9c44144:
		m2 := MakeTLInputMediaGeoPoint(m)
		m2.Decode(dBuf)
	case 0xf8ab7dfb:
		m2 := MakeTLInputMediaContact(m)
		m2.Decode(dBuf)
	case 0x5b38c6c1:
		m2 := MakeTLInputMediaUploadedDocument(m)
		m2.Decode(dBuf)
	case 0x33473058:
		m2 := MakeTLInputMediaDocument(m)
		m2.Decode(dBuf)
	case 0xc13d1c11:
		m2 := MakeTLInputMediaVenue(m)
		m2.Decode(dBuf)
	case 0xe5bbfe1a:
		m2 := MakeTLInputMediaPhotoExternal(m)
		m2.Decode(dBuf)
	case 0xfb52dc99:
		m2 := MakeTLInputMediaDocumentExternal(m)
		m2.Decode(dBuf)
	case 0xd33f43f3:
		m2 := MakeTLInputMediaGame(m)
		m2.Decode(dBuf)
	case 0xd9799874:
		m2 := MakeTLInputMediaInvoice(m)
		m2.Decode(dBuf)
	case 0x971fa843:
		m2 := MakeTLInputMediaGeoLive(m)
		m2.Decode(dBuf)
	case 0xf94e5f1:
		m2 := MakeTLInputMediaPoll(m)
		m2.Decode(dBuf)
	case 0xe66fbf7b:
		m2 := MakeTLInputMediaDice(m)
		m2.Decode(dBuf)
	case 0xbe95ee1a:
		m2 := MakeTLInputMediaBizDataRaw(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputMedia) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputMediaEmpty:
		t := m.To_InputMediaEmpty()
		return t.DebugString()
	case Predicate_inputMediaUploadedPhoto:
		t := m.To_InputMediaUploadedPhoto()
		return t.DebugString()
	case Predicate_inputMediaPhoto:
		t := m.To_InputMediaPhoto()
		return t.DebugString()
	case Predicate_inputMediaGeoPoint:
		t := m.To_InputMediaGeoPoint()
		return t.DebugString()
	case Predicate_inputMediaContact:
		t := m.To_InputMediaContact()
		return t.DebugString()
	case Predicate_inputMediaUploadedDocument:
		t := m.To_InputMediaUploadedDocument()
		return t.DebugString()
	case Predicate_inputMediaDocument:
		t := m.To_InputMediaDocument()
		return t.DebugString()
	case Predicate_inputMediaVenue:
		t := m.To_InputMediaVenue()
		return t.DebugString()
	case Predicate_inputMediaPhotoExternal:
		t := m.To_InputMediaPhotoExternal()
		return t.DebugString()
	case Predicate_inputMediaDocumentExternal:
		t := m.To_InputMediaDocumentExternal()
		return t.DebugString()
	case Predicate_inputMediaGame:
		t := m.To_InputMediaGame()
		return t.DebugString()
	case Predicate_inputMediaInvoice:
		t := m.To_InputMediaInvoice()
		return t.DebugString()
	case Predicate_inputMediaGeoLive:
		t := m.To_InputMediaGeoLive()
		return t.DebugString()
	case Predicate_inputMediaPoll:
		t := m.To_InputMediaPoll()
		return t.DebugString()
	case Predicate_inputMediaDice:
		t := m.To_InputMediaDice()
		return t.DebugString()
	case Predicate_inputMediaBizDataRaw:
		t := m.To_InputMediaBizDataRaw()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputMediaEmpty
func (m *InputMedia) To_InputMediaEmpty() *TLInputMediaEmpty {
	m.PredicateName = Predicate_inputMediaEmpty
	return &TLInputMediaEmpty{
		Data2: m,
	}
}

// To_InputMediaUploadedPhoto
func (m *InputMedia) To_InputMediaUploadedPhoto() *TLInputMediaUploadedPhoto {
	m.PredicateName = Predicate_inputMediaUploadedPhoto
	return &TLInputMediaUploadedPhoto{
		Data2: m,
	}
}

// To_InputMediaPhoto
func (m *InputMedia) To_InputMediaPhoto() *TLInputMediaPhoto {
	m.PredicateName = Predicate_inputMediaPhoto
	return &TLInputMediaPhoto{
		Data2: m,
	}
}

// To_InputMediaGeoPoint
func (m *InputMedia) To_InputMediaGeoPoint() *TLInputMediaGeoPoint {
	m.PredicateName = Predicate_inputMediaGeoPoint
	return &TLInputMediaGeoPoint{
		Data2: m,
	}
}

// To_InputMediaContact
func (m *InputMedia) To_InputMediaContact() *TLInputMediaContact {
	m.PredicateName = Predicate_inputMediaContact
	return &TLInputMediaContact{
		Data2: m,
	}
}

// To_InputMediaUploadedDocument
func (m *InputMedia) To_InputMediaUploadedDocument() *TLInputMediaUploadedDocument {
	m.PredicateName = Predicate_inputMediaUploadedDocument
	return &TLInputMediaUploadedDocument{
		Data2: m,
	}
}

// To_InputMediaDocument
func (m *InputMedia) To_InputMediaDocument() *TLInputMediaDocument {
	m.PredicateName = Predicate_inputMediaDocument
	return &TLInputMediaDocument{
		Data2: m,
	}
}

// To_InputMediaVenue
func (m *InputMedia) To_InputMediaVenue() *TLInputMediaVenue {
	m.PredicateName = Predicate_inputMediaVenue
	return &TLInputMediaVenue{
		Data2: m,
	}
}

// To_InputMediaPhotoExternal
func (m *InputMedia) To_InputMediaPhotoExternal() *TLInputMediaPhotoExternal {
	m.PredicateName = Predicate_inputMediaPhotoExternal
	return &TLInputMediaPhotoExternal{
		Data2: m,
	}
}

// To_InputMediaDocumentExternal
func (m *InputMedia) To_InputMediaDocumentExternal() *TLInputMediaDocumentExternal {
	m.PredicateName = Predicate_inputMediaDocumentExternal
	return &TLInputMediaDocumentExternal{
		Data2: m,
	}
}

// To_InputMediaGame
func (m *InputMedia) To_InputMediaGame() *TLInputMediaGame {
	m.PredicateName = Predicate_inputMediaGame
	return &TLInputMediaGame{
		Data2: m,
	}
}

// To_InputMediaInvoice
func (m *InputMedia) To_InputMediaInvoice() *TLInputMediaInvoice {
	m.PredicateName = Predicate_inputMediaInvoice
	return &TLInputMediaInvoice{
		Data2: m,
	}
}

// To_InputMediaGeoLive
func (m *InputMedia) To_InputMediaGeoLive() *TLInputMediaGeoLive {
	m.PredicateName = Predicate_inputMediaGeoLive
	return &TLInputMediaGeoLive{
		Data2: m,
	}
}

// To_InputMediaPoll
func (m *InputMedia) To_InputMediaPoll() *TLInputMediaPoll {
	m.PredicateName = Predicate_inputMediaPoll
	return &TLInputMediaPoll{
		Data2: m,
	}
}

// To_InputMediaDice
func (m *InputMedia) To_InputMediaDice() *TLInputMediaDice {
	m.PredicateName = Predicate_inputMediaDice
	return &TLInputMediaDice{
		Data2: m,
	}
}

// To_InputMediaBizDataRaw
func (m *InputMedia) To_InputMediaBizDataRaw() *TLInputMediaBizDataRaw {
	m.PredicateName = Predicate_inputMediaBizDataRaw
	return &TLInputMediaBizDataRaw{
		Data2: m,
	}
}

// MakeTLInputMediaEmpty
func MakeTLInputMediaEmpty(data2 *InputMedia) *TLInputMediaEmpty {
	if data2 == nil {
		return &TLInputMediaEmpty{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaEmpty
		return &TLInputMediaEmpty{Data2: data2}
	}
}

func (m *TLInputMediaEmpty) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaEmpty
	return m.Data2
}

func (m *TLInputMediaEmpty) GetPredicateName() string {
	return Predicate_inputMediaEmpty
}

func (m *TLInputMediaEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9664f57f: func() []byte {
			x.UInt(0x9664f57f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9664f57f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaUploadedPhoto
func MakeTLInputMediaUploadedPhoto(data2 *InputMedia) *TLInputMediaUploadedPhoto {
	if data2 == nil {
		return &TLInputMediaUploadedPhoto{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaUploadedPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaUploadedPhoto
		return &TLInputMediaUploadedPhoto{Data2: data2}
	}
}

func (m *TLInputMediaUploadedPhoto) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaUploadedPhoto
	return m.Data2
}

//// flags
func (m *TLInputMediaUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedPhoto) GetFile() *InputFile  { return m.Data2.File }

func (m *TLInputMediaUploadedPhoto) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedPhoto) GetStickers() []*InputDocument  { return m.Data2.Stickers }

func (m *TLInputMediaUploadedPhoto) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedPhoto) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaUploadedPhoto) GetPredicateName() string {
	return Predicate_inputMediaUploadedPhoto
}

func (m *TLInputMediaUploadedPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e287d04: func() []byte {
			x.UInt(0x1e287d04)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetStickers() != nil {
					flags |= 1 << 0
				}
				if m.GetTtlSeconds() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetFile().Encode(layer))
			if m.GetStickers() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetStickers())))
				for _, v := range m.GetStickers() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaUploadedPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaUploadedPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaUploadedPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaUploadedPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e287d04: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &InputFile{}
			m1.Decode(dBuf)
			m.SetFile(m1)

			if (flags & (1 << 0)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*InputDocument, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &InputDocument{}
					v2[i].Decode(dBuf)
				}
				m.SetStickers(v2)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaUploadedPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaPhoto
func MakeTLInputMediaPhoto(data2 *InputMedia) *TLInputMediaPhoto {
	if data2 == nil {
		return &TLInputMediaPhoto{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaPhoto
		return &TLInputMediaPhoto{Data2: data2}
	}
}

func (m *TLInputMediaPhoto) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaPhoto
	return m.Data2
}

//// flags
func (m *TLInputMediaPhoto) SetId_INPUTPHOTO(v *InputPhoto) { m.Data2.Id_INPUTPHOTO = v }
func (m *TLInputMediaPhoto) GetId_INPUTPHOTO() *InputPhoto  { return m.Data2.Id_INPUTPHOTO }

func (m *TLInputMediaPhoto) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhoto) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaPhoto) GetPredicateName() string {
	return Predicate_inputMediaPhoto
}

func (m *TLInputMediaPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb3ba0635: func() []byte {
			x.UInt(0xb3ba0635)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTtlSeconds() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetId_INPUTPHOTO().Encode(layer))
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb3ba0635: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m4 := &InputPhoto{}
			m4.Decode(dBuf)
			m.SetId_INPUTPHOTO(m4)

			if (flags & (1 << 0)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaGeoPoint
func MakeTLInputMediaGeoPoint(data2 *InputMedia) *TLInputMediaGeoPoint {
	if data2 == nil {
		return &TLInputMediaGeoPoint{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaGeoPoint,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaGeoPoint
		return &TLInputMediaGeoPoint{Data2: data2}
	}
}

func (m *TLInputMediaGeoPoint) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaGeoPoint
	return m.Data2
}

func (m *TLInputMediaGeoPoint) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoPoint) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputMediaGeoPoint) GetPredicateName() string {
	return Predicate_inputMediaGeoPoint
}

func (m *TLInputMediaGeoPoint) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf9c44144: func() []byte {
			x.UInt(0xf9c44144)

			x.Bytes(m.GetGeoPoint().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaGeoPoint, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaGeoPoint, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaGeoPoint) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaGeoPoint) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf9c44144: func() error {

			m5 := &InputGeoPoint{}
			m5.Decode(dBuf)
			m.SetGeoPoint(m5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaGeoPoint) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaContact
func MakeTLInputMediaContact(data2 *InputMedia) *TLInputMediaContact {
	if data2 == nil {
		return &TLInputMediaContact{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaContact,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaContact
		return &TLInputMediaContact{Data2: data2}
	}
}

func (m *TLInputMediaContact) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaContact
	return m.Data2
}

func (m *TLInputMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLInputMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLInputMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLInputMediaContact) GetPredicateName() string {
	return Predicate_inputMediaContact
}

func (m *TLInputMediaContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf8ab7dfb: func() []byte {
			x.UInt(0xf8ab7dfb)

			x.String(m.GetPhoneNumber())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.String(m.GetVcard())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf8ab7dfb: func() error {
			m.SetPhoneNumber(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetVcard(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaUploadedDocument
func MakeTLInputMediaUploadedDocument(data2 *InputMedia) *TLInputMediaUploadedDocument {
	if data2 == nil {
		return &TLInputMediaUploadedDocument{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaUploadedDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaUploadedDocument
		return &TLInputMediaUploadedDocument{Data2: data2}
	}
}

func (m *TLInputMediaUploadedDocument) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaUploadedDocument
	return m.Data2
}

//// flags
func (m *TLInputMediaUploadedDocument) SetNosoundVideo(v bool) { m.Data2.NosoundVideo = v }
func (m *TLInputMediaUploadedDocument) GetNosoundVideo() bool  { return m.Data2.NosoundVideo }

func (m *TLInputMediaUploadedDocument) SetForceFile(v bool) { m.Data2.ForceFile = v }
func (m *TLInputMediaUploadedDocument) GetForceFile() bool  { return m.Data2.ForceFile }

func (m *TLInputMediaUploadedDocument) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedDocument) GetFile() *InputFile  { return m.Data2.File }

func (m *TLInputMediaUploadedDocument) SetThumb(v *InputFile) { m.Data2.Thumb = v }
func (m *TLInputMediaUploadedDocument) GetThumb() *InputFile  { return m.Data2.Thumb }

func (m *TLInputMediaUploadedDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputMediaUploadedDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLInputMediaUploadedDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputMediaUploadedDocument) GetAttributes() []*DocumentAttribute {
	return m.Data2.Attributes
}

func (m *TLInputMediaUploadedDocument) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedDocument) GetStickers() []*InputDocument  { return m.Data2.Stickers }

func (m *TLInputMediaUploadedDocument) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedDocument) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaUploadedDocument) GetPredicateName() string {
	return Predicate_inputMediaUploadedDocument
}

func (m *TLInputMediaUploadedDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5b38c6c1: func() []byte {
			x.UInt(0x5b38c6c1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNosoundVideo() == true {
					flags |= 1 << 3
				}
				if m.GetForceFile() == true {
					flags |= 1 << 4
				}

				if m.GetThumb() != nil {
					flags |= 1 << 2
				}

				if m.GetStickers() != nil {
					flags |= 1 << 0
				}
				if m.GetTtlSeconds() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetFile().Encode(layer))
			if m.GetThumb() != nil {
				x.Bytes(m.GetThumb().Encode(layer))
			}

			x.String(m.GetMimeType())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAttributes())))
			for _, v := range m.GetAttributes() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetStickers() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetStickers())))
				for _, v := range m.GetStickers() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaUploadedDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaUploadedDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaUploadedDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaUploadedDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5b38c6c1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 3)) != 0 {
				m.SetNosoundVideo(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetForceFile(true)
			}

			m1 := &InputFile{}
			m1.Decode(dBuf)
			m.SetFile(m1)

			if (flags & (1 << 2)) != 0 {
				m12 := &InputFile{}
				m12.Decode(dBuf)
				m.SetThumb(m12)
			}
			m.SetMimeType(dBuf.String())
			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*DocumentAttribute, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &DocumentAttribute{}
				v14[i].Decode(dBuf)
			}
			m.SetAttributes(v14)

			if (flags & (1 << 0)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*InputDocument, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &InputDocument{}
					v2[i].Decode(dBuf)
				}
				m.SetStickers(v2)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaUploadedDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaDocument
func MakeTLInputMediaDocument(data2 *InputMedia) *TLInputMediaDocument {
	if data2 == nil {
		return &TLInputMediaDocument{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaDocument
		return &TLInputMediaDocument{Data2: data2}
	}
}

func (m *TLInputMediaDocument) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaDocument
	return m.Data2
}

//// flags
func (m *TLInputMediaDocument) SetId_INPUTDOCUMENT(v *InputDocument) { m.Data2.Id_INPUTDOCUMENT = v }
func (m *TLInputMediaDocument) GetId_INPUTDOCUMENT() *InputDocument  { return m.Data2.Id_INPUTDOCUMENT }

func (m *TLInputMediaDocument) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocument) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaDocument) SetQuery(v *types.StringValue) { m.Data2.Query = v }
func (m *TLInputMediaDocument) GetQuery() *types.StringValue  { return m.Data2.Query }

func (m *TLInputMediaDocument) GetPredicateName() string {
	return Predicate_inputMediaDocument
}

func (m *TLInputMediaDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x33473058: func() []byte {
			x.UInt(0x33473058)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTtlSeconds() != nil {
					flags |= 1 << 0
				}
				if m.GetQuery() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetId_INPUTDOCUMENT().Encode(layer))
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			if m.GetQuery() != nil {
				x.String(m.GetQuery().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x33473058: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m4 := &InputDocument{}
			m4.Decode(dBuf)
			m.SetId_INPUTDOCUMENT(m4)

			if (flags & (1 << 0)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetQuery(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaVenue
func MakeTLInputMediaVenue(data2 *InputMedia) *TLInputMediaVenue {
	if data2 == nil {
		return &TLInputMediaVenue{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaVenue,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaVenue
		return &TLInputMediaVenue{Data2: data2}
	}
}

func (m *TLInputMediaVenue) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaVenue
	return m.Data2
}

func (m *TLInputMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaVenue) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLInputMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLInputMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLInputMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLInputMediaVenue) GetPredicateName() string {
	return Predicate_inputMediaVenue
}

func (m *TLInputMediaVenue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc13d1c11: func() []byte {
			x.UInt(0xc13d1c11)

			x.Bytes(m.GetGeoPoint().Encode(layer))
			x.String(m.GetTitle())
			x.String(m.GetAddress())
			x.String(m.GetProvider())
			x.String(m.GetVenueId())
			x.String(m.GetVenueType())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaVenue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaVenue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaVenue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaVenue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc13d1c11: func() error {

			m5 := &InputGeoPoint{}
			m5.Decode(dBuf)
			m.SetGeoPoint(m5)

			m.SetTitle(dBuf.String())
			m.SetAddress(dBuf.String())
			m.SetProvider(dBuf.String())
			m.SetVenueId(dBuf.String())
			m.SetVenueType(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaVenue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaPhotoExternal
func MakeTLInputMediaPhotoExternal(data2 *InputMedia) *TLInputMediaPhotoExternal {
	if data2 == nil {
		return &TLInputMediaPhotoExternal{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaPhotoExternal,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaPhotoExternal
		return &TLInputMediaPhotoExternal{Data2: data2}
	}
}

func (m *TLInputMediaPhotoExternal) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaPhotoExternal
	return m.Data2
}

//// flags
func (m *TLInputMediaPhotoExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaPhotoExternal) GetUrl() string  { return m.Data2.Url }

func (m *TLInputMediaPhotoExternal) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhotoExternal) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaPhotoExternal) GetPredicateName() string {
	return Predicate_inputMediaPhotoExternal
}

func (m *TLInputMediaPhotoExternal) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe5bbfe1a: func() []byte {
			x.UInt(0xe5bbfe1a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTtlSeconds() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetUrl())
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaPhotoExternal, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaPhotoExternal, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaPhotoExternal) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaPhotoExternal) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe5bbfe1a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUrl(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaPhotoExternal) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaDocumentExternal
func MakeTLInputMediaDocumentExternal(data2 *InputMedia) *TLInputMediaDocumentExternal {
	if data2 == nil {
		return &TLInputMediaDocumentExternal{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaDocumentExternal,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaDocumentExternal
		return &TLInputMediaDocumentExternal{Data2: data2}
	}
}

func (m *TLInputMediaDocumentExternal) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaDocumentExternal
	return m.Data2
}

//// flags
func (m *TLInputMediaDocumentExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaDocumentExternal) GetUrl() string  { return m.Data2.Url }

func (m *TLInputMediaDocumentExternal) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocumentExternal) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLInputMediaDocumentExternal) GetPredicateName() string {
	return Predicate_inputMediaDocumentExternal
}

func (m *TLInputMediaDocumentExternal) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfb52dc99: func() []byte {
			x.UInt(0xfb52dc99)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTtlSeconds() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetUrl())
			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaDocumentExternal, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaDocumentExternal, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaDocumentExternal) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaDocumentExternal) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfb52dc99: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUrl(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaDocumentExternal) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaGame
func MakeTLInputMediaGame(data2 *InputMedia) *TLInputMediaGame {
	if data2 == nil {
		return &TLInputMediaGame{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaGame,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaGame
		return &TLInputMediaGame{Data2: data2}
	}
}

func (m *TLInputMediaGame) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaGame
	return m.Data2
}

func (m *TLInputMediaGame) SetId_INPUTGAME(v *InputGame) { m.Data2.Id_INPUTGAME = v }
func (m *TLInputMediaGame) GetId_INPUTGAME() *InputGame  { return m.Data2.Id_INPUTGAME }

func (m *TLInputMediaGame) GetPredicateName() string {
	return Predicate_inputMediaGame
}

func (m *TLInputMediaGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd33f43f3: func() []byte {
			x.UInt(0xd33f43f3)

			x.Bytes(m.GetId_INPUTGAME().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaGame, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaGame, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd33f43f3: func() error {

			m4 := &InputGame{}
			m4.Decode(dBuf)
			m.SetId_INPUTGAME(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaInvoice
func MakeTLInputMediaInvoice(data2 *InputMedia) *TLInputMediaInvoice {
	if data2 == nil {
		return &TLInputMediaInvoice{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaInvoice,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaInvoice
		return &TLInputMediaInvoice{Data2: data2}
	}
}

func (m *TLInputMediaInvoice) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaInvoice
	return m.Data2
}

//// flags
func (m *TLInputMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLInputMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLInputMediaInvoice) SetPhoto(v *InputWebDocument) { m.Data2.Photo = v }
func (m *TLInputMediaInvoice) GetPhoto() *InputWebDocument  { return m.Data2.Photo }

func (m *TLInputMediaInvoice) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLInputMediaInvoice) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLInputMediaInvoice) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLInputMediaInvoice) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLInputMediaInvoice) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaInvoice) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputMediaInvoice) SetProviderData(v *DataJSON) { m.Data2.ProviderData = v }
func (m *TLInputMediaInvoice) GetProviderData() *DataJSON  { return m.Data2.ProviderData }

func (m *TLInputMediaInvoice) SetStartParam(v *types.StringValue) { m.Data2.StartParam = v }
func (m *TLInputMediaInvoice) GetStartParam() *types.StringValue  { return m.Data2.StartParam }

func (m *TLInputMediaInvoice) GetPredicateName() string {
	return Predicate_inputMediaInvoice
}

func (m *TLInputMediaInvoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd9799874: func() []byte {
			x.UInt(0xd9799874)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhoto() != nil {
					flags |= 1 << 0
				}

				if m.GetStartParam() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			x.Bytes(m.GetInvoice().Encode(layer))
			x.StringBytes(m.GetPayload())
			x.String(m.GetProvider())
			x.Bytes(m.GetProviderData().Encode(layer))
			if m.GetStartParam() != nil {
				x.String(m.GetStartParam().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaInvoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaInvoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaInvoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaInvoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd9799874: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m23 := &InputWebDocument{}
				m23.Decode(dBuf)
				m.SetPhoto(m23)
			}

			m24 := &Invoice{}
			m24.Decode(dBuf)
			m.SetInvoice(m24)

			m.SetPayload(dBuf.StringBytes())
			m.SetProvider(dBuf.String())

			m26 := &DataJSON{}
			m26.Decode(dBuf)
			m.SetProviderData(m26)

			if (flags & (1 << 1)) != 0 {
				m.SetStartParam(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaInvoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaGeoLive
func MakeTLInputMediaGeoLive(data2 *InputMedia) *TLInputMediaGeoLive {
	if data2 == nil {
		return &TLInputMediaGeoLive{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaGeoLive,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaGeoLive
		return &TLInputMediaGeoLive{Data2: data2}
	}
}

func (m *TLInputMediaGeoLive) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaGeoLive
	return m.Data2
}

//// flags
func (m *TLInputMediaGeoLive) SetStopped(v bool) { m.Data2.Stopped = v }
func (m *TLInputMediaGeoLive) GetStopped() bool  { return m.Data2.Stopped }

func (m *TLInputMediaGeoLive) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoLive) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputMediaGeoLive) SetHeading(v *types.Int32Value) { m.Data2.Heading = v }
func (m *TLInputMediaGeoLive) GetHeading() *types.Int32Value  { return m.Data2.Heading }

func (m *TLInputMediaGeoLive) SetPeriod(v *types.Int32Value) { m.Data2.Period = v }
func (m *TLInputMediaGeoLive) GetPeriod() *types.Int32Value  { return m.Data2.Period }

func (m *TLInputMediaGeoLive) SetProximityNotificationRadius(v *types.Int32Value) {
	m.Data2.ProximityNotificationRadius = v
}
func (m *TLInputMediaGeoLive) GetProximityNotificationRadius() *types.Int32Value {
	return m.Data2.ProximityNotificationRadius
}

func (m *TLInputMediaGeoLive) GetPredicateName() string {
	return Predicate_inputMediaGeoLive
}

func (m *TLInputMediaGeoLive) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x971fa843: func() []byte {
			x.UInt(0x971fa843)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetStopped() == true {
					flags |= 1 << 0
				}

				if m.GetHeading() != nil {
					flags |= 1 << 2
				}
				if m.GetPeriod() != nil {
					flags |= 1 << 1
				}
				if m.GetProximityNotificationRadius() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeoPoint().Encode(layer))
			if m.GetHeading() != nil {
				x.Int(m.GetHeading().Value)
			}

			if m.GetPeriod() != nil {
				x.Int(m.GetPeriod().Value)
			}

			if m.GetProximityNotificationRadius() != nil {
				x.Int(m.GetProximityNotificationRadius().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaGeoLive, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaGeoLive, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaGeoLive) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaGeoLive) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x971fa843: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetStopped(true)
			}

			m5 := &InputGeoPoint{}
			m5.Decode(dBuf)
			m.SetGeoPoint(m5)

			if (flags & (1 << 2)) != 0 {
				m.SetHeading(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetProximityNotificationRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaGeoLive) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaPoll
func MakeTLInputMediaPoll(data2 *InputMedia) *TLInputMediaPoll {
	if data2 == nil {
		return &TLInputMediaPoll{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaPoll,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaPoll
		return &TLInputMediaPoll{Data2: data2}
	}
}

func (m *TLInputMediaPoll) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaPoll
	return m.Data2
}

//// flags
func (m *TLInputMediaPoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLInputMediaPoll) GetPoll() *Poll  { return m.Data2.Poll }

func (m *TLInputMediaPoll) SetCorrectAnswers(v [][]byte) { m.Data2.CorrectAnswers = v }
func (m *TLInputMediaPoll) GetCorrectAnswers() [][]byte  { return m.Data2.CorrectAnswers }

func (m *TLInputMediaPoll) SetSolution(v *types.StringValue) { m.Data2.Solution = v }
func (m *TLInputMediaPoll) GetSolution() *types.StringValue  { return m.Data2.Solution }

func (m *TLInputMediaPoll) SetSolutionEntities(v []*MessageEntity) { m.Data2.SolutionEntities = v }
func (m *TLInputMediaPoll) GetSolutionEntities() []*MessageEntity  { return m.Data2.SolutionEntities }

func (m *TLInputMediaPoll) GetPredicateName() string {
	return Predicate_inputMediaPoll
}

func (m *TLInputMediaPoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf94e5f1: func() []byte {
			x.UInt(0xf94e5f1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCorrectAnswers() != nil {
					flags |= 1 << 0
				}
				if m.GetSolution() != nil {
					flags |= 1 << 1
				}
				if m.GetSolutionEntities() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPoll().Encode(layer))
			if m.GetCorrectAnswers() != nil {
				x.VectorBytes(m.GetCorrectAnswers())
			}
			if m.GetSolution() != nil {
				x.String(m.GetSolution().Value)
			}

			if m.GetSolutionEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetSolutionEntities())))
				for _, v := range m.GetSolutionEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaPoll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaPoll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaPoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaPoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf94e5f1: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m32 := &Poll{}
			m32.Decode(dBuf)
			m.SetPoll(m32)

			if (flags & (1 << 0)) != 0 {
				m.SetCorrectAnswers(dBuf.VectorBytes())
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSolution(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				c35 := dBuf.Int()
				if c35 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 35, c35)
					return dBuf.GetError()
				}
				l35 := dBuf.Int()
				v35 := make([]*MessageEntity, l35)
				for i := int32(0); i < l35; i++ {
					v35[i] = &MessageEntity{}
					v35[i].Decode(dBuf)
				}
				m.SetSolutionEntities(v35)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaPoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaDice
func MakeTLInputMediaDice(data2 *InputMedia) *TLInputMediaDice {
	if data2 == nil {
		return &TLInputMediaDice{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaDice,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaDice
		return &TLInputMediaDice{Data2: data2}
	}
}

func (m *TLInputMediaDice) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaDice
	return m.Data2
}

func (m *TLInputMediaDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLInputMediaDice) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLInputMediaDice) GetPredicateName() string {
	return Predicate_inputMediaDice
}

func (m *TLInputMediaDice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe66fbf7b: func() []byte {
			x.UInt(0xe66fbf7b)

			x.String(m.GetEmoticon())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaDice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaDice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaDice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaDice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe66fbf7b: func() error {
			m.SetEmoticon(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaDice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMediaBizDataRaw
func MakeTLInputMediaBizDataRaw(data2 *InputMedia) *TLInputMediaBizDataRaw {
	if data2 == nil {
		return &TLInputMediaBizDataRaw{Data2: &InputMedia{
			PredicateName: Predicate_inputMediaBizDataRaw,
		}}
	} else {
		data2.PredicateName = Predicate_inputMediaBizDataRaw
		return &TLInputMediaBizDataRaw{Data2: data2}
	}
}

func (m *TLInputMediaBizDataRaw) To_InputMedia() *InputMedia {
	m.Data2.PredicateName = Predicate_inputMediaBizDataRaw
	return m.Data2
}

func (m *TLInputMediaBizDataRaw) SetBizData(v *BizDataRaw) { m.Data2.BizData = v }
func (m *TLInputMediaBizDataRaw) GetBizData() *BizDataRaw  { return m.Data2.BizData }

func (m *TLInputMediaBizDataRaw) GetPredicateName() string {
	return Predicate_inputMediaBizDataRaw
}

func (m *TLInputMediaBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbe95ee1a: func() []byte {
			x.UInt(0xbe95ee1a)

			x.Bytes(m.GetBizData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMediaBizDataRaw, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMediaBizDataRaw, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMediaBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMediaBizDataRaw) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbe95ee1a: func() error {

			m37 := &BizDataRaw{}
			m37.Decode(dBuf)
			m.SetBizData(m37)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMediaBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// User <--
//  + TL_UserEmpty
//  + TL_User
//

func (m *User) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_userEmpty:
		t := m.To_UserEmpty()
		xBuf = t.Encode(layer)
	case Predicate_user:
		t := m.To_User()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *User) CalcByteSize(layer int32) int {
	return 0
}

func (m *User) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd3bc4b7a:
		m2 := MakeTLUserEmpty(m)
		m2.Decode(dBuf)
	case 0x3ff6ecb0:
		m2 := MakeTLUser(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *User) DebugString() string {
	switch m.PredicateName {
	case Predicate_userEmpty:
		t := m.To_UserEmpty()
		return t.DebugString()
	case Predicate_user:
		t := m.To_User()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UserEmpty
func (m *User) To_UserEmpty() *TLUserEmpty {
	m.PredicateName = Predicate_userEmpty
	return &TLUserEmpty{
		Data2: m,
	}
}

// To_User
func (m *User) To_User() *TLUser {
	m.PredicateName = Predicate_user
	return &TLUser{
		Data2: m,
	}
}

// MakeTLUserEmpty
func MakeTLUserEmpty(data2 *User) *TLUserEmpty {
	if data2 == nil {
		return &TLUserEmpty{Data2: &User{
			PredicateName: Predicate_userEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_userEmpty
		return &TLUserEmpty{Data2: data2}
	}
}

func (m *TLUserEmpty) To_User() *User {
	m.Data2.PredicateName = Predicate_userEmpty
	return m.Data2
}

func (m *TLUserEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLUserEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLUserEmpty) GetPredicateName() string {
	return Predicate_userEmpty
}

func (m *TLUserEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd3bc4b7a: func() []byte {
			x.UInt(0xd3bc4b7a)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd3bc4b7a: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUser
func MakeTLUser(data2 *User) *TLUser {
	if data2 == nil {
		return &TLUser{Data2: &User{
			PredicateName: Predicate_user,
		}}
	} else {
		data2.PredicateName = Predicate_user
		return &TLUser{Data2: data2}
	}
}

func (m *TLUser) To_User() *User {
	m.Data2.PredicateName = Predicate_user
	return m.Data2
}

//// flags
func (m *TLUser) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLUser) GetSelf() bool  { return m.Data2.Self }

func (m *TLUser) SetContact(v bool) { m.Data2.Contact = v }
func (m *TLUser) GetContact() bool  { return m.Data2.Contact }

func (m *TLUser) SetMutualContact(v bool) { m.Data2.MutualContact = v }
func (m *TLUser) GetMutualContact() bool  { return m.Data2.MutualContact }

func (m *TLUser) SetDeleted(v bool) { m.Data2.Deleted = v }
func (m *TLUser) GetDeleted() bool  { return m.Data2.Deleted }

func (m *TLUser) SetBot(v bool) { m.Data2.Bot = v }
func (m *TLUser) GetBot() bool  { return m.Data2.Bot }

func (m *TLUser) SetBotChatHistory(v bool) { m.Data2.BotChatHistory = v }
func (m *TLUser) GetBotChatHistory() bool  { return m.Data2.BotChatHistory }

func (m *TLUser) SetBotNochats(v bool) { m.Data2.BotNochats = v }
func (m *TLUser) GetBotNochats() bool  { return m.Data2.BotNochats }

func (m *TLUser) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLUser) GetVerified() bool  { return m.Data2.Verified }

func (m *TLUser) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLUser) GetRestricted() bool  { return m.Data2.Restricted }

func (m *TLUser) SetMin(v bool) { m.Data2.Min = v }
func (m *TLUser) GetMin() bool  { return m.Data2.Min }

func (m *TLUser) SetBotInlineGeo(v bool) { m.Data2.BotInlineGeo = v }
func (m *TLUser) GetBotInlineGeo() bool  { return m.Data2.BotInlineGeo }

func (m *TLUser) SetSupport(v bool) { m.Data2.Support = v }
func (m *TLUser) GetSupport() bool  { return m.Data2.Support }

func (m *TLUser) SetScam(v bool) { m.Data2.Scam = v }
func (m *TLUser) GetScam() bool  { return m.Data2.Scam }

func (m *TLUser) SetApplyMinPhoto(v bool) { m.Data2.ApplyMinPhoto = v }
func (m *TLUser) GetApplyMinPhoto() bool  { return m.Data2.ApplyMinPhoto }

func (m *TLUser) SetFake(v bool) { m.Data2.Fake = v }
func (m *TLUser) GetFake() bool  { return m.Data2.Fake }

func (m *TLUser) SetId(v int64) { m.Data2.Id = v }
func (m *TLUser) GetId() int64  { return m.Data2.Id }

func (m *TLUser) SetAccessHash(v *types.Int64Value) { m.Data2.AccessHash = v }
func (m *TLUser) GetAccessHash() *types.Int64Value  { return m.Data2.AccessHash }

func (m *TLUser) SetFirstName(v *types.StringValue) { m.Data2.FirstName = v }
func (m *TLUser) GetFirstName() *types.StringValue  { return m.Data2.FirstName }

func (m *TLUser) SetLastName(v *types.StringValue) { m.Data2.LastName = v }
func (m *TLUser) GetLastName() *types.StringValue  { return m.Data2.LastName }

func (m *TLUser) SetUsername(v *types.StringValue) { m.Data2.Username = v }
func (m *TLUser) GetUsername() *types.StringValue  { return m.Data2.Username }

func (m *TLUser) SetPhone(v *types.StringValue) { m.Data2.Phone = v }
func (m *TLUser) GetPhone() *types.StringValue  { return m.Data2.Phone }

func (m *TLUser) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUser) GetPhoto() *UserProfilePhoto  { return m.Data2.Photo }

func (m *TLUser) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUser) GetStatus() *UserStatus  { return m.Data2.Status }

func (m *TLUser) SetBotInfoVersion(v *types.Int32Value) { m.Data2.BotInfoVersion = v }
func (m *TLUser) GetBotInfoVersion() *types.Int32Value  { return m.Data2.BotInfoVersion }

func (m *TLUser) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason = v }
func (m *TLUser) GetRestrictionReason() []*RestrictionReason  { return m.Data2.RestrictionReason }

func (m *TLUser) SetBotInlinePlaceholder(v *types.StringValue) { m.Data2.BotInlinePlaceholder = v }
func (m *TLUser) GetBotInlinePlaceholder() *types.StringValue  { return m.Data2.BotInlinePlaceholder }

func (m *TLUser) SetLangCode(v *types.StringValue) { m.Data2.LangCode = v }
func (m *TLUser) GetLangCode() *types.StringValue  { return m.Data2.LangCode }

func (m *TLUser) GetPredicateName() string {
	return Predicate_user
}

func (m *TLUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3ff6ecb0: func() []byte {
			x.UInt(0x3ff6ecb0)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSelf() == true {
					flags |= 1 << 10
				}
				if m.GetContact() == true {
					flags |= 1 << 11
				}
				if m.GetMutualContact() == true {
					flags |= 1 << 12
				}
				if m.GetDeleted() == true {
					flags |= 1 << 13
				}
				if m.GetBot() == true {
					flags |= 1 << 14
				}
				if m.GetBotChatHistory() == true {
					flags |= 1 << 15
				}
				if m.GetBotNochats() == true {
					flags |= 1 << 16
				}
				if m.GetVerified() == true {
					flags |= 1 << 17
				}
				if m.GetRestricted() == true {
					flags |= 1 << 18
				}
				if m.GetMin() == true {
					flags |= 1 << 20
				}
				if m.GetBotInlineGeo() == true {
					flags |= 1 << 21
				}
				if m.GetSupport() == true {
					flags |= 1 << 23
				}
				if m.GetScam() == true {
					flags |= 1 << 24
				}
				if m.GetApplyMinPhoto() == true {
					flags |= 1 << 25
				}
				if m.GetFake() == true {
					flags |= 1 << 26
				}

				if m.GetAccessHash() != nil {
					flags |= 1 << 0
				}
				if m.GetFirstName() != nil {
					flags |= 1 << 1
				}
				if m.GetLastName() != nil {
					flags |= 1 << 2
				}
				if m.GetUsername() != nil {
					flags |= 1 << 3
				}
				if m.GetPhone() != nil {
					flags |= 1 << 4
				}
				if m.GetPhoto() != nil {
					flags |= 1 << 5
				}
				if m.GetStatus() != nil {
					flags |= 1 << 6
				}
				if m.GetBotInfoVersion() != nil {
					flags |= 1 << 14
				}
				if m.GetRestrictionReason() != nil {
					flags |= 1 << 18
				}
				if m.GetBotInlinePlaceholder() != nil {
					flags |= 1 << 19
				}
				if m.GetLangCode() != nil {
					flags |= 1 << 22
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			if m.GetAccessHash() != nil {
				x.Long(m.GetAccessHash().Value)
			}

			if m.GetFirstName() != nil {
				x.String(m.GetFirstName().Value)
			}

			if m.GetLastName() != nil {
				x.String(m.GetLastName().Value)
			}

			if m.GetUsername() != nil {
				x.String(m.GetUsername().Value)
			}

			if m.GetPhone() != nil {
				x.String(m.GetPhone().Value)
			}

			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			if m.GetStatus() != nil {
				x.Bytes(m.GetStatus().Encode(layer))
			}

			if m.GetBotInfoVersion() != nil {
				x.Int(m.GetBotInfoVersion().Value)
			}

			if m.GetRestrictionReason() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRestrictionReason())))
				for _, v := range m.GetRestrictionReason() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetBotInlinePlaceholder() != nil {
				x.String(m.GetBotInlinePlaceholder().Value)
			}

			if m.GetLangCode() != nil {
				x.String(m.GetLangCode().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_user, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_user, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3ff6ecb0: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 10)) != 0 {
				m.SetSelf(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetContact(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetMutualContact(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetDeleted(true)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetBot(true)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetBotChatHistory(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetBotNochats(true)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetVerified(true)
			}
			if (flags & (1 << 18)) != 0 {
				m.SetRestricted(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 21)) != 0 {
				m.SetBotInlineGeo(true)
			}
			if (flags & (1 << 23)) != 0 {
				m.SetSupport(true)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetScam(true)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetApplyMinPhoto(true)
			}
			if (flags & (1 << 26)) != 0 {
				m.SetFake(true)
			}
			m.SetId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetAccessHash(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetFirstName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetLastName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetUsername(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetPhone(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 5)) != 0 {
				m22 := &UserProfilePhoto{}
				m22.Decode(dBuf)
				m.SetPhoto(m22)
			}
			if (flags & (1 << 6)) != 0 {
				m23 := &UserStatus{}
				m23.Decode(dBuf)
				m.SetStatus(m23)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetBotInfoVersion(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 18)) != 0 {
				c25 := dBuf.Int()
				if c25 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 25, c25)
					return dBuf.GetError()
				}
				l25 := dBuf.Int()
				v25 := make([]*RestrictionReason, l25)
				for i := int32(0); i < l25; i++ {
					v25[i] = &RestrictionReason{}
					v25[i].Decode(dBuf)
				}
				m.SetRestrictionReason(v25)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetBotInlinePlaceholder(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 22)) != 0 {
				m.SetLangCode(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Photo <--
//  + TL_PhotoEmpty
//  + TL_Photo
//

func (m *Photo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_photoEmpty:
		t := m.To_PhotoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_photo:
		t := m.To_Photo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Photo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Photo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x2331b22d:
		m2 := MakeTLPhotoEmpty(m)
		m2.Decode(dBuf)
	case 0xfb197a65:
		m2 := MakeTLPhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Photo) DebugString() string {
	switch m.PredicateName {
	case Predicate_photoEmpty:
		t := m.To_PhotoEmpty()
		return t.DebugString()
	case Predicate_photo:
		t := m.To_Photo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhotoEmpty
func (m *Photo) To_PhotoEmpty() *TLPhotoEmpty {
	m.PredicateName = Predicate_photoEmpty
	return &TLPhotoEmpty{
		Data2: m,
	}
}

// To_Photo
func (m *Photo) To_Photo() *TLPhoto {
	m.PredicateName = Predicate_photo
	return &TLPhoto{
		Data2: m,
	}
}

// MakeTLPhotoEmpty
func MakeTLPhotoEmpty(data2 *Photo) *TLPhotoEmpty {
	if data2 == nil {
		return &TLPhotoEmpty{Data2: &Photo{
			PredicateName: Predicate_photoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_photoEmpty
		return &TLPhotoEmpty{Data2: data2}
	}
}

func (m *TLPhotoEmpty) To_Photo() *Photo {
	m.Data2.PredicateName = Predicate_photoEmpty
	return m.Data2
}

func (m *TLPhotoEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhotoEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLPhotoEmpty) GetPredicateName() string {
	return Predicate_photoEmpty
}

func (m *TLPhotoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2331b22d: func() []byte {
			x.UInt(0x2331b22d)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2331b22d: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhoto
func MakeTLPhoto(data2 *Photo) *TLPhoto {
	if data2 == nil {
		return &TLPhoto{Data2: &Photo{
			PredicateName: Predicate_photo,
		}}
	} else {
		data2.PredicateName = Predicate_photo
		return &TLPhoto{Data2: data2}
	}
}

func (m *TLPhoto) To_Photo() *Photo {
	m.Data2.PredicateName = Predicate_photo
	return m.Data2
}

//// flags
func (m *TLPhoto) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhoto) GetHasStickers() bool  { return m.Data2.HasStickers }

func (m *TLPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoto) GetId() int64  { return m.Data2.Id }

func (m *TLPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoto) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPhoto) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLPhoto) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoto) GetDate() int32  { return m.Data2.Date }

func (m *TLPhoto) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhoto) GetSizes() []*PhotoSize  { return m.Data2.Sizes }

func (m *TLPhoto) SetVideoSizes(v []*VideoSize) { m.Data2.VideoSizes = v }
func (m *TLPhoto) GetVideoSizes() []*VideoSize  { return m.Data2.VideoSizes }

func (m *TLPhoto) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLPhoto) GetDcId() int32  { return m.Data2.DcId }

func (m *TLPhoto) GetPredicateName() string {
	return Predicate_photo
}

func (m *TLPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfb197a65: func() []byte {
			x.UInt(0xfb197a65)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHasStickers() == true {
					flags |= 1 << 0
				}

				if m.GetVideoSizes() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			x.Int(m.GetDate())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSizes())))
			for _, v := range m.GetSizes() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetVideoSizes() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetVideoSizes())))
				for _, v := range m.GetVideoSizes() {
					x.Bytes((*v).Encode(layer))
				}
			}
			x.Int(m.GetDcId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfb197a65: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHasStickers(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			m.SetDate(dBuf.Int())
			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*PhotoSize, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &PhotoSize{}
				v6[i].Decode(dBuf)
			}
			m.SetSizes(v6)

			if (flags & (1 << 1)) != 0 {
				c7 := dBuf.Int()
				if c7 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
					return dBuf.GetError()
				}
				l7 := dBuf.Int()
				v7 := make([]*VideoSize, l7)
				for i := int32(0); i < l7; i++ {
					v7[i] = &VideoSize{}
					v7[i].Decode(dBuf)
				}
				m.SetVideoSizes(v7)
			}
			m.SetDcId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// KeyboardButtonRow <--
//  + TL_KeyboardButtonRow
//

func (m *KeyboardButtonRow) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_keyboardButtonRow:
		t := m.To_KeyboardButtonRow()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *KeyboardButtonRow) CalcByteSize(layer int32) int {
	return 0
}

func (m *KeyboardButtonRow) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x77608b83:
		m2 := MakeTLKeyboardButtonRow(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *KeyboardButtonRow) DebugString() string {
	switch m.PredicateName {
	case Predicate_keyboardButtonRow:
		t := m.To_KeyboardButtonRow()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_KeyboardButtonRow
func (m *KeyboardButtonRow) To_KeyboardButtonRow() *TLKeyboardButtonRow {
	m.PredicateName = Predicate_keyboardButtonRow
	return &TLKeyboardButtonRow{
		Data2: m,
	}
}

// MakeTLKeyboardButtonRow
func MakeTLKeyboardButtonRow(data2 *KeyboardButtonRow) *TLKeyboardButtonRow {
	if data2 == nil {
		return &TLKeyboardButtonRow{Data2: &KeyboardButtonRow{
			PredicateName: Predicate_keyboardButtonRow,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonRow
		return &TLKeyboardButtonRow{Data2: data2}
	}
}

func (m *TLKeyboardButtonRow) To_KeyboardButtonRow() *KeyboardButtonRow {
	m.Data2.PredicateName = Predicate_keyboardButtonRow
	return m.Data2
}

func (m *TLKeyboardButtonRow) SetButtons(v []*KeyboardButton) { m.Data2.Buttons = v }
func (m *TLKeyboardButtonRow) GetButtons() []*KeyboardButton  { return m.Data2.Buttons }

func (m *TLKeyboardButtonRow) GetPredicateName() string {
	return Predicate_keyboardButtonRow
}

func (m *TLKeyboardButtonRow) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x77608b83: func() []byte {
			x.UInt(0x77608b83)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetButtons())))
			for _, v := range m.GetButtons() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonRow, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonRow, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonRow) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonRow) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x77608b83: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*KeyboardButton, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &KeyboardButton{}
				v0[i].Decode(dBuf)
			}
			m.SetButtons(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonRow) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_BotResults <--
//  + TL_MessagesBotResults
//

func (m *Messages_BotResults) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_botResults:
		t := m.To_MessagesBotResults()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_BotResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_BotResults) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x947ca848:
		m2 := MakeTLMessagesBotResults(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_BotResults) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_botResults:
		t := m.To_MessagesBotResults()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesBotResults
func (m *Messages_BotResults) To_MessagesBotResults() *TLMessagesBotResults {
	m.PredicateName = Predicate_messages_botResults
	return &TLMessagesBotResults{
		Data2: m,
	}
}

// MakeTLMessagesBotResults
func MakeTLMessagesBotResults(data2 *Messages_BotResults) *TLMessagesBotResults {
	if data2 == nil {
		return &TLMessagesBotResults{Data2: &Messages_BotResults{
			PredicateName: Predicate_messages_botResults,
		}}
	} else {
		data2.PredicateName = Predicate_messages_botResults
		return &TLMessagesBotResults{Data2: data2}
	}
}

func (m *TLMessagesBotResults) To_Messages_BotResults() *Messages_BotResults {
	m.Data2.PredicateName = Predicate_messages_botResults
	return m.Data2
}

//// flags
func (m *TLMessagesBotResults) SetGallery(v bool) { m.Data2.Gallery = v }
func (m *TLMessagesBotResults) GetGallery() bool  { return m.Data2.Gallery }

func (m *TLMessagesBotResults) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLMessagesBotResults) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLMessagesBotResults) SetNextOffset(v *types.StringValue) { m.Data2.NextOffset = v }
func (m *TLMessagesBotResults) GetNextOffset() *types.StringValue  { return m.Data2.NextOffset }

func (m *TLMessagesBotResults) SetSwitchPm(v *InlineBotSwitchPM) { m.Data2.SwitchPm = v }
func (m *TLMessagesBotResults) GetSwitchPm() *InlineBotSwitchPM  { return m.Data2.SwitchPm }

func (m *TLMessagesBotResults) SetResults(v []*BotInlineResult) { m.Data2.Results = v }
func (m *TLMessagesBotResults) GetResults() []*BotInlineResult  { return m.Data2.Results }

func (m *TLMessagesBotResults) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotResults) GetCacheTime() int32  { return m.Data2.CacheTime }

func (m *TLMessagesBotResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesBotResults) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesBotResults) GetPredicateName() string {
	return Predicate_messages_botResults
}

func (m *TLMessagesBotResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x947ca848: func() []byte {
			x.UInt(0x947ca848)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetGallery() == true {
					flags |= 1 << 0
				}

				if m.GetNextOffset() != nil {
					flags |= 1 << 1
				}
				if m.GetSwitchPm() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetQueryId())
			if m.GetNextOffset() != nil {
				x.String(m.GetNextOffset().Value)
			}

			if m.GetSwitchPm() != nil {
				x.Bytes(m.GetSwitchPm().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetResults())))
			for _, v := range m.GetResults() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetCacheTime())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_botResults, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_botResults, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesBotResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesBotResults) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x947ca848: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetGallery(true)
			}
			m.SetQueryId(dBuf.Long())
			if (flags & (1 << 1)) != 0 {
				m.SetNextOffset(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m4 := &InlineBotSwitchPM{}
				m4.Decode(dBuf)
				m.SetSwitchPm(m4)
			}
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*BotInlineResult, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &BotInlineResult{}
				v5[i].Decode(dBuf)
			}
			m.SetResults(v5)

			m.SetCacheTime(dBuf.Int())
			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*User, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &User{}
				v7[i].Decode(dBuf)
			}
			m.SetUsers(v7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesBotResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DialogFilter <--
//  + TL_DialogFilter
//

func (m *DialogFilter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dialogFilter:
		t := m.To_DialogFilter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DialogFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *DialogFilter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7438f7e8:
		m2 := MakeTLDialogFilter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DialogFilter) DebugString() string {
	switch m.PredicateName {
	case Predicate_dialogFilter:
		t := m.To_DialogFilter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DialogFilter
func (m *DialogFilter) To_DialogFilter() *TLDialogFilter {
	m.PredicateName = Predicate_dialogFilter
	return &TLDialogFilter{
		Data2: m,
	}
}

// MakeTLDialogFilter
func MakeTLDialogFilter(data2 *DialogFilter) *TLDialogFilter {
	if data2 == nil {
		return &TLDialogFilter{Data2: &DialogFilter{
			PredicateName: Predicate_dialogFilter,
		}}
	} else {
		data2.PredicateName = Predicate_dialogFilter
		return &TLDialogFilter{Data2: data2}
	}
}

func (m *TLDialogFilter) To_DialogFilter() *DialogFilter {
	m.Data2.PredicateName = Predicate_dialogFilter
	return m.Data2
}

//// flags
func (m *TLDialogFilter) SetContacts(v bool) { m.Data2.Contacts = v }
func (m *TLDialogFilter) GetContacts() bool  { return m.Data2.Contacts }

func (m *TLDialogFilter) SetNonContacts(v bool) { m.Data2.NonContacts = v }
func (m *TLDialogFilter) GetNonContacts() bool  { return m.Data2.NonContacts }

func (m *TLDialogFilter) SetGroups(v bool) { m.Data2.Groups = v }
func (m *TLDialogFilter) GetGroups() bool  { return m.Data2.Groups }

func (m *TLDialogFilter) SetBroadcasts(v bool) { m.Data2.Broadcasts = v }
func (m *TLDialogFilter) GetBroadcasts() bool  { return m.Data2.Broadcasts }

func (m *TLDialogFilter) SetBots(v bool) { m.Data2.Bots = v }
func (m *TLDialogFilter) GetBots() bool  { return m.Data2.Bots }

func (m *TLDialogFilter) SetExcludeMuted(v bool) { m.Data2.ExcludeMuted = v }
func (m *TLDialogFilter) GetExcludeMuted() bool  { return m.Data2.ExcludeMuted }

func (m *TLDialogFilter) SetExcludeRead(v bool) { m.Data2.ExcludeRead = v }
func (m *TLDialogFilter) GetExcludeRead() bool  { return m.Data2.ExcludeRead }

func (m *TLDialogFilter) SetExcludeArchived(v bool) { m.Data2.ExcludeArchived = v }
func (m *TLDialogFilter) GetExcludeArchived() bool  { return m.Data2.ExcludeArchived }

func (m *TLDialogFilter) SetId(v int32) { m.Data2.Id = v }
func (m *TLDialogFilter) GetId() int32  { return m.Data2.Id }

func (m *TLDialogFilter) SetTitle(v string) { m.Data2.Title = v }
func (m *TLDialogFilter) GetTitle() string  { return m.Data2.Title }

func (m *TLDialogFilter) SetEmoticon(v *types.StringValue) { m.Data2.Emoticon = v }
func (m *TLDialogFilter) GetEmoticon() *types.StringValue  { return m.Data2.Emoticon }

func (m *TLDialogFilter) SetPinnedPeers(v []*InputPeer) { m.Data2.PinnedPeers = v }
func (m *TLDialogFilter) GetPinnedPeers() []*InputPeer  { return m.Data2.PinnedPeers }

func (m *TLDialogFilter) SetIncludePeers(v []*InputPeer) { m.Data2.IncludePeers = v }
func (m *TLDialogFilter) GetIncludePeers() []*InputPeer  { return m.Data2.IncludePeers }

func (m *TLDialogFilter) SetExcludePeers(v []*InputPeer) { m.Data2.ExcludePeers = v }
func (m *TLDialogFilter) GetExcludePeers() []*InputPeer  { return m.Data2.ExcludePeers }

func (m *TLDialogFilter) GetPredicateName() string {
	return Predicate_dialogFilter
}

func (m *TLDialogFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7438f7e8: func() []byte {
			x.UInt(0x7438f7e8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetContacts() == true {
					flags |= 1 << 0
				}
				if m.GetNonContacts() == true {
					flags |= 1 << 1
				}
				if m.GetGroups() == true {
					flags |= 1 << 2
				}
				if m.GetBroadcasts() == true {
					flags |= 1 << 3
				}
				if m.GetBots() == true {
					flags |= 1 << 4
				}
				if m.GetExcludeMuted() == true {
					flags |= 1 << 11
				}
				if m.GetExcludeRead() == true {
					flags |= 1 << 12
				}
				if m.GetExcludeArchived() == true {
					flags |= 1 << 13
				}

				if m.GetEmoticon() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.String(m.GetTitle())
			if m.GetEmoticon() != nil {
				x.String(m.GetEmoticon().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPinnedPeers())))
			for _, v := range m.GetPinnedPeers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetIncludePeers())))
			for _, v := range m.GetIncludePeers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetExcludePeers())))
			for _, v := range m.GetExcludePeers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialogFilter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialogFilter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialogFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialogFilter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7438f7e8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetContacts(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetNonContacts(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetGroups(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetBroadcasts(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetBots(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetExcludeMuted(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetExcludeRead(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetExcludeArchived(true)
			}
			m.SetId(dBuf.Int())
			m.SetTitle(dBuf.String())
			if (flags & (1 << 25)) != 0 {
				m.SetEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			c12 := dBuf.Int()
			if c12 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 12, c12)
				return dBuf.GetError()
			}
			l12 := dBuf.Int()
			v12 := make([]*InputPeer, l12)
			for i := int32(0); i < l12; i++ {
				v12[i] = &InputPeer{}
				v12[i].Decode(dBuf)
			}
			m.SetPinnedPeers(v12)

			c13 := dBuf.Int()
			if c13 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 13, c13)
				return dBuf.GetError()
			}
			l13 := dBuf.Int()
			v13 := make([]*InputPeer, l13)
			for i := int32(0); i < l13; i++ {
				v13[i] = &InputPeer{}
				v13[i].Decode(dBuf)
			}
			m.SetIncludePeers(v13)

			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*InputPeer, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &InputPeer{}
				v14[i].Decode(dBuf)
			}
			m.SetExcludePeers(v14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialogFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatParticipant <--
//  + TL_ChatParticipant
//  + TL_ChatParticipantCreator
//  + TL_ChatParticipantAdmin
//

func (m *ChatParticipant) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatParticipant:
		t := m.To_ChatParticipant()
		xBuf = t.Encode(layer)
	case Predicate_chatParticipantCreator:
		t := m.To_ChatParticipantCreator()
		xBuf = t.Encode(layer)
	case Predicate_chatParticipantAdmin:
		t := m.To_ChatParticipantAdmin()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatParticipant) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc02d4007:
		m2 := MakeTLChatParticipant(m)
		m2.Decode(dBuf)
	case 0xe46bcee4:
		m2 := MakeTLChatParticipantCreator(m)
		m2.Decode(dBuf)
	case 0xa0933f5b:
		m2 := MakeTLChatParticipantAdmin(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatParticipant) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatParticipant:
		t := m.To_ChatParticipant()
		return t.DebugString()
	case Predicate_chatParticipantCreator:
		t := m.To_ChatParticipantCreator()
		return t.DebugString()
	case Predicate_chatParticipantAdmin:
		t := m.To_ChatParticipantAdmin()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatParticipant
func (m *ChatParticipant) To_ChatParticipant() *TLChatParticipant {
	m.PredicateName = Predicate_chatParticipant
	return &TLChatParticipant{
		Data2: m,
	}
}

// To_ChatParticipantCreator
func (m *ChatParticipant) To_ChatParticipantCreator() *TLChatParticipantCreator {
	m.PredicateName = Predicate_chatParticipantCreator
	return &TLChatParticipantCreator{
		Data2: m,
	}
}

// To_ChatParticipantAdmin
func (m *ChatParticipant) To_ChatParticipantAdmin() *TLChatParticipantAdmin {
	m.PredicateName = Predicate_chatParticipantAdmin
	return &TLChatParticipantAdmin{
		Data2: m,
	}
}

// MakeTLChatParticipant
func MakeTLChatParticipant(data2 *ChatParticipant) *TLChatParticipant {
	if data2 == nil {
		return &TLChatParticipant{Data2: &ChatParticipant{
			PredicateName: Predicate_chatParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_chatParticipant
		return &TLChatParticipant{Data2: data2}
	}
}

func (m *TLChatParticipant) To_ChatParticipant() *ChatParticipant {
	m.Data2.PredicateName = Predicate_chatParticipant
	return m.Data2
}

func (m *TLChatParticipant) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChatParticipant) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChatParticipant) SetInviterId(v int64) { m.Data2.InviterId = v }
func (m *TLChatParticipant) GetInviterId() int64  { return m.Data2.InviterId }

func (m *TLChatParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipant) GetDate() int32  { return m.Data2.Date }

func (m *TLChatParticipant) GetPredicateName() string {
	return Predicate_chatParticipant
}

func (m *TLChatParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc02d4007: func() []byte {
			x.UInt(0xc02d4007)

			x.Long(m.GetUserId())
			x.Long(m.GetInviterId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc02d4007: func() error {
			m.SetUserId(dBuf.Long())
			m.SetInviterId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatParticipantCreator
func MakeTLChatParticipantCreator(data2 *ChatParticipant) *TLChatParticipantCreator {
	if data2 == nil {
		return &TLChatParticipantCreator{Data2: &ChatParticipant{
			PredicateName: Predicate_chatParticipantCreator,
		}}
	} else {
		data2.PredicateName = Predicate_chatParticipantCreator
		return &TLChatParticipantCreator{Data2: data2}
	}
}

func (m *TLChatParticipantCreator) To_ChatParticipant() *ChatParticipant {
	m.Data2.PredicateName = Predicate_chatParticipantCreator
	return m.Data2
}

func (m *TLChatParticipantCreator) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChatParticipantCreator) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChatParticipantCreator) GetPredicateName() string {
	return Predicate_chatParticipantCreator
}

func (m *TLChatParticipantCreator) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe46bcee4: func() []byte {
			x.UInt(0xe46bcee4)

			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatParticipantCreator, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatParticipantCreator, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatParticipantCreator) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatParticipantCreator) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe46bcee4: func() error {
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatParticipantCreator) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatParticipantAdmin
func MakeTLChatParticipantAdmin(data2 *ChatParticipant) *TLChatParticipantAdmin {
	if data2 == nil {
		return &TLChatParticipantAdmin{Data2: &ChatParticipant{
			PredicateName: Predicate_chatParticipantAdmin,
		}}
	} else {
		data2.PredicateName = Predicate_chatParticipantAdmin
		return &TLChatParticipantAdmin{Data2: data2}
	}
}

func (m *TLChatParticipantAdmin) To_ChatParticipant() *ChatParticipant {
	m.Data2.PredicateName = Predicate_chatParticipantAdmin
	return m.Data2
}

func (m *TLChatParticipantAdmin) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChatParticipantAdmin) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChatParticipantAdmin) SetInviterId(v int64) { m.Data2.InviterId = v }
func (m *TLChatParticipantAdmin) GetInviterId() int64  { return m.Data2.InviterId }

func (m *TLChatParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipantAdmin) GetDate() int32  { return m.Data2.Date }

func (m *TLChatParticipantAdmin) GetPredicateName() string {
	return Predicate_chatParticipantAdmin
}

func (m *TLChatParticipantAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa0933f5b: func() []byte {
			x.UInt(0xa0933f5b)

			x.Long(m.GetUserId())
			x.Long(m.GetInviterId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatParticipantAdmin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatParticipantAdmin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatParticipantAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatParticipantAdmin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa0933f5b: func() error {
			m.SetUserId(dBuf.Long())
			m.SetInviterId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatParticipantAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contact <--
//  + TL_Contact
//

func (m *Contact) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contact:
		t := m.To_Contact()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contact) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contact) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x145ade0b:
		m2 := MakeTLContact(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contact) DebugString() string {
	switch m.PredicateName {
	case Predicate_contact:
		t := m.To_Contact()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Contact
func (m *Contact) To_Contact() *TLContact {
	m.PredicateName = Predicate_contact
	return &TLContact{
		Data2: m,
	}
}

// MakeTLContact
func MakeTLContact(data2 *Contact) *TLContact {
	if data2 == nil {
		return &TLContact{Data2: &Contact{
			PredicateName: Predicate_contact,
		}}
	} else {
		data2.PredicateName = Predicate_contact
		return &TLContact{Data2: data2}
	}
}

func (m *TLContact) To_Contact() *Contact {
	m.Data2.PredicateName = Predicate_contact
	return m.Data2
}

func (m *TLContact) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLContact) GetUserId() int64  { return m.Data2.UserId }

func (m *TLContact) SetMutual(v *Bool) { m.Data2.Mutual = v }
func (m *TLContact) GetMutual() *Bool  { return m.Data2.Mutual }

func (m *TLContact) GetPredicateName() string {
	return Predicate_contact
}

func (m *TLContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x145ade0b: func() []byte {
			x.UInt(0x145ade0b)

			x.Long(m.GetUserId())
			x.Bytes(m.GetMutual().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x145ade0b: func() error {
			m.SetUserId(dBuf.Long())

			m1 := &Bool{}
			m1.Decode(dBuf)
			m.SetMutual(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedHistory <--
//  + TL_MessagesAffectedHistory
//

func (m *Messages_AffectedHistory) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_affectedHistory:
		t := m.To_MessagesAffectedHistory()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_AffectedHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_AffectedHistory) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb45c69d1:
		m2 := MakeTLMessagesAffectedHistory(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_AffectedHistory) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_affectedHistory:
		t := m.To_MessagesAffectedHistory()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesAffectedHistory
func (m *Messages_AffectedHistory) To_MessagesAffectedHistory() *TLMessagesAffectedHistory {
	m.PredicateName = Predicate_messages_affectedHistory
	return &TLMessagesAffectedHistory{
		Data2: m,
	}
}

// MakeTLMessagesAffectedHistory
func MakeTLMessagesAffectedHistory(data2 *Messages_AffectedHistory) *TLMessagesAffectedHistory {
	if data2 == nil {
		return &TLMessagesAffectedHistory{Data2: &Messages_AffectedHistory{
			PredicateName: Predicate_messages_affectedHistory,
		}}
	} else {
		data2.PredicateName = Predicate_messages_affectedHistory
		return &TLMessagesAffectedHistory{Data2: data2}
	}
}

func (m *TLMessagesAffectedHistory) To_Messages_AffectedHistory() *Messages_AffectedHistory {
	m.Data2.PredicateName = Predicate_messages_affectedHistory
	return m.Data2
}

func (m *TLMessagesAffectedHistory) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedHistory) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesAffectedHistory) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedHistory) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLMessagesAffectedHistory) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessagesAffectedHistory) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessagesAffectedHistory) GetPredicateName() string {
	return Predicate_messages_affectedHistory
}

func (m *TLMessagesAffectedHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb45c69d1: func() []byte {
			x.UInt(0xb45c69d1)

			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetOffset())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_affectedHistory, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_affectedHistory, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAffectedHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAffectedHistory) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb45c69d1: func() error {
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetOffset(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAffectedHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ArchivedStickers <--
//  + TL_MessagesArchivedStickers
//

func (m *Messages_ArchivedStickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_archivedStickers:
		t := m.To_MessagesArchivedStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ArchivedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ArchivedStickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4fcba9c8:
		m2 := MakeTLMessagesArchivedStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ArchivedStickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_archivedStickers:
		t := m.To_MessagesArchivedStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesArchivedStickers
func (m *Messages_ArchivedStickers) To_MessagesArchivedStickers() *TLMessagesArchivedStickers {
	m.PredicateName = Predicate_messages_archivedStickers
	return &TLMessagesArchivedStickers{
		Data2: m,
	}
}

// MakeTLMessagesArchivedStickers
func MakeTLMessagesArchivedStickers(data2 *Messages_ArchivedStickers) *TLMessagesArchivedStickers {
	if data2 == nil {
		return &TLMessagesArchivedStickers{Data2: &Messages_ArchivedStickers{
			PredicateName: Predicate_messages_archivedStickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_archivedStickers
		return &TLMessagesArchivedStickers{Data2: data2}
	}
}

func (m *TLMessagesArchivedStickers) To_Messages_ArchivedStickers() *Messages_ArchivedStickers {
	m.Data2.PredicateName = Predicate_messages_archivedStickers
	return m.Data2
}

func (m *TLMessagesArchivedStickers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesArchivedStickers) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesArchivedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesArchivedStickers) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func (m *TLMessagesArchivedStickers) GetPredicateName() string {
	return Predicate_messages_archivedStickers
}

func (m *TLMessagesArchivedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4fcba9c8: func() []byte {
			x.UInt(0x4fcba9c8)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSets())))
			for _, v := range m.GetSets() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_archivedStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_archivedStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesArchivedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesArchivedStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4fcba9c8: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerSetCovered, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerSetCovered{}
				v1[i].Decode(dBuf)
			}
			m.SetSets(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesArchivedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ExportedChatInvite <--
//  + TL_MessagesExportedChatInvite
//  + TL_MessagesExportedChatInviteReplaced
//

func (m *Messages_ExportedChatInvite) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_exportedChatInvite:
		t := m.To_MessagesExportedChatInvite()
		xBuf = t.Encode(layer)
	case Predicate_messages_exportedChatInviteReplaced:
		t := m.To_MessagesExportedChatInviteReplaced()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1871be50:
		m2 := MakeTLMessagesExportedChatInvite(m)
		m2.Decode(dBuf)
	case 0x222600ef:
		m2 := MakeTLMessagesExportedChatInviteReplaced(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ExportedChatInvite) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_exportedChatInvite:
		t := m.To_MessagesExportedChatInvite()
		return t.DebugString()
	case Predicate_messages_exportedChatInviteReplaced:
		t := m.To_MessagesExportedChatInviteReplaced()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesExportedChatInvite
func (m *Messages_ExportedChatInvite) To_MessagesExportedChatInvite() *TLMessagesExportedChatInvite {
	m.PredicateName = Predicate_messages_exportedChatInvite
	return &TLMessagesExportedChatInvite{
		Data2: m,
	}
}

// To_MessagesExportedChatInviteReplaced
func (m *Messages_ExportedChatInvite) To_MessagesExportedChatInviteReplaced() *TLMessagesExportedChatInviteReplaced {
	m.PredicateName = Predicate_messages_exportedChatInviteReplaced
	return &TLMessagesExportedChatInviteReplaced{
		Data2: m,
	}
}

// MakeTLMessagesExportedChatInvite
func MakeTLMessagesExportedChatInvite(data2 *Messages_ExportedChatInvite) *TLMessagesExportedChatInvite {
	if data2 == nil {
		return &TLMessagesExportedChatInvite{Data2: &Messages_ExportedChatInvite{
			PredicateName: Predicate_messages_exportedChatInvite,
		}}
	} else {
		data2.PredicateName = Predicate_messages_exportedChatInvite
		return &TLMessagesExportedChatInvite{Data2: data2}
	}
}

func (m *TLMessagesExportedChatInvite) To_Messages_ExportedChatInvite() *Messages_ExportedChatInvite {
	m.Data2.PredicateName = Predicate_messages_exportedChatInvite
	return m.Data2
}

func (m *TLMessagesExportedChatInvite) SetInvite(v *ExportedChatInvite) { m.Data2.Invite = v }
func (m *TLMessagesExportedChatInvite) GetInvite() *ExportedChatInvite  { return m.Data2.Invite }

func (m *TLMessagesExportedChatInvite) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesExportedChatInvite) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesExportedChatInvite) GetPredicateName() string {
	return Predicate_messages_exportedChatInvite
}

func (m *TLMessagesExportedChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1871be50: func() []byte {
			x.UInt(0x1871be50)

			x.Bytes(m.GetInvite().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_exportedChatInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_exportedChatInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1871be50: func() error {

			m0 := &ExportedChatInvite{}
			m0.Decode(dBuf)
			m.SetInvite(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesExportedChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesExportedChatInviteReplaced
func MakeTLMessagesExportedChatInviteReplaced(data2 *Messages_ExportedChatInvite) *TLMessagesExportedChatInviteReplaced {
	if data2 == nil {
		return &TLMessagesExportedChatInviteReplaced{Data2: &Messages_ExportedChatInvite{
			PredicateName: Predicate_messages_exportedChatInviteReplaced,
		}}
	} else {
		data2.PredicateName = Predicate_messages_exportedChatInviteReplaced
		return &TLMessagesExportedChatInviteReplaced{Data2: data2}
	}
}

func (m *TLMessagesExportedChatInviteReplaced) To_Messages_ExportedChatInvite() *Messages_ExportedChatInvite {
	m.Data2.PredicateName = Predicate_messages_exportedChatInviteReplaced
	return m.Data2
}

func (m *TLMessagesExportedChatInviteReplaced) SetInvite(v *ExportedChatInvite) { m.Data2.Invite = v }
func (m *TLMessagesExportedChatInviteReplaced) GetInvite() *ExportedChatInvite  { return m.Data2.Invite }

func (m *TLMessagesExportedChatInviteReplaced) SetNewInvite(v *ExportedChatInvite) {
	m.Data2.NewInvite = v
}
func (m *TLMessagesExportedChatInviteReplaced) GetNewInvite() *ExportedChatInvite {
	return m.Data2.NewInvite
}

func (m *TLMessagesExportedChatInviteReplaced) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesExportedChatInviteReplaced) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesExportedChatInviteReplaced) GetPredicateName() string {
	return Predicate_messages_exportedChatInviteReplaced
}

func (m *TLMessagesExportedChatInviteReplaced) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x222600ef: func() []byte {
			x.UInt(0x222600ef)

			x.Bytes(m.GetInvite().Encode(layer))
			x.Bytes(m.GetNewInvite().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_exportedChatInviteReplaced, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_exportedChatInviteReplaced, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesExportedChatInviteReplaced) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesExportedChatInviteReplaced) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x222600ef: func() error {

			m0 := &ExportedChatInvite{}
			m0.Decode(dBuf)
			m.SetInvite(m0)

			m2 := &ExportedChatInvite{}
			m2.Decode(dBuf)
			m.SetNewInvite(m2)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesExportedChatInviteReplaced) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputGeoPoint <--
//  + TL_InputGeoPointEmpty
//  + TL_InputGeoPoint
//

func (m *InputGeoPoint) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputGeoPointEmpty:
		t := m.To_InputGeoPointEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputGeoPoint:
		t := m.To_InputGeoPoint()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputGeoPoint) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputGeoPoint) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe4c123d6:
		m2 := MakeTLInputGeoPointEmpty(m)
		m2.Decode(dBuf)
	case 0x48222faf:
		m2 := MakeTLInputGeoPoint(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputGeoPoint) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputGeoPointEmpty:
		t := m.To_InputGeoPointEmpty()
		return t.DebugString()
	case Predicate_inputGeoPoint:
		t := m.To_InputGeoPoint()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputGeoPointEmpty
func (m *InputGeoPoint) To_InputGeoPointEmpty() *TLInputGeoPointEmpty {
	m.PredicateName = Predicate_inputGeoPointEmpty
	return &TLInputGeoPointEmpty{
		Data2: m,
	}
}

// To_InputGeoPoint
func (m *InputGeoPoint) To_InputGeoPoint() *TLInputGeoPoint {
	m.PredicateName = Predicate_inputGeoPoint
	return &TLInputGeoPoint{
		Data2: m,
	}
}

// MakeTLInputGeoPointEmpty
func MakeTLInputGeoPointEmpty(data2 *InputGeoPoint) *TLInputGeoPointEmpty {
	if data2 == nil {
		return &TLInputGeoPointEmpty{Data2: &InputGeoPoint{
			PredicateName: Predicate_inputGeoPointEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputGeoPointEmpty
		return &TLInputGeoPointEmpty{Data2: data2}
	}
}

func (m *TLInputGeoPointEmpty) To_InputGeoPoint() *InputGeoPoint {
	m.Data2.PredicateName = Predicate_inputGeoPointEmpty
	return m.Data2
}

func (m *TLInputGeoPointEmpty) GetPredicateName() string {
	return Predicate_inputGeoPointEmpty
}

func (m *TLInputGeoPointEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe4c123d6: func() []byte {
			x.UInt(0xe4c123d6)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGeoPointEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGeoPointEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGeoPointEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGeoPointEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe4c123d6: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGeoPointEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputGeoPoint
func MakeTLInputGeoPoint(data2 *InputGeoPoint) *TLInputGeoPoint {
	if data2 == nil {
		return &TLInputGeoPoint{Data2: &InputGeoPoint{
			PredicateName: Predicate_inputGeoPoint,
		}}
	} else {
		data2.PredicateName = Predicate_inputGeoPoint
		return &TLInputGeoPoint{Data2: data2}
	}
}

func (m *TLInputGeoPoint) To_InputGeoPoint() *InputGeoPoint {
	m.Data2.PredicateName = Predicate_inputGeoPoint
	return m.Data2
}

//// flags
func (m *TLInputGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLInputGeoPoint) GetLat() float64  { return m.Data2.Lat }

func (m *TLInputGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLInputGeoPoint) GetLong() float64  { return m.Data2.Long }

func (m *TLInputGeoPoint) SetAccuracyRadius(v *types.Int32Value) { m.Data2.AccuracyRadius = v }
func (m *TLInputGeoPoint) GetAccuracyRadius() *types.Int32Value  { return m.Data2.AccuracyRadius }

func (m *TLInputGeoPoint) GetPredicateName() string {
	return Predicate_inputGeoPoint
}

func (m *TLInputGeoPoint) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x48222faf: func() []byte {
			x.UInt(0x48222faf)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAccuracyRadius() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Double(m.GetLat())
			x.Double(m.GetLong())
			if m.GetAccuracyRadius() != nil {
				x.Int(m.GetAccuracyRadius().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGeoPoint, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGeoPoint, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGeoPoint) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGeoPoint) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x48222faf: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetLat(dBuf.Double())
			m.SetLong(dBuf.Double())
			if (flags & (1 << 0)) != 0 {
				m.SetAccuracyRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGeoPoint) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessagesFilter <--
//  + TL_InputMessagesFilterEmpty
//  + TL_InputMessagesFilterPhotos
//  + TL_InputMessagesFilterVideo
//  + TL_InputMessagesFilterPhotoVideo
//  + TL_InputMessagesFilterDocument
//  + TL_InputMessagesFilterUrl
//  + TL_InputMessagesFilterGif
//  + TL_InputMessagesFilterVoice
//  + TL_InputMessagesFilterMusic
//  + TL_InputMessagesFilterChatPhotos
//  + TL_InputMessagesFilterPhoneCalls
//  + TL_InputMessagesFilterRoundVoice
//  + TL_InputMessagesFilterRoundVideo
//  + TL_InputMessagesFilterMyMentions
//  + TL_InputMessagesFilterGeo
//  + TL_InputMessagesFilterContacts
//  + TL_InputMessagesFilterPinned
//

func (m *MessagesFilter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputMessagesFilterEmpty:
		t := m.To_InputMessagesFilterEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterPhotos:
		t := m.To_InputMessagesFilterPhotos()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterVideo:
		t := m.To_InputMessagesFilterVideo()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterPhotoVideo:
		t := m.To_InputMessagesFilterPhotoVideo()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterDocument:
		t := m.To_InputMessagesFilterDocument()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterUrl:
		t := m.To_InputMessagesFilterUrl()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterGif:
		t := m.To_InputMessagesFilterGif()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterVoice:
		t := m.To_InputMessagesFilterVoice()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterMusic:
		t := m.To_InputMessagesFilterMusic()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterChatPhotos:
		t := m.To_InputMessagesFilterChatPhotos()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterPhoneCalls:
		t := m.To_InputMessagesFilterPhoneCalls()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterRoundVoice:
		t := m.To_InputMessagesFilterRoundVoice()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterRoundVideo:
		t := m.To_InputMessagesFilterRoundVideo()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterMyMentions:
		t := m.To_InputMessagesFilterMyMentions()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterGeo:
		t := m.To_InputMessagesFilterGeo()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterContacts:
		t := m.To_InputMessagesFilterContacts()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagesFilterPinned:
		t := m.To_InputMessagesFilterPinned()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessagesFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessagesFilter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x57e2f66c:
		m2 := MakeTLInputMessagesFilterEmpty(m)
		m2.Decode(dBuf)
	case 0x9609a51c:
		m2 := MakeTLInputMessagesFilterPhotos(m)
		m2.Decode(dBuf)
	case 0x9fc00e65:
		m2 := MakeTLInputMessagesFilterVideo(m)
		m2.Decode(dBuf)
	case 0x56e9f0e4:
		m2 := MakeTLInputMessagesFilterPhotoVideo(m)
		m2.Decode(dBuf)
	case 0x9eddf188:
		m2 := MakeTLInputMessagesFilterDocument(m)
		m2.Decode(dBuf)
	case 0x7ef0dd87:
		m2 := MakeTLInputMessagesFilterUrl(m)
		m2.Decode(dBuf)
	case 0xffc86587:
		m2 := MakeTLInputMessagesFilterGif(m)
		m2.Decode(dBuf)
	case 0x50f5c392:
		m2 := MakeTLInputMessagesFilterVoice(m)
		m2.Decode(dBuf)
	case 0x3751b49e:
		m2 := MakeTLInputMessagesFilterMusic(m)
		m2.Decode(dBuf)
	case 0x3a20ecb8:
		m2 := MakeTLInputMessagesFilterChatPhotos(m)
		m2.Decode(dBuf)
	case 0x80c99768:
		m2 := MakeTLInputMessagesFilterPhoneCalls(m)
		m2.Decode(dBuf)
	case 0x7a7c17a4:
		m2 := MakeTLInputMessagesFilterRoundVoice(m)
		m2.Decode(dBuf)
	case 0xb549da53:
		m2 := MakeTLInputMessagesFilterRoundVideo(m)
		m2.Decode(dBuf)
	case 0xc1f8e69a:
		m2 := MakeTLInputMessagesFilterMyMentions(m)
		m2.Decode(dBuf)
	case 0xe7026d0d:
		m2 := MakeTLInputMessagesFilterGeo(m)
		m2.Decode(dBuf)
	case 0xe062db83:
		m2 := MakeTLInputMessagesFilterContacts(m)
		m2.Decode(dBuf)
	case 0x1bb00451:
		m2 := MakeTLInputMessagesFilterPinned(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessagesFilter) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputMessagesFilterEmpty:
		t := m.To_InputMessagesFilterEmpty()
		return t.DebugString()
	case Predicate_inputMessagesFilterPhotos:
		t := m.To_InputMessagesFilterPhotos()
		return t.DebugString()
	case Predicate_inputMessagesFilterVideo:
		t := m.To_InputMessagesFilterVideo()
		return t.DebugString()
	case Predicate_inputMessagesFilterPhotoVideo:
		t := m.To_InputMessagesFilterPhotoVideo()
		return t.DebugString()
	case Predicate_inputMessagesFilterDocument:
		t := m.To_InputMessagesFilterDocument()
		return t.DebugString()
	case Predicate_inputMessagesFilterUrl:
		t := m.To_InputMessagesFilterUrl()
		return t.DebugString()
	case Predicate_inputMessagesFilterGif:
		t := m.To_InputMessagesFilterGif()
		return t.DebugString()
	case Predicate_inputMessagesFilterVoice:
		t := m.To_InputMessagesFilterVoice()
		return t.DebugString()
	case Predicate_inputMessagesFilterMusic:
		t := m.To_InputMessagesFilterMusic()
		return t.DebugString()
	case Predicate_inputMessagesFilterChatPhotos:
		t := m.To_InputMessagesFilterChatPhotos()
		return t.DebugString()
	case Predicate_inputMessagesFilterPhoneCalls:
		t := m.To_InputMessagesFilterPhoneCalls()
		return t.DebugString()
	case Predicate_inputMessagesFilterRoundVoice:
		t := m.To_InputMessagesFilterRoundVoice()
		return t.DebugString()
	case Predicate_inputMessagesFilterRoundVideo:
		t := m.To_InputMessagesFilterRoundVideo()
		return t.DebugString()
	case Predicate_inputMessagesFilterMyMentions:
		t := m.To_InputMessagesFilterMyMentions()
		return t.DebugString()
	case Predicate_inputMessagesFilterGeo:
		t := m.To_InputMessagesFilterGeo()
		return t.DebugString()
	case Predicate_inputMessagesFilterContacts:
		t := m.To_InputMessagesFilterContacts()
		return t.DebugString()
	case Predicate_inputMessagesFilterPinned:
		t := m.To_InputMessagesFilterPinned()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputMessagesFilterEmpty
func (m *MessagesFilter) To_InputMessagesFilterEmpty() *TLInputMessagesFilterEmpty {
	m.PredicateName = Predicate_inputMessagesFilterEmpty
	return &TLInputMessagesFilterEmpty{
		Data2: m,
	}
}

// To_InputMessagesFilterPhotos
func (m *MessagesFilter) To_InputMessagesFilterPhotos() *TLInputMessagesFilterPhotos {
	m.PredicateName = Predicate_inputMessagesFilterPhotos
	return &TLInputMessagesFilterPhotos{
		Data2: m,
	}
}

// To_InputMessagesFilterVideo
func (m *MessagesFilter) To_InputMessagesFilterVideo() *TLInputMessagesFilterVideo {
	m.PredicateName = Predicate_inputMessagesFilterVideo
	return &TLInputMessagesFilterVideo{
		Data2: m,
	}
}

// To_InputMessagesFilterPhotoVideo
func (m *MessagesFilter) To_InputMessagesFilterPhotoVideo() *TLInputMessagesFilterPhotoVideo {
	m.PredicateName = Predicate_inputMessagesFilterPhotoVideo
	return &TLInputMessagesFilterPhotoVideo{
		Data2: m,
	}
}

// To_InputMessagesFilterDocument
func (m *MessagesFilter) To_InputMessagesFilterDocument() *TLInputMessagesFilterDocument {
	m.PredicateName = Predicate_inputMessagesFilterDocument
	return &TLInputMessagesFilterDocument{
		Data2: m,
	}
}

// To_InputMessagesFilterUrl
func (m *MessagesFilter) To_InputMessagesFilterUrl() *TLInputMessagesFilterUrl {
	m.PredicateName = Predicate_inputMessagesFilterUrl
	return &TLInputMessagesFilterUrl{
		Data2: m,
	}
}

// To_InputMessagesFilterGif
func (m *MessagesFilter) To_InputMessagesFilterGif() *TLInputMessagesFilterGif {
	m.PredicateName = Predicate_inputMessagesFilterGif
	return &TLInputMessagesFilterGif{
		Data2: m,
	}
}

// To_InputMessagesFilterVoice
func (m *MessagesFilter) To_InputMessagesFilterVoice() *TLInputMessagesFilterVoice {
	m.PredicateName = Predicate_inputMessagesFilterVoice
	return &TLInputMessagesFilterVoice{
		Data2: m,
	}
}

// To_InputMessagesFilterMusic
func (m *MessagesFilter) To_InputMessagesFilterMusic() *TLInputMessagesFilterMusic {
	m.PredicateName = Predicate_inputMessagesFilterMusic
	return &TLInputMessagesFilterMusic{
		Data2: m,
	}
}

// To_InputMessagesFilterChatPhotos
func (m *MessagesFilter) To_InputMessagesFilterChatPhotos() *TLInputMessagesFilterChatPhotos {
	m.PredicateName = Predicate_inputMessagesFilterChatPhotos
	return &TLInputMessagesFilterChatPhotos{
		Data2: m,
	}
}

// To_InputMessagesFilterPhoneCalls
func (m *MessagesFilter) To_InputMessagesFilterPhoneCalls() *TLInputMessagesFilterPhoneCalls {
	m.PredicateName = Predicate_inputMessagesFilterPhoneCalls
	return &TLInputMessagesFilterPhoneCalls{
		Data2: m,
	}
}

// To_InputMessagesFilterRoundVoice
func (m *MessagesFilter) To_InputMessagesFilterRoundVoice() *TLInputMessagesFilterRoundVoice {
	m.PredicateName = Predicate_inputMessagesFilterRoundVoice
	return &TLInputMessagesFilterRoundVoice{
		Data2: m,
	}
}

// To_InputMessagesFilterRoundVideo
func (m *MessagesFilter) To_InputMessagesFilterRoundVideo() *TLInputMessagesFilterRoundVideo {
	m.PredicateName = Predicate_inputMessagesFilterRoundVideo
	return &TLInputMessagesFilterRoundVideo{
		Data2: m,
	}
}

// To_InputMessagesFilterMyMentions
func (m *MessagesFilter) To_InputMessagesFilterMyMentions() *TLInputMessagesFilterMyMentions {
	m.PredicateName = Predicate_inputMessagesFilterMyMentions
	return &TLInputMessagesFilterMyMentions{
		Data2: m,
	}
}

// To_InputMessagesFilterGeo
func (m *MessagesFilter) To_InputMessagesFilterGeo() *TLInputMessagesFilterGeo {
	m.PredicateName = Predicate_inputMessagesFilterGeo
	return &TLInputMessagesFilterGeo{
		Data2: m,
	}
}

// To_InputMessagesFilterContacts
func (m *MessagesFilter) To_InputMessagesFilterContacts() *TLInputMessagesFilterContacts {
	m.PredicateName = Predicate_inputMessagesFilterContacts
	return &TLInputMessagesFilterContacts{
		Data2: m,
	}
}

// To_InputMessagesFilterPinned
func (m *MessagesFilter) To_InputMessagesFilterPinned() *TLInputMessagesFilterPinned {
	m.PredicateName = Predicate_inputMessagesFilterPinned
	return &TLInputMessagesFilterPinned{
		Data2: m,
	}
}

// MakeTLInputMessagesFilterEmpty
func MakeTLInputMessagesFilterEmpty(data2 *MessagesFilter) *TLInputMessagesFilterEmpty {
	if data2 == nil {
		return &TLInputMessagesFilterEmpty{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterEmpty
		return &TLInputMessagesFilterEmpty{Data2: data2}
	}
}

func (m *TLInputMessagesFilterEmpty) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterEmpty
	return m.Data2
}

func (m *TLInputMessagesFilterEmpty) GetPredicateName() string {
	return Predicate_inputMessagesFilterEmpty
}

func (m *TLInputMessagesFilterEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x57e2f66c: func() []byte {
			x.UInt(0x57e2f66c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x57e2f66c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterPhotos
func MakeTLInputMessagesFilterPhotos(data2 *MessagesFilter) *TLInputMessagesFilterPhotos {
	if data2 == nil {
		return &TLInputMessagesFilterPhotos{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterPhotos,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterPhotos
		return &TLInputMessagesFilterPhotos{Data2: data2}
	}
}

func (m *TLInputMessagesFilterPhotos) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterPhotos
	return m.Data2
}

func (m *TLInputMessagesFilterPhotos) GetPredicateName() string {
	return Predicate_inputMessagesFilterPhotos
}

func (m *TLInputMessagesFilterPhotos) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9609a51c: func() []byte {
			x.UInt(0x9609a51c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterPhotos, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterPhotos, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterPhotos) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterPhotos) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9609a51c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterPhotos) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterVideo
func MakeTLInputMessagesFilterVideo(data2 *MessagesFilter) *TLInputMessagesFilterVideo {
	if data2 == nil {
		return &TLInputMessagesFilterVideo{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterVideo,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterVideo
		return &TLInputMessagesFilterVideo{Data2: data2}
	}
}

func (m *TLInputMessagesFilterVideo) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterVideo
	return m.Data2
}

func (m *TLInputMessagesFilterVideo) GetPredicateName() string {
	return Predicate_inputMessagesFilterVideo
}

func (m *TLInputMessagesFilterVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9fc00e65: func() []byte {
			x.UInt(0x9fc00e65)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9fc00e65: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterPhotoVideo
func MakeTLInputMessagesFilterPhotoVideo(data2 *MessagesFilter) *TLInputMessagesFilterPhotoVideo {
	if data2 == nil {
		return &TLInputMessagesFilterPhotoVideo{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterPhotoVideo,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterPhotoVideo
		return &TLInputMessagesFilterPhotoVideo{Data2: data2}
	}
}

func (m *TLInputMessagesFilterPhotoVideo) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterPhotoVideo
	return m.Data2
}

func (m *TLInputMessagesFilterPhotoVideo) GetPredicateName() string {
	return Predicate_inputMessagesFilterPhotoVideo
}

func (m *TLInputMessagesFilterPhotoVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56e9f0e4: func() []byte {
			x.UInt(0x56e9f0e4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterPhotoVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterPhotoVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterPhotoVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterPhotoVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56e9f0e4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterPhotoVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterDocument
func MakeTLInputMessagesFilterDocument(data2 *MessagesFilter) *TLInputMessagesFilterDocument {
	if data2 == nil {
		return &TLInputMessagesFilterDocument{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterDocument
		return &TLInputMessagesFilterDocument{Data2: data2}
	}
}

func (m *TLInputMessagesFilterDocument) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterDocument
	return m.Data2
}

func (m *TLInputMessagesFilterDocument) GetPredicateName() string {
	return Predicate_inputMessagesFilterDocument
}

func (m *TLInputMessagesFilterDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9eddf188: func() []byte {
			x.UInt(0x9eddf188)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9eddf188: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterUrl
func MakeTLInputMessagesFilterUrl(data2 *MessagesFilter) *TLInputMessagesFilterUrl {
	if data2 == nil {
		return &TLInputMessagesFilterUrl{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterUrl,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterUrl
		return &TLInputMessagesFilterUrl{Data2: data2}
	}
}

func (m *TLInputMessagesFilterUrl) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterUrl
	return m.Data2
}

func (m *TLInputMessagesFilterUrl) GetPredicateName() string {
	return Predicate_inputMessagesFilterUrl
}

func (m *TLInputMessagesFilterUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7ef0dd87: func() []byte {
			x.UInt(0x7ef0dd87)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7ef0dd87: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterGif
func MakeTLInputMessagesFilterGif(data2 *MessagesFilter) *TLInputMessagesFilterGif {
	if data2 == nil {
		return &TLInputMessagesFilterGif{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterGif,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterGif
		return &TLInputMessagesFilterGif{Data2: data2}
	}
}

func (m *TLInputMessagesFilterGif) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterGif
	return m.Data2
}

func (m *TLInputMessagesFilterGif) GetPredicateName() string {
	return Predicate_inputMessagesFilterGif
}

func (m *TLInputMessagesFilterGif) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xffc86587: func() []byte {
			x.UInt(0xffc86587)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterGif, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterGif, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterGif) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterGif) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xffc86587: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterGif) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterVoice
func MakeTLInputMessagesFilterVoice(data2 *MessagesFilter) *TLInputMessagesFilterVoice {
	if data2 == nil {
		return &TLInputMessagesFilterVoice{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterVoice,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterVoice
		return &TLInputMessagesFilterVoice{Data2: data2}
	}
}

func (m *TLInputMessagesFilterVoice) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterVoice
	return m.Data2
}

func (m *TLInputMessagesFilterVoice) GetPredicateName() string {
	return Predicate_inputMessagesFilterVoice
}

func (m *TLInputMessagesFilterVoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x50f5c392: func() []byte {
			x.UInt(0x50f5c392)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterVoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterVoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterVoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterVoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x50f5c392: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterVoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterMusic
func MakeTLInputMessagesFilterMusic(data2 *MessagesFilter) *TLInputMessagesFilterMusic {
	if data2 == nil {
		return &TLInputMessagesFilterMusic{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterMusic,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterMusic
		return &TLInputMessagesFilterMusic{Data2: data2}
	}
}

func (m *TLInputMessagesFilterMusic) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterMusic
	return m.Data2
}

func (m *TLInputMessagesFilterMusic) GetPredicateName() string {
	return Predicate_inputMessagesFilterMusic
}

func (m *TLInputMessagesFilterMusic) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3751b49e: func() []byte {
			x.UInt(0x3751b49e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterMusic, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterMusic, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterMusic) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterMusic) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3751b49e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterMusic) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterChatPhotos
func MakeTLInputMessagesFilterChatPhotos(data2 *MessagesFilter) *TLInputMessagesFilterChatPhotos {
	if data2 == nil {
		return &TLInputMessagesFilterChatPhotos{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterChatPhotos,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterChatPhotos
		return &TLInputMessagesFilterChatPhotos{Data2: data2}
	}
}

func (m *TLInputMessagesFilterChatPhotos) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterChatPhotos
	return m.Data2
}

func (m *TLInputMessagesFilterChatPhotos) GetPredicateName() string {
	return Predicate_inputMessagesFilterChatPhotos
}

func (m *TLInputMessagesFilterChatPhotos) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3a20ecb8: func() []byte {
			x.UInt(0x3a20ecb8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterChatPhotos, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterChatPhotos, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterChatPhotos) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterChatPhotos) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3a20ecb8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterChatPhotos) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterPhoneCalls
func MakeTLInputMessagesFilterPhoneCalls(data2 *MessagesFilter) *TLInputMessagesFilterPhoneCalls {
	if data2 == nil {
		return &TLInputMessagesFilterPhoneCalls{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterPhoneCalls,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterPhoneCalls
		return &TLInputMessagesFilterPhoneCalls{Data2: data2}
	}
}

func (m *TLInputMessagesFilterPhoneCalls) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterPhoneCalls
	return m.Data2
}

//// flags
func (m *TLInputMessagesFilterPhoneCalls) SetMissed(v bool) { m.Data2.Missed = v }
func (m *TLInputMessagesFilterPhoneCalls) GetMissed() bool  { return m.Data2.Missed }

func (m *TLInputMessagesFilterPhoneCalls) GetPredicateName() string {
	return Predicate_inputMessagesFilterPhoneCalls
}

func (m *TLInputMessagesFilterPhoneCalls) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x80c99768: func() []byte {
			x.UInt(0x80c99768)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMissed() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterPhoneCalls, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterPhoneCalls, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterPhoneCalls) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterPhoneCalls) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x80c99768: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMissed(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterPhoneCalls) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterRoundVoice
func MakeTLInputMessagesFilterRoundVoice(data2 *MessagesFilter) *TLInputMessagesFilterRoundVoice {
	if data2 == nil {
		return &TLInputMessagesFilterRoundVoice{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterRoundVoice,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterRoundVoice
		return &TLInputMessagesFilterRoundVoice{Data2: data2}
	}
}

func (m *TLInputMessagesFilterRoundVoice) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterRoundVoice
	return m.Data2
}

func (m *TLInputMessagesFilterRoundVoice) GetPredicateName() string {
	return Predicate_inputMessagesFilterRoundVoice
}

func (m *TLInputMessagesFilterRoundVoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7a7c17a4: func() []byte {
			x.UInt(0x7a7c17a4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterRoundVoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterRoundVoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterRoundVoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterRoundVoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7a7c17a4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterRoundVoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterRoundVideo
func MakeTLInputMessagesFilterRoundVideo(data2 *MessagesFilter) *TLInputMessagesFilterRoundVideo {
	if data2 == nil {
		return &TLInputMessagesFilterRoundVideo{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterRoundVideo,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterRoundVideo
		return &TLInputMessagesFilterRoundVideo{Data2: data2}
	}
}

func (m *TLInputMessagesFilterRoundVideo) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterRoundVideo
	return m.Data2
}

func (m *TLInputMessagesFilterRoundVideo) GetPredicateName() string {
	return Predicate_inputMessagesFilterRoundVideo
}

func (m *TLInputMessagesFilterRoundVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb549da53: func() []byte {
			x.UInt(0xb549da53)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterRoundVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterRoundVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterRoundVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterRoundVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb549da53: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterRoundVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterMyMentions
func MakeTLInputMessagesFilterMyMentions(data2 *MessagesFilter) *TLInputMessagesFilterMyMentions {
	if data2 == nil {
		return &TLInputMessagesFilterMyMentions{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterMyMentions,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterMyMentions
		return &TLInputMessagesFilterMyMentions{Data2: data2}
	}
}

func (m *TLInputMessagesFilterMyMentions) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterMyMentions
	return m.Data2
}

func (m *TLInputMessagesFilterMyMentions) GetPredicateName() string {
	return Predicate_inputMessagesFilterMyMentions
}

func (m *TLInputMessagesFilterMyMentions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc1f8e69a: func() []byte {
			x.UInt(0xc1f8e69a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterMyMentions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterMyMentions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterMyMentions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterMyMentions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc1f8e69a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterMyMentions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterGeo
func MakeTLInputMessagesFilterGeo(data2 *MessagesFilter) *TLInputMessagesFilterGeo {
	if data2 == nil {
		return &TLInputMessagesFilterGeo{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterGeo,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterGeo
		return &TLInputMessagesFilterGeo{Data2: data2}
	}
}

func (m *TLInputMessagesFilterGeo) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterGeo
	return m.Data2
}

func (m *TLInputMessagesFilterGeo) GetPredicateName() string {
	return Predicate_inputMessagesFilterGeo
}

func (m *TLInputMessagesFilterGeo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe7026d0d: func() []byte {
			x.UInt(0xe7026d0d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterGeo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterGeo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterGeo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterGeo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe7026d0d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterGeo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterContacts
func MakeTLInputMessagesFilterContacts(data2 *MessagesFilter) *TLInputMessagesFilterContacts {
	if data2 == nil {
		return &TLInputMessagesFilterContacts{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterContacts,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterContacts
		return &TLInputMessagesFilterContacts{Data2: data2}
	}
}

func (m *TLInputMessagesFilterContacts) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterContacts
	return m.Data2
}

func (m *TLInputMessagesFilterContacts) GetPredicateName() string {
	return Predicate_inputMessagesFilterContacts
}

func (m *TLInputMessagesFilterContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe062db83: func() []byte {
			x.UInt(0xe062db83)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe062db83: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagesFilterPinned
func MakeTLInputMessagesFilterPinned(data2 *MessagesFilter) *TLInputMessagesFilterPinned {
	if data2 == nil {
		return &TLInputMessagesFilterPinned{Data2: &MessagesFilter{
			PredicateName: Predicate_inputMessagesFilterPinned,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagesFilterPinned
		return &TLInputMessagesFilterPinned{Data2: data2}
	}
}

func (m *TLInputMessagesFilterPinned) To_MessagesFilter() *MessagesFilter {
	m.Data2.PredicateName = Predicate_inputMessagesFilterPinned
	return m.Data2
}

func (m *TLInputMessagesFilterPinned) GetPredicateName() string {
	return Predicate_inputMessagesFilterPinned
}

func (m *TLInputMessagesFilterPinned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1bb00451: func() []byte {
			x.UInt(0x1bb00451)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagesFilterPinned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagesFilterPinned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagesFilterPinned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagesFilterPinned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1bb00451: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagesFilterPinned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PrivacyKey <--
//  + TL_PrivacyKeyStatusTimestamp
//  + TL_PrivacyKeyChatInvite
//  + TL_PrivacyKeyPhoneCall
//  + TL_PrivacyKeyPhoneP2P
//  + TL_PrivacyKeyForwards
//  + TL_PrivacyKeyProfilePhoto
//  + TL_PrivacyKeyPhoneNumber
//  + TL_PrivacyKeyAddedByPhone
//

func (m *PrivacyKey) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_privacyKeyStatusTimestamp:
		t := m.To_PrivacyKeyStatusTimestamp()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyChatInvite:
		t := m.To_PrivacyKeyChatInvite()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyPhoneCall:
		t := m.To_PrivacyKeyPhoneCall()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyPhoneP2P:
		t := m.To_PrivacyKeyPhoneP2P()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyForwards:
		t := m.To_PrivacyKeyForwards()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyProfilePhoto:
		t := m.To_PrivacyKeyProfilePhoto()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyPhoneNumber:
		t := m.To_PrivacyKeyPhoneNumber()
		xBuf = t.Encode(layer)
	case Predicate_privacyKeyAddedByPhone:
		t := m.To_PrivacyKeyAddedByPhone()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PrivacyKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *PrivacyKey) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbc2eab30:
		m2 := MakeTLPrivacyKeyStatusTimestamp(m)
		m2.Decode(dBuf)
	case 0x500e6dfa:
		m2 := MakeTLPrivacyKeyChatInvite(m)
		m2.Decode(dBuf)
	case 0x3d662b7b:
		m2 := MakeTLPrivacyKeyPhoneCall(m)
		m2.Decode(dBuf)
	case 0x39491cc8:
		m2 := MakeTLPrivacyKeyPhoneP2P(m)
		m2.Decode(dBuf)
	case 0x69ec56a3:
		m2 := MakeTLPrivacyKeyForwards(m)
		m2.Decode(dBuf)
	case 0x96151fed:
		m2 := MakeTLPrivacyKeyProfilePhoto(m)
		m2.Decode(dBuf)
	case 0xd19ae46d:
		m2 := MakeTLPrivacyKeyPhoneNumber(m)
		m2.Decode(dBuf)
	case 0x42ffd42b:
		m2 := MakeTLPrivacyKeyAddedByPhone(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PrivacyKey) DebugString() string {
	switch m.PredicateName {
	case Predicate_privacyKeyStatusTimestamp:
		t := m.To_PrivacyKeyStatusTimestamp()
		return t.DebugString()
	case Predicate_privacyKeyChatInvite:
		t := m.To_PrivacyKeyChatInvite()
		return t.DebugString()
	case Predicate_privacyKeyPhoneCall:
		t := m.To_PrivacyKeyPhoneCall()
		return t.DebugString()
	case Predicate_privacyKeyPhoneP2P:
		t := m.To_PrivacyKeyPhoneP2P()
		return t.DebugString()
	case Predicate_privacyKeyForwards:
		t := m.To_PrivacyKeyForwards()
		return t.DebugString()
	case Predicate_privacyKeyProfilePhoto:
		t := m.To_PrivacyKeyProfilePhoto()
		return t.DebugString()
	case Predicate_privacyKeyPhoneNumber:
		t := m.To_PrivacyKeyPhoneNumber()
		return t.DebugString()
	case Predicate_privacyKeyAddedByPhone:
		t := m.To_PrivacyKeyAddedByPhone()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PrivacyKeyStatusTimestamp
func (m *PrivacyKey) To_PrivacyKeyStatusTimestamp() *TLPrivacyKeyStatusTimestamp {
	m.PredicateName = Predicate_privacyKeyStatusTimestamp
	return &TLPrivacyKeyStatusTimestamp{
		Data2: m,
	}
}

// To_PrivacyKeyChatInvite
func (m *PrivacyKey) To_PrivacyKeyChatInvite() *TLPrivacyKeyChatInvite {
	m.PredicateName = Predicate_privacyKeyChatInvite
	return &TLPrivacyKeyChatInvite{
		Data2: m,
	}
}

// To_PrivacyKeyPhoneCall
func (m *PrivacyKey) To_PrivacyKeyPhoneCall() *TLPrivacyKeyPhoneCall {
	m.PredicateName = Predicate_privacyKeyPhoneCall
	return &TLPrivacyKeyPhoneCall{
		Data2: m,
	}
}

// To_PrivacyKeyPhoneP2P
func (m *PrivacyKey) To_PrivacyKeyPhoneP2P() *TLPrivacyKeyPhoneP2P {
	m.PredicateName = Predicate_privacyKeyPhoneP2P
	return &TLPrivacyKeyPhoneP2P{
		Data2: m,
	}
}

// To_PrivacyKeyForwards
func (m *PrivacyKey) To_PrivacyKeyForwards() *TLPrivacyKeyForwards {
	m.PredicateName = Predicate_privacyKeyForwards
	return &TLPrivacyKeyForwards{
		Data2: m,
	}
}

// To_PrivacyKeyProfilePhoto
func (m *PrivacyKey) To_PrivacyKeyProfilePhoto() *TLPrivacyKeyProfilePhoto {
	m.PredicateName = Predicate_privacyKeyProfilePhoto
	return &TLPrivacyKeyProfilePhoto{
		Data2: m,
	}
}

// To_PrivacyKeyPhoneNumber
func (m *PrivacyKey) To_PrivacyKeyPhoneNumber() *TLPrivacyKeyPhoneNumber {
	m.PredicateName = Predicate_privacyKeyPhoneNumber
	return &TLPrivacyKeyPhoneNumber{
		Data2: m,
	}
}

// To_PrivacyKeyAddedByPhone
func (m *PrivacyKey) To_PrivacyKeyAddedByPhone() *TLPrivacyKeyAddedByPhone {
	m.PredicateName = Predicate_privacyKeyAddedByPhone
	return &TLPrivacyKeyAddedByPhone{
		Data2: m,
	}
}

// MakeTLPrivacyKeyStatusTimestamp
func MakeTLPrivacyKeyStatusTimestamp(data2 *PrivacyKey) *TLPrivacyKeyStatusTimestamp {
	if data2 == nil {
		return &TLPrivacyKeyStatusTimestamp{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyStatusTimestamp,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyStatusTimestamp
		return &TLPrivacyKeyStatusTimestamp{Data2: data2}
	}
}

func (m *TLPrivacyKeyStatusTimestamp) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyStatusTimestamp
	return m.Data2
}

func (m *TLPrivacyKeyStatusTimestamp) GetPredicateName() string {
	return Predicate_privacyKeyStatusTimestamp
}

func (m *TLPrivacyKeyStatusTimestamp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbc2eab30: func() []byte {
			x.UInt(0xbc2eab30)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyStatusTimestamp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyStatusTimestamp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyStatusTimestamp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyStatusTimestamp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbc2eab30: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyStatusTimestamp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyChatInvite
func MakeTLPrivacyKeyChatInvite(data2 *PrivacyKey) *TLPrivacyKeyChatInvite {
	if data2 == nil {
		return &TLPrivacyKeyChatInvite{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyChatInvite,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyChatInvite
		return &TLPrivacyKeyChatInvite{Data2: data2}
	}
}

func (m *TLPrivacyKeyChatInvite) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyChatInvite
	return m.Data2
}

func (m *TLPrivacyKeyChatInvite) GetPredicateName() string {
	return Predicate_privacyKeyChatInvite
}

func (m *TLPrivacyKeyChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x500e6dfa: func() []byte {
			x.UInt(0x500e6dfa)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyChatInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyChatInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyChatInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x500e6dfa: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyPhoneCall
func MakeTLPrivacyKeyPhoneCall(data2 *PrivacyKey) *TLPrivacyKeyPhoneCall {
	if data2 == nil {
		return &TLPrivacyKeyPhoneCall{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyPhoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyPhoneCall
		return &TLPrivacyKeyPhoneCall{Data2: data2}
	}
}

func (m *TLPrivacyKeyPhoneCall) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyPhoneCall
	return m.Data2
}

func (m *TLPrivacyKeyPhoneCall) GetPredicateName() string {
	return Predicate_privacyKeyPhoneCall
}

func (m *TLPrivacyKeyPhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3d662b7b: func() []byte {
			x.UInt(0x3d662b7b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyPhoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyPhoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyPhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3d662b7b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyPhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyPhoneP2P
func MakeTLPrivacyKeyPhoneP2P(data2 *PrivacyKey) *TLPrivacyKeyPhoneP2P {
	if data2 == nil {
		return &TLPrivacyKeyPhoneP2P{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyPhoneP2P,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyPhoneP2P
		return &TLPrivacyKeyPhoneP2P{Data2: data2}
	}
}

func (m *TLPrivacyKeyPhoneP2P) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyPhoneP2P
	return m.Data2
}

func (m *TLPrivacyKeyPhoneP2P) GetPredicateName() string {
	return Predicate_privacyKeyPhoneP2P
}

func (m *TLPrivacyKeyPhoneP2P) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x39491cc8: func() []byte {
			x.UInt(0x39491cc8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyPhoneP2P, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyPhoneP2P, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyPhoneP2P) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyPhoneP2P) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x39491cc8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyPhoneP2P) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyForwards
func MakeTLPrivacyKeyForwards(data2 *PrivacyKey) *TLPrivacyKeyForwards {
	if data2 == nil {
		return &TLPrivacyKeyForwards{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyForwards,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyForwards
		return &TLPrivacyKeyForwards{Data2: data2}
	}
}

func (m *TLPrivacyKeyForwards) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyForwards
	return m.Data2
}

func (m *TLPrivacyKeyForwards) GetPredicateName() string {
	return Predicate_privacyKeyForwards
}

func (m *TLPrivacyKeyForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x69ec56a3: func() []byte {
			x.UInt(0x69ec56a3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyForwards, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyForwards, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyForwards) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x69ec56a3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyProfilePhoto
func MakeTLPrivacyKeyProfilePhoto(data2 *PrivacyKey) *TLPrivacyKeyProfilePhoto {
	if data2 == nil {
		return &TLPrivacyKeyProfilePhoto{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyProfilePhoto,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyProfilePhoto
		return &TLPrivacyKeyProfilePhoto{Data2: data2}
	}
}

func (m *TLPrivacyKeyProfilePhoto) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyProfilePhoto
	return m.Data2
}

func (m *TLPrivacyKeyProfilePhoto) GetPredicateName() string {
	return Predicate_privacyKeyProfilePhoto
}

func (m *TLPrivacyKeyProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x96151fed: func() []byte {
			x.UInt(0x96151fed)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyProfilePhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyProfilePhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyProfilePhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x96151fed: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyPhoneNumber
func MakeTLPrivacyKeyPhoneNumber(data2 *PrivacyKey) *TLPrivacyKeyPhoneNumber {
	if data2 == nil {
		return &TLPrivacyKeyPhoneNumber{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyPhoneNumber,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyPhoneNumber
		return &TLPrivacyKeyPhoneNumber{Data2: data2}
	}
}

func (m *TLPrivacyKeyPhoneNumber) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyPhoneNumber
	return m.Data2
}

func (m *TLPrivacyKeyPhoneNumber) GetPredicateName() string {
	return Predicate_privacyKeyPhoneNumber
}

func (m *TLPrivacyKeyPhoneNumber) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd19ae46d: func() []byte {
			x.UInt(0xd19ae46d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyPhoneNumber, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyPhoneNumber, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyPhoneNumber) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyPhoneNumber) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd19ae46d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyPhoneNumber) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyKeyAddedByPhone
func MakeTLPrivacyKeyAddedByPhone(data2 *PrivacyKey) *TLPrivacyKeyAddedByPhone {
	if data2 == nil {
		return &TLPrivacyKeyAddedByPhone{Data2: &PrivacyKey{
			PredicateName: Predicate_privacyKeyAddedByPhone,
		}}
	} else {
		data2.PredicateName = Predicate_privacyKeyAddedByPhone
		return &TLPrivacyKeyAddedByPhone{Data2: data2}
	}
}

func (m *TLPrivacyKeyAddedByPhone) To_PrivacyKey() *PrivacyKey {
	m.Data2.PredicateName = Predicate_privacyKeyAddedByPhone
	return m.Data2
}

func (m *TLPrivacyKeyAddedByPhone) GetPredicateName() string {
	return Predicate_privacyKeyAddedByPhone
}

func (m *TLPrivacyKeyAddedByPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x42ffd42b: func() []byte {
			x.UInt(0x42ffd42b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyKeyAddedByPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyKeyAddedByPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyKeyAddedByPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyKeyAddedByPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x42ffd42b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyKeyAddedByPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EmojiLanguage <--
//  + TL_EmojiLanguage
//

func (m *EmojiLanguage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_emojiLanguage:
		t := m.To_EmojiLanguage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EmojiLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *EmojiLanguage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb3fb5361:
		m2 := MakeTLEmojiLanguage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EmojiLanguage) DebugString() string {
	switch m.PredicateName {
	case Predicate_emojiLanguage:
		t := m.To_EmojiLanguage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EmojiLanguage
func (m *EmojiLanguage) To_EmojiLanguage() *TLEmojiLanguage {
	m.PredicateName = Predicate_emojiLanguage
	return &TLEmojiLanguage{
		Data2: m,
	}
}

// MakeTLEmojiLanguage
func MakeTLEmojiLanguage(data2 *EmojiLanguage) *TLEmojiLanguage {
	if data2 == nil {
		return &TLEmojiLanguage{Data2: &EmojiLanguage{
			PredicateName: Predicate_emojiLanguage,
		}}
	} else {
		data2.PredicateName = Predicate_emojiLanguage
		return &TLEmojiLanguage{Data2: data2}
	}
}

func (m *TLEmojiLanguage) To_EmojiLanguage() *EmojiLanguage {
	m.Data2.PredicateName = Predicate_emojiLanguage
	return m.Data2
}

func (m *TLEmojiLanguage) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLEmojiLanguage) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLEmojiLanguage) GetPredicateName() string {
	return Predicate_emojiLanguage
}

func (m *TLEmojiLanguage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb3fb5361: func() []byte {
			x.UInt(0xb3fb5361)

			x.String(m.GetLangCode())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_emojiLanguage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_emojiLanguage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEmojiLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEmojiLanguage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb3fb5361: func() error {
			m.SetLangCode(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEmojiLanguage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AvailableReactions <--
//  + TL_MessagesAvailableReactionsNotModified
//  + TL_MessagesAvailableReactions
//

func (m *Messages_AvailableReactions) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_availableReactionsNotModified:
		t := m.To_MessagesAvailableReactionsNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_availableReactions:
		t := m.To_MessagesAvailableReactions()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_AvailableReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_AvailableReactions) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9f071957:
		m2 := MakeTLMessagesAvailableReactionsNotModified(m)
		m2.Decode(dBuf)
	case 0x768e3aad:
		m2 := MakeTLMessagesAvailableReactions(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_AvailableReactions) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_availableReactionsNotModified:
		t := m.To_MessagesAvailableReactionsNotModified()
		return t.DebugString()
	case Predicate_messages_availableReactions:
		t := m.To_MessagesAvailableReactions()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesAvailableReactionsNotModified
func (m *Messages_AvailableReactions) To_MessagesAvailableReactionsNotModified() *TLMessagesAvailableReactionsNotModified {
	m.PredicateName = Predicate_messages_availableReactionsNotModified
	return &TLMessagesAvailableReactionsNotModified{
		Data2: m,
	}
}

// To_MessagesAvailableReactions
func (m *Messages_AvailableReactions) To_MessagesAvailableReactions() *TLMessagesAvailableReactions {
	m.PredicateName = Predicate_messages_availableReactions
	return &TLMessagesAvailableReactions{
		Data2: m,
	}
}

// MakeTLMessagesAvailableReactionsNotModified
func MakeTLMessagesAvailableReactionsNotModified(data2 *Messages_AvailableReactions) *TLMessagesAvailableReactionsNotModified {
	if data2 == nil {
		return &TLMessagesAvailableReactionsNotModified{Data2: &Messages_AvailableReactions{
			PredicateName: Predicate_messages_availableReactionsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_availableReactionsNotModified
		return &TLMessagesAvailableReactionsNotModified{Data2: data2}
	}
}

func (m *TLMessagesAvailableReactionsNotModified) To_Messages_AvailableReactions() *Messages_AvailableReactions {
	m.Data2.PredicateName = Predicate_messages_availableReactionsNotModified
	return m.Data2
}

func (m *TLMessagesAvailableReactionsNotModified) GetPredicateName() string {
	return Predicate_messages_availableReactionsNotModified
}

func (m *TLMessagesAvailableReactionsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9f071957: func() []byte {
			x.UInt(0x9f071957)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_availableReactionsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_availableReactionsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAvailableReactionsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAvailableReactionsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9f071957: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAvailableReactionsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesAvailableReactions
func MakeTLMessagesAvailableReactions(data2 *Messages_AvailableReactions) *TLMessagesAvailableReactions {
	if data2 == nil {
		return &TLMessagesAvailableReactions{Data2: &Messages_AvailableReactions{
			PredicateName: Predicate_messages_availableReactions,
		}}
	} else {
		data2.PredicateName = Predicate_messages_availableReactions
		return &TLMessagesAvailableReactions{Data2: data2}
	}
}

func (m *TLMessagesAvailableReactions) To_Messages_AvailableReactions() *Messages_AvailableReactions {
	m.Data2.PredicateName = Predicate_messages_availableReactions
	return m.Data2
}

func (m *TLMessagesAvailableReactions) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesAvailableReactions) GetHash() int32  { return m.Data2.Hash }

func (m *TLMessagesAvailableReactions) SetReactions(v []*AvailableReaction) { m.Data2.Reactions = v }
func (m *TLMessagesAvailableReactions) GetReactions() []*AvailableReaction  { return m.Data2.Reactions }

func (m *TLMessagesAvailableReactions) GetPredicateName() string {
	return Predicate_messages_availableReactions
}

func (m *TLMessagesAvailableReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x768e3aad: func() []byte {
			x.UInt(0x768e3aad)

			x.Int(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetReactions())))
			for _, v := range m.GetReactions() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_availableReactions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_availableReactions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAvailableReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAvailableReactions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x768e3aad: func() error {
			m.SetHash(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*AvailableReaction, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &AvailableReaction{}
				v1[i].Decode(dBuf)
			}
			m.SetReactions(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAvailableReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// NearestDc <--
//  + TL_NearestDc
//

func (m *NearestDc) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_nearestDc:
		t := m.To_NearestDc()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *NearestDc) CalcByteSize(layer int32) int {
	return 0
}

func (m *NearestDc) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8e1a1775:
		m2 := MakeTLNearestDc(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *NearestDc) DebugString() string {
	switch m.PredicateName {
	case Predicate_nearestDc:
		t := m.To_NearestDc()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_NearestDc
func (m *NearestDc) To_NearestDc() *TLNearestDc {
	m.PredicateName = Predicate_nearestDc
	return &TLNearestDc{
		Data2: m,
	}
}

// MakeTLNearestDc
func MakeTLNearestDc(data2 *NearestDc) *TLNearestDc {
	if data2 == nil {
		return &TLNearestDc{Data2: &NearestDc{
			PredicateName: Predicate_nearestDc,
		}}
	} else {
		data2.PredicateName = Predicate_nearestDc
		return &TLNearestDc{Data2: data2}
	}
}

func (m *TLNearestDc) To_NearestDc() *NearestDc {
	m.Data2.PredicateName = Predicate_nearestDc
	return m.Data2
}

func (m *TLNearestDc) SetCountry(v string) { m.Data2.Country = v }
func (m *TLNearestDc) GetCountry() string  { return m.Data2.Country }

func (m *TLNearestDc) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLNearestDc) GetThisDc() int32  { return m.Data2.ThisDc }

func (m *TLNearestDc) SetNearestDc(v int32) { m.Data2.NearestDc = v }
func (m *TLNearestDc) GetNearestDc() int32  { return m.Data2.NearestDc }

func (m *TLNearestDc) GetPredicateName() string {
	return Predicate_nearestDc
}

func (m *TLNearestDc) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8e1a1775: func() []byte {
			x.UInt(0x8e1a1775)

			x.String(m.GetCountry())
			x.Int(m.GetThisDc())
			x.Int(m.GetNearestDc())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_nearestDc, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_nearestDc, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLNearestDc) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLNearestDc) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8e1a1775: func() error {
			m.SetCountry(dBuf.String())
			m.SetThisDc(dBuf.Int())
			m.SetNearestDc(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLNearestDc) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_Password <--
//  + TL_AccountPassword
//

func (m *Account_Password) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_password:
		t := m.To_AccountPassword()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_Password) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_Password) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x185b184f:
		m2 := MakeTLAccountPassword(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_Password) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_password:
		t := m.To_AccountPassword()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountPassword
func (m *Account_Password) To_AccountPassword() *TLAccountPassword {
	m.PredicateName = Predicate_account_password
	return &TLAccountPassword{
		Data2: m,
	}
}

// MakeTLAccountPassword
func MakeTLAccountPassword(data2 *Account_Password) *TLAccountPassword {
	if data2 == nil {
		return &TLAccountPassword{Data2: &Account_Password{
			PredicateName: Predicate_account_password,
		}}
	} else {
		data2.PredicateName = Predicate_account_password
		return &TLAccountPassword{Data2: data2}
	}
}

func (m *TLAccountPassword) To_Account_Password() *Account_Password {
	m.Data2.PredicateName = Predicate_account_password
	return m.Data2
}

//// flags
func (m *TLAccountPassword) SetHasRecovery(v bool) { m.Data2.HasRecovery = v }
func (m *TLAccountPassword) GetHasRecovery() bool  { return m.Data2.HasRecovery }

func (m *TLAccountPassword) SetHasSecureValues(v bool) { m.Data2.HasSecureValues = v }
func (m *TLAccountPassword) GetHasSecureValues() bool  { return m.Data2.HasSecureValues }

func (m *TLAccountPassword) SetHasPassword(v bool) { m.Data2.HasPassword = v }
func (m *TLAccountPassword) GetHasPassword() bool  { return m.Data2.HasPassword }

func (m *TLAccountPassword) SetCurrentAlgo(v *PasswordKdfAlgo) { m.Data2.CurrentAlgo = v }
func (m *TLAccountPassword) GetCurrentAlgo() *PasswordKdfAlgo  { return m.Data2.CurrentAlgo }

func (m *TLAccountPassword) SetSrp_B(v []byte) { m.Data2.Srp_B = v }
func (m *TLAccountPassword) GetSrp_B() []byte  { return m.Data2.Srp_B }

func (m *TLAccountPassword) SetSrpId(v *types.Int64Value) { m.Data2.SrpId = v }
func (m *TLAccountPassword) GetSrpId() *types.Int64Value  { return m.Data2.SrpId }

func (m *TLAccountPassword) SetHint(v *types.StringValue) { m.Data2.Hint = v }
func (m *TLAccountPassword) GetHint() *types.StringValue  { return m.Data2.Hint }

func (m *TLAccountPassword) SetEmailUnconfirmedPattern(v *types.StringValue) {
	m.Data2.EmailUnconfirmedPattern = v
}
func (m *TLAccountPassword) GetEmailUnconfirmedPattern() *types.StringValue {
	return m.Data2.EmailUnconfirmedPattern
}

func (m *TLAccountPassword) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPassword) GetNewAlgo() *PasswordKdfAlgo  { return m.Data2.NewAlgo }

func (m *TLAccountPassword) SetNewSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.NewSecureAlgo = v }
func (m *TLAccountPassword) GetNewSecureAlgo() *SecurePasswordKdfAlgo  { return m.Data2.NewSecureAlgo }

func (m *TLAccountPassword) SetSecureRandom(v []byte) { m.Data2.SecureRandom = v }
func (m *TLAccountPassword) GetSecureRandom() []byte  { return m.Data2.SecureRandom }

func (m *TLAccountPassword) SetPendingResetDate(v *types.Int32Value) { m.Data2.PendingResetDate = v }
func (m *TLAccountPassword) GetPendingResetDate() *types.Int32Value  { return m.Data2.PendingResetDate }

func (m *TLAccountPassword) GetPredicateName() string {
	return Predicate_account_password
}

func (m *TLAccountPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x185b184f: func() []byte {
			x.UInt(0x185b184f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHasRecovery() == true {
					flags |= 1 << 0
				}
				if m.GetHasSecureValues() == true {
					flags |= 1 << 1
				}
				if m.GetHasPassword() == true {
					flags |= 1 << 2
				}
				if m.GetCurrentAlgo() != nil {
					flags |= 1 << 2
				}
				if m.GetSrp_B() != nil {
					flags |= 1 << 2
				}
				if m.GetSrpId() != nil {
					flags |= 1 << 2
				}
				if m.GetHint() != nil {
					flags |= 1 << 3
				}
				if m.GetEmailUnconfirmedPattern() != nil {
					flags |= 1 << 4
				}

				if m.GetPendingResetDate() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetCurrentAlgo() != nil {
				x.Bytes(m.GetCurrentAlgo().Encode(layer))
			}

			if m.GetSrp_B() != nil {
				x.StringBytes(m.GetSrp_B())
			}

			if m.GetSrpId() != nil {
				x.Long(m.GetSrpId().Value)
			}

			if m.GetHint() != nil {
				x.String(m.GetHint().Value)
			}

			if m.GetEmailUnconfirmedPattern() != nil {
				x.String(m.GetEmailUnconfirmedPattern().Value)
			}

			x.Bytes(m.GetNewAlgo().Encode(layer))
			x.Bytes(m.GetNewSecureAlgo().Encode(layer))
			x.StringBytes(m.GetSecureRandom())
			if m.GetPendingResetDate() != nil {
				x.Int(m.GetPendingResetDate().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_password, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_password, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountPassword) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x185b184f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHasRecovery(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetHasSecureValues(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetHasPassword(true)
			}
			if (flags & (1 << 2)) != 0 {
				m4 := &PasswordKdfAlgo{}
				m4.Decode(dBuf)
				m.SetCurrentAlgo(m4)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetSrp_B(dBuf.StringBytes())
			}

			if (flags & (1 << 2)) != 0 {
				m.SetSrpId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetHint(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetEmailUnconfirmedPattern(&types.StringValue{Value: dBuf.String()})
			}

			m9 := &PasswordKdfAlgo{}
			m9.Decode(dBuf)
			m.SetNewAlgo(m9)

			m10 := &SecurePasswordKdfAlgo{}
			m10.Decode(dBuf)
			m.SetNewSecureAlgo(m10)

			m.SetSecureRandom(dBuf.StringBytes())
			if (flags & (1 << 5)) != 0 {
				m.SetPendingResetDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSetInstallResult <--
//  + TL_MessagesStickerSetInstallResultSuccess
//  + TL_MessagesStickerSetInstallResultArchive
//

func (m *Messages_StickerSetInstallResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_stickerSetInstallResultSuccess:
		t := m.To_MessagesStickerSetInstallResultSuccess()
		xBuf = t.Encode(layer)
	case Predicate_messages_stickerSetInstallResultArchive:
		t := m.To_MessagesStickerSetInstallResultArchive()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_StickerSetInstallResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_StickerSetInstallResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x38641628:
		m2 := MakeTLMessagesStickerSetInstallResultSuccess(m)
		m2.Decode(dBuf)
	case 0x35e410a8:
		m2 := MakeTLMessagesStickerSetInstallResultArchive(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_StickerSetInstallResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_stickerSetInstallResultSuccess:
		t := m.To_MessagesStickerSetInstallResultSuccess()
		return t.DebugString()
	case Predicate_messages_stickerSetInstallResultArchive:
		t := m.To_MessagesStickerSetInstallResultArchive()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesStickerSetInstallResultSuccess
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultSuccess() *TLMessagesStickerSetInstallResultSuccess {
	m.PredicateName = Predicate_messages_stickerSetInstallResultSuccess
	return &TLMessagesStickerSetInstallResultSuccess{
		Data2: m,
	}
}

// To_MessagesStickerSetInstallResultArchive
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultArchive() *TLMessagesStickerSetInstallResultArchive {
	m.PredicateName = Predicate_messages_stickerSetInstallResultArchive
	return &TLMessagesStickerSetInstallResultArchive{
		Data2: m,
	}
}

// MakeTLMessagesStickerSetInstallResultSuccess
func MakeTLMessagesStickerSetInstallResultSuccess(data2 *Messages_StickerSetInstallResult) *TLMessagesStickerSetInstallResultSuccess {
	if data2 == nil {
		return &TLMessagesStickerSetInstallResultSuccess{Data2: &Messages_StickerSetInstallResult{
			PredicateName: Predicate_messages_stickerSetInstallResultSuccess,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickerSetInstallResultSuccess
		return &TLMessagesStickerSetInstallResultSuccess{Data2: data2}
	}
}

func (m *TLMessagesStickerSetInstallResultSuccess) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
	m.Data2.PredicateName = Predicate_messages_stickerSetInstallResultSuccess
	return m.Data2
}

func (m *TLMessagesStickerSetInstallResultSuccess) GetPredicateName() string {
	return Predicate_messages_stickerSetInstallResultSuccess
}

func (m *TLMessagesStickerSetInstallResultSuccess) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x38641628: func() []byte {
			x.UInt(0x38641628)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickerSetInstallResultSuccess, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickerSetInstallResultSuccess, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickerSetInstallResultSuccess) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickerSetInstallResultSuccess) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x38641628: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickerSetInstallResultSuccess) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesStickerSetInstallResultArchive
func MakeTLMessagesStickerSetInstallResultArchive(data2 *Messages_StickerSetInstallResult) *TLMessagesStickerSetInstallResultArchive {
	if data2 == nil {
		return &TLMessagesStickerSetInstallResultArchive{Data2: &Messages_StickerSetInstallResult{
			PredicateName: Predicate_messages_stickerSetInstallResultArchive,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickerSetInstallResultArchive
		return &TLMessagesStickerSetInstallResultArchive{Data2: data2}
	}
}

func (m *TLMessagesStickerSetInstallResultArchive) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
	m.Data2.PredicateName = Predicate_messages_stickerSetInstallResultArchive
	return m.Data2
}

func (m *TLMessagesStickerSetInstallResultArchive) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesStickerSetInstallResultArchive) GetSets() []*StickerSetCovered {
	return m.Data2.Sets
}

func (m *TLMessagesStickerSetInstallResultArchive) GetPredicateName() string {
	return Predicate_messages_stickerSetInstallResultArchive
}

func (m *TLMessagesStickerSetInstallResultArchive) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x35e410a8: func() []byte {
			x.UInt(0x35e410a8)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSets())))
			for _, v := range m.GetSets() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickerSetInstallResultArchive, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickerSetInstallResultArchive, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickerSetInstallResultArchive) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickerSetInstallResultArchive) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x35e410a8: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*StickerSetCovered, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &StickerSetCovered{}
				v0[i].Decode(dBuf)
			}
			m.SetSets(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickerSetInstallResultArchive) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EmojiKeywordsDifference <--
//  + TL_EmojiKeywordsDifference
//

func (m *EmojiKeywordsDifference) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_emojiKeywordsDifference:
		t := m.To_EmojiKeywordsDifference()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EmojiKeywordsDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *EmojiKeywordsDifference) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5cc761bd:
		m2 := MakeTLEmojiKeywordsDifference(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EmojiKeywordsDifference) DebugString() string {
	switch m.PredicateName {
	case Predicate_emojiKeywordsDifference:
		t := m.To_EmojiKeywordsDifference()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EmojiKeywordsDifference
func (m *EmojiKeywordsDifference) To_EmojiKeywordsDifference() *TLEmojiKeywordsDifference {
	m.PredicateName = Predicate_emojiKeywordsDifference
	return &TLEmojiKeywordsDifference{
		Data2: m,
	}
}

// MakeTLEmojiKeywordsDifference
func MakeTLEmojiKeywordsDifference(data2 *EmojiKeywordsDifference) *TLEmojiKeywordsDifference {
	if data2 == nil {
		return &TLEmojiKeywordsDifference{Data2: &EmojiKeywordsDifference{
			PredicateName: Predicate_emojiKeywordsDifference,
		}}
	} else {
		data2.PredicateName = Predicate_emojiKeywordsDifference
		return &TLEmojiKeywordsDifference{Data2: data2}
	}
}

func (m *TLEmojiKeywordsDifference) To_EmojiKeywordsDifference() *EmojiKeywordsDifference {
	m.Data2.PredicateName = Predicate_emojiKeywordsDifference
	return m.Data2
}

func (m *TLEmojiKeywordsDifference) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLEmojiKeywordsDifference) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLEmojiKeywordsDifference) SetFromVersion(v int32) { m.Data2.FromVersion = v }
func (m *TLEmojiKeywordsDifference) GetFromVersion() int32  { return m.Data2.FromVersion }

func (m *TLEmojiKeywordsDifference) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLEmojiKeywordsDifference) GetVersion() int32  { return m.Data2.Version }

func (m *TLEmojiKeywordsDifference) SetKeywords(v []*EmojiKeyword) { m.Data2.Keywords = v }
func (m *TLEmojiKeywordsDifference) GetKeywords() []*EmojiKeyword  { return m.Data2.Keywords }

func (m *TLEmojiKeywordsDifference) GetPredicateName() string {
	return Predicate_emojiKeywordsDifference
}

func (m *TLEmojiKeywordsDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5cc761bd: func() []byte {
			x.UInt(0x5cc761bd)

			x.String(m.GetLangCode())
			x.Int(m.GetFromVersion())
			x.Int(m.GetVersion())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetKeywords())))
			for _, v := range m.GetKeywords() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_emojiKeywordsDifference, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_emojiKeywordsDifference, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEmojiKeywordsDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEmojiKeywordsDifference) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5cc761bd: func() error {
			m.SetLangCode(dBuf.String())
			m.SetFromVersion(dBuf.Int())
			m.SetVersion(dBuf.Int())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*EmojiKeyword, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &EmojiKeyword{}
				v3[i].Decode(dBuf)
			}
			m.SetKeywords(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEmojiKeywordsDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Void <--
//  + TL_Void
//

func (m *Void) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_void:
		t := m.To_Void()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Void) CalcByteSize(layer int32) int {
	return 0
}

func (m *Void) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1c084438:
		m2 := MakeTLVoid(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Void) DebugString() string {
	switch m.PredicateName {
	case Predicate_void:
		t := m.To_Void()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Void
func (m *Void) To_Void() *TLVoid {
	m.PredicateName = Predicate_void
	return &TLVoid{
		Data2: m,
	}
}

// MakeTLVoid
func MakeTLVoid(data2 *Void) *TLVoid {
	if data2 == nil {
		return &TLVoid{Data2: &Void{
			PredicateName: Predicate_void,
		}}
	} else {
		data2.PredicateName = Predicate_void
		return &TLVoid{Data2: data2}
	}
}

func (m *TLVoid) To_Void() *Void {
	m.Data2.PredicateName = Predicate_void
	return m.Data2
}

func (m *TLVoid) GetPredicateName() string {
	return Predicate_void
}

func (m *TLVoid) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1c084438: func() []byte {
			x.UInt(0x1c084438)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_void, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_void, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLVoid) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLVoid) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1c084438: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLVoid) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_Authorization <--
//  + TL_AuthAuthorization
//  + TL_AuthAuthorizationSignUpRequired
//

func (m *Auth_Authorization) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_authorization:
		t := m.To_AuthAuthorization()
		xBuf = t.Encode(layer)
	case Predicate_auth_authorizationSignUpRequired:
		t := m.To_AuthAuthorizationSignUpRequired()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_Authorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_Authorization) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x33fb7bb8:
		m2 := MakeTLAuthAuthorization(m)
		m2.Decode(dBuf)
	case 0xcd050916:
		m2 := MakeTLAuthAuthorization(m)
		m2.Decode(dBuf)
	case 0x44747e9a:
		m2 := MakeTLAuthAuthorizationSignUpRequired(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_Authorization) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_authorization:
		t := m.To_AuthAuthorization()
		return t.DebugString()
	case Predicate_auth_authorizationSignUpRequired:
		t := m.To_AuthAuthorizationSignUpRequired()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthAuthorization
func (m *Auth_Authorization) To_AuthAuthorization() *TLAuthAuthorization {
	m.PredicateName = Predicate_auth_authorization
	return &TLAuthAuthorization{
		Data2: m,
	}
}

// To_AuthAuthorizationSignUpRequired
func (m *Auth_Authorization) To_AuthAuthorizationSignUpRequired() *TLAuthAuthorizationSignUpRequired {
	m.PredicateName = Predicate_auth_authorizationSignUpRequired
	return &TLAuthAuthorizationSignUpRequired{
		Data2: m,
	}
}

// MakeTLAuthAuthorization
func MakeTLAuthAuthorization(data2 *Auth_Authorization) *TLAuthAuthorization {
	if data2 == nil {
		return &TLAuthAuthorization{Data2: &Auth_Authorization{
			PredicateName: Predicate_auth_authorization,
		}}
	} else {
		data2.PredicateName = Predicate_auth_authorization
		return &TLAuthAuthorization{Data2: data2}
	}
}

func (m *TLAuthAuthorization) To_Auth_Authorization() *Auth_Authorization {
	m.Data2.PredicateName = Predicate_auth_authorization
	return m.Data2
}

//// flags
func (m *TLAuthAuthorization) SetSetupPasswordRequired(v bool) { m.Data2.SetupPasswordRequired = v }
func (m *TLAuthAuthorization) GetSetupPasswordRequired() bool  { return m.Data2.SetupPasswordRequired }

func (m *TLAuthAuthorization) SetOtherwiseReloginDays(v *types.Int32Value) {
	m.Data2.OtherwiseReloginDays = v
}
func (m *TLAuthAuthorization) GetOtherwiseReloginDays() *types.Int32Value {
	return m.Data2.OtherwiseReloginDays
}

func (m *TLAuthAuthorization) SetTmpSessions(v *types.Int32Value) { m.Data2.TmpSessions = v }
func (m *TLAuthAuthorization) GetTmpSessions() *types.Int32Value  { return m.Data2.TmpSessions }

func (m *TLAuthAuthorization) SetUser(v *User) { m.Data2.User = v }
func (m *TLAuthAuthorization) GetUser() *User  { return m.Data2.User }

func (m *TLAuthAuthorization) GetPredicateName() string {
	return Predicate_auth_authorization
}

func (m *TLAuthAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x33fb7bb8: func() []byte {
			x.UInt(0x33fb7bb8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSetupPasswordRequired() == true {
					flags |= 1 << 1
				}
				if m.GetOtherwiseReloginDays() != nil {
					flags |= 1 << 1
				}
				if m.GetTmpSessions() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetOtherwiseReloginDays() != nil {
				x.Int(m.GetOtherwiseReloginDays().Value)
			}

			if m.GetTmpSessions() != nil {
				x.Int(m.GetTmpSessions().Value)
			}

			x.Bytes(m.GetUser().Encode(layer))
			return x.GetBuf()
		},
		0xcd050916: func() []byte {
			x.UInt(0xcd050916)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTmpSessions() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetTmpSessions() != nil {
				x.Int(m.GetTmpSessions().Value)
			}

			x.Bytes(m.GetUser().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_authorization, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_authorization, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthAuthorization) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x33fb7bb8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetSetupPasswordRequired(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetOtherwiseReloginDays(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetTmpSessions(&types.Int32Value{Value: dBuf.Int()})
			}

			m4 := &User{}
			m4.Decode(dBuf)
			m.SetUser(m4)

			return dBuf.GetError()
		},
		0xcd050916: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetTmpSessions(&types.Int32Value{Value: dBuf.Int()})
			}

			m4 := &User{}
			m4.Decode(dBuf)
			m.SetUser(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAuthAuthorizationSignUpRequired
func MakeTLAuthAuthorizationSignUpRequired(data2 *Auth_Authorization) *TLAuthAuthorizationSignUpRequired {
	if data2 == nil {
		return &TLAuthAuthorizationSignUpRequired{Data2: &Auth_Authorization{
			PredicateName: Predicate_auth_authorizationSignUpRequired,
		}}
	} else {
		data2.PredicateName = Predicate_auth_authorizationSignUpRequired
		return &TLAuthAuthorizationSignUpRequired{Data2: data2}
	}
}

func (m *TLAuthAuthorizationSignUpRequired) To_Auth_Authorization() *Auth_Authorization {
	m.Data2.PredicateName = Predicate_auth_authorizationSignUpRequired
	return m.Data2
}

//// flags
func (m *TLAuthAuthorizationSignUpRequired) SetTermsOfService(v *Help_TermsOfService) {
	m.Data2.TermsOfService = v
}
func (m *TLAuthAuthorizationSignUpRequired) GetTermsOfService() *Help_TermsOfService {
	return m.Data2.TermsOfService
}

func (m *TLAuthAuthorizationSignUpRequired) GetPredicateName() string {
	return Predicate_auth_authorizationSignUpRequired
}

func (m *TLAuthAuthorizationSignUpRequired) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x44747e9a: func() []byte {
			x.UInt(0x44747e9a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTermsOfService() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetTermsOfService() != nil {
				x.Bytes(m.GetTermsOfService().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_authorizationSignUpRequired, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_authorizationSignUpRequired, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthAuthorizationSignUpRequired) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthAuthorizationSignUpRequired) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x44747e9a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m5 := &Help_TermsOfService{}
				m5.Decode(dBuf)
				m.SetTermsOfService(m5)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthAuthorizationSignUpRequired) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BotCommand <--
//  + TL_BotCommand
//

func (m *BotCommand) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_botCommand:
		t := m.To_BotCommand()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BotCommand) CalcByteSize(layer int32) int {
	return 0
}

func (m *BotCommand) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc27ac8c7:
		m2 := MakeTLBotCommand(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BotCommand) DebugString() string {
	switch m.PredicateName {
	case Predicate_botCommand:
		t := m.To_BotCommand()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BotCommand
func (m *BotCommand) To_BotCommand() *TLBotCommand {
	m.PredicateName = Predicate_botCommand
	return &TLBotCommand{
		Data2: m,
	}
}

// MakeTLBotCommand
func MakeTLBotCommand(data2 *BotCommand) *TLBotCommand {
	if data2 == nil {
		return &TLBotCommand{Data2: &BotCommand{
			PredicateName: Predicate_botCommand,
		}}
	} else {
		data2.PredicateName = Predicate_botCommand
		return &TLBotCommand{Data2: data2}
	}
}

func (m *TLBotCommand) To_BotCommand() *BotCommand {
	m.Data2.PredicateName = Predicate_botCommand
	return m.Data2
}

func (m *TLBotCommand) SetCommand(v string) { m.Data2.Command = v }
func (m *TLBotCommand) GetCommand() string  { return m.Data2.Command }

func (m *TLBotCommand) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotCommand) GetDescription() string  { return m.Data2.Description }

func (m *TLBotCommand) GetPredicateName() string {
	return Predicate_botCommand
}

func (m *TLBotCommand) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc27ac8c7: func() []byte {
			x.UInt(0xc27ac8c7)

			x.String(m.GetCommand())
			x.String(m.GetDescription())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommand, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommand, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommand) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommand) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc27ac8c7: func() error {
			m.SetCommand(dBuf.String())
			m.SetDescription(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommand) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPaymentCredentials <--
//  + TL_InputPaymentCredentialsSaved
//  + TL_InputPaymentCredentials
//  + TL_InputPaymentCredentialsApplePay
//  + TL_InputPaymentCredentialsGooglePay
//

func (m *InputPaymentCredentials) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPaymentCredentialsSaved:
		t := m.To_InputPaymentCredentialsSaved()
		xBuf = t.Encode(layer)
	case Predicate_inputPaymentCredentials:
		t := m.To_InputPaymentCredentials()
		xBuf = t.Encode(layer)
	case Predicate_inputPaymentCredentialsApplePay:
		t := m.To_InputPaymentCredentialsApplePay()
		xBuf = t.Encode(layer)
	case Predicate_inputPaymentCredentialsGooglePay:
		t := m.To_InputPaymentCredentialsGooglePay()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPaymentCredentials) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPaymentCredentials) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc10eb2cf:
		m2 := MakeTLInputPaymentCredentialsSaved(m)
		m2.Decode(dBuf)
	case 0x3417d728:
		m2 := MakeTLInputPaymentCredentials(m)
		m2.Decode(dBuf)
	case 0xaa1c39f:
		m2 := MakeTLInputPaymentCredentialsApplePay(m)
		m2.Decode(dBuf)
	case 0x8ac32801:
		m2 := MakeTLInputPaymentCredentialsGooglePay(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPaymentCredentials) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPaymentCredentialsSaved:
		t := m.To_InputPaymentCredentialsSaved()
		return t.DebugString()
	case Predicate_inputPaymentCredentials:
		t := m.To_InputPaymentCredentials()
		return t.DebugString()
	case Predicate_inputPaymentCredentialsApplePay:
		t := m.To_InputPaymentCredentialsApplePay()
		return t.DebugString()
	case Predicate_inputPaymentCredentialsGooglePay:
		t := m.To_InputPaymentCredentialsGooglePay()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPaymentCredentialsSaved
func (m *InputPaymentCredentials) To_InputPaymentCredentialsSaved() *TLInputPaymentCredentialsSaved {
	m.PredicateName = Predicate_inputPaymentCredentialsSaved
	return &TLInputPaymentCredentialsSaved{
		Data2: m,
	}
}

// To_InputPaymentCredentials
func (m *InputPaymentCredentials) To_InputPaymentCredentials() *TLInputPaymentCredentials {
	m.PredicateName = Predicate_inputPaymentCredentials
	return &TLInputPaymentCredentials{
		Data2: m,
	}
}

// To_InputPaymentCredentialsApplePay
func (m *InputPaymentCredentials) To_InputPaymentCredentialsApplePay() *TLInputPaymentCredentialsApplePay {
	m.PredicateName = Predicate_inputPaymentCredentialsApplePay
	return &TLInputPaymentCredentialsApplePay{
		Data2: m,
	}
}

// To_InputPaymentCredentialsGooglePay
func (m *InputPaymentCredentials) To_InputPaymentCredentialsGooglePay() *TLInputPaymentCredentialsGooglePay {
	m.PredicateName = Predicate_inputPaymentCredentialsGooglePay
	return &TLInputPaymentCredentialsGooglePay{
		Data2: m,
	}
}

// MakeTLInputPaymentCredentialsSaved
func MakeTLInputPaymentCredentialsSaved(data2 *InputPaymentCredentials) *TLInputPaymentCredentialsSaved {
	if data2 == nil {
		return &TLInputPaymentCredentialsSaved{Data2: &InputPaymentCredentials{
			PredicateName: Predicate_inputPaymentCredentialsSaved,
		}}
	} else {
		data2.PredicateName = Predicate_inputPaymentCredentialsSaved
		return &TLInputPaymentCredentialsSaved{Data2: data2}
	}
}

func (m *TLInputPaymentCredentialsSaved) To_InputPaymentCredentials() *InputPaymentCredentials {
	m.Data2.PredicateName = Predicate_inputPaymentCredentialsSaved
	return m.Data2
}

func (m *TLInputPaymentCredentialsSaved) SetId(v string) { m.Data2.Id = v }
func (m *TLInputPaymentCredentialsSaved) GetId() string  { return m.Data2.Id }

func (m *TLInputPaymentCredentialsSaved) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLInputPaymentCredentialsSaved) GetTmpPassword() []byte  { return m.Data2.TmpPassword }

func (m *TLInputPaymentCredentialsSaved) GetPredicateName() string {
	return Predicate_inputPaymentCredentialsSaved
}

func (m *TLInputPaymentCredentialsSaved) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc10eb2cf: func() []byte {
			x.UInt(0xc10eb2cf)

			x.String(m.GetId())
			x.StringBytes(m.GetTmpPassword())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPaymentCredentialsSaved, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPaymentCredentialsSaved, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPaymentCredentialsSaved) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPaymentCredentialsSaved) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc10eb2cf: func() error {
			m.SetId(dBuf.String())
			m.SetTmpPassword(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPaymentCredentialsSaved) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPaymentCredentials
func MakeTLInputPaymentCredentials(data2 *InputPaymentCredentials) *TLInputPaymentCredentials {
	if data2 == nil {
		return &TLInputPaymentCredentials{Data2: &InputPaymentCredentials{
			PredicateName: Predicate_inputPaymentCredentials,
		}}
	} else {
		data2.PredicateName = Predicate_inputPaymentCredentials
		return &TLInputPaymentCredentials{Data2: data2}
	}
}

func (m *TLInputPaymentCredentials) To_InputPaymentCredentials() *InputPaymentCredentials {
	m.Data2.PredicateName = Predicate_inputPaymentCredentials
	return m.Data2
}

//// flags
func (m *TLInputPaymentCredentials) SetSave(v bool) { m.Data2.Save = v }
func (m *TLInputPaymentCredentials) GetSave() bool  { return m.Data2.Save }

func (m *TLInputPaymentCredentials) SetData(v *DataJSON) { m.Data2.Data = v }
func (m *TLInputPaymentCredentials) GetData() *DataJSON  { return m.Data2.Data }

func (m *TLInputPaymentCredentials) GetPredicateName() string {
	return Predicate_inputPaymentCredentials
}

func (m *TLInputPaymentCredentials) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3417d728: func() []byte {
			x.UInt(0x3417d728)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSave() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPaymentCredentials, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPaymentCredentials, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPaymentCredentials) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPaymentCredentials) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3417d728: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetSave(true)
			}

			m4 := &DataJSON{}
			m4.Decode(dBuf)
			m.SetData(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPaymentCredentials) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPaymentCredentialsApplePay
func MakeTLInputPaymentCredentialsApplePay(data2 *InputPaymentCredentials) *TLInputPaymentCredentialsApplePay {
	if data2 == nil {
		return &TLInputPaymentCredentialsApplePay{Data2: &InputPaymentCredentials{
			PredicateName: Predicate_inputPaymentCredentialsApplePay,
		}}
	} else {
		data2.PredicateName = Predicate_inputPaymentCredentialsApplePay
		return &TLInputPaymentCredentialsApplePay{Data2: data2}
	}
}

func (m *TLInputPaymentCredentialsApplePay) To_InputPaymentCredentials() *InputPaymentCredentials {
	m.Data2.PredicateName = Predicate_inputPaymentCredentialsApplePay
	return m.Data2
}

func (m *TLInputPaymentCredentialsApplePay) SetPaymentData(v *DataJSON) { m.Data2.PaymentData = v }
func (m *TLInputPaymentCredentialsApplePay) GetPaymentData() *DataJSON  { return m.Data2.PaymentData }

func (m *TLInputPaymentCredentialsApplePay) GetPredicateName() string {
	return Predicate_inputPaymentCredentialsApplePay
}

func (m *TLInputPaymentCredentialsApplePay) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaa1c39f: func() []byte {
			x.UInt(0xaa1c39f)

			x.Bytes(m.GetPaymentData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPaymentCredentialsApplePay, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPaymentCredentialsApplePay, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPaymentCredentialsApplePay) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPaymentCredentialsApplePay) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaa1c39f: func() error {

			m5 := &DataJSON{}
			m5.Decode(dBuf)
			m.SetPaymentData(m5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPaymentCredentialsApplePay) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPaymentCredentialsGooglePay
func MakeTLInputPaymentCredentialsGooglePay(data2 *InputPaymentCredentials) *TLInputPaymentCredentialsGooglePay {
	if data2 == nil {
		return &TLInputPaymentCredentialsGooglePay{Data2: &InputPaymentCredentials{
			PredicateName: Predicate_inputPaymentCredentialsGooglePay,
		}}
	} else {
		data2.PredicateName = Predicate_inputPaymentCredentialsGooglePay
		return &TLInputPaymentCredentialsGooglePay{Data2: data2}
	}
}

func (m *TLInputPaymentCredentialsGooglePay) To_InputPaymentCredentials() *InputPaymentCredentials {
	m.Data2.PredicateName = Predicate_inputPaymentCredentialsGooglePay
	return m.Data2
}

func (m *TLInputPaymentCredentialsGooglePay) SetPaymentToken(v *DataJSON) { m.Data2.PaymentToken = v }
func (m *TLInputPaymentCredentialsGooglePay) GetPaymentToken() *DataJSON  { return m.Data2.PaymentToken }

func (m *TLInputPaymentCredentialsGooglePay) GetPredicateName() string {
	return Predicate_inputPaymentCredentialsGooglePay
}

func (m *TLInputPaymentCredentialsGooglePay) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8ac32801: func() []byte {
			x.UInt(0x8ac32801)

			x.Bytes(m.GetPaymentToken().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPaymentCredentialsGooglePay, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPaymentCredentialsGooglePay, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPaymentCredentialsGooglePay) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPaymentCredentialsGooglePay) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8ac32801: func() error {

			m6 := &DataJSON{}
			m6.Decode(dBuf)
			m.SetPaymentToken(m6)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPaymentCredentialsGooglePay) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// LangPackLanguage <--
//  + TL_LangPackLanguage
//

func (m *LangPackLanguage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_langPackLanguage:
		t := m.To_LangPackLanguage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *LangPackLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *LangPackLanguage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xeeca5ce3:
		m2 := MakeTLLangPackLanguage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *LangPackLanguage) DebugString() string {
	switch m.PredicateName {
	case Predicate_langPackLanguage:
		t := m.To_LangPackLanguage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_LangPackLanguage
func (m *LangPackLanguage) To_LangPackLanguage() *TLLangPackLanguage {
	m.PredicateName = Predicate_langPackLanguage
	return &TLLangPackLanguage{
		Data2: m,
	}
}

// MakeTLLangPackLanguage
func MakeTLLangPackLanguage(data2 *LangPackLanguage) *TLLangPackLanguage {
	if data2 == nil {
		return &TLLangPackLanguage{Data2: &LangPackLanguage{
			PredicateName: Predicate_langPackLanguage,
		}}
	} else {
		data2.PredicateName = Predicate_langPackLanguage
		return &TLLangPackLanguage{Data2: data2}
	}
}

func (m *TLLangPackLanguage) To_LangPackLanguage() *LangPackLanguage {
	m.Data2.PredicateName = Predicate_langPackLanguage
	return m.Data2
}

//// flags
func (m *TLLangPackLanguage) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLLangPackLanguage) GetOfficial() bool  { return m.Data2.Official }

func (m *TLLangPackLanguage) SetRtl(v bool) { m.Data2.Rtl = v }
func (m *TLLangPackLanguage) GetRtl() bool  { return m.Data2.Rtl }

func (m *TLLangPackLanguage) SetBeta(v bool) { m.Data2.Beta = v }
func (m *TLLangPackLanguage) GetBeta() bool  { return m.Data2.Beta }

func (m *TLLangPackLanguage) SetName(v string) { m.Data2.Name = v }
func (m *TLLangPackLanguage) GetName() string  { return m.Data2.Name }

func (m *TLLangPackLanguage) SetNativeName(v string) { m.Data2.NativeName = v }
func (m *TLLangPackLanguage) GetNativeName() string  { return m.Data2.NativeName }

func (m *TLLangPackLanguage) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackLanguage) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLLangPackLanguage) SetBaseLangCode(v *types.StringValue) { m.Data2.BaseLangCode = v }
func (m *TLLangPackLanguage) GetBaseLangCode() *types.StringValue  { return m.Data2.BaseLangCode }

func (m *TLLangPackLanguage) SetPluralCode(v string) { m.Data2.PluralCode = v }
func (m *TLLangPackLanguage) GetPluralCode() string  { return m.Data2.PluralCode }

func (m *TLLangPackLanguage) SetStringsCount(v int32) { m.Data2.StringsCount = v }
func (m *TLLangPackLanguage) GetStringsCount() int32  { return m.Data2.StringsCount }

func (m *TLLangPackLanguage) SetTranslatedCount(v int32) { m.Data2.TranslatedCount = v }
func (m *TLLangPackLanguage) GetTranslatedCount() int32  { return m.Data2.TranslatedCount }

func (m *TLLangPackLanguage) SetTranslationsUrl(v string) { m.Data2.TranslationsUrl = v }
func (m *TLLangPackLanguage) GetTranslationsUrl() string  { return m.Data2.TranslationsUrl }

func (m *TLLangPackLanguage) GetPredicateName() string {
	return Predicate_langPackLanguage
}

func (m *TLLangPackLanguage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeeca5ce3: func() []byte {
			x.UInt(0xeeca5ce3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOfficial() == true {
					flags |= 1 << 0
				}
				if m.GetRtl() == true {
					flags |= 1 << 2
				}
				if m.GetBeta() == true {
					flags |= 1 << 3
				}

				if m.GetBaseLangCode() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetName())
			x.String(m.GetNativeName())
			x.String(m.GetLangCode())
			if m.GetBaseLangCode() != nil {
				x.String(m.GetBaseLangCode().Value)
			}

			x.String(m.GetPluralCode())
			x.Int(m.GetStringsCount())
			x.Int(m.GetTranslatedCount())
			x.String(m.GetTranslationsUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_langPackLanguage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_langPackLanguage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLangPackLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangPackLanguage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeeca5ce3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetOfficial(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetRtl(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetBeta(true)
			}
			m.SetName(dBuf.String())
			m.SetNativeName(dBuf.String())
			m.SetLangCode(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetBaseLangCode(&types.StringValue{Value: dBuf.String()})
			}

			m.SetPluralCode(dBuf.String())
			m.SetStringsCount(dBuf.Int())
			m.SetTranslatedCount(dBuf.Int())
			m.SetTranslationsUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLangPackLanguage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageTableCell <--
//  + TL_PageTableCell
//

func (m *PageTableCell) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageTableCell:
		t := m.To_PageTableCell()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageTableCell) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageTableCell) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x34566b6a:
		m2 := MakeTLPageTableCell(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageTableCell) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageTableCell:
		t := m.To_PageTableCell()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageTableCell
func (m *PageTableCell) To_PageTableCell() *TLPageTableCell {
	m.PredicateName = Predicate_pageTableCell
	return &TLPageTableCell{
		Data2: m,
	}
}

// MakeTLPageTableCell
func MakeTLPageTableCell(data2 *PageTableCell) *TLPageTableCell {
	if data2 == nil {
		return &TLPageTableCell{Data2: &PageTableCell{
			PredicateName: Predicate_pageTableCell,
		}}
	} else {
		data2.PredicateName = Predicate_pageTableCell
		return &TLPageTableCell{Data2: data2}
	}
}

func (m *TLPageTableCell) To_PageTableCell() *PageTableCell {
	m.Data2.PredicateName = Predicate_pageTableCell
	return m.Data2
}

//// flags
func (m *TLPageTableCell) SetHeader(v bool) { m.Data2.Header = v }
func (m *TLPageTableCell) GetHeader() bool  { return m.Data2.Header }

func (m *TLPageTableCell) SetAlignCenter(v bool) { m.Data2.AlignCenter = v }
func (m *TLPageTableCell) GetAlignCenter() bool  { return m.Data2.AlignCenter }

func (m *TLPageTableCell) SetAlignRight(v bool) { m.Data2.AlignRight = v }
func (m *TLPageTableCell) GetAlignRight() bool  { return m.Data2.AlignRight }

func (m *TLPageTableCell) SetValignMiddle(v bool) { m.Data2.ValignMiddle = v }
func (m *TLPageTableCell) GetValignMiddle() bool  { return m.Data2.ValignMiddle }

func (m *TLPageTableCell) SetValignBottom(v bool) { m.Data2.ValignBottom = v }
func (m *TLPageTableCell) GetValignBottom() bool  { return m.Data2.ValignBottom }

func (m *TLPageTableCell) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageTableCell) GetText() *RichText  { return m.Data2.Text }

func (m *TLPageTableCell) SetColspan(v *types.Int32Value) { m.Data2.Colspan = v }
func (m *TLPageTableCell) GetColspan() *types.Int32Value  { return m.Data2.Colspan }

func (m *TLPageTableCell) SetRowspan(v *types.Int32Value) { m.Data2.Rowspan = v }
func (m *TLPageTableCell) GetRowspan() *types.Int32Value  { return m.Data2.Rowspan }

func (m *TLPageTableCell) GetPredicateName() string {
	return Predicate_pageTableCell
}

func (m *TLPageTableCell) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x34566b6a: func() []byte {
			x.UInt(0x34566b6a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHeader() == true {
					flags |= 1 << 0
				}
				if m.GetAlignCenter() == true {
					flags |= 1 << 3
				}
				if m.GetAlignRight() == true {
					flags |= 1 << 4
				}
				if m.GetValignMiddle() == true {
					flags |= 1 << 5
				}
				if m.GetValignBottom() == true {
					flags |= 1 << 6
				}
				if m.GetText() != nil {
					flags |= 1 << 7
				}
				if m.GetColspan() != nil {
					flags |= 1 << 1
				}
				if m.GetRowspan() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetText() != nil {
				x.Bytes(m.GetText().Encode(layer))
			}

			if m.GetColspan() != nil {
				x.Int(m.GetColspan().Value)
			}

			if m.GetRowspan() != nil {
				x.Int(m.GetRowspan().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageTableCell, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageTableCell, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageTableCell) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageTableCell) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x34566b6a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHeader(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetAlignCenter(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetAlignRight(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetValignMiddle(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetValignBottom(true)
			}
			if (flags & (1 << 7)) != 0 {
				m6 := &RichText{}
				m6.Decode(dBuf)
				m.SetText(m6)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetColspan(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetRowspan(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageTableCell) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputFile <--
//  + TL_InputFile
//  + TL_InputFileBig
//

func (m *InputFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputFile:
		t := m.To_InputFile()
		xBuf = t.Encode(layer)
	case Predicate_inputFileBig:
		t := m.To_InputFileBig()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf52ff27f:
		m2 := MakeTLInputFile(m)
		m2.Decode(dBuf)
	case 0xfa4f0bb5:
		m2 := MakeTLInputFileBig(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputFile:
		t := m.To_InputFile()
		return t.DebugString()
	case Predicate_inputFileBig:
		t := m.To_InputFileBig()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputFile
func (m *InputFile) To_InputFile() *TLInputFile {
	m.PredicateName = Predicate_inputFile
	return &TLInputFile{
		Data2: m,
	}
}

// To_InputFileBig
func (m *InputFile) To_InputFileBig() *TLInputFileBig {
	m.PredicateName = Predicate_inputFileBig
	return &TLInputFileBig{
		Data2: m,
	}
}

// MakeTLInputFile
func MakeTLInputFile(data2 *InputFile) *TLInputFile {
	if data2 == nil {
		return &TLInputFile{Data2: &InputFile{
			PredicateName: Predicate_inputFile,
		}}
	} else {
		data2.PredicateName = Predicate_inputFile
		return &TLInputFile{Data2: data2}
	}
}

func (m *TLInputFile) To_InputFile() *InputFile {
	m.Data2.PredicateName = Predicate_inputFile
	return m.Data2
}

func (m *TLInputFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputFile) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFile) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputFile) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFile) GetName() string  { return m.Data2.Name }

func (m *TLInputFile) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputFile) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func (m *TLInputFile) GetPredicateName() string {
	return Predicate_inputFile
}

func (m *TLInputFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf52ff27f: func() []byte {
			x.UInt(0xf52ff27f)

			x.Long(m.GetId())
			x.Int(m.GetParts())
			x.String(m.GetName())
			x.String(m.GetMd5Checksum())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf52ff27f: func() error {
			m.SetId(dBuf.Long())
			m.SetParts(dBuf.Int())
			m.SetName(dBuf.String())
			m.SetMd5Checksum(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputFileBig
func MakeTLInputFileBig(data2 *InputFile) *TLInputFileBig {
	if data2 == nil {
		return &TLInputFileBig{Data2: &InputFile{
			PredicateName: Predicate_inputFileBig,
		}}
	} else {
		data2.PredicateName = Predicate_inputFileBig
		return &TLInputFileBig{Data2: data2}
	}
}

func (m *TLInputFileBig) To_InputFile() *InputFile {
	m.Data2.PredicateName = Predicate_inputFileBig
	return m.Data2
}

func (m *TLInputFileBig) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFileBig) GetId() int64  { return m.Data2.Id }

func (m *TLInputFileBig) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFileBig) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputFileBig) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFileBig) GetName() string  { return m.Data2.Name }

func (m *TLInputFileBig) GetPredicateName() string {
	return Predicate_inputFileBig
}

func (m *TLInputFileBig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfa4f0bb5: func() []byte {
			x.UInt(0xfa4f0bb5)

			x.Long(m.GetId())
			x.Int(m.GetParts())
			x.String(m.GetName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputFileBig, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputFileBig, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputFileBig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputFileBig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfa4f0bb5: func() error {
			m.SetId(dBuf.Long())
			m.SetParts(dBuf.Int())
			m.SetName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputFileBig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// UserProfilePhoto <--
//  + TL_UserProfilePhotoEmpty
//  + TL_UserProfilePhoto
//

func (m *UserProfilePhoto) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_userProfilePhotoEmpty:
		t := m.To_UserProfilePhotoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_userProfilePhoto:
		t := m.To_UserProfilePhoto()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *UserProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *UserProfilePhoto) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4f11bae1:
		m2 := MakeTLUserProfilePhotoEmpty(m)
		m2.Decode(dBuf)
	case 0x82d1f706:
		m2 := MakeTLUserProfilePhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *UserProfilePhoto) DebugString() string {
	switch m.PredicateName {
	case Predicate_userProfilePhotoEmpty:
		t := m.To_UserProfilePhotoEmpty()
		return t.DebugString()
	case Predicate_userProfilePhoto:
		t := m.To_UserProfilePhoto()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UserProfilePhotoEmpty
func (m *UserProfilePhoto) To_UserProfilePhotoEmpty() *TLUserProfilePhotoEmpty {
	m.PredicateName = Predicate_userProfilePhotoEmpty
	return &TLUserProfilePhotoEmpty{
		Data2: m,
	}
}

// To_UserProfilePhoto
func (m *UserProfilePhoto) To_UserProfilePhoto() *TLUserProfilePhoto {
	m.PredicateName = Predicate_userProfilePhoto
	return &TLUserProfilePhoto{
		Data2: m,
	}
}

// MakeTLUserProfilePhotoEmpty
func MakeTLUserProfilePhotoEmpty(data2 *UserProfilePhoto) *TLUserProfilePhotoEmpty {
	if data2 == nil {
		return &TLUserProfilePhotoEmpty{Data2: &UserProfilePhoto{
			PredicateName: Predicate_userProfilePhotoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_userProfilePhotoEmpty
		return &TLUserProfilePhotoEmpty{Data2: data2}
	}
}

func (m *TLUserProfilePhotoEmpty) To_UserProfilePhoto() *UserProfilePhoto {
	m.Data2.PredicateName = Predicate_userProfilePhotoEmpty
	return m.Data2
}

func (m *TLUserProfilePhotoEmpty) GetPredicateName() string {
	return Predicate_userProfilePhotoEmpty
}

func (m *TLUserProfilePhotoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4f11bae1: func() []byte {
			x.UInt(0x4f11bae1)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userProfilePhotoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userProfilePhotoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserProfilePhotoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserProfilePhotoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4f11bae1: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserProfilePhotoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserProfilePhoto
func MakeTLUserProfilePhoto(data2 *UserProfilePhoto) *TLUserProfilePhoto {
	if data2 == nil {
		return &TLUserProfilePhoto{Data2: &UserProfilePhoto{
			PredicateName: Predicate_userProfilePhoto,
		}}
	} else {
		data2.PredicateName = Predicate_userProfilePhoto
		return &TLUserProfilePhoto{Data2: data2}
	}
}

func (m *TLUserProfilePhoto) To_UserProfilePhoto() *UserProfilePhoto {
	m.Data2.PredicateName = Predicate_userProfilePhoto
	return m.Data2
}

//// flags
func (m *TLUserProfilePhoto) SetHasVideo(v bool) { m.Data2.HasVideo = v }
func (m *TLUserProfilePhoto) GetHasVideo() bool  { return m.Data2.HasVideo }

func (m *TLUserProfilePhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLUserProfilePhoto) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLUserProfilePhoto) SetStrippedThumb(v []byte) { m.Data2.StrippedThumb = v }
func (m *TLUserProfilePhoto) GetStrippedThumb() []byte  { return m.Data2.StrippedThumb }

func (m *TLUserProfilePhoto) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUserProfilePhoto) GetDcId() int32  { return m.Data2.DcId }

func (m *TLUserProfilePhoto) GetPredicateName() string {
	return Predicate_userProfilePhoto
}

func (m *TLUserProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x82d1f706: func() []byte {
			x.UInt(0x82d1f706)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHasVideo() == true {
					flags |= 1 << 0
				}

				if m.GetStrippedThumb() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetPhotoId())
			if m.GetStrippedThumb() != nil {
				x.StringBytes(m.GetStrippedThumb())
			}

			x.Int(m.GetDcId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userProfilePhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userProfilePhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserProfilePhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x82d1f706: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHasVideo(true)
			}
			m.SetPhotoId(dBuf.Long())
			if (flags & (1 << 1)) != 0 {
				m.SetStrippedThumb(dBuf.StringBytes())
			}

			m.SetDcId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Messages <--
//  + TL_MessagesMessages
//  + TL_MessagesMessagesSlice
//  + TL_MessagesChannelMessages
//  + TL_MessagesMessagesNotModified
//

func (m *Messages_Messages) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_messages:
		t := m.To_MessagesMessages()
		xBuf = t.Encode(layer)
	case Predicate_messages_messagesSlice:
		t := m.To_MessagesMessagesSlice()
		xBuf = t.Encode(layer)
	case Predicate_messages_channelMessages:
		t := m.To_MessagesChannelMessages()
		xBuf = t.Encode(layer)
	case Predicate_messages_messagesNotModified:
		t := m.To_MessagesMessagesNotModified()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_Messages) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_Messages) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8c718e87:
		m2 := MakeTLMessagesMessages(m)
		m2.Decode(dBuf)
	case 0x3a54685e:
		m2 := MakeTLMessagesMessagesSlice(m)
		m2.Decode(dBuf)
	case 0x64479808:
		m2 := MakeTLMessagesChannelMessages(m)
		m2.Decode(dBuf)
	case 0x74535f21:
		m2 := MakeTLMessagesMessagesNotModified(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_Messages) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_messages:
		t := m.To_MessagesMessages()
		return t.DebugString()
	case Predicate_messages_messagesSlice:
		t := m.To_MessagesMessagesSlice()
		return t.DebugString()
	case Predicate_messages_channelMessages:
		t := m.To_MessagesChannelMessages()
		return t.DebugString()
	case Predicate_messages_messagesNotModified:
		t := m.To_MessagesMessagesNotModified()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesMessages
func (m *Messages_Messages) To_MessagesMessages() *TLMessagesMessages {
	m.PredicateName = Predicate_messages_messages
	return &TLMessagesMessages{
		Data2: m,
	}
}

// To_MessagesMessagesSlice
func (m *Messages_Messages) To_MessagesMessagesSlice() *TLMessagesMessagesSlice {
	m.PredicateName = Predicate_messages_messagesSlice
	return &TLMessagesMessagesSlice{
		Data2: m,
	}
}

// To_MessagesChannelMessages
func (m *Messages_Messages) To_MessagesChannelMessages() *TLMessagesChannelMessages {
	m.PredicateName = Predicate_messages_channelMessages
	return &TLMessagesChannelMessages{
		Data2: m,
	}
}

// To_MessagesMessagesNotModified
func (m *Messages_Messages) To_MessagesMessagesNotModified() *TLMessagesMessagesNotModified {
	m.PredicateName = Predicate_messages_messagesNotModified
	return &TLMessagesMessagesNotModified{
		Data2: m,
	}
}

// MakeTLMessagesMessages
func MakeTLMessagesMessages(data2 *Messages_Messages) *TLMessagesMessages {
	if data2 == nil {
		return &TLMessagesMessages{Data2: &Messages_Messages{
			PredicateName: Predicate_messages_messages,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messages
		return &TLMessagesMessages{Data2: data2}
	}
}

func (m *TLMessagesMessages) To_Messages_Messages() *Messages_Messages {
	m.Data2.PredicateName = Predicate_messages_messages
	return m.Data2
}

func (m *TLMessagesMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessages) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessages) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessages) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesMessages) GetPredicateName() string {
	return Predicate_messages_messages
}

func (m *TLMessagesMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c718e87: func() []byte {
			x.UInt(0x8c718e87)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c718e87: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Message, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Message{}
				v0[i].Decode(dBuf)
			}
			m.SetMessages(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesMessagesSlice
func MakeTLMessagesMessagesSlice(data2 *Messages_Messages) *TLMessagesMessagesSlice {
	if data2 == nil {
		return &TLMessagesMessagesSlice{Data2: &Messages_Messages{
			PredicateName: Predicate_messages_messagesSlice,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messagesSlice
		return &TLMessagesMessagesSlice{Data2: data2}
	}
}

func (m *TLMessagesMessagesSlice) To_Messages_Messages() *Messages_Messages {
	m.Data2.PredicateName = Predicate_messages_messagesSlice
	return m.Data2
}

//// flags
func (m *TLMessagesMessagesSlice) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessagesMessagesSlice) GetInexact() bool  { return m.Data2.Inexact }

func (m *TLMessagesMessagesSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesMessagesSlice) SetNextRate(v *types.Int32Value) { m.Data2.NextRate = v }
func (m *TLMessagesMessagesSlice) GetNextRate() *types.Int32Value  { return m.Data2.NextRate }

func (m *TLMessagesMessagesSlice) SetOffsetIdOffset(v *types.Int32Value) { m.Data2.OffsetIdOffset = v }
func (m *TLMessagesMessagesSlice) GetOffsetIdOffset() *types.Int32Value {
	return m.Data2.OffsetIdOffset
}

func (m *TLMessagesMessagesSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessagesSlice) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesMessagesSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessagesSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessagesSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessagesSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesMessagesSlice) GetPredicateName() string {
	return Predicate_messages_messagesSlice
}

func (m *TLMessagesMessagesSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3a54685e: func() []byte {
			x.UInt(0x3a54685e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInexact() == true {
					flags |= 1 << 1
				}

				if m.GetNextRate() != nil {
					flags |= 1 << 0
				}
				if m.GetOffsetIdOffset() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetCount())
			if m.GetNextRate() != nil {
				x.Int(m.GetNextRate().Value)
			}

			if m.GetOffsetIdOffset() != nil {
				x.Int(m.GetOffsetIdOffset().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messagesSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messagesSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessagesSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessagesSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3a54685e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetInexact(true)
			}
			m.SetCount(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetNextRate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetOffsetIdOffset(&types.Int32Value{Value: dBuf.Int()})
			}

			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Message, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Message{}
				v0[i].Decode(dBuf)
			}
			m.SetMessages(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessagesSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesChannelMessages
func MakeTLMessagesChannelMessages(data2 *Messages_Messages) *TLMessagesChannelMessages {
	if data2 == nil {
		return &TLMessagesChannelMessages{Data2: &Messages_Messages{
			PredicateName: Predicate_messages_channelMessages,
		}}
	} else {
		data2.PredicateName = Predicate_messages_channelMessages
		return &TLMessagesChannelMessages{Data2: data2}
	}
}

func (m *TLMessagesChannelMessages) To_Messages_Messages() *Messages_Messages {
	m.Data2.PredicateName = Predicate_messages_channelMessages
	return m.Data2
}

//// flags
func (m *TLMessagesChannelMessages) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessagesChannelMessages) GetInexact() bool  { return m.Data2.Inexact }

func (m *TLMessagesChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesChannelMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesChannelMessages) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChannelMessages) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesChannelMessages) SetOffsetIdOffset(v *types.Int32Value) {
	m.Data2.OffsetIdOffset = v
}
func (m *TLMessagesChannelMessages) GetOffsetIdOffset() *types.Int32Value {
	return m.Data2.OffsetIdOffset
}

func (m *TLMessagesChannelMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesChannelMessages) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesChannelMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChannelMessages) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesChannelMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChannelMessages) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesChannelMessages) GetPredicateName() string {
	return Predicate_messages_channelMessages
}

func (m *TLMessagesChannelMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64479808: func() []byte {
			x.UInt(0x64479808)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInexact() == true {
					flags |= 1 << 1
				}

				if m.GetOffsetIdOffset() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetPts())
			x.Int(m.GetCount())
			if m.GetOffsetIdOffset() != nil {
				x.Int(m.GetOffsetIdOffset().Value)
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_channelMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_channelMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChannelMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChannelMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64479808: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetInexact(true)
			}
			m.SetPts(dBuf.Int())
			m.SetCount(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m.SetOffsetIdOffset(&types.Int32Value{Value: dBuf.Int()})
			}

			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Message, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Message{}
				v0[i].Decode(dBuf)
			}
			m.SetMessages(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChannelMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesMessagesNotModified
func MakeTLMessagesMessagesNotModified(data2 *Messages_Messages) *TLMessagesMessagesNotModified {
	if data2 == nil {
		return &TLMessagesMessagesNotModified{Data2: &Messages_Messages{
			PredicateName: Predicate_messages_messagesNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messagesNotModified
		return &TLMessagesMessagesNotModified{Data2: data2}
	}
}

func (m *TLMessagesMessagesNotModified) To_Messages_Messages() *Messages_Messages {
	m.Data2.PredicateName = Predicate_messages_messagesNotModified
	return m.Data2
}

func (m *TLMessagesMessagesNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesNotModified) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesMessagesNotModified) GetPredicateName() string {
	return Predicate_messages_messagesNotModified
}

func (m *TLMessagesMessagesNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x74535f21: func() []byte {
			x.UInt(0x74535f21)

			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messagesNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messagesNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessagesNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessagesNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x74535f21: func() error {
			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessagesNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedMessage <--
//  + TL_EncryptedMessage
//  + TL_EncryptedMessageService
//

func (m *EncryptedMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_encryptedMessage:
		t := m.To_EncryptedMessage()
		xBuf = t.Encode(layer)
	case Predicate_encryptedMessageService:
		t := m.To_EncryptedMessageService()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EncryptedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *EncryptedMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xed18c118:
		m2 := MakeTLEncryptedMessage(m)
		m2.Decode(dBuf)
	case 0x23734b06:
		m2 := MakeTLEncryptedMessageService(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EncryptedMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_encryptedMessage:
		t := m.To_EncryptedMessage()
		return t.DebugString()
	case Predicate_encryptedMessageService:
		t := m.To_EncryptedMessageService()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EncryptedMessage
func (m *EncryptedMessage) To_EncryptedMessage() *TLEncryptedMessage {
	m.PredicateName = Predicate_encryptedMessage
	return &TLEncryptedMessage{
		Data2: m,
	}
}

// To_EncryptedMessageService
func (m *EncryptedMessage) To_EncryptedMessageService() *TLEncryptedMessageService {
	m.PredicateName = Predicate_encryptedMessageService
	return &TLEncryptedMessageService{
		Data2: m,
	}
}

// MakeTLEncryptedMessage
func MakeTLEncryptedMessage(data2 *EncryptedMessage) *TLEncryptedMessage {
	if data2 == nil {
		return &TLEncryptedMessage{Data2: &EncryptedMessage{
			PredicateName: Predicate_encryptedMessage,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedMessage
		return &TLEncryptedMessage{Data2: data2}
	}
}

func (m *TLEncryptedMessage) To_EncryptedMessage() *EncryptedMessage {
	m.Data2.PredicateName = Predicate_encryptedMessage
	return m.Data2
}

func (m *TLEncryptedMessage) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessage) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLEncryptedMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessage) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedMessage) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessage) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLEncryptedMessage) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLEncryptedMessage) GetFile() *EncryptedFile  { return m.Data2.File }

func (m *TLEncryptedMessage) GetPredicateName() string {
	return Predicate_encryptedMessage
}

func (m *TLEncryptedMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed18c118: func() []byte {
			x.UInt(0xed18c118)

			x.Long(m.GetRandomId())
			x.Int(m.GetChatId())
			x.Int(m.GetDate())
			x.StringBytes(m.GetBytes())
			x.Bytes(m.GetFile().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed18c118: func() error {
			m.SetRandomId(dBuf.Long())
			m.SetChatId(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetBytes(dBuf.StringBytes())

			m4 := &EncryptedFile{}
			m4.Decode(dBuf)
			m.SetFile(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedMessageService
func MakeTLEncryptedMessageService(data2 *EncryptedMessage) *TLEncryptedMessageService {
	if data2 == nil {
		return &TLEncryptedMessageService{Data2: &EncryptedMessage{
			PredicateName: Predicate_encryptedMessageService,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedMessageService
		return &TLEncryptedMessageService{Data2: data2}
	}
}

func (m *TLEncryptedMessageService) To_EncryptedMessage() *EncryptedMessage {
	m.Data2.PredicateName = Predicate_encryptedMessageService
	return m.Data2
}

func (m *TLEncryptedMessageService) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessageService) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLEncryptedMessageService) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessageService) GetChatId() int32  { return m.Data2.ChatId }

func (m *TLEncryptedMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessageService) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedMessageService) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessageService) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLEncryptedMessageService) GetPredicateName() string {
	return Predicate_encryptedMessageService
}

func (m *TLEncryptedMessageService) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x23734b06: func() []byte {
			x.UInt(0x23734b06)

			x.Long(m.GetRandomId())
			x.Int(m.GetChatId())
			x.Int(m.GetDate())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedMessageService, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedMessageService, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedMessageService) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedMessageService) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x23734b06: func() error {
			m.SetRandomId(dBuf.Long())
			m.SetChatId(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedMessageService) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// KeyboardButton <--
//  + TL_KeyboardButton
//  + TL_KeyboardButtonUrl
//  + TL_KeyboardButtonCallback
//  + TL_KeyboardButtonRequestPhone
//  + TL_KeyboardButtonRequestGeoLocation
//  + TL_KeyboardButtonSwitchInline
//  + TL_KeyboardButtonGame
//  + TL_KeyboardButtonBuy
//  + TL_KeyboardButtonUrlAuth
//  + TL_InputKeyboardButtonUrlAuth
//  + TL_KeyboardButtonRequestPoll
//  + TL_InputKeyboardButtonUserProfile
//  + TL_KeyboardButtonUserProfile
//

func (m *KeyboardButton) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_keyboardButton:
		t := m.To_KeyboardButton()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonUrl:
		t := m.To_KeyboardButtonUrl()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonCallback:
		t := m.To_KeyboardButtonCallback()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonRequestPhone:
		t := m.To_KeyboardButtonRequestPhone()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonRequestGeoLocation:
		t := m.To_KeyboardButtonRequestGeoLocation()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonSwitchInline:
		t := m.To_KeyboardButtonSwitchInline()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonGame:
		t := m.To_KeyboardButtonGame()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonBuy:
		t := m.To_KeyboardButtonBuy()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonUrlAuth:
		t := m.To_KeyboardButtonUrlAuth()
		xBuf = t.Encode(layer)
	case Predicate_inputKeyboardButtonUrlAuth:
		t := m.To_InputKeyboardButtonUrlAuth()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonRequestPoll:
		t := m.To_KeyboardButtonRequestPoll()
		xBuf = t.Encode(layer)
	case Predicate_inputKeyboardButtonUserProfile:
		t := m.To_InputKeyboardButtonUserProfile()
		xBuf = t.Encode(layer)
	case Predicate_keyboardButtonUserProfile:
		t := m.To_KeyboardButtonUserProfile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *KeyboardButton) CalcByteSize(layer int32) int {
	return 0
}

func (m *KeyboardButton) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa2fa4880:
		m2 := MakeTLKeyboardButton(m)
		m2.Decode(dBuf)
	case 0x258aff05:
		m2 := MakeTLKeyboardButtonUrl(m)
		m2.Decode(dBuf)
	case 0x35bbdb6b:
		m2 := MakeTLKeyboardButtonCallback(m)
		m2.Decode(dBuf)
	case 0xb16a6c29:
		m2 := MakeTLKeyboardButtonRequestPhone(m)
		m2.Decode(dBuf)
	case 0xfc796b3f:
		m2 := MakeTLKeyboardButtonRequestGeoLocation(m)
		m2.Decode(dBuf)
	case 0x568a748:
		m2 := MakeTLKeyboardButtonSwitchInline(m)
		m2.Decode(dBuf)
	case 0x50f41ccf:
		m2 := MakeTLKeyboardButtonGame(m)
		m2.Decode(dBuf)
	case 0xafd93fbb:
		m2 := MakeTLKeyboardButtonBuy(m)
		m2.Decode(dBuf)
	case 0x10b78d29:
		m2 := MakeTLKeyboardButtonUrlAuth(m)
		m2.Decode(dBuf)
	case 0xd02e7fd4:
		m2 := MakeTLInputKeyboardButtonUrlAuth(m)
		m2.Decode(dBuf)
	case 0xbbc7515d:
		m2 := MakeTLKeyboardButtonRequestPoll(m)
		m2.Decode(dBuf)
	case 0xe988037b:
		m2 := MakeTLInputKeyboardButtonUserProfile(m)
		m2.Decode(dBuf)
	case 0x308660c1:
		m2 := MakeTLKeyboardButtonUserProfile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *KeyboardButton) DebugString() string {
	switch m.PredicateName {
	case Predicate_keyboardButton:
		t := m.To_KeyboardButton()
		return t.DebugString()
	case Predicate_keyboardButtonUrl:
		t := m.To_KeyboardButtonUrl()
		return t.DebugString()
	case Predicate_keyboardButtonCallback:
		t := m.To_KeyboardButtonCallback()
		return t.DebugString()
	case Predicate_keyboardButtonRequestPhone:
		t := m.To_KeyboardButtonRequestPhone()
		return t.DebugString()
	case Predicate_keyboardButtonRequestGeoLocation:
		t := m.To_KeyboardButtonRequestGeoLocation()
		return t.DebugString()
	case Predicate_keyboardButtonSwitchInline:
		t := m.To_KeyboardButtonSwitchInline()
		return t.DebugString()
	case Predicate_keyboardButtonGame:
		t := m.To_KeyboardButtonGame()
		return t.DebugString()
	case Predicate_keyboardButtonBuy:
		t := m.To_KeyboardButtonBuy()
		return t.DebugString()
	case Predicate_keyboardButtonUrlAuth:
		t := m.To_KeyboardButtonUrlAuth()
		return t.DebugString()
	case Predicate_inputKeyboardButtonUrlAuth:
		t := m.To_InputKeyboardButtonUrlAuth()
		return t.DebugString()
	case Predicate_keyboardButtonRequestPoll:
		t := m.To_KeyboardButtonRequestPoll()
		return t.DebugString()
	case Predicate_inputKeyboardButtonUserProfile:
		t := m.To_InputKeyboardButtonUserProfile()
		return t.DebugString()
	case Predicate_keyboardButtonUserProfile:
		t := m.To_KeyboardButtonUserProfile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_KeyboardButton
func (m *KeyboardButton) To_KeyboardButton() *TLKeyboardButton {
	m.PredicateName = Predicate_keyboardButton
	return &TLKeyboardButton{
		Data2: m,
	}
}

// To_KeyboardButtonUrl
func (m *KeyboardButton) To_KeyboardButtonUrl() *TLKeyboardButtonUrl {
	m.PredicateName = Predicate_keyboardButtonUrl
	return &TLKeyboardButtonUrl{
		Data2: m,
	}
}

// To_KeyboardButtonCallback
func (m *KeyboardButton) To_KeyboardButtonCallback() *TLKeyboardButtonCallback {
	m.PredicateName = Predicate_keyboardButtonCallback
	return &TLKeyboardButtonCallback{
		Data2: m,
	}
}

// To_KeyboardButtonRequestPhone
func (m *KeyboardButton) To_KeyboardButtonRequestPhone() *TLKeyboardButtonRequestPhone {
	m.PredicateName = Predicate_keyboardButtonRequestPhone
	return &TLKeyboardButtonRequestPhone{
		Data2: m,
	}
}

// To_KeyboardButtonRequestGeoLocation
func (m *KeyboardButton) To_KeyboardButtonRequestGeoLocation() *TLKeyboardButtonRequestGeoLocation {
	m.PredicateName = Predicate_keyboardButtonRequestGeoLocation
	return &TLKeyboardButtonRequestGeoLocation{
		Data2: m,
	}
}

// To_KeyboardButtonSwitchInline
func (m *KeyboardButton) To_KeyboardButtonSwitchInline() *TLKeyboardButtonSwitchInline {
	m.PredicateName = Predicate_keyboardButtonSwitchInline
	return &TLKeyboardButtonSwitchInline{
		Data2: m,
	}
}

// To_KeyboardButtonGame
func (m *KeyboardButton) To_KeyboardButtonGame() *TLKeyboardButtonGame {
	m.PredicateName = Predicate_keyboardButtonGame
	return &TLKeyboardButtonGame{
		Data2: m,
	}
}

// To_KeyboardButtonBuy
func (m *KeyboardButton) To_KeyboardButtonBuy() *TLKeyboardButtonBuy {
	m.PredicateName = Predicate_keyboardButtonBuy
	return &TLKeyboardButtonBuy{
		Data2: m,
	}
}

// To_KeyboardButtonUrlAuth
func (m *KeyboardButton) To_KeyboardButtonUrlAuth() *TLKeyboardButtonUrlAuth {
	m.PredicateName = Predicate_keyboardButtonUrlAuth
	return &TLKeyboardButtonUrlAuth{
		Data2: m,
	}
}

// To_InputKeyboardButtonUrlAuth
func (m *KeyboardButton) To_InputKeyboardButtonUrlAuth() *TLInputKeyboardButtonUrlAuth {
	m.PredicateName = Predicate_inputKeyboardButtonUrlAuth
	return &TLInputKeyboardButtonUrlAuth{
		Data2: m,
	}
}

// To_KeyboardButtonRequestPoll
func (m *KeyboardButton) To_KeyboardButtonRequestPoll() *TLKeyboardButtonRequestPoll {
	m.PredicateName = Predicate_keyboardButtonRequestPoll
	return &TLKeyboardButtonRequestPoll{
		Data2: m,
	}
}

// To_InputKeyboardButtonUserProfile
func (m *KeyboardButton) To_InputKeyboardButtonUserProfile() *TLInputKeyboardButtonUserProfile {
	m.PredicateName = Predicate_inputKeyboardButtonUserProfile
	return &TLInputKeyboardButtonUserProfile{
		Data2: m,
	}
}

// To_KeyboardButtonUserProfile
func (m *KeyboardButton) To_KeyboardButtonUserProfile() *TLKeyboardButtonUserProfile {
	m.PredicateName = Predicate_keyboardButtonUserProfile
	return &TLKeyboardButtonUserProfile{
		Data2: m,
	}
}

// MakeTLKeyboardButton
func MakeTLKeyboardButton(data2 *KeyboardButton) *TLKeyboardButton {
	if data2 == nil {
		return &TLKeyboardButton{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButton,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButton
		return &TLKeyboardButton{Data2: data2}
	}
}

func (m *TLKeyboardButton) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButton
	return m.Data2
}

func (m *TLKeyboardButton) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButton) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButton) GetPredicateName() string {
	return Predicate_keyboardButton
}

func (m *TLKeyboardButton) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa2fa4880: func() []byte {
			x.UInt(0xa2fa4880)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButton, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButton, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButton) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButton) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa2fa4880: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButton) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonUrl
func MakeTLKeyboardButtonUrl(data2 *KeyboardButton) *TLKeyboardButtonUrl {
	if data2 == nil {
		return &TLKeyboardButtonUrl{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonUrl,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonUrl
		return &TLKeyboardButtonUrl{Data2: data2}
	}
}

func (m *TLKeyboardButtonUrl) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonUrl
	return m.Data2
}

func (m *TLKeyboardButtonUrl) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUrl) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLKeyboardButtonUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLKeyboardButtonUrl) GetPredicateName() string {
	return Predicate_keyboardButtonUrl
}

func (m *TLKeyboardButtonUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x258aff05: func() []byte {
			x.UInt(0x258aff05)

			x.String(m.GetText())
			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x258aff05: func() error {
			m.SetText(dBuf.String())
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonCallback
func MakeTLKeyboardButtonCallback(data2 *KeyboardButton) *TLKeyboardButtonCallback {
	if data2 == nil {
		return &TLKeyboardButtonCallback{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonCallback,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonCallback
		return &TLKeyboardButtonCallback{Data2: data2}
	}
}

func (m *TLKeyboardButtonCallback) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonCallback
	return m.Data2
}

//// flags
func (m *TLKeyboardButtonCallback) SetRequiresPassword(v bool) { m.Data2.RequiresPassword = v }
func (m *TLKeyboardButtonCallback) GetRequiresPassword() bool  { return m.Data2.RequiresPassword }

func (m *TLKeyboardButtonCallback) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonCallback) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonCallback) SetData(v []byte) { m.Data2.Data = v }
func (m *TLKeyboardButtonCallback) GetData() []byte  { return m.Data2.Data }

func (m *TLKeyboardButtonCallback) GetPredicateName() string {
	return Predicate_keyboardButtonCallback
}

func (m *TLKeyboardButtonCallback) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x35bbdb6b: func() []byte {
			x.UInt(0x35bbdb6b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRequiresPassword() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetText())
			x.StringBytes(m.GetData())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonCallback, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonCallback, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonCallback) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonCallback) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x35bbdb6b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRequiresPassword(true)
			}
			m.SetText(dBuf.String())
			m.SetData(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonCallback) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonRequestPhone
func MakeTLKeyboardButtonRequestPhone(data2 *KeyboardButton) *TLKeyboardButtonRequestPhone {
	if data2 == nil {
		return &TLKeyboardButtonRequestPhone{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonRequestPhone,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonRequestPhone
		return &TLKeyboardButtonRequestPhone{Data2: data2}
	}
}

func (m *TLKeyboardButtonRequestPhone) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonRequestPhone
	return m.Data2
}

func (m *TLKeyboardButtonRequestPhone) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestPhone) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonRequestPhone) GetPredicateName() string {
	return Predicate_keyboardButtonRequestPhone
}

func (m *TLKeyboardButtonRequestPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb16a6c29: func() []byte {
			x.UInt(0xb16a6c29)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonRequestPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonRequestPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonRequestPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonRequestPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb16a6c29: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonRequestPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonRequestGeoLocation
func MakeTLKeyboardButtonRequestGeoLocation(data2 *KeyboardButton) *TLKeyboardButtonRequestGeoLocation {
	if data2 == nil {
		return &TLKeyboardButtonRequestGeoLocation{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonRequestGeoLocation,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonRequestGeoLocation
		return &TLKeyboardButtonRequestGeoLocation{Data2: data2}
	}
}

func (m *TLKeyboardButtonRequestGeoLocation) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonRequestGeoLocation
	return m.Data2
}

func (m *TLKeyboardButtonRequestGeoLocation) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestGeoLocation) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonRequestGeoLocation) GetPredicateName() string {
	return Predicate_keyboardButtonRequestGeoLocation
}

func (m *TLKeyboardButtonRequestGeoLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfc796b3f: func() []byte {
			x.UInt(0xfc796b3f)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonRequestGeoLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonRequestGeoLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonRequestGeoLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonRequestGeoLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfc796b3f: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonRequestGeoLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonSwitchInline
func MakeTLKeyboardButtonSwitchInline(data2 *KeyboardButton) *TLKeyboardButtonSwitchInline {
	if data2 == nil {
		return &TLKeyboardButtonSwitchInline{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonSwitchInline,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonSwitchInline
		return &TLKeyboardButtonSwitchInline{Data2: data2}
	}
}

func (m *TLKeyboardButtonSwitchInline) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonSwitchInline
	return m.Data2
}

//// flags
func (m *TLKeyboardButtonSwitchInline) SetSamePeer(v bool) { m.Data2.SamePeer = v }
func (m *TLKeyboardButtonSwitchInline) GetSamePeer() bool  { return m.Data2.SamePeer }

func (m *TLKeyboardButtonSwitchInline) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonSwitchInline) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonSwitchInline) SetQuery(v string) { m.Data2.Query = v }
func (m *TLKeyboardButtonSwitchInline) GetQuery() string  { return m.Data2.Query }

func (m *TLKeyboardButtonSwitchInline) GetPredicateName() string {
	return Predicate_keyboardButtonSwitchInline
}

func (m *TLKeyboardButtonSwitchInline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x568a748: func() []byte {
			x.UInt(0x568a748)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSamePeer() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetText())
			x.String(m.GetQuery())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonSwitchInline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonSwitchInline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonSwitchInline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonSwitchInline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x568a748: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetSamePeer(true)
			}
			m.SetText(dBuf.String())
			m.SetQuery(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonSwitchInline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonGame
func MakeTLKeyboardButtonGame(data2 *KeyboardButton) *TLKeyboardButtonGame {
	if data2 == nil {
		return &TLKeyboardButtonGame{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonGame,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonGame
		return &TLKeyboardButtonGame{Data2: data2}
	}
}

func (m *TLKeyboardButtonGame) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonGame
	return m.Data2
}

func (m *TLKeyboardButtonGame) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonGame) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonGame) GetPredicateName() string {
	return Predicate_keyboardButtonGame
}

func (m *TLKeyboardButtonGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x50f41ccf: func() []byte {
			x.UInt(0x50f41ccf)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonGame, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonGame, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x50f41ccf: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonBuy
func MakeTLKeyboardButtonBuy(data2 *KeyboardButton) *TLKeyboardButtonBuy {
	if data2 == nil {
		return &TLKeyboardButtonBuy{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonBuy,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonBuy
		return &TLKeyboardButtonBuy{Data2: data2}
	}
}

func (m *TLKeyboardButtonBuy) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonBuy
	return m.Data2
}

func (m *TLKeyboardButtonBuy) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonBuy) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonBuy) GetPredicateName() string {
	return Predicate_keyboardButtonBuy
}

func (m *TLKeyboardButtonBuy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xafd93fbb: func() []byte {
			x.UInt(0xafd93fbb)

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonBuy, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonBuy, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonBuy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonBuy) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xafd93fbb: func() error {
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonBuy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonUrlAuth
func MakeTLKeyboardButtonUrlAuth(data2 *KeyboardButton) *TLKeyboardButtonUrlAuth {
	if data2 == nil {
		return &TLKeyboardButtonUrlAuth{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonUrlAuth,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonUrlAuth
		return &TLKeyboardButtonUrlAuth{Data2: data2}
	}
}

func (m *TLKeyboardButtonUrlAuth) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonUrlAuth
	return m.Data2
}

//// flags
func (m *TLKeyboardButtonUrlAuth) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUrlAuth) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonUrlAuth) SetFwdText(v *types.StringValue) { m.Data2.FwdText = v }
func (m *TLKeyboardButtonUrlAuth) GetFwdText() *types.StringValue  { return m.Data2.FwdText }

func (m *TLKeyboardButtonUrlAuth) SetUrl(v string) { m.Data2.Url = v }
func (m *TLKeyboardButtonUrlAuth) GetUrl() string  { return m.Data2.Url }

func (m *TLKeyboardButtonUrlAuth) SetButtonId(v int32) { m.Data2.ButtonId = v }
func (m *TLKeyboardButtonUrlAuth) GetButtonId() int32  { return m.Data2.ButtonId }

func (m *TLKeyboardButtonUrlAuth) GetPredicateName() string {
	return Predicate_keyboardButtonUrlAuth
}

func (m *TLKeyboardButtonUrlAuth) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x10b78d29: func() []byte {
			x.UInt(0x10b78d29)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFwdText() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetText())
			if m.GetFwdText() != nil {
				x.String(m.GetFwdText().Value)
			}

			x.String(m.GetUrl())
			x.Int(m.GetButtonId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonUrlAuth, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonUrlAuth, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonUrlAuth) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonUrlAuth) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x10b78d29: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetText(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetFwdText(&types.StringValue{Value: dBuf.String()})
			}

			m.SetUrl(dBuf.String())
			m.SetButtonId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonUrlAuth) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputKeyboardButtonUrlAuth
func MakeTLInputKeyboardButtonUrlAuth(data2 *KeyboardButton) *TLInputKeyboardButtonUrlAuth {
	if data2 == nil {
		return &TLInputKeyboardButtonUrlAuth{Data2: &KeyboardButton{
			PredicateName: Predicate_inputKeyboardButtonUrlAuth,
		}}
	} else {
		data2.PredicateName = Predicate_inputKeyboardButtonUrlAuth
		return &TLInputKeyboardButtonUrlAuth{Data2: data2}
	}
}

func (m *TLInputKeyboardButtonUrlAuth) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_inputKeyboardButtonUrlAuth
	return m.Data2
}

//// flags
func (m *TLInputKeyboardButtonUrlAuth) SetRequestWriteAccess(v bool) { m.Data2.RequestWriteAccess = v }
func (m *TLInputKeyboardButtonUrlAuth) GetRequestWriteAccess() bool {
	return m.Data2.RequestWriteAccess
}

func (m *TLInputKeyboardButtonUrlAuth) SetText(v string) { m.Data2.Text = v }
func (m *TLInputKeyboardButtonUrlAuth) GetText() string  { return m.Data2.Text }

func (m *TLInputKeyboardButtonUrlAuth) SetFwdText(v *types.StringValue) { m.Data2.FwdText = v }
func (m *TLInputKeyboardButtonUrlAuth) GetFwdText() *types.StringValue  { return m.Data2.FwdText }

func (m *TLInputKeyboardButtonUrlAuth) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputKeyboardButtonUrlAuth) GetUrl() string  { return m.Data2.Url }

func (m *TLInputKeyboardButtonUrlAuth) SetBot(v *InputUser) { m.Data2.Bot = v }
func (m *TLInputKeyboardButtonUrlAuth) GetBot() *InputUser  { return m.Data2.Bot }

func (m *TLInputKeyboardButtonUrlAuth) GetPredicateName() string {
	return Predicate_inputKeyboardButtonUrlAuth
}

func (m *TLInputKeyboardButtonUrlAuth) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd02e7fd4: func() []byte {
			x.UInt(0xd02e7fd4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRequestWriteAccess() == true {
					flags |= 1 << 0
				}

				if m.GetFwdText() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetText())
			if m.GetFwdText() != nil {
				x.String(m.GetFwdText().Value)
			}

			x.String(m.GetUrl())
			x.Bytes(m.GetBot().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputKeyboardButtonUrlAuth, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputKeyboardButtonUrlAuth, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputKeyboardButtonUrlAuth) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputKeyboardButtonUrlAuth) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd02e7fd4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRequestWriteAccess(true)
			}
			m.SetText(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m.SetFwdText(&types.StringValue{Value: dBuf.String()})
			}

			m.SetUrl(dBuf.String())

			m10 := &InputUser{}
			m10.Decode(dBuf)
			m.SetBot(m10)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputKeyboardButtonUrlAuth) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonRequestPoll
func MakeTLKeyboardButtonRequestPoll(data2 *KeyboardButton) *TLKeyboardButtonRequestPoll {
	if data2 == nil {
		return &TLKeyboardButtonRequestPoll{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonRequestPoll,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonRequestPoll
		return &TLKeyboardButtonRequestPoll{Data2: data2}
	}
}

func (m *TLKeyboardButtonRequestPoll) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonRequestPoll
	return m.Data2
}

//// flags
func (m *TLKeyboardButtonRequestPoll) SetQuiz(v *Bool) { m.Data2.Quiz = v }
func (m *TLKeyboardButtonRequestPoll) GetQuiz() *Bool  { return m.Data2.Quiz }

func (m *TLKeyboardButtonRequestPoll) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestPoll) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonRequestPoll) GetPredicateName() string {
	return Predicate_keyboardButtonRequestPoll
}

func (m *TLKeyboardButtonRequestPoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbbc7515d: func() []byte {
			x.UInt(0xbbc7515d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetQuiz() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetQuiz() != nil {
				x.Bytes(m.GetQuiz().Encode(layer))
			}

			x.String(m.GetText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonRequestPoll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonRequestPoll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonRequestPoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonRequestPoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbbc7515d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m11 := &Bool{}
				m11.Decode(dBuf)
				m.SetQuiz(m11)
			}
			m.SetText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonRequestPoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputKeyboardButtonUserProfile
func MakeTLInputKeyboardButtonUserProfile(data2 *KeyboardButton) *TLInputKeyboardButtonUserProfile {
	if data2 == nil {
		return &TLInputKeyboardButtonUserProfile{Data2: &KeyboardButton{
			PredicateName: Predicate_inputKeyboardButtonUserProfile,
		}}
	} else {
		data2.PredicateName = Predicate_inputKeyboardButtonUserProfile
		return &TLInputKeyboardButtonUserProfile{Data2: data2}
	}
}

func (m *TLInputKeyboardButtonUserProfile) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_inputKeyboardButtonUserProfile
	return m.Data2
}

func (m *TLInputKeyboardButtonUserProfile) SetText(v string) { m.Data2.Text = v }
func (m *TLInputKeyboardButtonUserProfile) GetText() string  { return m.Data2.Text }

func (m *TLInputKeyboardButtonUserProfile) SetUserId_INPUTUSER(v *InputUser) {
	m.Data2.UserId_INPUTUSER = v
}
func (m *TLInputKeyboardButtonUserProfile) GetUserId_INPUTUSER() *InputUser {
	return m.Data2.UserId_INPUTUSER
}

func (m *TLInputKeyboardButtonUserProfile) GetPredicateName() string {
	return Predicate_inputKeyboardButtonUserProfile
}

func (m *TLInputKeyboardButtonUserProfile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe988037b: func() []byte {
			x.UInt(0xe988037b)

			x.String(m.GetText())
			x.Bytes(m.GetUserId_INPUTUSER().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputKeyboardButtonUserProfile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputKeyboardButtonUserProfile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputKeyboardButtonUserProfile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputKeyboardButtonUserProfile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe988037b: func() error {
			m.SetText(dBuf.String())

			m12 := &InputUser{}
			m12.Decode(dBuf)
			m.SetUserId_INPUTUSER(m12)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputKeyboardButtonUserProfile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLKeyboardButtonUserProfile
func MakeTLKeyboardButtonUserProfile(data2 *KeyboardButton) *TLKeyboardButtonUserProfile {
	if data2 == nil {
		return &TLKeyboardButtonUserProfile{Data2: &KeyboardButton{
			PredicateName: Predicate_keyboardButtonUserProfile,
		}}
	} else {
		data2.PredicateName = Predicate_keyboardButtonUserProfile
		return &TLKeyboardButtonUserProfile{Data2: data2}
	}
}

func (m *TLKeyboardButtonUserProfile) To_KeyboardButton() *KeyboardButton {
	m.Data2.PredicateName = Predicate_keyboardButtonUserProfile
	return m.Data2
}

func (m *TLKeyboardButtonUserProfile) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUserProfile) GetText() string  { return m.Data2.Text }

func (m *TLKeyboardButtonUserProfile) SetUserId_INT64(v int64) { m.Data2.UserId_INT64 = v }
func (m *TLKeyboardButtonUserProfile) GetUserId_INT64() int64  { return m.Data2.UserId_INT64 }

func (m *TLKeyboardButtonUserProfile) GetPredicateName() string {
	return Predicate_keyboardButtonUserProfile
}

func (m *TLKeyboardButtonUserProfile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x308660c1: func() []byte {
			x.UInt(0x308660c1)

			x.String(m.GetText())
			x.Long(m.GetUserId_INT64())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_keyboardButtonUserProfile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_keyboardButtonUserProfile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLKeyboardButtonUserProfile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLKeyboardButtonUserProfile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x308660c1: func() error {
			m.SetText(dBuf.String())
			m.SetUserId_INT64(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLKeyboardButtonUserProfile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessageID <--
//  + TL_InputBotInlineMessageID
//  + TL_InputBotInlineMessageID64
//

func (m *InputBotInlineMessageID) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputBotInlineMessageID:
		t := m.To_InputBotInlineMessageID()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageID64:
		t := m.To_InputBotInlineMessageID64()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputBotInlineMessageID) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputBotInlineMessageID) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x890c3d89:
		m2 := MakeTLInputBotInlineMessageID(m)
		m2.Decode(dBuf)
	case 0xb6d915d7:
		m2 := MakeTLInputBotInlineMessageID64(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputBotInlineMessageID) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputBotInlineMessageID:
		t := m.To_InputBotInlineMessageID()
		return t.DebugString()
	case Predicate_inputBotInlineMessageID64:
		t := m.To_InputBotInlineMessageID64()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputBotInlineMessageID
func (m *InputBotInlineMessageID) To_InputBotInlineMessageID() *TLInputBotInlineMessageID {
	m.PredicateName = Predicate_inputBotInlineMessageID
	return &TLInputBotInlineMessageID{
		Data2: m,
	}
}

// To_InputBotInlineMessageID64
func (m *InputBotInlineMessageID) To_InputBotInlineMessageID64() *TLInputBotInlineMessageID64 {
	m.PredicateName = Predicate_inputBotInlineMessageID64
	return &TLInputBotInlineMessageID64{
		Data2: m,
	}
}

// MakeTLInputBotInlineMessageID
func MakeTLInputBotInlineMessageID(data2 *InputBotInlineMessageID) *TLInputBotInlineMessageID {
	if data2 == nil {
		return &TLInputBotInlineMessageID{Data2: &InputBotInlineMessageID{
			PredicateName: Predicate_inputBotInlineMessageID,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageID
		return &TLInputBotInlineMessageID{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageID) To_InputBotInlineMessageID() *InputBotInlineMessageID {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageID
	return m.Data2
}

func (m *TLInputBotInlineMessageID) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLInputBotInlineMessageID) GetDcId() int32  { return m.Data2.DcId }

func (m *TLInputBotInlineMessageID) SetId_INT64(v int64) { m.Data2.Id_INT64 = v }
func (m *TLInputBotInlineMessageID) GetId_INT64() int64  { return m.Data2.Id_INT64 }

func (m *TLInputBotInlineMessageID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputBotInlineMessageID) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputBotInlineMessageID) GetPredicateName() string {
	return Predicate_inputBotInlineMessageID
}

func (m *TLInputBotInlineMessageID) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x890c3d89: func() []byte {
			x.UInt(0x890c3d89)

			x.Int(m.GetDcId())
			x.Long(m.GetId_INT64())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageID, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageID, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageID) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageID) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x890c3d89: func() error {
			m.SetDcId(dBuf.Int())
			m.SetId_INT64(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageID) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageID64
func MakeTLInputBotInlineMessageID64(data2 *InputBotInlineMessageID) *TLInputBotInlineMessageID64 {
	if data2 == nil {
		return &TLInputBotInlineMessageID64{Data2: &InputBotInlineMessageID{
			PredicateName: Predicate_inputBotInlineMessageID64,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageID64
		return &TLInputBotInlineMessageID64{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageID64) To_InputBotInlineMessageID() *InputBotInlineMessageID {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageID64
	return m.Data2
}

func (m *TLInputBotInlineMessageID64) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLInputBotInlineMessageID64) GetDcId() int32  { return m.Data2.DcId }

func (m *TLInputBotInlineMessageID64) SetOwnerId(v int64) { m.Data2.OwnerId = v }
func (m *TLInputBotInlineMessageID64) GetOwnerId() int64  { return m.Data2.OwnerId }

func (m *TLInputBotInlineMessageID64) SetId_INT32(v int32) { m.Data2.Id_INT32 = v }
func (m *TLInputBotInlineMessageID64) GetId_INT32() int32  { return m.Data2.Id_INT32 }

func (m *TLInputBotInlineMessageID64) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputBotInlineMessageID64) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputBotInlineMessageID64) GetPredicateName() string {
	return Predicate_inputBotInlineMessageID64
}

func (m *TLInputBotInlineMessageID64) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb6d915d7: func() []byte {
			x.UInt(0xb6d915d7)

			x.Int(m.GetDcId())
			x.Long(m.GetOwnerId())
			x.Int(m.GetId_INT32())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageID64, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageID64, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageID64) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageID64) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb6d915d7: func() error {
			m.SetDcId(dBuf.Int())
			m.SetOwnerId(dBuf.Long())
			m.SetId_INT32(dBuf.Int())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageID64) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PollAnswerVoters <--
//  + TL_PollAnswerVoters
//

func (m *PollAnswerVoters) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pollAnswerVoters:
		t := m.To_PollAnswerVoters()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PollAnswerVoters) CalcByteSize(layer int32) int {
	return 0
}

func (m *PollAnswerVoters) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3b6ddad2:
		m2 := MakeTLPollAnswerVoters(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PollAnswerVoters) DebugString() string {
	switch m.PredicateName {
	case Predicate_pollAnswerVoters:
		t := m.To_PollAnswerVoters()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PollAnswerVoters
func (m *PollAnswerVoters) To_PollAnswerVoters() *TLPollAnswerVoters {
	m.PredicateName = Predicate_pollAnswerVoters
	return &TLPollAnswerVoters{
		Data2: m,
	}
}

// MakeTLPollAnswerVoters
func MakeTLPollAnswerVoters(data2 *PollAnswerVoters) *TLPollAnswerVoters {
	if data2 == nil {
		return &TLPollAnswerVoters{Data2: &PollAnswerVoters{
			PredicateName: Predicate_pollAnswerVoters,
		}}
	} else {
		data2.PredicateName = Predicate_pollAnswerVoters
		return &TLPollAnswerVoters{Data2: data2}
	}
}

func (m *TLPollAnswerVoters) To_PollAnswerVoters() *PollAnswerVoters {
	m.Data2.PredicateName = Predicate_pollAnswerVoters
	return m.Data2
}

//// flags
func (m *TLPollAnswerVoters) SetChosen(v bool) { m.Data2.Chosen = v }
func (m *TLPollAnswerVoters) GetChosen() bool  { return m.Data2.Chosen }

func (m *TLPollAnswerVoters) SetCorrect(v bool) { m.Data2.Correct = v }
func (m *TLPollAnswerVoters) GetCorrect() bool  { return m.Data2.Correct }

func (m *TLPollAnswerVoters) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLPollAnswerVoters) GetOption() []byte  { return m.Data2.Option }

func (m *TLPollAnswerVoters) SetVoters(v int32) { m.Data2.Voters = v }
func (m *TLPollAnswerVoters) GetVoters() int32  { return m.Data2.Voters }

func (m *TLPollAnswerVoters) GetPredicateName() string {
	return Predicate_pollAnswerVoters
}

func (m *TLPollAnswerVoters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3b6ddad2: func() []byte {
			x.UInt(0x3b6ddad2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChosen() == true {
					flags |= 1 << 0
				}
				if m.GetCorrect() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.StringBytes(m.GetOption())
			x.Int(m.GetVoters())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pollAnswerVoters, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pollAnswerVoters, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPollAnswerVoters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPollAnswerVoters) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3b6ddad2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetChosen(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetCorrect(true)
			}
			m.SetOption(dBuf.StringBytes())
			m.SetVoters(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPollAnswerVoters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BotCommandScope <--
//  + TL_BotCommandScopeDefault
//  + TL_BotCommandScopeUsers
//  + TL_BotCommandScopeChats
//  + TL_BotCommandScopeChatAdmins
//  + TL_BotCommandScopePeer
//  + TL_BotCommandScopePeerAdmins
//  + TL_BotCommandScopePeerUser
//

func (m *BotCommandScope) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_botCommandScopeDefault:
		t := m.To_BotCommandScopeDefault()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopeUsers:
		t := m.To_BotCommandScopeUsers()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopeChats:
		t := m.To_BotCommandScopeChats()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopeChatAdmins:
		t := m.To_BotCommandScopeChatAdmins()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopePeer:
		t := m.To_BotCommandScopePeer()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopePeerAdmins:
		t := m.To_BotCommandScopePeerAdmins()
		xBuf = t.Encode(layer)
	case Predicate_botCommandScopePeerUser:
		t := m.To_BotCommandScopePeerUser()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BotCommandScope) CalcByteSize(layer int32) int {
	return 0
}

func (m *BotCommandScope) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x2f6cb2ab:
		m2 := MakeTLBotCommandScopeDefault(m)
		m2.Decode(dBuf)
	case 0x3c4f04d8:
		m2 := MakeTLBotCommandScopeUsers(m)
		m2.Decode(dBuf)
	case 0x6fe1a881:
		m2 := MakeTLBotCommandScopeChats(m)
		m2.Decode(dBuf)
	case 0xb9aa606a:
		m2 := MakeTLBotCommandScopeChatAdmins(m)
		m2.Decode(dBuf)
	case 0xdb9d897d:
		m2 := MakeTLBotCommandScopePeer(m)
		m2.Decode(dBuf)
	case 0x3fd863d1:
		m2 := MakeTLBotCommandScopePeerAdmins(m)
		m2.Decode(dBuf)
	case 0xa1321f3:
		m2 := MakeTLBotCommandScopePeerUser(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BotCommandScope) DebugString() string {
	switch m.PredicateName {
	case Predicate_botCommandScopeDefault:
		t := m.To_BotCommandScopeDefault()
		return t.DebugString()
	case Predicate_botCommandScopeUsers:
		t := m.To_BotCommandScopeUsers()
		return t.DebugString()
	case Predicate_botCommandScopeChats:
		t := m.To_BotCommandScopeChats()
		return t.DebugString()
	case Predicate_botCommandScopeChatAdmins:
		t := m.To_BotCommandScopeChatAdmins()
		return t.DebugString()
	case Predicate_botCommandScopePeer:
		t := m.To_BotCommandScopePeer()
		return t.DebugString()
	case Predicate_botCommandScopePeerAdmins:
		t := m.To_BotCommandScopePeerAdmins()
		return t.DebugString()
	case Predicate_botCommandScopePeerUser:
		t := m.To_BotCommandScopePeerUser()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BotCommandScopeDefault
func (m *BotCommandScope) To_BotCommandScopeDefault() *TLBotCommandScopeDefault {
	m.PredicateName = Predicate_botCommandScopeDefault
	return &TLBotCommandScopeDefault{
		Data2: m,
	}
}

// To_BotCommandScopeUsers
func (m *BotCommandScope) To_BotCommandScopeUsers() *TLBotCommandScopeUsers {
	m.PredicateName = Predicate_botCommandScopeUsers
	return &TLBotCommandScopeUsers{
		Data2: m,
	}
}

// To_BotCommandScopeChats
func (m *BotCommandScope) To_BotCommandScopeChats() *TLBotCommandScopeChats {
	m.PredicateName = Predicate_botCommandScopeChats
	return &TLBotCommandScopeChats{
		Data2: m,
	}
}

// To_BotCommandScopeChatAdmins
func (m *BotCommandScope) To_BotCommandScopeChatAdmins() *TLBotCommandScopeChatAdmins {
	m.PredicateName = Predicate_botCommandScopeChatAdmins
	return &TLBotCommandScopeChatAdmins{
		Data2: m,
	}
}

// To_BotCommandScopePeer
func (m *BotCommandScope) To_BotCommandScopePeer() *TLBotCommandScopePeer {
	m.PredicateName = Predicate_botCommandScopePeer
	return &TLBotCommandScopePeer{
		Data2: m,
	}
}

// To_BotCommandScopePeerAdmins
func (m *BotCommandScope) To_BotCommandScopePeerAdmins() *TLBotCommandScopePeerAdmins {
	m.PredicateName = Predicate_botCommandScopePeerAdmins
	return &TLBotCommandScopePeerAdmins{
		Data2: m,
	}
}

// To_BotCommandScopePeerUser
func (m *BotCommandScope) To_BotCommandScopePeerUser() *TLBotCommandScopePeerUser {
	m.PredicateName = Predicate_botCommandScopePeerUser
	return &TLBotCommandScopePeerUser{
		Data2: m,
	}
}

// MakeTLBotCommandScopeDefault
func MakeTLBotCommandScopeDefault(data2 *BotCommandScope) *TLBotCommandScopeDefault {
	if data2 == nil {
		return &TLBotCommandScopeDefault{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopeDefault,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopeDefault
		return &TLBotCommandScopeDefault{Data2: data2}
	}
}

func (m *TLBotCommandScopeDefault) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopeDefault
	return m.Data2
}

func (m *TLBotCommandScopeDefault) GetPredicateName() string {
	return Predicate_botCommandScopeDefault
}

func (m *TLBotCommandScopeDefault) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2f6cb2ab: func() []byte {
			x.UInt(0x2f6cb2ab)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopeDefault, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopeDefault, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopeDefault) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopeDefault) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2f6cb2ab: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopeDefault) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopeUsers
func MakeTLBotCommandScopeUsers(data2 *BotCommandScope) *TLBotCommandScopeUsers {
	if data2 == nil {
		return &TLBotCommandScopeUsers{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopeUsers,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopeUsers
		return &TLBotCommandScopeUsers{Data2: data2}
	}
}

func (m *TLBotCommandScopeUsers) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopeUsers
	return m.Data2
}

func (m *TLBotCommandScopeUsers) GetPredicateName() string {
	return Predicate_botCommandScopeUsers
}

func (m *TLBotCommandScopeUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3c4f04d8: func() []byte {
			x.UInt(0x3c4f04d8)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopeUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopeUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopeUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopeUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3c4f04d8: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopeUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopeChats
func MakeTLBotCommandScopeChats(data2 *BotCommandScope) *TLBotCommandScopeChats {
	if data2 == nil {
		return &TLBotCommandScopeChats{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopeChats,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopeChats
		return &TLBotCommandScopeChats{Data2: data2}
	}
}

func (m *TLBotCommandScopeChats) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopeChats
	return m.Data2
}

func (m *TLBotCommandScopeChats) GetPredicateName() string {
	return Predicate_botCommandScopeChats
}

func (m *TLBotCommandScopeChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6fe1a881: func() []byte {
			x.UInt(0x6fe1a881)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopeChats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopeChats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopeChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopeChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6fe1a881: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopeChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopeChatAdmins
func MakeTLBotCommandScopeChatAdmins(data2 *BotCommandScope) *TLBotCommandScopeChatAdmins {
	if data2 == nil {
		return &TLBotCommandScopeChatAdmins{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopeChatAdmins,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopeChatAdmins
		return &TLBotCommandScopeChatAdmins{Data2: data2}
	}
}

func (m *TLBotCommandScopeChatAdmins) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopeChatAdmins
	return m.Data2
}

func (m *TLBotCommandScopeChatAdmins) GetPredicateName() string {
	return Predicate_botCommandScopeChatAdmins
}

func (m *TLBotCommandScopeChatAdmins) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb9aa606a: func() []byte {
			x.UInt(0xb9aa606a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopeChatAdmins, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopeChatAdmins, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopeChatAdmins) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopeChatAdmins) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb9aa606a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopeChatAdmins) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopePeer
func MakeTLBotCommandScopePeer(data2 *BotCommandScope) *TLBotCommandScopePeer {
	if data2 == nil {
		return &TLBotCommandScopePeer{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopePeer,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopePeer
		return &TLBotCommandScopePeer{Data2: data2}
	}
}

func (m *TLBotCommandScopePeer) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopePeer
	return m.Data2
}

func (m *TLBotCommandScopePeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLBotCommandScopePeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLBotCommandScopePeer) GetPredicateName() string {
	return Predicate_botCommandScopePeer
}

func (m *TLBotCommandScopePeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb9d897d: func() []byte {
			x.UInt(0xdb9d897d)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopePeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopePeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopePeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopePeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb9d897d: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopePeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopePeerAdmins
func MakeTLBotCommandScopePeerAdmins(data2 *BotCommandScope) *TLBotCommandScopePeerAdmins {
	if data2 == nil {
		return &TLBotCommandScopePeerAdmins{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopePeerAdmins,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopePeerAdmins
		return &TLBotCommandScopePeerAdmins{Data2: data2}
	}
}

func (m *TLBotCommandScopePeerAdmins) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopePeerAdmins
	return m.Data2
}

func (m *TLBotCommandScopePeerAdmins) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLBotCommandScopePeerAdmins) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLBotCommandScopePeerAdmins) GetPredicateName() string {
	return Predicate_botCommandScopePeerAdmins
}

func (m *TLBotCommandScopePeerAdmins) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3fd863d1: func() []byte {
			x.UInt(0x3fd863d1)

			x.Bytes(m.GetPeer().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopePeerAdmins, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopePeerAdmins, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopePeerAdmins) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopePeerAdmins) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3fd863d1: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopePeerAdmins) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotCommandScopePeerUser
func MakeTLBotCommandScopePeerUser(data2 *BotCommandScope) *TLBotCommandScopePeerUser {
	if data2 == nil {
		return &TLBotCommandScopePeerUser{Data2: &BotCommandScope{
			PredicateName: Predicate_botCommandScopePeerUser,
		}}
	} else {
		data2.PredicateName = Predicate_botCommandScopePeerUser
		return &TLBotCommandScopePeerUser{Data2: data2}
	}
}

func (m *TLBotCommandScopePeerUser) To_BotCommandScope() *BotCommandScope {
	m.Data2.PredicateName = Predicate_botCommandScopePeerUser
	return m.Data2
}

func (m *TLBotCommandScopePeerUser) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLBotCommandScopePeerUser) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLBotCommandScopePeerUser) SetUserId(v *InputUser) { m.Data2.UserId = v }
func (m *TLBotCommandScopePeerUser) GetUserId() *InputUser  { return m.Data2.UserId }

func (m *TLBotCommandScopePeerUser) GetPredicateName() string {
	return Predicate_botCommandScopePeerUser
}

func (m *TLBotCommandScopePeerUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa1321f3: func() []byte {
			x.UInt(0xa1321f3)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Bytes(m.GetUserId().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botCommandScopePeerUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botCommandScopePeerUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotCommandScopePeerUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotCommandScopePeerUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa1321f3: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			m1 := &InputUser{}
			m1.Decode(dBuf)
			m.SetUserId(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotCommandScopePeerUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GroupCallStreamChannel <--
//  + TL_GroupCallStreamChannel
//

func (m *GroupCallStreamChannel) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_groupCallStreamChannel:
		t := m.To_GroupCallStreamChannel()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GroupCallStreamChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *GroupCallStreamChannel) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x80eb48af:
		m2 := MakeTLGroupCallStreamChannel(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GroupCallStreamChannel) DebugString() string {
	switch m.PredicateName {
	case Predicate_groupCallStreamChannel:
		t := m.To_GroupCallStreamChannel()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GroupCallStreamChannel
func (m *GroupCallStreamChannel) To_GroupCallStreamChannel() *TLGroupCallStreamChannel {
	m.PredicateName = Predicate_groupCallStreamChannel
	return &TLGroupCallStreamChannel{
		Data2: m,
	}
}

// MakeTLGroupCallStreamChannel
func MakeTLGroupCallStreamChannel(data2 *GroupCallStreamChannel) *TLGroupCallStreamChannel {
	if data2 == nil {
		return &TLGroupCallStreamChannel{Data2: &GroupCallStreamChannel{
			PredicateName: Predicate_groupCallStreamChannel,
		}}
	} else {
		data2.PredicateName = Predicate_groupCallStreamChannel
		return &TLGroupCallStreamChannel{Data2: data2}
	}
}

func (m *TLGroupCallStreamChannel) To_GroupCallStreamChannel() *GroupCallStreamChannel {
	m.Data2.PredicateName = Predicate_groupCallStreamChannel
	return m.Data2
}

func (m *TLGroupCallStreamChannel) SetChannel(v int32) { m.Data2.Channel = v }
func (m *TLGroupCallStreamChannel) GetChannel() int32  { return m.Data2.Channel }

func (m *TLGroupCallStreamChannel) SetScale(v int32) { m.Data2.Scale = v }
func (m *TLGroupCallStreamChannel) GetScale() int32  { return m.Data2.Scale }

func (m *TLGroupCallStreamChannel) SetLastTimestampMs(v int64) { m.Data2.LastTimestampMs = v }
func (m *TLGroupCallStreamChannel) GetLastTimestampMs() int64  { return m.Data2.LastTimestampMs }

func (m *TLGroupCallStreamChannel) GetPredicateName() string {
	return Predicate_groupCallStreamChannel
}

func (m *TLGroupCallStreamChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x80eb48af: func() []byte {
			x.UInt(0x80eb48af)

			x.Int(m.GetChannel())
			x.Int(m.GetScale())
			x.Long(m.GetLastTimestampMs())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCallStreamChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCallStreamChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCallStreamChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCallStreamChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x80eb48af: func() error {
			m.SetChannel(dBuf.Int())
			m.SetScale(dBuf.Int())
			m.SetLastTimestampMs(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCallStreamChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_ChatThemes <--
//  + TL_AccountChatThemesNotModified
//  + TL_AccountChatThemes
//

func (m *Account_ChatThemes) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_chatThemesNotModified:
		t := m.To_AccountChatThemesNotModified()
		xBuf = t.Encode(layer)
	case Predicate_account_chatThemes:
		t := m.To_AccountChatThemes()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_ChatThemes) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_ChatThemes) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe011e1c4:
		m2 := MakeTLAccountChatThemesNotModified(m)
		m2.Decode(dBuf)
	case 0xfe4cbebd:
		m2 := MakeTLAccountChatThemes(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_ChatThemes) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_chatThemesNotModified:
		t := m.To_AccountChatThemesNotModified()
		return t.DebugString()
	case Predicate_account_chatThemes:
		t := m.To_AccountChatThemes()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountChatThemesNotModified
func (m *Account_ChatThemes) To_AccountChatThemesNotModified() *TLAccountChatThemesNotModified {
	m.PredicateName = Predicate_account_chatThemesNotModified
	return &TLAccountChatThemesNotModified{
		Data2: m,
	}
}

// To_AccountChatThemes
func (m *Account_ChatThemes) To_AccountChatThemes() *TLAccountChatThemes {
	m.PredicateName = Predicate_account_chatThemes
	return &TLAccountChatThemes{
		Data2: m,
	}
}

// MakeTLAccountChatThemesNotModified
func MakeTLAccountChatThemesNotModified(data2 *Account_ChatThemes) *TLAccountChatThemesNotModified {
	if data2 == nil {
		return &TLAccountChatThemesNotModified{Data2: &Account_ChatThemes{
			PredicateName: Predicate_account_chatThemesNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_account_chatThemesNotModified
		return &TLAccountChatThemesNotModified{Data2: data2}
	}
}

func (m *TLAccountChatThemesNotModified) To_Account_ChatThemes() *Account_ChatThemes {
	m.Data2.PredicateName = Predicate_account_chatThemesNotModified
	return m.Data2
}

func (m *TLAccountChatThemesNotModified) GetPredicateName() string {
	return Predicate_account_chatThemesNotModified
}

func (m *TLAccountChatThemesNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe011e1c4: func() []byte {
			x.UInt(0xe011e1c4)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_chatThemesNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_chatThemesNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountChatThemesNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountChatThemesNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe011e1c4: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountChatThemesNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLAccountChatThemes
func MakeTLAccountChatThemes(data2 *Account_ChatThemes) *TLAccountChatThemes {
	if data2 == nil {
		return &TLAccountChatThemes{Data2: &Account_ChatThemes{
			PredicateName: Predicate_account_chatThemes,
		}}
	} else {
		data2.PredicateName = Predicate_account_chatThemes
		return &TLAccountChatThemes{Data2: data2}
	}
}

func (m *TLAccountChatThemes) To_Account_ChatThemes() *Account_ChatThemes {
	m.Data2.PredicateName = Predicate_account_chatThemes
	return m.Data2
}

func (m *TLAccountChatThemes) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLAccountChatThemes) GetHash() int32  { return m.Data2.Hash }

func (m *TLAccountChatThemes) SetThemes(v []*ChatTheme) { m.Data2.Themes = v }
func (m *TLAccountChatThemes) GetThemes() []*ChatTheme  { return m.Data2.Themes }

func (m *TLAccountChatThemes) GetPredicateName() string {
	return Predicate_account_chatThemes
}

func (m *TLAccountChatThemes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfe4cbebd: func() []byte {
			x.UInt(0xfe4cbebd)

			x.Int(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetThemes())))
			for _, v := range m.GetThemes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_chatThemes, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_chatThemes, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountChatThemes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountChatThemes) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfe4cbebd: func() error {
			m.SetHash(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*ChatTheme, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &ChatTheme{}
				v1[i].Decode(dBuf)
			}
			m.SetThemes(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountChatThemes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_Dialogs <--
//  + TL_MessagesDialogs
//  + TL_MessagesDialogsSlice
//  + TL_MessagesDialogsNotModified
//

func (m *Messages_Dialogs) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_dialogs:
		t := m.To_MessagesDialogs()
		xBuf = t.Encode(layer)
	case Predicate_messages_dialogsSlice:
		t := m.To_MessagesDialogsSlice()
		xBuf = t.Encode(layer)
	case Predicate_messages_dialogsNotModified:
		t := m.To_MessagesDialogsNotModified()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_Dialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_Dialogs) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x15ba6c40:
		m2 := MakeTLMessagesDialogs(m)
		m2.Decode(dBuf)
	case 0x71e094f3:
		m2 := MakeTLMessagesDialogsSlice(m)
		m2.Decode(dBuf)
	case 0xf0e3e596:
		m2 := MakeTLMessagesDialogsNotModified(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_Dialogs) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_dialogs:
		t := m.To_MessagesDialogs()
		return t.DebugString()
	case Predicate_messages_dialogsSlice:
		t := m.To_MessagesDialogsSlice()
		return t.DebugString()
	case Predicate_messages_dialogsNotModified:
		t := m.To_MessagesDialogsNotModified()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesDialogs
func (m *Messages_Dialogs) To_MessagesDialogs() *TLMessagesDialogs {
	m.PredicateName = Predicate_messages_dialogs
	return &TLMessagesDialogs{
		Data2: m,
	}
}

// To_MessagesDialogsSlice
func (m *Messages_Dialogs) To_MessagesDialogsSlice() *TLMessagesDialogsSlice {
	m.PredicateName = Predicate_messages_dialogsSlice
	return &TLMessagesDialogsSlice{
		Data2: m,
	}
}

// To_MessagesDialogsNotModified
func (m *Messages_Dialogs) To_MessagesDialogsNotModified() *TLMessagesDialogsNotModified {
	m.PredicateName = Predicate_messages_dialogsNotModified
	return &TLMessagesDialogsNotModified{
		Data2: m,
	}
}

// MakeTLMessagesDialogs
func MakeTLMessagesDialogs(data2 *Messages_Dialogs) *TLMessagesDialogs {
	if data2 == nil {
		return &TLMessagesDialogs{Data2: &Messages_Dialogs{
			PredicateName: Predicate_messages_dialogs,
		}}
	} else {
		data2.PredicateName = Predicate_messages_dialogs
		return &TLMessagesDialogs{Data2: data2}
	}
}

func (m *TLMessagesDialogs) To_Messages_Dialogs() *Messages_Dialogs {
	m.Data2.PredicateName = Predicate_messages_dialogs
	return m.Data2
}

func (m *TLMessagesDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogs) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogs) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogs) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogs) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesDialogs) GetPredicateName() string {
	return Predicate_messages_dialogs
}

func (m *TLMessagesDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x15ba6c40: func() []byte {
			x.UInt(0x15ba6c40)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDialogs())))
			for _, v := range m.GetDialogs() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_dialogs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_dialogs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDialogs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x15ba6c40: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Dialog, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Dialog{}
				v0[i].Decode(dBuf)
			}
			m.SetDialogs(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Message, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Message{}
				v1[i].Decode(dBuf)
			}
			m.SetMessages(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Chat, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Chat{}
				v2[i].Decode(dBuf)
			}
			m.SetChats(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesDialogsSlice
func MakeTLMessagesDialogsSlice(data2 *Messages_Dialogs) *TLMessagesDialogsSlice {
	if data2 == nil {
		return &TLMessagesDialogsSlice{Data2: &Messages_Dialogs{
			PredicateName: Predicate_messages_dialogsSlice,
		}}
	} else {
		data2.PredicateName = Predicate_messages_dialogsSlice
		return &TLMessagesDialogsSlice{Data2: data2}
	}
}

func (m *TLMessagesDialogsSlice) To_Messages_Dialogs() *Messages_Dialogs {
	m.Data2.PredicateName = Predicate_messages_dialogsSlice
	return m.Data2
}

func (m *TLMessagesDialogsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesDialogsSlice) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogsSlice) GetDialogs() []*Dialog  { return m.Data2.Dialogs }

func (m *TLMessagesDialogsSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogsSlice) GetMessages() []*Message  { return m.Data2.Messages }

func (m *TLMessagesDialogsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogsSlice) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesDialogsSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogsSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesDialogsSlice) GetPredicateName() string {
	return Predicate_messages_dialogsSlice
}

func (m *TLMessagesDialogsSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x71e094f3: func() []byte {
			x.UInt(0x71e094f3)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDialogs())))
			for _, v := range m.GetDialogs() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMessages())))
			for _, v := range m.GetMessages() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_dialogsSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_dialogsSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDialogsSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDialogsSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x71e094f3: func() error {
			m.SetCount(dBuf.Int())
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Dialog, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Dialog{}
				v0[i].Decode(dBuf)
			}
			m.SetDialogs(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Message, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Message{}
				v1[i].Decode(dBuf)
			}
			m.SetMessages(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Chat, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Chat{}
				v2[i].Decode(dBuf)
			}
			m.SetChats(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDialogsSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesDialogsNotModified
func MakeTLMessagesDialogsNotModified(data2 *Messages_Dialogs) *TLMessagesDialogsNotModified {
	if data2 == nil {
		return &TLMessagesDialogsNotModified{Data2: &Messages_Dialogs{
			PredicateName: Predicate_messages_dialogsNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_dialogsNotModified
		return &TLMessagesDialogsNotModified{Data2: data2}
	}
}

func (m *TLMessagesDialogsNotModified) To_Messages_Dialogs() *Messages_Dialogs {
	m.Data2.PredicateName = Predicate_messages_dialogsNotModified
	return m.Data2
}

func (m *TLMessagesDialogsNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsNotModified) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesDialogsNotModified) GetPredicateName() string {
	return Predicate_messages_dialogsNotModified
}

func (m *TLMessagesDialogsNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf0e3e596: func() []byte {
			x.UInt(0xf0e3e596)

			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_dialogsNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_dialogsNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesDialogsNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDialogsNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf0e3e596: func() error {
			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesDialogsNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedFile <--
//  + TL_EncryptedFileEmpty
//  + TL_EncryptedFile
//

func (m *EncryptedFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_encryptedFileEmpty:
		t := m.To_EncryptedFileEmpty()
		xBuf = t.Encode(layer)
	case Predicate_encryptedFile:
		t := m.To_EncryptedFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *EncryptedFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc21f497e:
		m2 := MakeTLEncryptedFileEmpty(m)
		m2.Decode(dBuf)
	case 0x4a70994c:
		m2 := MakeTLEncryptedFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EncryptedFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_encryptedFileEmpty:
		t := m.To_EncryptedFileEmpty()
		return t.DebugString()
	case Predicate_encryptedFile:
		t := m.To_EncryptedFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EncryptedFileEmpty
func (m *EncryptedFile) To_EncryptedFileEmpty() *TLEncryptedFileEmpty {
	m.PredicateName = Predicate_encryptedFileEmpty
	return &TLEncryptedFileEmpty{
		Data2: m,
	}
}

// To_EncryptedFile
func (m *EncryptedFile) To_EncryptedFile() *TLEncryptedFile {
	m.PredicateName = Predicate_encryptedFile
	return &TLEncryptedFile{
		Data2: m,
	}
}

// MakeTLEncryptedFileEmpty
func MakeTLEncryptedFileEmpty(data2 *EncryptedFile) *TLEncryptedFileEmpty {
	if data2 == nil {
		return &TLEncryptedFileEmpty{Data2: &EncryptedFile{
			PredicateName: Predicate_encryptedFileEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedFileEmpty
		return &TLEncryptedFileEmpty{Data2: data2}
	}
}

func (m *TLEncryptedFileEmpty) To_EncryptedFile() *EncryptedFile {
	m.Data2.PredicateName = Predicate_encryptedFileEmpty
	return m.Data2
}

func (m *TLEncryptedFileEmpty) GetPredicateName() string {
	return Predicate_encryptedFileEmpty
}

func (m *TLEncryptedFileEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc21f497e: func() []byte {
			x.UInt(0xc21f497e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedFileEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedFileEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedFileEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedFileEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc21f497e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedFileEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedFile
func MakeTLEncryptedFile(data2 *EncryptedFile) *TLEncryptedFile {
	if data2 == nil {
		return &TLEncryptedFile{Data2: &EncryptedFile{
			PredicateName: Predicate_encryptedFile,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedFile
		return &TLEncryptedFile{Data2: data2}
	}
}

func (m *TLEncryptedFile) To_EncryptedFile() *EncryptedFile {
	m.Data2.PredicateName = Predicate_encryptedFile
	return m.Data2
}

func (m *TLEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLEncryptedFile) GetId() int64  { return m.Data2.Id }

func (m *TLEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedFile) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLEncryptedFile) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLEncryptedFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLEncryptedFile) GetDcId() int32  { return m.Data2.DcId }

func (m *TLEncryptedFile) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedFile) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func (m *TLEncryptedFile) GetPredicateName() string {
	return Predicate_encryptedFile
}

func (m *TLEncryptedFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4a70994c: func() []byte {
			x.UInt(0x4a70994c)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetSize2())
			x.Int(m.GetDcId())
			x.Int(m.GetKeyFingerprint())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4a70994c: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetSize2(dBuf.Int())
			m.SetDcId(dBuf.Int())
			m.SetKeyFingerprint(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// TopPeer <--
//  + TL_TopPeer
//

func (m *TopPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_topPeer:
		t := m.To_TopPeer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *TopPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TopPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xedcdc05b:
		m2 := MakeTLTopPeer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *TopPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_topPeer:
		t := m.To_TopPeer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TopPeer
func (m *TopPeer) To_TopPeer() *TLTopPeer {
	m.PredicateName = Predicate_topPeer
	return &TLTopPeer{
		Data2: m,
	}
}

// MakeTLTopPeer
func MakeTLTopPeer(data2 *TopPeer) *TLTopPeer {
	if data2 == nil {
		return &TLTopPeer{Data2: &TopPeer{
			PredicateName: Predicate_topPeer,
		}}
	} else {
		data2.PredicateName = Predicate_topPeer
		return &TLTopPeer{Data2: data2}
	}
}

func (m *TLTopPeer) To_TopPeer() *TopPeer {
	m.Data2.PredicateName = Predicate_topPeer
	return m.Data2
}

func (m *TLTopPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLTopPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLTopPeer) SetRating(v float64) { m.Data2.Rating = v }
func (m *TLTopPeer) GetRating() float64  { return m.Data2.Rating }

func (m *TLTopPeer) GetPredicateName() string {
	return Predicate_topPeer
}

func (m *TLTopPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xedcdc05b: func() []byte {
			x.UInt(0xedcdc05b)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Double(m.GetRating())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_topPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_topPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTopPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTopPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xedcdc05b: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			m.SetRating(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTopPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_InactiveChats <--
//  + TL_MessagesInactiveChats
//

func (m *Messages_InactiveChats) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_inactiveChats:
		t := m.To_MessagesInactiveChats()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_InactiveChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_InactiveChats) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa927fec5:
		m2 := MakeTLMessagesInactiveChats(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_InactiveChats) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_inactiveChats:
		t := m.To_MessagesInactiveChats()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesInactiveChats
func (m *Messages_InactiveChats) To_MessagesInactiveChats() *TLMessagesInactiveChats {
	m.PredicateName = Predicate_messages_inactiveChats
	return &TLMessagesInactiveChats{
		Data2: m,
	}
}

// MakeTLMessagesInactiveChats
func MakeTLMessagesInactiveChats(data2 *Messages_InactiveChats) *TLMessagesInactiveChats {
	if data2 == nil {
		return &TLMessagesInactiveChats{Data2: &Messages_InactiveChats{
			PredicateName: Predicate_messages_inactiveChats,
		}}
	} else {
		data2.PredicateName = Predicate_messages_inactiveChats
		return &TLMessagesInactiveChats{Data2: data2}
	}
}

func (m *TLMessagesInactiveChats) To_Messages_InactiveChats() *Messages_InactiveChats {
	m.Data2.PredicateName = Predicate_messages_inactiveChats
	return m.Data2
}

func (m *TLMessagesInactiveChats) SetDates(v []int32) { m.Data2.Dates = v }
func (m *TLMessagesInactiveChats) GetDates() []int32  { return m.Data2.Dates }

func (m *TLMessagesInactiveChats) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesInactiveChats) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesInactiveChats) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesInactiveChats) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesInactiveChats) GetPredicateName() string {
	return Predicate_messages_inactiveChats
}

func (m *TLMessagesInactiveChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa927fec5: func() []byte {
			x.UInt(0xa927fec5)

			x.VectorInt(m.GetDates())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_inactiveChats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_inactiveChats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesInactiveChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesInactiveChats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa927fec5: func() error {

			m.SetDates(dBuf.VectorInt())

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesInactiveChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_VotesList <--
//  + TL_MessagesVotesList
//

func (m *Messages_VotesList) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_votesList:
		t := m.To_MessagesVotesList()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_VotesList) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_VotesList) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x823f649:
		m2 := MakeTLMessagesVotesList(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_VotesList) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_votesList:
		t := m.To_MessagesVotesList()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesVotesList
func (m *Messages_VotesList) To_MessagesVotesList() *TLMessagesVotesList {
	m.PredicateName = Predicate_messages_votesList
	return &TLMessagesVotesList{
		Data2: m,
	}
}

// MakeTLMessagesVotesList
func MakeTLMessagesVotesList(data2 *Messages_VotesList) *TLMessagesVotesList {
	if data2 == nil {
		return &TLMessagesVotesList{Data2: &Messages_VotesList{
			PredicateName: Predicate_messages_votesList,
		}}
	} else {
		data2.PredicateName = Predicate_messages_votesList
		return &TLMessagesVotesList{Data2: data2}
	}
}

func (m *TLMessagesVotesList) To_Messages_VotesList() *Messages_VotesList {
	m.Data2.PredicateName = Predicate_messages_votesList
	return m.Data2
}

//// flags
func (m *TLMessagesVotesList) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesVotesList) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesVotesList) SetVotes(v []*MessageUserVote) { m.Data2.Votes = v }
func (m *TLMessagesVotesList) GetVotes() []*MessageUserVote  { return m.Data2.Votes }

func (m *TLMessagesVotesList) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesVotesList) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesVotesList) SetNextOffset(v *types.StringValue) { m.Data2.NextOffset = v }
func (m *TLMessagesVotesList) GetNextOffset() *types.StringValue  { return m.Data2.NextOffset }

func (m *TLMessagesVotesList) GetPredicateName() string {
	return Predicate_messages_votesList
}

func (m *TLMessagesVotesList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x823f649: func() []byte {
			x.UInt(0x823f649)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNextOffset() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetVotes())))
			for _, v := range m.GetVotes() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetNextOffset() != nil {
				x.String(m.GetNextOffset().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_votesList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_votesList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesVotesList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesVotesList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x823f649: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*MessageUserVote, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &MessageUserVote{}
				v2[i].Decode(dBuf)
			}
			m.SetVotes(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			if (flags & (1 << 0)) != 0 {
				m.SetNextOffset(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesVotesList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PeerBlocked <--
//  + TL_PeerBlocked
//

func (m *PeerBlocked) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerBlocked:
		t := m.To_PeerBlocked()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PeerBlocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *PeerBlocked) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe8fd8014:
		m2 := MakeTLPeerBlocked(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PeerBlocked) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerBlocked:
		t := m.To_PeerBlocked()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerBlocked
func (m *PeerBlocked) To_PeerBlocked() *TLPeerBlocked {
	m.PredicateName = Predicate_peerBlocked
	return &TLPeerBlocked{
		Data2: m,
	}
}

// MakeTLPeerBlocked
func MakeTLPeerBlocked(data2 *PeerBlocked) *TLPeerBlocked {
	if data2 == nil {
		return &TLPeerBlocked{Data2: &PeerBlocked{
			PredicateName: Predicate_peerBlocked,
		}}
	} else {
		data2.PredicateName = Predicate_peerBlocked
		return &TLPeerBlocked{Data2: data2}
	}
}

func (m *TLPeerBlocked) To_PeerBlocked() *PeerBlocked {
	m.Data2.PredicateName = Predicate_peerBlocked
	return m.Data2
}

func (m *TLPeerBlocked) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLPeerBlocked) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLPeerBlocked) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPeerBlocked) GetDate() int32  { return m.Data2.Date }

func (m *TLPeerBlocked) GetPredicateName() string {
	return Predicate_peerBlocked
}

func (m *TLPeerBlocked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe8fd8014: func() []byte {
			x.UInt(0xe8fd8014)

			x.Bytes(m.GetPeerId().Encode(layer))
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerBlocked, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerBlocked, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerBlocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerBlocked) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe8fd8014: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeerId(m0)

			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerBlocked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Peer <--
//  + TL_PeerUser
//  + TL_PeerChat
//  + TL_PeerChannel
//

func (m *Peer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerUser:
		t := m.To_PeerUser()
		xBuf = t.Encode(layer)
	case Predicate_peerChat:
		t := m.To_PeerChat()
		xBuf = t.Encode(layer)
	case Predicate_peerChannel:
		t := m.To_PeerChannel()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Peer) CalcByteSize(layer int32) int {
	return 0
}

func (m *Peer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x59511722:
		m2 := MakeTLPeerUser(m)
		m2.Decode(dBuf)
	case 0x36c6019a:
		m2 := MakeTLPeerChat(m)
		m2.Decode(dBuf)
	case 0xa2a5371e:
		m2 := MakeTLPeerChannel(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Peer) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerUser:
		t := m.To_PeerUser()
		return t.DebugString()
	case Predicate_peerChat:
		t := m.To_PeerChat()
		return t.DebugString()
	case Predicate_peerChannel:
		t := m.To_PeerChannel()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerUser
func (m *Peer) To_PeerUser() *TLPeerUser {
	m.PredicateName = Predicate_peerUser
	return &TLPeerUser{
		Data2: m,
	}
}

// To_PeerChat
func (m *Peer) To_PeerChat() *TLPeerChat {
	m.PredicateName = Predicate_peerChat
	return &TLPeerChat{
		Data2: m,
	}
}

// To_PeerChannel
func (m *Peer) To_PeerChannel() *TLPeerChannel {
	m.PredicateName = Predicate_peerChannel
	return &TLPeerChannel{
		Data2: m,
	}
}

// MakeTLPeerUser
func MakeTLPeerUser(data2 *Peer) *TLPeerUser {
	if data2 == nil {
		return &TLPeerUser{Data2: &Peer{
			PredicateName: Predicate_peerUser,
		}}
	} else {
		data2.PredicateName = Predicate_peerUser
		return &TLPeerUser{Data2: data2}
	}
}

func (m *TLPeerUser) To_Peer() *Peer {
	m.Data2.PredicateName = Predicate_peerUser
	return m.Data2
}

func (m *TLPeerUser) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLPeerUser) GetUserId() int64  { return m.Data2.UserId }

func (m *TLPeerUser) GetPredicateName() string {
	return Predicate_peerUser
}

func (m *TLPeerUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x59511722: func() []byte {
			x.UInt(0x59511722)

			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x59511722: func() error {
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPeerChat
func MakeTLPeerChat(data2 *Peer) *TLPeerChat {
	if data2 == nil {
		return &TLPeerChat{Data2: &Peer{
			PredicateName: Predicate_peerChat,
		}}
	} else {
		data2.PredicateName = Predicate_peerChat
		return &TLPeerChat{Data2: data2}
	}
}

func (m *TLPeerChat) To_Peer() *Peer {
	m.Data2.PredicateName = Predicate_peerChat
	return m.Data2
}

func (m *TLPeerChat) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLPeerChat) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLPeerChat) GetPredicateName() string {
	return Predicate_peerChat
}

func (m *TLPeerChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x36c6019a: func() []byte {
			x.UInt(0x36c6019a)

			x.Long(m.GetChatId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x36c6019a: func() error {
			m.SetChatId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPeerChannel
func MakeTLPeerChannel(data2 *Peer) *TLPeerChannel {
	if data2 == nil {
		return &TLPeerChannel{Data2: &Peer{
			PredicateName: Predicate_peerChannel,
		}}
	} else {
		data2.PredicateName = Predicate_peerChannel
		return &TLPeerChannel{Data2: data2}
	}
}

func (m *TLPeerChannel) To_Peer() *Peer {
	m.Data2.PredicateName = Predicate_peerChannel
	return m.Data2
}

func (m *TLPeerChannel) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLPeerChannel) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLPeerChannel) GetPredicateName() string {
	return Predicate_peerChannel
}

func (m *TLPeerChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa2a5371e: func() []byte {
			x.UInt(0xa2a5371e)

			x.Long(m.GetChannelId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa2a5371e: func() error {
			m.SetChannelId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Document <--
//  + TL_DocumentEmpty
//  + TL_Document
//

func (m *Document) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_documentEmpty:
		t := m.To_DocumentEmpty()
		xBuf = t.Encode(layer)
	case Predicate_document:
		t := m.To_Document()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Document) CalcByteSize(layer int32) int {
	return 0
}

func (m *Document) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x36f8c871:
		m2 := MakeTLDocumentEmpty(m)
		m2.Decode(dBuf)
	case 0x1e87342b:
		m2 := MakeTLDocument(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Document) DebugString() string {
	switch m.PredicateName {
	case Predicate_documentEmpty:
		t := m.To_DocumentEmpty()
		return t.DebugString()
	case Predicate_document:
		t := m.To_Document()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DocumentEmpty
func (m *Document) To_DocumentEmpty() *TLDocumentEmpty {
	m.PredicateName = Predicate_documentEmpty
	return &TLDocumentEmpty{
		Data2: m,
	}
}

// To_Document
func (m *Document) To_Document() *TLDocument {
	m.PredicateName = Predicate_document
	return &TLDocument{
		Data2: m,
	}
}

// MakeTLDocumentEmpty
func MakeTLDocumentEmpty(data2 *Document) *TLDocumentEmpty {
	if data2 == nil {
		return &TLDocumentEmpty{Data2: &Document{
			PredicateName: Predicate_documentEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_documentEmpty
		return &TLDocumentEmpty{Data2: data2}
	}
}

func (m *TLDocumentEmpty) To_Document() *Document {
	m.Data2.PredicateName = Predicate_documentEmpty
	return m.Data2
}

func (m *TLDocumentEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocumentEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLDocumentEmpty) GetPredicateName() string {
	return Predicate_documentEmpty
}

func (m *TLDocumentEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x36f8c871: func() []byte {
			x.UInt(0x36f8c871)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x36f8c871: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocument
func MakeTLDocument(data2 *Document) *TLDocument {
	if data2 == nil {
		return &TLDocument{Data2: &Document{
			PredicateName: Predicate_document,
		}}
	} else {
		data2.PredicateName = Predicate_document
		return &TLDocument{Data2: data2}
	}
}

func (m *TLDocument) To_Document() *Document {
	m.Data2.PredicateName = Predicate_document
	return m.Data2
}

//// flags
func (m *TLDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocument) GetId() int64  { return m.Data2.Id }

func (m *TLDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLDocument) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLDocument) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLDocument) GetFileReference() []byte  { return m.Data2.FileReference }

func (m *TLDocument) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDocument) GetDate() int32  { return m.Data2.Date }

func (m *TLDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLDocument) GetMimeType() string  { return m.Data2.MimeType }

func (m *TLDocument) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLDocument) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLDocument) SetThumbs(v []*PhotoSize) { m.Data2.Thumbs = v }
func (m *TLDocument) GetThumbs() []*PhotoSize  { return m.Data2.Thumbs }

func (m *TLDocument) SetVideoThumbs(v []*VideoSize) { m.Data2.VideoThumbs = v }
func (m *TLDocument) GetVideoThumbs() []*VideoSize  { return m.Data2.VideoThumbs }

func (m *TLDocument) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLDocument) GetDcId() int32  { return m.Data2.DcId }

func (m *TLDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLDocument) GetAttributes() []*DocumentAttribute  { return m.Data2.Attributes }

func (m *TLDocument) GetPredicateName() string {
	return Predicate_document
}

func (m *TLDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e87342b: func() []byte {
			x.UInt(0x1e87342b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetThumbs() != nil {
					flags |= 1 << 0
				}
				if m.GetVideoThumbs() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.StringBytes(m.GetFileReference())
			x.Int(m.GetDate())
			x.String(m.GetMimeType())
			x.Int(m.GetSize2())
			if m.GetThumbs() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetThumbs())))
				for _, v := range m.GetThumbs() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetVideoThumbs() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetVideoThumbs())))
				for _, v := range m.GetVideoThumbs() {
					x.Bytes((*v).Encode(layer))
				}
			}
			x.Int(m.GetDcId())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAttributes())))
			for _, v := range m.GetAttributes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_document, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_document, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e87342b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetFileReference(dBuf.StringBytes())
			m.SetDate(dBuf.Int())
			m.SetMimeType(dBuf.String())
			m.SetSize2(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				c7 := dBuf.Int()
				if c7 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
					return dBuf.GetError()
				}
				l7 := dBuf.Int()
				v7 := make([]*PhotoSize, l7)
				for i := int32(0); i < l7; i++ {
					v7[i] = &PhotoSize{}
					v7[i].Decode(dBuf)
				}
				m.SetThumbs(v7)
			}
			if (flags & (1 << 1)) != 0 {
				c8 := dBuf.Int()
				if c8 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
					return dBuf.GetError()
				}
				l8 := dBuf.Int()
				v8 := make([]*VideoSize, l8)
				for i := int32(0); i < l8; i++ {
					v8[i] = &VideoSize{}
					v8[i].Decode(dBuf)
				}
				m.SetVideoThumbs(v8)
			}
			m.SetDcId(dBuf.Int())
			c10 := dBuf.Int()
			if c10 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 10, c10)
				return dBuf.GetError()
			}
			l10 := dBuf.Int()
			v10 := make([]*DocumentAttribute, l10)
			for i := int32(0); i < l10; i++ {
				v10[i] = &DocumentAttribute{}
				v10[i].Decode(dBuf)
			}
			m.SetAttributes(v10)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputWebFileLocation <--
//  + TL_InputWebFileLocation
//  + TL_InputWebFileGeoPointLocation
//

func (m *InputWebFileLocation) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputWebFileLocation:
		t := m.To_InputWebFileLocation()
		xBuf = t.Encode(layer)
	case Predicate_inputWebFileGeoPointLocation:
		t := m.To_InputWebFileGeoPointLocation()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputWebFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputWebFileLocation) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc239d686:
		m2 := MakeTLInputWebFileLocation(m)
		m2.Decode(dBuf)
	case 0x9f2221c9:
		m2 := MakeTLInputWebFileGeoPointLocation(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputWebFileLocation) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputWebFileLocation:
		t := m.To_InputWebFileLocation()
		return t.DebugString()
	case Predicate_inputWebFileGeoPointLocation:
		t := m.To_InputWebFileGeoPointLocation()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputWebFileLocation
func (m *InputWebFileLocation) To_InputWebFileLocation() *TLInputWebFileLocation {
	m.PredicateName = Predicate_inputWebFileLocation
	return &TLInputWebFileLocation{
		Data2: m,
	}
}

// To_InputWebFileGeoPointLocation
func (m *InputWebFileLocation) To_InputWebFileGeoPointLocation() *TLInputWebFileGeoPointLocation {
	m.PredicateName = Predicate_inputWebFileGeoPointLocation
	return &TLInputWebFileGeoPointLocation{
		Data2: m,
	}
}

// MakeTLInputWebFileLocation
func MakeTLInputWebFileLocation(data2 *InputWebFileLocation) *TLInputWebFileLocation {
	if data2 == nil {
		return &TLInputWebFileLocation{Data2: &InputWebFileLocation{
			PredicateName: Predicate_inputWebFileLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputWebFileLocation
		return &TLInputWebFileLocation{Data2: data2}
	}
}

func (m *TLInputWebFileLocation) To_InputWebFileLocation() *InputWebFileLocation {
	m.Data2.PredicateName = Predicate_inputWebFileLocation
	return m.Data2
}

func (m *TLInputWebFileLocation) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebFileLocation) GetUrl() string  { return m.Data2.Url }

func (m *TLInputWebFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputWebFileLocation) GetPredicateName() string {
	return Predicate_inputWebFileLocation
}

func (m *TLInputWebFileLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc239d686: func() []byte {
			x.UInt(0xc239d686)

			x.String(m.GetUrl())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWebFileLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWebFileLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWebFileLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWebFileLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc239d686: func() error {
			m.SetUrl(dBuf.String())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWebFileLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputWebFileGeoPointLocation
func MakeTLInputWebFileGeoPointLocation(data2 *InputWebFileLocation) *TLInputWebFileGeoPointLocation {
	if data2 == nil {
		return &TLInputWebFileGeoPointLocation{Data2: &InputWebFileLocation{
			PredicateName: Predicate_inputWebFileGeoPointLocation,
		}}
	} else {
		data2.PredicateName = Predicate_inputWebFileGeoPointLocation
		return &TLInputWebFileGeoPointLocation{Data2: data2}
	}
}

func (m *TLInputWebFileGeoPointLocation) To_InputWebFileLocation() *InputWebFileLocation {
	m.Data2.PredicateName = Predicate_inputWebFileGeoPointLocation
	return m.Data2
}

func (m *TLInputWebFileGeoPointLocation) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputWebFileGeoPointLocation) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputWebFileGeoPointLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileGeoPointLocation) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputWebFileGeoPointLocation) SetW(v int32) { m.Data2.W = v }
func (m *TLInputWebFileGeoPointLocation) GetW() int32  { return m.Data2.W }

func (m *TLInputWebFileGeoPointLocation) SetH(v int32) { m.Data2.H = v }
func (m *TLInputWebFileGeoPointLocation) GetH() int32  { return m.Data2.H }

func (m *TLInputWebFileGeoPointLocation) SetZoom(v int32) { m.Data2.Zoom = v }
func (m *TLInputWebFileGeoPointLocation) GetZoom() int32  { return m.Data2.Zoom }

func (m *TLInputWebFileGeoPointLocation) SetScale(v int32) { m.Data2.Scale = v }
func (m *TLInputWebFileGeoPointLocation) GetScale() int32  { return m.Data2.Scale }

func (m *TLInputWebFileGeoPointLocation) GetPredicateName() string {
	return Predicate_inputWebFileGeoPointLocation
}

func (m *TLInputWebFileGeoPointLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9f2221c9: func() []byte {
			x.UInt(0x9f2221c9)

			x.Bytes(m.GetGeoPoint().Encode(layer))
			x.Long(m.GetAccessHash())
			x.Int(m.GetW())
			x.Int(m.GetH())
			x.Int(m.GetZoom())
			x.Int(m.GetScale())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWebFileGeoPointLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWebFileGeoPointLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWebFileGeoPointLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWebFileGeoPointLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9f2221c9: func() error {

			m2 := &InputGeoPoint{}
			m2.Decode(dBuf)
			m.SetGeoPoint(m2)

			m.SetAccessHash(dBuf.Long())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			m.SetZoom(dBuf.Int())
			m.SetScale(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWebFileGeoPointLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputClientProxy <--
//  + TL_InputClientProxy
//

func (m *InputClientProxy) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputClientProxy:
		t := m.To_InputClientProxy()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputClientProxy) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputClientProxy) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x75588b3f:
		m2 := MakeTLInputClientProxy(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputClientProxy) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputClientProxy:
		t := m.To_InputClientProxy()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputClientProxy
func (m *InputClientProxy) To_InputClientProxy() *TLInputClientProxy {
	m.PredicateName = Predicate_inputClientProxy
	return &TLInputClientProxy{
		Data2: m,
	}
}

// MakeTLInputClientProxy
func MakeTLInputClientProxy(data2 *InputClientProxy) *TLInputClientProxy {
	if data2 == nil {
		return &TLInputClientProxy{Data2: &InputClientProxy{
			PredicateName: Predicate_inputClientProxy,
		}}
	} else {
		data2.PredicateName = Predicate_inputClientProxy
		return &TLInputClientProxy{Data2: data2}
	}
}

func (m *TLInputClientProxy) To_InputClientProxy() *InputClientProxy {
	m.Data2.PredicateName = Predicate_inputClientProxy
	return m.Data2
}

func (m *TLInputClientProxy) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputClientProxy) GetAddress() string  { return m.Data2.Address }

func (m *TLInputClientProxy) SetPort(v int32) { m.Data2.Port = v }
func (m *TLInputClientProxy) GetPort() int32  { return m.Data2.Port }

func (m *TLInputClientProxy) GetPredicateName() string {
	return Predicate_inputClientProxy
}

func (m *TLInputClientProxy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x75588b3f: func() []byte {
			x.UInt(0x75588b3f)

			x.String(m.GetAddress())
			x.Int(m.GetPort())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputClientProxy, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputClientProxy, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputClientProxy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputClientProxy) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x75588b3f: func() error {
			m.SetAddress(dBuf.String())
			m.SetPort(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputClientProxy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// UrlAuthResult <--
//  + TL_UrlAuthResultRequest
//  + TL_UrlAuthResultAccepted
//  + TL_UrlAuthResultDefault
//

func (m *UrlAuthResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_urlAuthResultRequest:
		t := m.To_UrlAuthResultRequest()
		xBuf = t.Encode(layer)
	case Predicate_urlAuthResultAccepted:
		t := m.To_UrlAuthResultAccepted()
		xBuf = t.Encode(layer)
	case Predicate_urlAuthResultDefault:
		t := m.To_UrlAuthResultDefault()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *UrlAuthResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *UrlAuthResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x92d33a0e:
		m2 := MakeTLUrlAuthResultRequest(m)
		m2.Decode(dBuf)
	case 0x8f8c0e4e:
		m2 := MakeTLUrlAuthResultAccepted(m)
		m2.Decode(dBuf)
	case 0xa9d6db1f:
		m2 := MakeTLUrlAuthResultDefault(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *UrlAuthResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_urlAuthResultRequest:
		t := m.To_UrlAuthResultRequest()
		return t.DebugString()
	case Predicate_urlAuthResultAccepted:
		t := m.To_UrlAuthResultAccepted()
		return t.DebugString()
	case Predicate_urlAuthResultDefault:
		t := m.To_UrlAuthResultDefault()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UrlAuthResultRequest
func (m *UrlAuthResult) To_UrlAuthResultRequest() *TLUrlAuthResultRequest {
	m.PredicateName = Predicate_urlAuthResultRequest
	return &TLUrlAuthResultRequest{
		Data2: m,
	}
}

// To_UrlAuthResultAccepted
func (m *UrlAuthResult) To_UrlAuthResultAccepted() *TLUrlAuthResultAccepted {
	m.PredicateName = Predicate_urlAuthResultAccepted
	return &TLUrlAuthResultAccepted{
		Data2: m,
	}
}

// To_UrlAuthResultDefault
func (m *UrlAuthResult) To_UrlAuthResultDefault() *TLUrlAuthResultDefault {
	m.PredicateName = Predicate_urlAuthResultDefault
	return &TLUrlAuthResultDefault{
		Data2: m,
	}
}

// MakeTLUrlAuthResultRequest
func MakeTLUrlAuthResultRequest(data2 *UrlAuthResult) *TLUrlAuthResultRequest {
	if data2 == nil {
		return &TLUrlAuthResultRequest{Data2: &UrlAuthResult{
			PredicateName: Predicate_urlAuthResultRequest,
		}}
	} else {
		data2.PredicateName = Predicate_urlAuthResultRequest
		return &TLUrlAuthResultRequest{Data2: data2}
	}
}

func (m *TLUrlAuthResultRequest) To_UrlAuthResult() *UrlAuthResult {
	m.Data2.PredicateName = Predicate_urlAuthResultRequest
	return m.Data2
}

//// flags
func (m *TLUrlAuthResultRequest) SetRequestWriteAccess(v bool) { m.Data2.RequestWriteAccess = v }
func (m *TLUrlAuthResultRequest) GetRequestWriteAccess() bool  { return m.Data2.RequestWriteAccess }

func (m *TLUrlAuthResultRequest) SetBot(v *User) { m.Data2.Bot = v }
func (m *TLUrlAuthResultRequest) GetBot() *User  { return m.Data2.Bot }

func (m *TLUrlAuthResultRequest) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLUrlAuthResultRequest) GetDomain() string  { return m.Data2.Domain }

func (m *TLUrlAuthResultRequest) GetPredicateName() string {
	return Predicate_urlAuthResultRequest
}

func (m *TLUrlAuthResultRequest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x92d33a0e: func() []byte {
			x.UInt(0x92d33a0e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRequestWriteAccess() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetBot().Encode(layer))
			x.String(m.GetDomain())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_urlAuthResultRequest, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_urlAuthResultRequest, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUrlAuthResultRequest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUrlAuthResultRequest) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x92d33a0e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRequestWriteAccess(true)
			}

			m2 := &User{}
			m2.Decode(dBuf)
			m.SetBot(m2)

			m.SetDomain(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUrlAuthResultRequest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUrlAuthResultAccepted
func MakeTLUrlAuthResultAccepted(data2 *UrlAuthResult) *TLUrlAuthResultAccepted {
	if data2 == nil {
		return &TLUrlAuthResultAccepted{Data2: &UrlAuthResult{
			PredicateName: Predicate_urlAuthResultAccepted,
		}}
	} else {
		data2.PredicateName = Predicate_urlAuthResultAccepted
		return &TLUrlAuthResultAccepted{Data2: data2}
	}
}

func (m *TLUrlAuthResultAccepted) To_UrlAuthResult() *UrlAuthResult {
	m.Data2.PredicateName = Predicate_urlAuthResultAccepted
	return m.Data2
}

func (m *TLUrlAuthResultAccepted) SetUrl(v string) { m.Data2.Url = v }
func (m *TLUrlAuthResultAccepted) GetUrl() string  { return m.Data2.Url }

func (m *TLUrlAuthResultAccepted) GetPredicateName() string {
	return Predicate_urlAuthResultAccepted
}

func (m *TLUrlAuthResultAccepted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8f8c0e4e: func() []byte {
			x.UInt(0x8f8c0e4e)

			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_urlAuthResultAccepted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_urlAuthResultAccepted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUrlAuthResultAccepted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUrlAuthResultAccepted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8f8c0e4e: func() error {
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUrlAuthResultAccepted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUrlAuthResultDefault
func MakeTLUrlAuthResultDefault(data2 *UrlAuthResult) *TLUrlAuthResultDefault {
	if data2 == nil {
		return &TLUrlAuthResultDefault{Data2: &UrlAuthResult{
			PredicateName: Predicate_urlAuthResultDefault,
		}}
	} else {
		data2.PredicateName = Predicate_urlAuthResultDefault
		return &TLUrlAuthResultDefault{Data2: data2}
	}
}

func (m *TLUrlAuthResultDefault) To_UrlAuthResult() *UrlAuthResult {
	m.Data2.PredicateName = Predicate_urlAuthResultDefault
	return m.Data2
}

func (m *TLUrlAuthResultDefault) GetPredicateName() string {
	return Predicate_urlAuthResultDefault
}

func (m *TLUrlAuthResultDefault) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa9d6db1f: func() []byte {
			x.UInt(0xa9d6db1f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_urlAuthResultDefault, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_urlAuthResultDefault, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUrlAuthResultDefault) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUrlAuthResultDefault) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa9d6db1f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUrlAuthResultDefault) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Stats_BroadcastStats <--
//  + TL_StatsBroadcastStats
//

func (m *Stats_BroadcastStats) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stats_broadcastStats:
		t := m.To_StatsBroadcastStats()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Stats_BroadcastStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *Stats_BroadcastStats) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbdf78394:
		m2 := MakeTLStatsBroadcastStats(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Stats_BroadcastStats) DebugString() string {
	switch m.PredicateName {
	case Predicate_stats_broadcastStats:
		t := m.To_StatsBroadcastStats()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsBroadcastStats
func (m *Stats_BroadcastStats) To_StatsBroadcastStats() *TLStatsBroadcastStats {
	m.PredicateName = Predicate_stats_broadcastStats
	return &TLStatsBroadcastStats{
		Data2: m,
	}
}

// MakeTLStatsBroadcastStats
func MakeTLStatsBroadcastStats(data2 *Stats_BroadcastStats) *TLStatsBroadcastStats {
	if data2 == nil {
		return &TLStatsBroadcastStats{Data2: &Stats_BroadcastStats{
			PredicateName: Predicate_stats_broadcastStats,
		}}
	} else {
		data2.PredicateName = Predicate_stats_broadcastStats
		return &TLStatsBroadcastStats{Data2: data2}
	}
}

func (m *TLStatsBroadcastStats) To_Stats_BroadcastStats() *Stats_BroadcastStats {
	m.Data2.PredicateName = Predicate_stats_broadcastStats
	return m.Data2
}

func (m *TLStatsBroadcastStats) SetPeriod(v *StatsDateRangeDays) { m.Data2.Period = v }
func (m *TLStatsBroadcastStats) GetPeriod() *StatsDateRangeDays  { return m.Data2.Period }

func (m *TLStatsBroadcastStats) SetFollowers(v *StatsAbsValueAndPrev) { m.Data2.Followers = v }
func (m *TLStatsBroadcastStats) GetFollowers() *StatsAbsValueAndPrev  { return m.Data2.Followers }

func (m *TLStatsBroadcastStats) SetViewsPerPost(v *StatsAbsValueAndPrev) { m.Data2.ViewsPerPost = v }
func (m *TLStatsBroadcastStats) GetViewsPerPost() *StatsAbsValueAndPrev  { return m.Data2.ViewsPerPost }

func (m *TLStatsBroadcastStats) SetSharesPerPost(v *StatsAbsValueAndPrev) { m.Data2.SharesPerPost = v }
func (m *TLStatsBroadcastStats) GetSharesPerPost() *StatsAbsValueAndPrev {
	return m.Data2.SharesPerPost
}

func (m *TLStatsBroadcastStats) SetEnabledNotifications(v *StatsPercentValue) {
	m.Data2.EnabledNotifications = v
}
func (m *TLStatsBroadcastStats) GetEnabledNotifications() *StatsPercentValue {
	return m.Data2.EnabledNotifications
}

func (m *TLStatsBroadcastStats) SetGrowthGraph(v *StatsGraph) { m.Data2.GrowthGraph = v }
func (m *TLStatsBroadcastStats) GetGrowthGraph() *StatsGraph  { return m.Data2.GrowthGraph }

func (m *TLStatsBroadcastStats) SetFollowersGraph(v *StatsGraph) { m.Data2.FollowersGraph = v }
func (m *TLStatsBroadcastStats) GetFollowersGraph() *StatsGraph  { return m.Data2.FollowersGraph }

func (m *TLStatsBroadcastStats) SetMuteGraph(v *StatsGraph) { m.Data2.MuteGraph = v }
func (m *TLStatsBroadcastStats) GetMuteGraph() *StatsGraph  { return m.Data2.MuteGraph }

func (m *TLStatsBroadcastStats) SetTopHoursGraph(v *StatsGraph) { m.Data2.TopHoursGraph = v }
func (m *TLStatsBroadcastStats) GetTopHoursGraph() *StatsGraph  { return m.Data2.TopHoursGraph }

func (m *TLStatsBroadcastStats) SetInteractionsGraph(v *StatsGraph) { m.Data2.InteractionsGraph = v }
func (m *TLStatsBroadcastStats) GetInteractionsGraph() *StatsGraph  { return m.Data2.InteractionsGraph }

func (m *TLStatsBroadcastStats) SetIvInteractionsGraph(v *StatsGraph) {
	m.Data2.IvInteractionsGraph = v
}
func (m *TLStatsBroadcastStats) GetIvInteractionsGraph() *StatsGraph {
	return m.Data2.IvInteractionsGraph
}

func (m *TLStatsBroadcastStats) SetViewsBySourceGraph(v *StatsGraph) { m.Data2.ViewsBySourceGraph = v }
func (m *TLStatsBroadcastStats) GetViewsBySourceGraph() *StatsGraph {
	return m.Data2.ViewsBySourceGraph
}

func (m *TLStatsBroadcastStats) SetNewFollowersBySourceGraph(v *StatsGraph) {
	m.Data2.NewFollowersBySourceGraph = v
}
func (m *TLStatsBroadcastStats) GetNewFollowersBySourceGraph() *StatsGraph {
	return m.Data2.NewFollowersBySourceGraph
}

func (m *TLStatsBroadcastStats) SetLanguagesGraph(v *StatsGraph) { m.Data2.LanguagesGraph = v }
func (m *TLStatsBroadcastStats) GetLanguagesGraph() *StatsGraph  { return m.Data2.LanguagesGraph }

func (m *TLStatsBroadcastStats) SetRecentMessageInteractions(v []*MessageInteractionCounters) {
	m.Data2.RecentMessageInteractions = v
}
func (m *TLStatsBroadcastStats) GetRecentMessageInteractions() []*MessageInteractionCounters {
	return m.Data2.RecentMessageInteractions
}

func (m *TLStatsBroadcastStats) GetPredicateName() string {
	return Predicate_stats_broadcastStats
}

func (m *TLStatsBroadcastStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbdf78394: func() []byte {
			x.UInt(0xbdf78394)

			x.Bytes(m.GetPeriod().Encode(layer))
			x.Bytes(m.GetFollowers().Encode(layer))
			x.Bytes(m.GetViewsPerPost().Encode(layer))
			x.Bytes(m.GetSharesPerPost().Encode(layer))
			x.Bytes(m.GetEnabledNotifications().Encode(layer))
			x.Bytes(m.GetGrowthGraph().Encode(layer))
			x.Bytes(m.GetFollowersGraph().Encode(layer))
			x.Bytes(m.GetMuteGraph().Encode(layer))
			x.Bytes(m.GetTopHoursGraph().Encode(layer))
			x.Bytes(m.GetInteractionsGraph().Encode(layer))
			x.Bytes(m.GetIvInteractionsGraph().Encode(layer))
			x.Bytes(m.GetViewsBySourceGraph().Encode(layer))
			x.Bytes(m.GetNewFollowersBySourceGraph().Encode(layer))
			x.Bytes(m.GetLanguagesGraph().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRecentMessageInteractions())))
			for _, v := range m.GetRecentMessageInteractions() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stats_broadcastStats, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stats_broadcastStats, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsBroadcastStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsBroadcastStats) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbdf78394: func() error {

			m0 := &StatsDateRangeDays{}
			m0.Decode(dBuf)
			m.SetPeriod(m0)

			m1 := &StatsAbsValueAndPrev{}
			m1.Decode(dBuf)
			m.SetFollowers(m1)

			m2 := &StatsAbsValueAndPrev{}
			m2.Decode(dBuf)
			m.SetViewsPerPost(m2)

			m3 := &StatsAbsValueAndPrev{}
			m3.Decode(dBuf)
			m.SetSharesPerPost(m3)

			m4 := &StatsPercentValue{}
			m4.Decode(dBuf)
			m.SetEnabledNotifications(m4)

			m5 := &StatsGraph{}
			m5.Decode(dBuf)
			m.SetGrowthGraph(m5)

			m6 := &StatsGraph{}
			m6.Decode(dBuf)
			m.SetFollowersGraph(m6)

			m7 := &StatsGraph{}
			m7.Decode(dBuf)
			m.SetMuteGraph(m7)

			m8 := &StatsGraph{}
			m8.Decode(dBuf)
			m.SetTopHoursGraph(m8)

			m9 := &StatsGraph{}
			m9.Decode(dBuf)
			m.SetInteractionsGraph(m9)

			m10 := &StatsGraph{}
			m10.Decode(dBuf)
			m.SetIvInteractionsGraph(m10)

			m11 := &StatsGraph{}
			m11.Decode(dBuf)
			m.SetViewsBySourceGraph(m11)

			m12 := &StatsGraph{}
			m12.Decode(dBuf)
			m.SetNewFollowersBySourceGraph(m12)

			m13 := &StatsGraph{}
			m13.Decode(dBuf)
			m.SetLanguagesGraph(m13)

			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*MessageInteractionCounters, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &MessageInteractionCounters{}
				v14[i].Decode(dBuf)
			}
			m.SetRecentMessageInteractions(v14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsBroadcastStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Updates_State <--
//  + TL_UpdatesState
//

func (m *Updates_State) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updates_state:
		t := m.To_UpdatesState()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Updates_State) CalcByteSize(layer int32) int {
	return 0
}

func (m *Updates_State) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa56c2a3e:
		m2 := MakeTLUpdatesState(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Updates_State) DebugString() string {
	switch m.PredicateName {
	case Predicate_updates_state:
		t := m.To_UpdatesState()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdatesState
func (m *Updates_State) To_UpdatesState() *TLUpdatesState {
	m.PredicateName = Predicate_updates_state
	return &TLUpdatesState{
		Data2: m,
	}
}

// MakeTLUpdatesState
func MakeTLUpdatesState(data2 *Updates_State) *TLUpdatesState {
	if data2 == nil {
		return &TLUpdatesState{Data2: &Updates_State{
			PredicateName: Predicate_updates_state,
		}}
	} else {
		data2.PredicateName = Predicate_updates_state
		return &TLUpdatesState{Data2: data2}
	}
}

func (m *TLUpdatesState) To_Updates_State() *Updates_State {
	m.Data2.PredicateName = Predicate_updates_state
	return m.Data2
}

func (m *TLUpdatesState) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesState) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdatesState) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdatesState) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdatesState) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesState) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesState) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesState) GetSeq() int32  { return m.Data2.Seq }

func (m *TLUpdatesState) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLUpdatesState) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLUpdatesState) GetPredicateName() string {
	return Predicate_updates_state
}

func (m *TLUpdatesState) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa56c2a3e: func() []byte {
			x.UInt(0xa56c2a3e)

			x.Int(m.GetPts())
			x.Int(m.GetQts())
			x.Int(m.GetDate())
			x.Int(m.GetSeq())
			x.Int(m.GetUnreadCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates_state, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates_state, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesState) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesState) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa56c2a3e: func() error {
			m.SetPts(dBuf.Int())
			m.SetQts(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetSeq(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesState) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Config <--
//  + TL_Config
//

func (m *Config) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_config:
		t := m.To_Config()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Config) CalcByteSize(layer int32) int {
	return 0
}

func (m *Config) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x330b4067:
		m2 := MakeTLConfig(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Config) DebugString() string {
	switch m.PredicateName {
	case Predicate_config:
		t := m.To_Config()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Config
func (m *Config) To_Config() *TLConfig {
	m.PredicateName = Predicate_config
	return &TLConfig{
		Data2: m,
	}
}

// MakeTLConfig
func MakeTLConfig(data2 *Config) *TLConfig {
	if data2 == nil {
		return &TLConfig{Data2: &Config{
			PredicateName: Predicate_config,
		}}
	} else {
		data2.PredicateName = Predicate_config
		return &TLConfig{Data2: data2}
	}
}

func (m *TLConfig) To_Config() *Config {
	m.Data2.PredicateName = Predicate_config
	return m.Data2
}

//// flags
func (m *TLConfig) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig) GetPhonecallsEnabled() bool  { return m.Data2.PhonecallsEnabled }

func (m *TLConfig) SetDefaultP2PContacts(v bool) { m.Data2.DefaultP2PContacts = v }
func (m *TLConfig) GetDefaultP2PContacts() bool  { return m.Data2.DefaultP2PContacts }

func (m *TLConfig) SetPreloadFeaturedStickers(v bool) { m.Data2.PreloadFeaturedStickers = v }
func (m *TLConfig) GetPreloadFeaturedStickers() bool  { return m.Data2.PreloadFeaturedStickers }

func (m *TLConfig) SetIgnorePhoneEntities(v bool) { m.Data2.IgnorePhoneEntities = v }
func (m *TLConfig) GetIgnorePhoneEntities() bool  { return m.Data2.IgnorePhoneEntities }

func (m *TLConfig) SetRevokePmInbox(v bool) { m.Data2.RevokePmInbox = v }
func (m *TLConfig) GetRevokePmInbox() bool  { return m.Data2.RevokePmInbox }

func (m *TLConfig) SetBlockedMode(v bool) { m.Data2.BlockedMode = v }
func (m *TLConfig) GetBlockedMode() bool  { return m.Data2.BlockedMode }

func (m *TLConfig) SetPfsEnabled(v bool) { m.Data2.PfsEnabled = v }
func (m *TLConfig) GetPfsEnabled() bool  { return m.Data2.PfsEnabled }

func (m *TLConfig) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig) GetDate() int32  { return m.Data2.Date }

func (m *TLConfig) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig) GetExpires() int32  { return m.Data2.Expires }

func (m *TLConfig) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig) GetTestMode() *Bool  { return m.Data2.TestMode }

func (m *TLConfig) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig) GetThisDc() int32  { return m.Data2.ThisDc }

func (m *TLConfig) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLConfig) GetDcOptions() []*DcOption  { return m.Data2.DcOptions }

func (m *TLConfig) SetDcTxtDomainName(v string) { m.Data2.DcTxtDomainName = v }
func (m *TLConfig) GetDcTxtDomainName() string  { return m.Data2.DcTxtDomainName }

func (m *TLConfig) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig) GetChatSizeMax() int32  { return m.Data2.ChatSizeMax }

func (m *TLConfig) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig) GetMegagroupSizeMax() int32  { return m.Data2.MegagroupSizeMax }

func (m *TLConfig) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig) GetForwardedCountMax() int32  { return m.Data2.ForwardedCountMax }

func (m *TLConfig) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig) GetOnlineUpdatePeriodMs() int32  { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig) GetOfflineBlurTimeoutMs() int32  { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig) GetOfflineIdleTimeoutMs() int32  { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig) GetOnlineCloudTimeoutMs() int32  { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig) GetNotifyCloudDelayMs() int32  { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig) GetNotifyDefaultDelayMs() int32  { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig) GetPushChatPeriodMs() int32  { return m.Data2.PushChatPeriodMs }

func (m *TLConfig) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig) GetPushChatLimit() int32  { return m.Data2.PushChatLimit }

func (m *TLConfig) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig) GetSavedGifsLimit() int32  { return m.Data2.SavedGifsLimit }

func (m *TLConfig) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig) GetEditTimeLimit() int32  { return m.Data2.EditTimeLimit }

func (m *TLConfig) SetRevokeTimeLimit(v int32) { m.Data2.RevokeTimeLimit = v }
func (m *TLConfig) GetRevokeTimeLimit() int32  { return m.Data2.RevokeTimeLimit }

func (m *TLConfig) SetRevokePmTimeLimit(v int32) { m.Data2.RevokePmTimeLimit = v }
func (m *TLConfig) GetRevokePmTimeLimit() int32  { return m.Data2.RevokePmTimeLimit }

func (m *TLConfig) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig) GetRatingEDecay() int32  { return m.Data2.RatingEDecay }

func (m *TLConfig) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig) GetStickersRecentLimit() int32  { return m.Data2.StickersRecentLimit }

func (m *TLConfig) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig) GetStickersFavedLimit() int32  { return m.Data2.StickersFavedLimit }

func (m *TLConfig) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLConfig) GetChannelsReadMediaPeriod() int32  { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLConfig) SetTmpSessions(v *types.Int32Value) { m.Data2.TmpSessions = v }
func (m *TLConfig) GetTmpSessions() *types.Int32Value  { return m.Data2.TmpSessions }

func (m *TLConfig) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig) GetPinnedDialogsCountMax() int32  { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig) SetPinnedInfolderCountMax(v int32) { m.Data2.PinnedInfolderCountMax = v }
func (m *TLConfig) GetPinnedInfolderCountMax() int32  { return m.Data2.PinnedInfolderCountMax }

func (m *TLConfig) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig) GetCallReceiveTimeoutMs() int32  { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig) GetCallRingTimeoutMs() int32  { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig) GetCallConnectTimeoutMs() int32  { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig) GetCallPacketTimeoutMs() int32  { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig) GetMeUrlPrefix() string  { return m.Data2.MeUrlPrefix }

func (m *TLConfig) SetAutoupdateUrlPrefix(v *types.StringValue) { m.Data2.AutoupdateUrlPrefix = v }
func (m *TLConfig) GetAutoupdateUrlPrefix() *types.StringValue  { return m.Data2.AutoupdateUrlPrefix }

func (m *TLConfig) SetGifSearchUsername(v *types.StringValue) { m.Data2.GifSearchUsername = v }
func (m *TLConfig) GetGifSearchUsername() *types.StringValue  { return m.Data2.GifSearchUsername }

func (m *TLConfig) SetVenueSearchUsername(v *types.StringValue) { m.Data2.VenueSearchUsername = v }
func (m *TLConfig) GetVenueSearchUsername() *types.StringValue  { return m.Data2.VenueSearchUsername }

func (m *TLConfig) SetImgSearchUsername(v *types.StringValue) { m.Data2.ImgSearchUsername = v }
func (m *TLConfig) GetImgSearchUsername() *types.StringValue  { return m.Data2.ImgSearchUsername }

func (m *TLConfig) SetStaticMapsProvider(v *types.StringValue) { m.Data2.StaticMapsProvider = v }
func (m *TLConfig) GetStaticMapsProvider() *types.StringValue  { return m.Data2.StaticMapsProvider }

func (m *TLConfig) SetCaptionLengthMax(v int32) { m.Data2.CaptionLengthMax = v }
func (m *TLConfig) GetCaptionLengthMax() int32  { return m.Data2.CaptionLengthMax }

func (m *TLConfig) SetMessageLengthMax(v int32) { m.Data2.MessageLengthMax = v }
func (m *TLConfig) GetMessageLengthMax() int32  { return m.Data2.MessageLengthMax }

func (m *TLConfig) SetWebfileDcId(v int32) { m.Data2.WebfileDcId = v }
func (m *TLConfig) GetWebfileDcId() int32  { return m.Data2.WebfileDcId }

func (m *TLConfig) SetSuggestedLangCode(v *types.StringValue) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig) GetSuggestedLangCode() *types.StringValue  { return m.Data2.SuggestedLangCode }

func (m *TLConfig) SetLangPackVersion(v *types.Int32Value) { m.Data2.LangPackVersion = v }
func (m *TLConfig) GetLangPackVersion() *types.Int32Value  { return m.Data2.LangPackVersion }

func (m *TLConfig) SetBaseLangPackVersion(v *types.Int32Value) { m.Data2.BaseLangPackVersion = v }
func (m *TLConfig) GetBaseLangPackVersion() *types.Int32Value  { return m.Data2.BaseLangPackVersion }

func (m *TLConfig) GetPredicateName() string {
	return Predicate_config
}

func (m *TLConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x330b4067: func() []byte {
			x.UInt(0x330b4067)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhonecallsEnabled() == true {
					flags |= 1 << 1
				}
				if m.GetDefaultP2PContacts() == true {
					flags |= 1 << 3
				}
				if m.GetPreloadFeaturedStickers() == true {
					flags |= 1 << 4
				}
				if m.GetIgnorePhoneEntities() == true {
					flags |= 1 << 5
				}
				if m.GetRevokePmInbox() == true {
					flags |= 1 << 6
				}
				if m.GetBlockedMode() == true {
					flags |= 1 << 8
				}
				if m.GetPfsEnabled() == true {
					flags |= 1 << 13
				}

				if m.GetTmpSessions() != nil {
					flags |= 1 << 0
				}

				if m.GetAutoupdateUrlPrefix() != nil {
					flags |= 1 << 7
				}
				if m.GetGifSearchUsername() != nil {
					flags |= 1 << 9
				}
				if m.GetVenueSearchUsername() != nil {
					flags |= 1 << 10
				}
				if m.GetImgSearchUsername() != nil {
					flags |= 1 << 11
				}
				if m.GetStaticMapsProvider() != nil {
					flags |= 1 << 12
				}

				if m.GetSuggestedLangCode() != nil {
					flags |= 1 << 2
				}
				if m.GetLangPackVersion() != nil {
					flags |= 1 << 2
				}
				if m.GetBaseLangPackVersion() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetDate())
			x.Int(m.GetExpires())
			x.Bytes(m.GetTestMode().Encode(layer))
			x.Int(m.GetThisDc())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDcOptions())))
			for _, v := range m.GetDcOptions() {
				x.Bytes((*v).Encode(layer))
			}

			x.String(m.GetDcTxtDomainName())
			x.Int(m.GetChatSizeMax())
			x.Int(m.GetMegagroupSizeMax())
			x.Int(m.GetForwardedCountMax())
			x.Int(m.GetOnlineUpdatePeriodMs())
			x.Int(m.GetOfflineBlurTimeoutMs())
			x.Int(m.GetOfflineIdleTimeoutMs())
			x.Int(m.GetOnlineCloudTimeoutMs())
			x.Int(m.GetNotifyCloudDelayMs())
			x.Int(m.GetNotifyDefaultDelayMs())
			x.Int(m.GetPushChatPeriodMs())
			x.Int(m.GetPushChatLimit())
			x.Int(m.GetSavedGifsLimit())
			x.Int(m.GetEditTimeLimit())
			x.Int(m.GetRevokeTimeLimit())
			x.Int(m.GetRevokePmTimeLimit())
			x.Int(m.GetRatingEDecay())
			x.Int(m.GetStickersRecentLimit())
			x.Int(m.GetStickersFavedLimit())
			x.Int(m.GetChannelsReadMediaPeriod())
			if m.GetTmpSessions() != nil {
				x.Int(m.GetTmpSessions().Value)
			}

			x.Int(m.GetPinnedDialogsCountMax())
			x.Int(m.GetPinnedInfolderCountMax())
			x.Int(m.GetCallReceiveTimeoutMs())
			x.Int(m.GetCallRingTimeoutMs())
			x.Int(m.GetCallConnectTimeoutMs())
			x.Int(m.GetCallPacketTimeoutMs())
			x.String(m.GetMeUrlPrefix())
			if m.GetAutoupdateUrlPrefix() != nil {
				x.String(m.GetAutoupdateUrlPrefix().Value)
			}

			if m.GetGifSearchUsername() != nil {
				x.String(m.GetGifSearchUsername().Value)
			}

			if m.GetVenueSearchUsername() != nil {
				x.String(m.GetVenueSearchUsername().Value)
			}

			if m.GetImgSearchUsername() != nil {
				x.String(m.GetImgSearchUsername().Value)
			}

			if m.GetStaticMapsProvider() != nil {
				x.String(m.GetStaticMapsProvider().Value)
			}

			x.Int(m.GetCaptionLengthMax())
			x.Int(m.GetMessageLengthMax())
			x.Int(m.GetWebfileDcId())
			if m.GetSuggestedLangCode() != nil {
				x.String(m.GetSuggestedLangCode().Value)
			}

			if m.GetLangPackVersion() != nil {
				x.Int(m.GetLangPackVersion().Value)
			}

			if m.GetBaseLangPackVersion() != nil {
				x.Int(m.GetBaseLangPackVersion().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_config, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_config, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLConfig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x330b4067: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetPhonecallsEnabled(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetDefaultP2PContacts(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetPreloadFeaturedStickers(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetIgnorePhoneEntities(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetRevokePmInbox(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetBlockedMode(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetPfsEnabled(true)
			}
			m.SetDate(dBuf.Int())
			m.SetExpires(dBuf.Int())

			m10 := &Bool{}
			m10.Decode(dBuf)
			m.SetTestMode(m10)

			m.SetThisDc(dBuf.Int())
			c12 := dBuf.Int()
			if c12 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 12, c12)
				return dBuf.GetError()
			}
			l12 := dBuf.Int()
			v12 := make([]*DcOption, l12)
			for i := int32(0); i < l12; i++ {
				v12[i] = &DcOption{}
				v12[i].Decode(dBuf)
			}
			m.SetDcOptions(v12)

			m.SetDcTxtDomainName(dBuf.String())
			m.SetChatSizeMax(dBuf.Int())
			m.SetMegagroupSizeMax(dBuf.Int())
			m.SetForwardedCountMax(dBuf.Int())
			m.SetOnlineUpdatePeriodMs(dBuf.Int())
			m.SetOfflineBlurTimeoutMs(dBuf.Int())
			m.SetOfflineIdleTimeoutMs(dBuf.Int())
			m.SetOnlineCloudTimeoutMs(dBuf.Int())
			m.SetNotifyCloudDelayMs(dBuf.Int())
			m.SetNotifyDefaultDelayMs(dBuf.Int())
			m.SetPushChatPeriodMs(dBuf.Int())
			m.SetPushChatLimit(dBuf.Int())
			m.SetSavedGifsLimit(dBuf.Int())
			m.SetEditTimeLimit(dBuf.Int())
			m.SetRevokeTimeLimit(dBuf.Int())
			m.SetRevokePmTimeLimit(dBuf.Int())
			m.SetRatingEDecay(dBuf.Int())
			m.SetStickersRecentLimit(dBuf.Int())
			m.SetStickersFavedLimit(dBuf.Int())
			m.SetChannelsReadMediaPeriod(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetTmpSessions(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPinnedDialogsCountMax(dBuf.Int())
			m.SetPinnedInfolderCountMax(dBuf.Int())
			m.SetCallReceiveTimeoutMs(dBuf.Int())
			m.SetCallRingTimeoutMs(dBuf.Int())
			m.SetCallConnectTimeoutMs(dBuf.Int())
			m.SetCallPacketTimeoutMs(dBuf.Int())
			m.SetMeUrlPrefix(dBuf.String())
			if (flags & (1 << 7)) != 0 {
				m.SetAutoupdateUrlPrefix(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 9)) != 0 {
				m.SetGifSearchUsername(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 10)) != 0 {
				m.SetVenueSearchUsername(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetImgSearchUsername(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 12)) != 0 {
				m.SetStaticMapsProvider(&types.StringValue{Value: dBuf.String()})
			}

			m.SetCaptionLengthMax(dBuf.Int())
			m.SetMessageLengthMax(dBuf.Int())
			m.SetWebfileDcId(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m.SetSuggestedLangCode(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetLangPackVersion(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetBaseLangPackVersion(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentForm <--
//  + TL_PaymentsPaymentForm
//

func (m *Payments_PaymentForm) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_paymentForm:
		t := m.To_PaymentsPaymentForm()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_PaymentForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_PaymentForm) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1694761b:
		m2 := MakeTLPaymentsPaymentForm(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_PaymentForm) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_paymentForm:
		t := m.To_PaymentsPaymentForm()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsPaymentForm
func (m *Payments_PaymentForm) To_PaymentsPaymentForm() *TLPaymentsPaymentForm {
	m.PredicateName = Predicate_payments_paymentForm
	return &TLPaymentsPaymentForm{
		Data2: m,
	}
}

// MakeTLPaymentsPaymentForm
func MakeTLPaymentsPaymentForm(data2 *Payments_PaymentForm) *TLPaymentsPaymentForm {
	if data2 == nil {
		return &TLPaymentsPaymentForm{Data2: &Payments_PaymentForm{
			PredicateName: Predicate_payments_paymentForm,
		}}
	} else {
		data2.PredicateName = Predicate_payments_paymentForm
		return &TLPaymentsPaymentForm{Data2: data2}
	}
}

func (m *TLPaymentsPaymentForm) To_Payments_PaymentForm() *Payments_PaymentForm {
	m.Data2.PredicateName = Predicate_payments_paymentForm
	return m.Data2
}

//// flags
func (m *TLPaymentsPaymentForm) SetCanSaveCredentials(v bool) { m.Data2.CanSaveCredentials = v }
func (m *TLPaymentsPaymentForm) GetCanSaveCredentials() bool  { return m.Data2.CanSaveCredentials }

func (m *TLPaymentsPaymentForm) SetPasswordMissing(v bool) { m.Data2.PasswordMissing = v }
func (m *TLPaymentsPaymentForm) GetPasswordMissing() bool  { return m.Data2.PasswordMissing }

func (m *TLPaymentsPaymentForm) SetFormId(v int64) { m.Data2.FormId = v }
func (m *TLPaymentsPaymentForm) GetFormId() int64  { return m.Data2.FormId }

func (m *TLPaymentsPaymentForm) SetBotId(v int64) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentForm) GetBotId() int64  { return m.Data2.BotId }

func (m *TLPaymentsPaymentForm) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentForm) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLPaymentsPaymentForm) SetProviderId(v int64) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentForm) GetProviderId() int64  { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentForm) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentForm) GetUrl() string  { return m.Data2.Url }

func (m *TLPaymentsPaymentForm) SetNativeProvider(v *types.StringValue) { m.Data2.NativeProvider = v }
func (m *TLPaymentsPaymentForm) GetNativeProvider() *types.StringValue  { return m.Data2.NativeProvider }

func (m *TLPaymentsPaymentForm) SetNativeParams(v *DataJSON) { m.Data2.NativeParams = v }
func (m *TLPaymentsPaymentForm) GetNativeParams() *DataJSON  { return m.Data2.NativeParams }

func (m *TLPaymentsPaymentForm) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsPaymentForm) GetSavedInfo() *PaymentRequestedInfo  { return m.Data2.SavedInfo }

func (m *TLPaymentsPaymentForm) SetSavedCredentials(v *PaymentSavedCredentials) {
	m.Data2.SavedCredentials = v
}
func (m *TLPaymentsPaymentForm) GetSavedCredentials() *PaymentSavedCredentials {
	return m.Data2.SavedCredentials
}

func (m *TLPaymentsPaymentForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentForm) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPaymentsPaymentForm) GetPredicateName() string {
	return Predicate_payments_paymentForm
}

func (m *TLPaymentsPaymentForm) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1694761b: func() []byte {
			x.UInt(0x1694761b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanSaveCredentials() == true {
					flags |= 1 << 2
				}
				if m.GetPasswordMissing() == true {
					flags |= 1 << 3
				}

				if m.GetNativeProvider() != nil {
					flags |= 1 << 4
				}
				if m.GetNativeParams() != nil {
					flags |= 1 << 4
				}
				if m.GetSavedInfo() != nil {
					flags |= 1 << 0
				}
				if m.GetSavedCredentials() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetFormId())
			x.Long(m.GetBotId())
			x.Bytes(m.GetInvoice().Encode(layer))
			x.Long(m.GetProviderId())
			x.String(m.GetUrl())
			if m.GetNativeProvider() != nil {
				x.String(m.GetNativeProvider().Value)
			}

			if m.GetNativeParams() != nil {
				x.Bytes(m.GetNativeParams().Encode(layer))
			}

			if m.GetSavedInfo() != nil {
				x.Bytes(m.GetSavedInfo().Encode(layer))
			}

			if m.GetSavedCredentials() != nil {
				x.Bytes(m.GetSavedCredentials().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_paymentForm, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_paymentForm, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsPaymentForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsPaymentForm) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1694761b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetCanSaveCredentials(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetPasswordMissing(true)
			}
			m.SetFormId(dBuf.Long())
			m.SetBotId(dBuf.Long())

			m5 := &Invoice{}
			m5.Decode(dBuf)
			m.SetInvoice(m5)

			m.SetProviderId(dBuf.Long())
			m.SetUrl(dBuf.String())
			if (flags & (1 << 4)) != 0 {
				m.SetNativeProvider(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m9 := &DataJSON{}
				m9.Decode(dBuf)
				m.SetNativeParams(m9)
			}
			if (flags & (1 << 0)) != 0 {
				m10 := &PaymentRequestedInfo{}
				m10.Decode(dBuf)
				m.SetSavedInfo(m10)
			}
			if (flags & (1 << 1)) != 0 {
				m11 := &PaymentSavedCredentials{}
				m11.Decode(dBuf)
				m.SetSavedCredentials(m11)
			}
			c12 := dBuf.Int()
			if c12 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 12, c12)
				return dBuf.GetError()
			}
			l12 := dBuf.Int()
			v12 := make([]*User, l12)
			for i := int32(0); i < l12; i++ {
				v12[i] = &User{}
				v12[i].Decode(dBuf)
			}
			m.SetUsers(v12)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsPaymentForm) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ChatAdminsWithInvites <--
//  + TL_MessagesChatAdminsWithInvites
//

func (m *Messages_ChatAdminsWithInvites) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_chatAdminsWithInvites:
		t := m.To_MessagesChatAdminsWithInvites()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ChatAdminsWithInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ChatAdminsWithInvites) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb69b72d7:
		m2 := MakeTLMessagesChatAdminsWithInvites(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ChatAdminsWithInvites) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_chatAdminsWithInvites:
		t := m.To_MessagesChatAdminsWithInvites()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesChatAdminsWithInvites
func (m *Messages_ChatAdminsWithInvites) To_MessagesChatAdminsWithInvites() *TLMessagesChatAdminsWithInvites {
	m.PredicateName = Predicate_messages_chatAdminsWithInvites
	return &TLMessagesChatAdminsWithInvites{
		Data2: m,
	}
}

// MakeTLMessagesChatAdminsWithInvites
func MakeTLMessagesChatAdminsWithInvites(data2 *Messages_ChatAdminsWithInvites) *TLMessagesChatAdminsWithInvites {
	if data2 == nil {
		return &TLMessagesChatAdminsWithInvites{Data2: &Messages_ChatAdminsWithInvites{
			PredicateName: Predicate_messages_chatAdminsWithInvites,
		}}
	} else {
		data2.PredicateName = Predicate_messages_chatAdminsWithInvites
		return &TLMessagesChatAdminsWithInvites{Data2: data2}
	}
}

func (m *TLMessagesChatAdminsWithInvites) To_Messages_ChatAdminsWithInvites() *Messages_ChatAdminsWithInvites {
	m.Data2.PredicateName = Predicate_messages_chatAdminsWithInvites
	return m.Data2
}

func (m *TLMessagesChatAdminsWithInvites) SetAdmins(v []*ChatAdminWithInvites) { m.Data2.Admins = v }
func (m *TLMessagesChatAdminsWithInvites) GetAdmins() []*ChatAdminWithInvites  { return m.Data2.Admins }

func (m *TLMessagesChatAdminsWithInvites) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChatAdminsWithInvites) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesChatAdminsWithInvites) GetPredicateName() string {
	return Predicate_messages_chatAdminsWithInvites
}

func (m *TLMessagesChatAdminsWithInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb69b72d7: func() []byte {
			x.UInt(0xb69b72d7)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAdmins())))
			for _, v := range m.GetAdmins() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_chatAdminsWithInvites, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_chatAdminsWithInvites, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChatAdminsWithInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChatAdminsWithInvites) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb69b72d7: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*ChatAdminWithInvites, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &ChatAdminWithInvites{}
				v0[i].Decode(dBuf)
			}
			m.SetAdmins(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChatAdminsWithInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BankCardOpenUrl <--
//  + TL_BankCardOpenUrl
//

func (m *BankCardOpenUrl) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_bankCardOpenUrl:
		t := m.To_BankCardOpenUrl()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BankCardOpenUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *BankCardOpenUrl) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf568028a:
		m2 := MakeTLBankCardOpenUrl(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BankCardOpenUrl) DebugString() string {
	switch m.PredicateName {
	case Predicate_bankCardOpenUrl:
		t := m.To_BankCardOpenUrl()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BankCardOpenUrl
func (m *BankCardOpenUrl) To_BankCardOpenUrl() *TLBankCardOpenUrl {
	m.PredicateName = Predicate_bankCardOpenUrl
	return &TLBankCardOpenUrl{
		Data2: m,
	}
}

// MakeTLBankCardOpenUrl
func MakeTLBankCardOpenUrl(data2 *BankCardOpenUrl) *TLBankCardOpenUrl {
	if data2 == nil {
		return &TLBankCardOpenUrl{Data2: &BankCardOpenUrl{
			PredicateName: Predicate_bankCardOpenUrl,
		}}
	} else {
		data2.PredicateName = Predicate_bankCardOpenUrl
		return &TLBankCardOpenUrl{Data2: data2}
	}
}

func (m *TLBankCardOpenUrl) To_BankCardOpenUrl() *BankCardOpenUrl {
	m.Data2.PredicateName = Predicate_bankCardOpenUrl
	return m.Data2
}

func (m *TLBankCardOpenUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLBankCardOpenUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLBankCardOpenUrl) SetName(v string) { m.Data2.Name = v }
func (m *TLBankCardOpenUrl) GetName() string  { return m.Data2.Name }

func (m *TLBankCardOpenUrl) GetPredicateName() string {
	return Predicate_bankCardOpenUrl
}

func (m *TLBankCardOpenUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf568028a: func() []byte {
			x.UInt(0xf568028a)

			x.String(m.GetUrl())
			x.String(m.GetName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_bankCardOpenUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_bankCardOpenUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBankCardOpenUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBankCardOpenUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf568028a: func() error {
			m.SetUrl(dBuf.String())
			m.SetName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBankCardOpenUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatFull <--
//  + TL_ChatFull
//  + TL_ChannelFull
//

func (m *ChatFull) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatFull:
		t := m.To_ChatFull()
		xBuf = t.Encode(layer)
	case Predicate_channelFull:
		t := m.To_ChannelFull()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatFull) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd18ee226:
		m2 := MakeTLChatFull(m)
		m2.Decode(dBuf)
	case 0x46a6ffb4:
		m2 := MakeTLChatFull(m)
		m2.Decode(dBuf)
	case 0x4dbdc099:
		m2 := MakeTLChatFull(m)
		m2.Decode(dBuf)
	case 0xe13c3d20:
		m2 := MakeTLChannelFull(m)
		m2.Decode(dBuf)
	case 0x56662e2e:
		m2 := MakeTLChannelFull(m)
		m2.Decode(dBuf)
	case 0x59cff963:
		m2 := MakeTLChannelFull(m)
		m2.Decode(dBuf)
	case 0xe9b27a17:
		m2 := MakeTLChannelFull(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatFull) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatFull:
		t := m.To_ChatFull()
		return t.DebugString()
	case Predicate_channelFull:
		t := m.To_ChannelFull()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatFull
func (m *ChatFull) To_ChatFull() *TLChatFull {
	m.PredicateName = Predicate_chatFull
	return &TLChatFull{
		Data2: m,
	}
}

// To_ChannelFull
func (m *ChatFull) To_ChannelFull() *TLChannelFull {
	m.PredicateName = Predicate_channelFull
	return &TLChannelFull{
		Data2: m,
	}
}

// MakeTLChatFull
func MakeTLChatFull(data2 *ChatFull) *TLChatFull {
	if data2 == nil {
		return &TLChatFull{Data2: &ChatFull{
			PredicateName: Predicate_chatFull,
		}}
	} else {
		data2.PredicateName = Predicate_chatFull
		return &TLChatFull{Data2: data2}
	}
}

func (m *TLChatFull) To_ChatFull() *ChatFull {
	m.Data2.PredicateName = Predicate_chatFull
	return m.Data2
}

//// flags
func (m *TLChatFull) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChatFull) GetCanSetUsername() bool  { return m.Data2.CanSetUsername }

func (m *TLChatFull) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLChatFull) GetHasScheduled() bool  { return m.Data2.HasScheduled }

func (m *TLChatFull) SetId(v int64) { m.Data2.Id = v }
func (m *TLChatFull) GetId() int64  { return m.Data2.Id }

func (m *TLChatFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLChatFull) GetAbout() string  { return m.Data2.About }

func (m *TLChatFull) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLChatFull) GetParticipants() *ChatParticipants  { return m.Data2.Participants }

func (m *TLChatFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChatFull) GetChatPhoto() *Photo  { return m.Data2.ChatPhoto }

func (m *TLChatFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChatFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLChatFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChatFull) GetExportedInvite() *ExportedChatInvite  { return m.Data2.ExportedInvite }

func (m *TLChatFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChatFull) GetBotInfo() []*BotInfo  { return m.Data2.BotInfo }

func (m *TLChatFull) SetPinnedMsgId(v *types.Int32Value) { m.Data2.PinnedMsgId = v }
func (m *TLChatFull) GetPinnedMsgId() *types.Int32Value  { return m.Data2.PinnedMsgId }

func (m *TLChatFull) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLChatFull) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLChatFull) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLChatFull) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLChatFull) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLChatFull) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLChatFull) SetGroupcallDefaultJoinAs(v *Peer) { m.Data2.GroupcallDefaultJoinAs = v }
func (m *TLChatFull) GetGroupcallDefaultJoinAs() *Peer  { return m.Data2.GroupcallDefaultJoinAs }

func (m *TLChatFull) SetThemeEmoticon(v *types.StringValue) { m.Data2.ThemeEmoticon = v }
func (m *TLChatFull) GetThemeEmoticon() *types.StringValue  { return m.Data2.ThemeEmoticon }

func (m *TLChatFull) SetRequestsPending(v *types.Int32Value) { m.Data2.RequestsPending = v }
func (m *TLChatFull) GetRequestsPending() *types.Int32Value  { return m.Data2.RequestsPending }

func (m *TLChatFull) SetRecentRequesters(v []int64) { m.Data2.RecentRequesters = v }
func (m *TLChatFull) GetRecentRequesters() []int64  { return m.Data2.RecentRequesters }

func (m *TLChatFull) SetAvailableReactions(v []string) { m.Data2.AvailableReactions = v }
func (m *TLChatFull) GetAvailableReactions() []string  { return m.Data2.AvailableReactions }

func (m *TLChatFull) GetPredicateName() string {
	return Predicate_chatFull
}

func (m *TLChatFull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd18ee226: func() []byte {
			x.UInt(0xd18ee226)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanSetUsername() == true {
					flags |= 1 << 7
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 8
				}

				if m.GetChatPhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 13
				}
				if m.GetBotInfo() != nil {
					flags |= 1 << 3
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 6
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetCall() != nil {
					flags |= 1 << 12
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 14
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 15
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 16
				}
				if m.GetRequestsPending() != nil {
					flags |= 1 << 17
				}
				if m.GetRecentRequesters() != nil {
					flags |= 1 << 17
				}
				if m.GetAvailableReactions() != nil {
					flags |= 1 << 18
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			x.Bytes(m.GetParticipants().Encode(layer))
			if m.GetChatPhoto() != nil {
				x.Bytes(m.GetChatPhoto().Encode(layer))
			}

			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			if m.GetBotInfo() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetBotInfo())))
				for _, v := range m.GetBotInfo() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetRequestsPending() != nil {
				x.Int(m.GetRequestsPending().Value)
			}

			if m.GetRecentRequesters() != nil {
				x.VectorLong(m.GetRecentRequesters())
			}
			if m.GetAvailableReactions() != nil {
				x.VectorString(m.GetAvailableReactions())
			}
			return x.GetBuf()
		},
		0x46a6ffb4: func() []byte {
			x.UInt(0x46a6ffb4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanSetUsername() == true {
					flags |= 1 << 7
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 8
				}

				if m.GetChatPhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 13
				}
				if m.GetBotInfo() != nil {
					flags |= 1 << 3
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 6
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetCall() != nil {
					flags |= 1 << 12
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 14
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 15
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 16
				}
				if m.GetRequestsPending() != nil {
					flags |= 1 << 17
				}
				if m.GetRecentRequesters() != nil {
					flags |= 1 << 17
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			x.Bytes(m.GetParticipants().Encode(layer))
			if m.GetChatPhoto() != nil {
				x.Bytes(m.GetChatPhoto().Encode(layer))
			}

			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			if m.GetBotInfo() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetBotInfo())))
				for _, v := range m.GetBotInfo() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetRequestsPending() != nil {
				x.Int(m.GetRequestsPending().Value)
			}

			if m.GetRecentRequesters() != nil {
				x.VectorLong(m.GetRecentRequesters())
			}
			return x.GetBuf()
		},
		0x4dbdc099: func() []byte {
			x.UInt(0x4dbdc099)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanSetUsername() == true {
					flags |= 1 << 7
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 8
				}

				if m.GetChatPhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 13
				}
				if m.GetBotInfo() != nil {
					flags |= 1 << 3
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 6
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetCall() != nil {
					flags |= 1 << 12
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 14
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 15
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 16
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			x.Bytes(m.GetParticipants().Encode(layer))
			if m.GetChatPhoto() != nil {
				x.Bytes(m.GetChatPhoto().Encode(layer))
			}

			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			if m.GetBotInfo() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetBotInfo())))
				for _, v := range m.GetBotInfo() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatFull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatFull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatFull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd18ee226: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetHasScheduled(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())

			m5 := &ChatParticipants{}
			m5.Decode(dBuf)
			m.SetParticipants(m5)

			if (flags & (1 << 2)) != 0 {
				m6 := &Photo{}
				m6.Decode(dBuf)
				m.SetChatPhoto(m6)
			}

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 13)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			if (flags & (1 << 3)) != 0 {
				c9 := dBuf.Int()
				if c9 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
					return dBuf.GetError()
				}
				l9 := dBuf.Int()
				v9 := make([]*BotInfo, l9)
				for i := int32(0); i < l9; i++ {
					v9[i] = &BotInfo{}
					v9[i].Decode(dBuf)
				}
				m.SetBotInfo(v9)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 15)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetRequestsPending(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetRecentRequesters(dBuf.VectorLong())
			}
			if (flags & (1 << 18)) != 0 {
				m.SetAvailableReactions(dBuf.VectorString())
			}
			return dBuf.GetError()
		},
		0x46a6ffb4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetHasScheduled(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())

			m5 := &ChatParticipants{}
			m5.Decode(dBuf)
			m.SetParticipants(m5)

			if (flags & (1 << 2)) != 0 {
				m6 := &Photo{}
				m6.Decode(dBuf)
				m.SetChatPhoto(m6)
			}

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 13)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			if (flags & (1 << 3)) != 0 {
				c9 := dBuf.Int()
				if c9 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
					return dBuf.GetError()
				}
				l9 := dBuf.Int()
				v9 := make([]*BotInfo, l9)
				for i := int32(0); i < l9; i++ {
					v9[i] = &BotInfo{}
					v9[i].Decode(dBuf)
				}
				m.SetBotInfo(v9)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 15)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetRequestsPending(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetRecentRequesters(dBuf.VectorLong())
			}
			return dBuf.GetError()
		},
		0x4dbdc099: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetHasScheduled(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())

			m5 := &ChatParticipants{}
			m5.Decode(dBuf)
			m.SetParticipants(m5)

			if (flags & (1 << 2)) != 0 {
				m6 := &Photo{}
				m6.Decode(dBuf)
				m.SetChatPhoto(m6)
			}

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 13)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			if (flags & (1 << 3)) != 0 {
				c9 := dBuf.Int()
				if c9 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
					return dBuf.GetError()
				}
				l9 := dBuf.Int()
				v9 := make([]*BotInfo, l9)
				for i := int32(0); i < l9; i++ {
					v9[i] = &BotInfo{}
					v9[i].Decode(dBuf)
				}
				m.SetBotInfo(v9)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 15)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatFull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelFull
func MakeTLChannelFull(data2 *ChatFull) *TLChannelFull {
	if data2 == nil {
		return &TLChannelFull{Data2: &ChatFull{
			PredicateName: Predicate_channelFull,
		}}
	} else {
		data2.PredicateName = Predicate_channelFull
		return &TLChannelFull{Data2: data2}
	}
}

func (m *TLChannelFull) To_ChatFull() *ChatFull {
	m.Data2.PredicateName = Predicate_channelFull
	return m.Data2
}

//// flags
func (m *TLChannelFull) SetCanViewParticipants(v bool) { m.Data2.CanViewParticipants = v }
func (m *TLChannelFull) GetCanViewParticipants() bool  { return m.Data2.CanViewParticipants }

func (m *TLChannelFull) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChannelFull) GetCanSetUsername() bool  { return m.Data2.CanSetUsername }

func (m *TLChannelFull) SetCanSetStickers(v bool) { m.Data2.CanSetStickers = v }
func (m *TLChannelFull) GetCanSetStickers() bool  { return m.Data2.CanSetStickers }

func (m *TLChannelFull) SetHiddenPrehistory(v bool) { m.Data2.HiddenPrehistory = v }
func (m *TLChannelFull) GetHiddenPrehistory() bool  { return m.Data2.HiddenPrehistory }

func (m *TLChannelFull) SetCanSetLocation(v bool) { m.Data2.CanSetLocation = v }
func (m *TLChannelFull) GetCanSetLocation() bool  { return m.Data2.CanSetLocation }

func (m *TLChannelFull) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLChannelFull) GetHasScheduled() bool  { return m.Data2.HasScheduled }

func (m *TLChannelFull) SetCanViewStats(v bool) { m.Data2.CanViewStats = v }
func (m *TLChannelFull) GetCanViewStats() bool  { return m.Data2.CanViewStats }

func (m *TLChannelFull) SetBlocked(v bool) { m.Data2.Blocked = v }
func (m *TLChannelFull) GetBlocked() bool  { return m.Data2.Blocked }

func (m *TLChannelFull) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannelFull) GetId() int64  { return m.Data2.Id }

func (m *TLChannelFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLChannelFull) GetAbout() string  { return m.Data2.About }

func (m *TLChannelFull) SetParticipantsCount(v *types.Int32Value) { m.Data2.ParticipantsCount = v }
func (m *TLChannelFull) GetParticipantsCount() *types.Int32Value  { return m.Data2.ParticipantsCount }

func (m *TLChannelFull) SetAdminsCount(v *types.Int32Value) { m.Data2.AdminsCount = v }
func (m *TLChannelFull) GetAdminsCount() *types.Int32Value  { return m.Data2.AdminsCount }

func (m *TLChannelFull) SetKickedCount(v *types.Int32Value) { m.Data2.KickedCount = v }
func (m *TLChannelFull) GetKickedCount() *types.Int32Value  { return m.Data2.KickedCount }

func (m *TLChannelFull) SetBannedCount(v *types.Int32Value) { m.Data2.BannedCount = v }
func (m *TLChannelFull) GetBannedCount() *types.Int32Value  { return m.Data2.BannedCount }

func (m *TLChannelFull) SetOnlineCount(v *types.Int32Value) { m.Data2.OnlineCount = v }
func (m *TLChannelFull) GetOnlineCount() *types.Int32Value  { return m.Data2.OnlineCount }

func (m *TLChannelFull) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLChannelFull) GetReadInboxMaxId() int32  { return m.Data2.ReadInboxMaxId }

func (m *TLChannelFull) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLChannelFull) GetReadOutboxMaxId() int32  { return m.Data2.ReadOutboxMaxId }

func (m *TLChannelFull) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLChannelFull) GetUnreadCount() int32  { return m.Data2.UnreadCount }

func (m *TLChannelFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChannelFull) GetChatPhoto() *Photo  { return m.Data2.ChatPhoto }

func (m *TLChannelFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChannelFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLChannelFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChannelFull) GetExportedInvite() *ExportedChatInvite  { return m.Data2.ExportedInvite }

func (m *TLChannelFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChannelFull) GetBotInfo() []*BotInfo  { return m.Data2.BotInfo }

func (m *TLChannelFull) SetMigratedFromChatId(v *types.Int64Value) { m.Data2.MigratedFromChatId = v }
func (m *TLChannelFull) GetMigratedFromChatId() *types.Int64Value  { return m.Data2.MigratedFromChatId }

func (m *TLChannelFull) SetMigratedFromMaxId(v *types.Int32Value) { m.Data2.MigratedFromMaxId = v }
func (m *TLChannelFull) GetMigratedFromMaxId() *types.Int32Value  { return m.Data2.MigratedFromMaxId }

func (m *TLChannelFull) SetPinnedMsgId(v *types.Int32Value) { m.Data2.PinnedMsgId = v }
func (m *TLChannelFull) GetPinnedMsgId() *types.Int32Value  { return m.Data2.PinnedMsgId }

func (m *TLChannelFull) SetStickerset(v *StickerSet) { m.Data2.Stickerset = v }
func (m *TLChannelFull) GetStickerset() *StickerSet  { return m.Data2.Stickerset }

func (m *TLChannelFull) SetAvailableMinId(v *types.Int32Value) { m.Data2.AvailableMinId = v }
func (m *TLChannelFull) GetAvailableMinId() *types.Int32Value  { return m.Data2.AvailableMinId }

func (m *TLChannelFull) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLChannelFull) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLChannelFull) SetLinkedChatId(v *types.Int64Value) { m.Data2.LinkedChatId = v }
func (m *TLChannelFull) GetLinkedChatId() *types.Int64Value  { return m.Data2.LinkedChatId }

func (m *TLChannelFull) SetLocation(v *ChannelLocation) { m.Data2.Location = v }
func (m *TLChannelFull) GetLocation() *ChannelLocation  { return m.Data2.Location }

func (m *TLChannelFull) SetSlowmodeSeconds(v *types.Int32Value) { m.Data2.SlowmodeSeconds = v }
func (m *TLChannelFull) GetSlowmodeSeconds() *types.Int32Value  { return m.Data2.SlowmodeSeconds }

func (m *TLChannelFull) SetSlowmodeNextSendDate(v *types.Int32Value) {
	m.Data2.SlowmodeNextSendDate = v
}
func (m *TLChannelFull) GetSlowmodeNextSendDate() *types.Int32Value {
	return m.Data2.SlowmodeNextSendDate
}

func (m *TLChannelFull) SetStatsDc(v *types.Int32Value) { m.Data2.StatsDc = v }
func (m *TLChannelFull) GetStatsDc() *types.Int32Value  { return m.Data2.StatsDc }

func (m *TLChannelFull) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLChannelFull) GetPts() int32  { return m.Data2.Pts }

func (m *TLChannelFull) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLChannelFull) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLChannelFull) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLChannelFull) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLChannelFull) SetPendingSuggestions(v []string) { m.Data2.PendingSuggestions = v }
func (m *TLChannelFull) GetPendingSuggestions() []string  { return m.Data2.PendingSuggestions }

func (m *TLChannelFull) SetGroupcallDefaultJoinAs(v *Peer) { m.Data2.GroupcallDefaultJoinAs = v }
func (m *TLChannelFull) GetGroupcallDefaultJoinAs() *Peer  { return m.Data2.GroupcallDefaultJoinAs }

func (m *TLChannelFull) SetThemeEmoticon(v *types.StringValue) { m.Data2.ThemeEmoticon = v }
func (m *TLChannelFull) GetThemeEmoticon() *types.StringValue  { return m.Data2.ThemeEmoticon }

func (m *TLChannelFull) SetRequestsPending(v *types.Int32Value) { m.Data2.RequestsPending = v }
func (m *TLChannelFull) GetRequestsPending() *types.Int32Value  { return m.Data2.RequestsPending }

func (m *TLChannelFull) SetRecentRequesters(v []int64) { m.Data2.RecentRequesters = v }
func (m *TLChannelFull) GetRecentRequesters() []int64  { return m.Data2.RecentRequesters }

func (m *TLChannelFull) SetDefaultSendAs(v *Peer) { m.Data2.DefaultSendAs = v }
func (m *TLChannelFull) GetDefaultSendAs() *Peer  { return m.Data2.DefaultSendAs }

func (m *TLChannelFull) SetAvailableReactions(v []string) { m.Data2.AvailableReactions = v }
func (m *TLChannelFull) GetAvailableReactions() []string  { return m.Data2.AvailableReactions }

func (m *TLChannelFull) GetPredicateName() string {
	return Predicate_channelFull
}

func (m *TLChannelFull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe13c3d20: func() []byte {
			x.UInt(0xe13c3d20)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanViewParticipants() == true {
					flags |= 1 << 3
				}
				if m.GetCanSetUsername() == true {
					flags |= 1 << 6
				}
				if m.GetCanSetStickers() == true {
					flags |= 1 << 7
				}
				if m.GetHiddenPrehistory() == true {
					flags |= 1 << 10
				}
				if m.GetCanSetLocation() == true {
					flags |= 1 << 16
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 19
				}
				if m.GetCanViewStats() == true {
					flags |= 1 << 20
				}
				if m.GetBlocked() == true {
					flags |= 1 << 22
				}

				if m.GetParticipantsCount() != nil {
					flags |= 1 << 0
				}
				if m.GetAdminsCount() != nil {
					flags |= 1 << 1
				}
				if m.GetKickedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetBannedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetOnlineCount() != nil {
					flags |= 1 << 13
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 23
				}

				if m.GetMigratedFromChatId() != nil {
					flags |= 1 << 4
				}
				if m.GetMigratedFromMaxId() != nil {
					flags |= 1 << 4
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 5
				}
				if m.GetStickerset() != nil {
					flags |= 1 << 8
				}
				if m.GetAvailableMinId() != nil {
					flags |= 1 << 9
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetLinkedChatId() != nil {
					flags |= 1 << 14
				}
				if m.GetLocation() != nil {
					flags |= 1 << 15
				}
				if m.GetSlowmodeSeconds() != nil {
					flags |= 1 << 17
				}
				if m.GetSlowmodeNextSendDate() != nil {
					flags |= 1 << 18
				}
				if m.GetStatsDc() != nil {
					flags |= 1 << 12
				}

				if m.GetCall() != nil {
					flags |= 1 << 21
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 24
				}
				if m.GetPendingSuggestions() != nil {
					flags |= 1 << 25
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 26
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 27
				}
				if m.GetRequestsPending() != nil {
					flags |= 1 << 28
				}
				if m.GetRecentRequesters() != nil {
					flags |= 1 << 28
				}
				if m.GetDefaultSendAs() != nil {
					flags |= 1 << 29
				}
				if m.GetAvailableReactions() != nil {
					flags |= 1 << 30
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			if m.GetParticipantsCount() != nil {
				x.Int(m.GetParticipantsCount().Value)
			}

			if m.GetAdminsCount() != nil {
				x.Int(m.GetAdminsCount().Value)
			}

			if m.GetKickedCount() != nil {
				x.Int(m.GetKickedCount().Value)
			}

			if m.GetBannedCount() != nil {
				x.Int(m.GetBannedCount().Value)
			}

			if m.GetOnlineCount() != nil {
				x.Int(m.GetOnlineCount().Value)
			}

			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Bytes(m.GetChatPhoto().Encode(layer))
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBotInfo())))
			for _, v := range m.GetBotInfo() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMigratedFromChatId() != nil {
				x.Long(m.GetMigratedFromChatId().Value)
			}

			if m.GetMigratedFromMaxId() != nil {
				x.Int(m.GetMigratedFromMaxId().Value)
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetStickerset() != nil {
				x.Bytes(m.GetStickerset().Encode(layer))
			}

			if m.GetAvailableMinId() != nil {
				x.Int(m.GetAvailableMinId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetLinkedChatId() != nil {
				x.Long(m.GetLinkedChatId().Value)
			}

			if m.GetLocation() != nil {
				x.Bytes(m.GetLocation().Encode(layer))
			}

			if m.GetSlowmodeSeconds() != nil {
				x.Int(m.GetSlowmodeSeconds().Value)
			}

			if m.GetSlowmodeNextSendDate() != nil {
				x.Int(m.GetSlowmodeNextSendDate().Value)
			}

			if m.GetStatsDc() != nil {
				x.Int(m.GetStatsDc().Value)
			}

			x.Int(m.GetPts())
			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetPendingSuggestions() != nil {
				x.VectorString(m.GetPendingSuggestions())
			}
			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetRequestsPending() != nil {
				x.Int(m.GetRequestsPending().Value)
			}

			if m.GetRecentRequesters() != nil {
				x.VectorLong(m.GetRecentRequesters())
			}
			if m.GetDefaultSendAs() != nil {
				x.Bytes(m.GetDefaultSendAs().Encode(layer))
			}

			if m.GetAvailableReactions() != nil {
				x.VectorString(m.GetAvailableReactions())
			}
			return x.GetBuf()
		},
		0x56662e2e: func() []byte {
			x.UInt(0x56662e2e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanViewParticipants() == true {
					flags |= 1 << 3
				}
				if m.GetCanSetUsername() == true {
					flags |= 1 << 6
				}
				if m.GetCanSetStickers() == true {
					flags |= 1 << 7
				}
				if m.GetHiddenPrehistory() == true {
					flags |= 1 << 10
				}
				if m.GetCanSetLocation() == true {
					flags |= 1 << 16
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 19
				}
				if m.GetCanViewStats() == true {
					flags |= 1 << 20
				}
				if m.GetBlocked() == true {
					flags |= 1 << 22
				}

				if m.GetParticipantsCount() != nil {
					flags |= 1 << 0
				}
				if m.GetAdminsCount() != nil {
					flags |= 1 << 1
				}
				if m.GetKickedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetBannedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetOnlineCount() != nil {
					flags |= 1 << 13
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 23
				}

				if m.GetMigratedFromChatId() != nil {
					flags |= 1 << 4
				}
				if m.GetMigratedFromMaxId() != nil {
					flags |= 1 << 4
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 5
				}
				if m.GetStickerset() != nil {
					flags |= 1 << 8
				}
				if m.GetAvailableMinId() != nil {
					flags |= 1 << 9
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetLinkedChatId() != nil {
					flags |= 1 << 14
				}
				if m.GetLocation() != nil {
					flags |= 1 << 15
				}
				if m.GetSlowmodeSeconds() != nil {
					flags |= 1 << 17
				}
				if m.GetSlowmodeNextSendDate() != nil {
					flags |= 1 << 18
				}
				if m.GetStatsDc() != nil {
					flags |= 1 << 12
				}

				if m.GetCall() != nil {
					flags |= 1 << 21
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 24
				}
				if m.GetPendingSuggestions() != nil {
					flags |= 1 << 25
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 26
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 27
				}
				if m.GetRequestsPending() != nil {
					flags |= 1 << 28
				}
				if m.GetRecentRequesters() != nil {
					flags |= 1 << 28
				}
				if m.GetDefaultSendAs() != nil {
					flags |= 1 << 29
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			if m.GetParticipantsCount() != nil {
				x.Int(m.GetParticipantsCount().Value)
			}

			if m.GetAdminsCount() != nil {
				x.Int(m.GetAdminsCount().Value)
			}

			if m.GetKickedCount() != nil {
				x.Int(m.GetKickedCount().Value)
			}

			if m.GetBannedCount() != nil {
				x.Int(m.GetBannedCount().Value)
			}

			if m.GetOnlineCount() != nil {
				x.Int(m.GetOnlineCount().Value)
			}

			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Bytes(m.GetChatPhoto().Encode(layer))
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBotInfo())))
			for _, v := range m.GetBotInfo() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMigratedFromChatId() != nil {
				x.Long(m.GetMigratedFromChatId().Value)
			}

			if m.GetMigratedFromMaxId() != nil {
				x.Int(m.GetMigratedFromMaxId().Value)
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetStickerset() != nil {
				x.Bytes(m.GetStickerset().Encode(layer))
			}

			if m.GetAvailableMinId() != nil {
				x.Int(m.GetAvailableMinId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetLinkedChatId() != nil {
				x.Long(m.GetLinkedChatId().Value)
			}

			if m.GetLocation() != nil {
				x.Bytes(m.GetLocation().Encode(layer))
			}

			if m.GetSlowmodeSeconds() != nil {
				x.Int(m.GetSlowmodeSeconds().Value)
			}

			if m.GetSlowmodeNextSendDate() != nil {
				x.Int(m.GetSlowmodeNextSendDate().Value)
			}

			if m.GetStatsDc() != nil {
				x.Int(m.GetStatsDc().Value)
			}

			x.Int(m.GetPts())
			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetPendingSuggestions() != nil {
				x.VectorString(m.GetPendingSuggestions())
			}
			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetRequestsPending() != nil {
				x.Int(m.GetRequestsPending().Value)
			}

			if m.GetRecentRequesters() != nil {
				x.VectorLong(m.GetRecentRequesters())
			}
			if m.GetDefaultSendAs() != nil {
				x.Bytes(m.GetDefaultSendAs().Encode(layer))
			}

			return x.GetBuf()
		},
		0x59cff963: func() []byte {
			x.UInt(0x59cff963)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanViewParticipants() == true {
					flags |= 1 << 3
				}
				if m.GetCanSetUsername() == true {
					flags |= 1 << 6
				}
				if m.GetCanSetStickers() == true {
					flags |= 1 << 7
				}
				if m.GetHiddenPrehistory() == true {
					flags |= 1 << 10
				}
				if m.GetCanSetLocation() == true {
					flags |= 1 << 16
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 19
				}
				if m.GetCanViewStats() == true {
					flags |= 1 << 20
				}
				if m.GetBlocked() == true {
					flags |= 1 << 22
				}

				if m.GetParticipantsCount() != nil {
					flags |= 1 << 0
				}
				if m.GetAdminsCount() != nil {
					flags |= 1 << 1
				}
				if m.GetKickedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetBannedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetOnlineCount() != nil {
					flags |= 1 << 13
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 23
				}

				if m.GetMigratedFromChatId() != nil {
					flags |= 1 << 4
				}
				if m.GetMigratedFromMaxId() != nil {
					flags |= 1 << 4
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 5
				}
				if m.GetStickerset() != nil {
					flags |= 1 << 8
				}
				if m.GetAvailableMinId() != nil {
					flags |= 1 << 9
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetLinkedChatId() != nil {
					flags |= 1 << 14
				}
				if m.GetLocation() != nil {
					flags |= 1 << 15
				}
				if m.GetSlowmodeSeconds() != nil {
					flags |= 1 << 17
				}
				if m.GetSlowmodeNextSendDate() != nil {
					flags |= 1 << 18
				}
				if m.GetStatsDc() != nil {
					flags |= 1 << 12
				}

				if m.GetCall() != nil {
					flags |= 1 << 21
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 24
				}
				if m.GetPendingSuggestions() != nil {
					flags |= 1 << 25
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 26
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 27
				}
				if m.GetRequestsPending() != nil {
					flags |= 1 << 28
				}
				if m.GetRecentRequesters() != nil {
					flags |= 1 << 28
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			if m.GetParticipantsCount() != nil {
				x.Int(m.GetParticipantsCount().Value)
			}

			if m.GetAdminsCount() != nil {
				x.Int(m.GetAdminsCount().Value)
			}

			if m.GetKickedCount() != nil {
				x.Int(m.GetKickedCount().Value)
			}

			if m.GetBannedCount() != nil {
				x.Int(m.GetBannedCount().Value)
			}

			if m.GetOnlineCount() != nil {
				x.Int(m.GetOnlineCount().Value)
			}

			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Bytes(m.GetChatPhoto().Encode(layer))
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBotInfo())))
			for _, v := range m.GetBotInfo() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMigratedFromChatId() != nil {
				x.Long(m.GetMigratedFromChatId().Value)
			}

			if m.GetMigratedFromMaxId() != nil {
				x.Int(m.GetMigratedFromMaxId().Value)
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetStickerset() != nil {
				x.Bytes(m.GetStickerset().Encode(layer))
			}

			if m.GetAvailableMinId() != nil {
				x.Int(m.GetAvailableMinId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetLinkedChatId() != nil {
				x.Long(m.GetLinkedChatId().Value)
			}

			if m.GetLocation() != nil {
				x.Bytes(m.GetLocation().Encode(layer))
			}

			if m.GetSlowmodeSeconds() != nil {
				x.Int(m.GetSlowmodeSeconds().Value)
			}

			if m.GetSlowmodeNextSendDate() != nil {
				x.Int(m.GetSlowmodeNextSendDate().Value)
			}

			if m.GetStatsDc() != nil {
				x.Int(m.GetStatsDc().Value)
			}

			x.Int(m.GetPts())
			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetPendingSuggestions() != nil {
				x.VectorString(m.GetPendingSuggestions())
			}
			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetRequestsPending() != nil {
				x.Int(m.GetRequestsPending().Value)
			}

			if m.GetRecentRequesters() != nil {
				x.VectorLong(m.GetRecentRequesters())
			}
			return x.GetBuf()
		},
		0xe9b27a17: func() []byte {
			x.UInt(0xe9b27a17)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanViewParticipants() == true {
					flags |= 1 << 3
				}
				if m.GetCanSetUsername() == true {
					flags |= 1 << 6
				}
				if m.GetCanSetStickers() == true {
					flags |= 1 << 7
				}
				if m.GetHiddenPrehistory() == true {
					flags |= 1 << 10
				}
				if m.GetCanSetLocation() == true {
					flags |= 1 << 16
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 19
				}
				if m.GetCanViewStats() == true {
					flags |= 1 << 20
				}
				if m.GetBlocked() == true {
					flags |= 1 << 22
				}

				if m.GetParticipantsCount() != nil {
					flags |= 1 << 0
				}
				if m.GetAdminsCount() != nil {
					flags |= 1 << 1
				}
				if m.GetKickedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetBannedCount() != nil {
					flags |= 1 << 2
				}
				if m.GetOnlineCount() != nil {
					flags |= 1 << 13
				}

				if m.GetExportedInvite() != nil {
					flags |= 1 << 23
				}

				if m.GetMigratedFromChatId() != nil {
					flags |= 1 << 4
				}
				if m.GetMigratedFromMaxId() != nil {
					flags |= 1 << 4
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 5
				}
				if m.GetStickerset() != nil {
					flags |= 1 << 8
				}
				if m.GetAvailableMinId() != nil {
					flags |= 1 << 9
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetLinkedChatId() != nil {
					flags |= 1 << 14
				}
				if m.GetLocation() != nil {
					flags |= 1 << 15
				}
				if m.GetSlowmodeSeconds() != nil {
					flags |= 1 << 17
				}
				if m.GetSlowmodeNextSendDate() != nil {
					flags |= 1 << 18
				}
				if m.GetStatsDc() != nil {
					flags |= 1 << 12
				}

				if m.GetCall() != nil {
					flags |= 1 << 21
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 24
				}
				if m.GetPendingSuggestions() != nil {
					flags |= 1 << 25
				}
				if m.GetGroupcallDefaultJoinAs() != nil {
					flags |= 1 << 26
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 27
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetAbout())
			if m.GetParticipantsCount() != nil {
				x.Int(m.GetParticipantsCount().Value)
			}

			if m.GetAdminsCount() != nil {
				x.Int(m.GetAdminsCount().Value)
			}

			if m.GetKickedCount() != nil {
				x.Int(m.GetKickedCount().Value)
			}

			if m.GetBannedCount() != nil {
				x.Int(m.GetBannedCount().Value)
			}

			if m.GetOnlineCount() != nil {
				x.Int(m.GetOnlineCount().Value)
			}

			x.Int(m.GetReadInboxMaxId())
			x.Int(m.GetReadOutboxMaxId())
			x.Int(m.GetUnreadCount())
			x.Bytes(m.GetChatPhoto().Encode(layer))
			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetExportedInvite() != nil {
				x.Bytes(m.GetExportedInvite().Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBotInfo())))
			for _, v := range m.GetBotInfo() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetMigratedFromChatId() != nil {
				x.Long(m.GetMigratedFromChatId().Value)
			}

			if m.GetMigratedFromMaxId() != nil {
				x.Int(m.GetMigratedFromMaxId().Value)
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			if m.GetStickerset() != nil {
				x.Bytes(m.GetStickerset().Encode(layer))
			}

			if m.GetAvailableMinId() != nil {
				x.Int(m.GetAvailableMinId().Value)
			}

			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetLinkedChatId() != nil {
				x.Long(m.GetLinkedChatId().Value)
			}

			if m.GetLocation() != nil {
				x.Bytes(m.GetLocation().Encode(layer))
			}

			if m.GetSlowmodeSeconds() != nil {
				x.Int(m.GetSlowmodeSeconds().Value)
			}

			if m.GetSlowmodeNextSendDate() != nil {
				x.Int(m.GetSlowmodeNextSendDate().Value)
			}

			if m.GetStatsDc() != nil {
				x.Int(m.GetStatsDc().Value)
			}

			x.Int(m.GetPts())
			if m.GetCall() != nil {
				x.Bytes(m.GetCall().Encode(layer))
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetPendingSuggestions() != nil {
				x.VectorString(m.GetPendingSuggestions())
			}
			if m.GetGroupcallDefaultJoinAs() != nil {
				x.Bytes(m.GetGroupcallDefaultJoinAs().Encode(layer))
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelFull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelFull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelFull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe13c3d20: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 3)) != 0 {
				m.SetCanViewParticipants(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetStickers(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetHiddenPrehistory(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetCanSetLocation(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetCanViewStats(true)
			}
			if (flags & (1 << 22)) != 0 {
				m.SetBlocked(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetParticipantsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetAdminsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetKickedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetBannedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 13)) != 0 {
				m.SetOnlineCount(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())

			m6 := &Photo{}
			m6.Decode(dBuf)
			m.SetChatPhoto(m6)

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 23)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*BotInfo, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &BotInfo{}
				v9[i].Decode(dBuf)
			}
			m.SetBotInfo(v9)

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m35 := &StickerSet{}
				m35.Decode(dBuf)
				m.SetStickerset(m35)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetAvailableMinId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetLinkedChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 15)) != 0 {
				m38 := &ChannelLocation{}
				m38.Decode(dBuf)
				m.SetLocation(m38)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetSlowmodeSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 18)) != 0 {
				m.SetSlowmodeNextSendDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m.SetStatsDc(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPts(dBuf.Int())
			if (flags & (1 << 21)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 25)) != 0 {
				m.SetPendingSuggestions(dBuf.VectorString())
			}
			if (flags & (1 << 26)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 27)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRequestsPending(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRecentRequesters(dBuf.VectorLong())
			}
			if (flags & (1 << 29)) != 0 {
				m44 := &Peer{}
				m44.Decode(dBuf)
				m.SetDefaultSendAs(m44)
			}
			if (flags & (1 << 30)) != 0 {
				m.SetAvailableReactions(dBuf.VectorString())
			}
			return dBuf.GetError()
		},
		0x56662e2e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 3)) != 0 {
				m.SetCanViewParticipants(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetStickers(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetHiddenPrehistory(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetCanSetLocation(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetCanViewStats(true)
			}
			if (flags & (1 << 22)) != 0 {
				m.SetBlocked(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetParticipantsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetAdminsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetKickedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetBannedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 13)) != 0 {
				m.SetOnlineCount(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())

			m6 := &Photo{}
			m6.Decode(dBuf)
			m.SetChatPhoto(m6)

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 23)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*BotInfo, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &BotInfo{}
				v9[i].Decode(dBuf)
			}
			m.SetBotInfo(v9)

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m35 := &StickerSet{}
				m35.Decode(dBuf)
				m.SetStickerset(m35)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetAvailableMinId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetLinkedChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 15)) != 0 {
				m38 := &ChannelLocation{}
				m38.Decode(dBuf)
				m.SetLocation(m38)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetSlowmodeSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 18)) != 0 {
				m.SetSlowmodeNextSendDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m.SetStatsDc(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPts(dBuf.Int())
			if (flags & (1 << 21)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 25)) != 0 {
				m.SetPendingSuggestions(dBuf.VectorString())
			}
			if (flags & (1 << 26)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 27)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRequestsPending(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRecentRequesters(dBuf.VectorLong())
			}
			if (flags & (1 << 29)) != 0 {
				m44 := &Peer{}
				m44.Decode(dBuf)
				m.SetDefaultSendAs(m44)
			}
			return dBuf.GetError()
		},
		0x59cff963: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 3)) != 0 {
				m.SetCanViewParticipants(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetStickers(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetHiddenPrehistory(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetCanSetLocation(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetCanViewStats(true)
			}
			if (flags & (1 << 22)) != 0 {
				m.SetBlocked(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetParticipantsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetAdminsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetKickedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetBannedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 13)) != 0 {
				m.SetOnlineCount(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())

			m6 := &Photo{}
			m6.Decode(dBuf)
			m.SetChatPhoto(m6)

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 23)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*BotInfo, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &BotInfo{}
				v9[i].Decode(dBuf)
			}
			m.SetBotInfo(v9)

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m35 := &StickerSet{}
				m35.Decode(dBuf)
				m.SetStickerset(m35)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetAvailableMinId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetLinkedChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 15)) != 0 {
				m38 := &ChannelLocation{}
				m38.Decode(dBuf)
				m.SetLocation(m38)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetSlowmodeSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 18)) != 0 {
				m.SetSlowmodeNextSendDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m.SetStatsDc(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPts(dBuf.Int())
			if (flags & (1 << 21)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 25)) != 0 {
				m.SetPendingSuggestions(dBuf.VectorString())
			}
			if (flags & (1 << 26)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 27)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRequestsPending(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 28)) != 0 {
				m.SetRecentRequesters(dBuf.VectorLong())
			}
			return dBuf.GetError()
		},
		0xe9b27a17: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 3)) != 0 {
				m.SetCanViewParticipants(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetCanSetUsername(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanSetStickers(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetHiddenPrehistory(true)
			}
			if (flags & (1 << 16)) != 0 {
				m.SetCanSetLocation(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetCanViewStats(true)
			}
			if (flags & (1 << 22)) != 0 {
				m.SetBlocked(true)
			}
			m.SetId(dBuf.Long())
			m.SetAbout(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetParticipantsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetAdminsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetKickedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetBannedCount(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 13)) != 0 {
				m.SetOnlineCount(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetReadInboxMaxId(dBuf.Int())
			m.SetReadOutboxMaxId(dBuf.Int())
			m.SetUnreadCount(dBuf.Int())

			m6 := &Photo{}
			m6.Decode(dBuf)
			m.SetChatPhoto(m6)

			m7 := &PeerNotifySettings{}
			m7.Decode(dBuf)
			m.SetNotifySettings(m7)

			if (flags & (1 << 23)) != 0 {
				m8 := &ExportedChatInvite{}
				m8.Decode(dBuf)
				m.SetExportedInvite(m8)
			}
			c9 := dBuf.Int()
			if c9 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
				return dBuf.GetError()
			}
			l9 := dBuf.Int()
			v9 := make([]*BotInfo, l9)
			for i := int32(0); i < l9; i++ {
				v9[i] = &BotInfo{}
				v9[i].Decode(dBuf)
			}
			m.SetBotInfo(v9)

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetMigratedFromMaxId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m35 := &StickerSet{}
				m35.Decode(dBuf)
				m.SetStickerset(m35)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetAvailableMinId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetLinkedChatId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 15)) != 0 {
				m38 := &ChannelLocation{}
				m38.Decode(dBuf)
				m.SetLocation(m38)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetSlowmodeSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 18)) != 0 {
				m.SetSlowmodeNextSendDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 12)) != 0 {
				m.SetStatsDc(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPts(dBuf.Int())
			if (flags & (1 << 21)) != 0 {
				m12 := &InputGroupCall{}
				m12.Decode(dBuf)
				m.SetCall(m12)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 25)) != 0 {
				m.SetPendingSuggestions(dBuf.VectorString())
			}
			if (flags & (1 << 26)) != 0 {
				m14 := &Peer{}
				m14.Decode(dBuf)
				m.SetGroupcallDefaultJoinAs(m14)
			}
			if (flags & (1 << 27)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelFull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WebPage <--
//  + TL_WebPageEmpty
//  + TL_WebPagePending
//  + TL_WebPage
//  + TL_WebPageNotModified
//

func (m *WebPage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_webPageEmpty:
		t := m.To_WebPageEmpty()
		xBuf = t.Encode(layer)
	case Predicate_webPagePending:
		t := m.To_WebPagePending()
		xBuf = t.Encode(layer)
	case Predicate_webPage:
		t := m.To_WebPage()
		xBuf = t.Encode(layer)
	case Predicate_webPageNotModified:
		t := m.To_WebPageNotModified()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *WebPage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xeb1477e8:
		m2 := MakeTLWebPageEmpty(m)
		m2.Decode(dBuf)
	case 0xc586da1c:
		m2 := MakeTLWebPagePending(m)
		m2.Decode(dBuf)
	case 0xe89c45b2:
		m2 := MakeTLWebPage(m)
		m2.Decode(dBuf)
	case 0x7311ca11:
		m2 := MakeTLWebPageNotModified(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WebPage) DebugString() string {
	switch m.PredicateName {
	case Predicate_webPageEmpty:
		t := m.To_WebPageEmpty()
		return t.DebugString()
	case Predicate_webPagePending:
		t := m.To_WebPagePending()
		return t.DebugString()
	case Predicate_webPage:
		t := m.To_WebPage()
		return t.DebugString()
	case Predicate_webPageNotModified:
		t := m.To_WebPageNotModified()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WebPageEmpty
func (m *WebPage) To_WebPageEmpty() *TLWebPageEmpty {
	m.PredicateName = Predicate_webPageEmpty
	return &TLWebPageEmpty{
		Data2: m,
	}
}

// To_WebPagePending
func (m *WebPage) To_WebPagePending() *TLWebPagePending {
	m.PredicateName = Predicate_webPagePending
	return &TLWebPagePending{
		Data2: m,
	}
}

// To_WebPage
func (m *WebPage) To_WebPage() *TLWebPage {
	m.PredicateName = Predicate_webPage
	return &TLWebPage{
		Data2: m,
	}
}

// To_WebPageNotModified
func (m *WebPage) To_WebPageNotModified() *TLWebPageNotModified {
	m.PredicateName = Predicate_webPageNotModified
	return &TLWebPageNotModified{
		Data2: m,
	}
}

// MakeTLWebPageEmpty
func MakeTLWebPageEmpty(data2 *WebPage) *TLWebPageEmpty {
	if data2 == nil {
		return &TLWebPageEmpty{Data2: &WebPage{
			PredicateName: Predicate_webPageEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_webPageEmpty
		return &TLWebPageEmpty{Data2: data2}
	}
}

func (m *TLWebPageEmpty) To_WebPage() *WebPage {
	m.Data2.PredicateName = Predicate_webPageEmpty
	return m.Data2
}

func (m *TLWebPageEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPageEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLWebPageEmpty) GetPredicateName() string {
	return Predicate_webPageEmpty
}

func (m *TLWebPageEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeb1477e8: func() []byte {
			x.UInt(0xeb1477e8)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webPageEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webPageEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebPageEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebPageEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeb1477e8: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebPageEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLWebPagePending
func MakeTLWebPagePending(data2 *WebPage) *TLWebPagePending {
	if data2 == nil {
		return &TLWebPagePending{Data2: &WebPage{
			PredicateName: Predicate_webPagePending,
		}}
	} else {
		data2.PredicateName = Predicate_webPagePending
		return &TLWebPagePending{Data2: data2}
	}
}

func (m *TLWebPagePending) To_WebPage() *WebPage {
	m.Data2.PredicateName = Predicate_webPagePending
	return m.Data2
}

func (m *TLWebPagePending) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPagePending) GetId() int64  { return m.Data2.Id }

func (m *TLWebPagePending) SetDate(v int32) { m.Data2.Date = v }
func (m *TLWebPagePending) GetDate() int32  { return m.Data2.Date }

func (m *TLWebPagePending) GetPredicateName() string {
	return Predicate_webPagePending
}

func (m *TLWebPagePending) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc586da1c: func() []byte {
			x.UInt(0xc586da1c)

			x.Long(m.GetId())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webPagePending, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webPagePending, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebPagePending) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebPagePending) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc586da1c: func() error {
			m.SetId(dBuf.Long())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebPagePending) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLWebPage
func MakeTLWebPage(data2 *WebPage) *TLWebPage {
	if data2 == nil {
		return &TLWebPage{Data2: &WebPage{
			PredicateName: Predicate_webPage,
		}}
	} else {
		data2.PredicateName = Predicate_webPage
		return &TLWebPage{Data2: data2}
	}
}

func (m *TLWebPage) To_WebPage() *WebPage {
	m.Data2.PredicateName = Predicate_webPage
	return m.Data2
}

//// flags
func (m *TLWebPage) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPage) GetId() int64  { return m.Data2.Id }

func (m *TLWebPage) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebPage) GetUrl() string  { return m.Data2.Url }

func (m *TLWebPage) SetDisplayUrl(v string) { m.Data2.DisplayUrl = v }
func (m *TLWebPage) GetDisplayUrl() string  { return m.Data2.DisplayUrl }

func (m *TLWebPage) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLWebPage) GetHash() int32  { return m.Data2.Hash }

func (m *TLWebPage) SetType(v *types.StringValue) { m.Data2.Type = v }
func (m *TLWebPage) GetType() *types.StringValue  { return m.Data2.Type }

func (m *TLWebPage) SetSiteName(v *types.StringValue) { m.Data2.SiteName = v }
func (m *TLWebPage) GetSiteName() *types.StringValue  { return m.Data2.SiteName }

func (m *TLWebPage) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLWebPage) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLWebPage) SetDescription(v *types.StringValue) { m.Data2.Description = v }
func (m *TLWebPage) GetDescription() *types.StringValue  { return m.Data2.Description }

func (m *TLWebPage) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLWebPage) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLWebPage) SetEmbedUrl(v *types.StringValue) { m.Data2.EmbedUrl = v }
func (m *TLWebPage) GetEmbedUrl() *types.StringValue  { return m.Data2.EmbedUrl }

func (m *TLWebPage) SetEmbedType(v *types.StringValue) { m.Data2.EmbedType = v }
func (m *TLWebPage) GetEmbedType() *types.StringValue  { return m.Data2.EmbedType }

func (m *TLWebPage) SetEmbedWidth(v *types.Int32Value) { m.Data2.EmbedWidth = v }
func (m *TLWebPage) GetEmbedWidth() *types.Int32Value  { return m.Data2.EmbedWidth }

func (m *TLWebPage) SetEmbedHeight(v *types.Int32Value) { m.Data2.EmbedHeight = v }
func (m *TLWebPage) GetEmbedHeight() *types.Int32Value  { return m.Data2.EmbedHeight }

func (m *TLWebPage) SetDuration(v *types.Int32Value) { m.Data2.Duration = v }
func (m *TLWebPage) GetDuration() *types.Int32Value  { return m.Data2.Duration }

func (m *TLWebPage) SetAuthor(v *types.StringValue) { m.Data2.Author = v }
func (m *TLWebPage) GetAuthor() *types.StringValue  { return m.Data2.Author }

func (m *TLWebPage) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWebPage) GetDocument() *Document  { return m.Data2.Document }

func (m *TLWebPage) SetCachedPage(v *Page) { m.Data2.CachedPage = v }
func (m *TLWebPage) GetCachedPage() *Page  { return m.Data2.CachedPage }

func (m *TLWebPage) SetAttributes(v []*WebPageAttribute) { m.Data2.Attributes = v }
func (m *TLWebPage) GetAttributes() []*WebPageAttribute  { return m.Data2.Attributes }

func (m *TLWebPage) GetPredicateName() string {
	return Predicate_webPage
}

func (m *TLWebPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe89c45b2: func() []byte {
			x.UInt(0xe89c45b2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetType() != nil {
					flags |= 1 << 0
				}
				if m.GetSiteName() != nil {
					flags |= 1 << 1
				}
				if m.GetTitle() != nil {
					flags |= 1 << 2
				}
				if m.GetDescription() != nil {
					flags |= 1 << 3
				}
				if m.GetPhoto() != nil {
					flags |= 1 << 4
				}
				if m.GetEmbedUrl() != nil {
					flags |= 1 << 5
				}
				if m.GetEmbedType() != nil {
					flags |= 1 << 5
				}
				if m.GetEmbedWidth() != nil {
					flags |= 1 << 6
				}
				if m.GetEmbedHeight() != nil {
					flags |= 1 << 6
				}
				if m.GetDuration() != nil {
					flags |= 1 << 7
				}
				if m.GetAuthor() != nil {
					flags |= 1 << 8
				}
				if m.GetDocument() != nil {
					flags |= 1 << 9
				}
				if m.GetCachedPage() != nil {
					flags |= 1 << 10
				}
				if m.GetAttributes() != nil {
					flags |= 1 << 12
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetUrl())
			x.String(m.GetDisplayUrl())
			x.Int(m.GetHash())
			if m.GetType() != nil {
				x.String(m.GetType().Value)
			}

			if m.GetSiteName() != nil {
				x.String(m.GetSiteName().Value)
			}

			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetDescription() != nil {
				x.String(m.GetDescription().Value)
			}

			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			if m.GetEmbedUrl() != nil {
				x.String(m.GetEmbedUrl().Value)
			}

			if m.GetEmbedType() != nil {
				x.String(m.GetEmbedType().Value)
			}

			if m.GetEmbedWidth() != nil {
				x.Int(m.GetEmbedWidth().Value)
			}

			if m.GetEmbedHeight() != nil {
				x.Int(m.GetEmbedHeight().Value)
			}

			if m.GetDuration() != nil {
				x.Int(m.GetDuration().Value)
			}

			if m.GetAuthor() != nil {
				x.String(m.GetAuthor().Value)
			}

			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetCachedPage() != nil {
				x.Bytes(m.GetCachedPage().Encode(layer))
			}

			if m.GetAttributes() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetAttributes())))
				for _, v := range m.GetAttributes() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webPage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webPage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebPage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe89c45b2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.Long())
			m.SetUrl(dBuf.String())
			m.SetDisplayUrl(dBuf.String())
			m.SetHash(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetType(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetSiteName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetDescription(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m10 := &Photo{}
				m10.Decode(dBuf)
				m.SetPhoto(m10)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetEmbedUrl(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetEmbedType(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 6)) != 0 {
				m.SetEmbedWidth(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 6)) != 0 {
				m.SetEmbedHeight(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 7)) != 0 {
				m.SetDuration(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m.SetAuthor(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 9)) != 0 {
				m17 := &Document{}
				m17.Decode(dBuf)
				m.SetDocument(m17)
			}
			if (flags & (1 << 10)) != 0 {
				m18 := &Page{}
				m18.Decode(dBuf)
				m.SetCachedPage(m18)
			}
			if (flags & (1 << 12)) != 0 {
				c19 := dBuf.Int()
				if c19 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 19, c19)
					return dBuf.GetError()
				}
				l19 := dBuf.Int()
				v19 := make([]*WebPageAttribute, l19)
				for i := int32(0); i < l19; i++ {
					v19[i] = &WebPageAttribute{}
					v19[i].Decode(dBuf)
				}
				m.SetAttributes(v19)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLWebPageNotModified
func MakeTLWebPageNotModified(data2 *WebPage) *TLWebPageNotModified {
	if data2 == nil {
		return &TLWebPageNotModified{Data2: &WebPage{
			PredicateName: Predicate_webPageNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_webPageNotModified
		return &TLWebPageNotModified{Data2: data2}
	}
}

func (m *TLWebPageNotModified) To_WebPage() *WebPage {
	m.Data2.PredicateName = Predicate_webPageNotModified
	return m.Data2
}

//// flags
func (m *TLWebPageNotModified) SetCachedPageViews(v *types.Int32Value) { m.Data2.CachedPageViews = v }
func (m *TLWebPageNotModified) GetCachedPageViews() *types.Int32Value  { return m.Data2.CachedPageViews }

func (m *TLWebPageNotModified) GetPredicateName() string {
	return Predicate_webPageNotModified
}

func (m *TLWebPageNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7311ca11: func() []byte {
			x.UInt(0x7311ca11)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCachedPageViews() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetCachedPageViews() != nil {
				x.Int(m.GetCachedPageViews().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webPageNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webPageNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebPageNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebPageNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7311ca11: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCachedPageViews(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebPageNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BotInlineMessage <--
//  + TL_BotInlineMessageMediaAuto
//  + TL_BotInlineMessageText
//  + TL_BotInlineMessageMediaGeo
//  + TL_BotInlineMessageMediaVenue
//  + TL_BotInlineMessageMediaContact
//  + TL_BotInlineMessageMediaInvoice
//

func (m *BotInlineMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_botInlineMessageMediaAuto:
		t := m.To_BotInlineMessageMediaAuto()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMessageText:
		t := m.To_BotInlineMessageText()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMessageMediaGeo:
		t := m.To_BotInlineMessageMediaGeo()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMessageMediaVenue:
		t := m.To_BotInlineMessageMediaVenue()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMessageMediaContact:
		t := m.To_BotInlineMessageMediaContact()
		xBuf = t.Encode(layer)
	case Predicate_botInlineMessageMediaInvoice:
		t := m.To_BotInlineMessageMediaInvoice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BotInlineMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *BotInlineMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x764cf810:
		m2 := MakeTLBotInlineMessageMediaAuto(m)
		m2.Decode(dBuf)
	case 0x8c7f65e2:
		m2 := MakeTLBotInlineMessageText(m)
		m2.Decode(dBuf)
	case 0x51846fd:
		m2 := MakeTLBotInlineMessageMediaGeo(m)
		m2.Decode(dBuf)
	case 0x8a86659c:
		m2 := MakeTLBotInlineMessageMediaVenue(m)
		m2.Decode(dBuf)
	case 0x18d1cdc2:
		m2 := MakeTLBotInlineMessageMediaContact(m)
		m2.Decode(dBuf)
	case 0x354a9b09:
		m2 := MakeTLBotInlineMessageMediaInvoice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BotInlineMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_botInlineMessageMediaAuto:
		t := m.To_BotInlineMessageMediaAuto()
		return t.DebugString()
	case Predicate_botInlineMessageText:
		t := m.To_BotInlineMessageText()
		return t.DebugString()
	case Predicate_botInlineMessageMediaGeo:
		t := m.To_BotInlineMessageMediaGeo()
		return t.DebugString()
	case Predicate_botInlineMessageMediaVenue:
		t := m.To_BotInlineMessageMediaVenue()
		return t.DebugString()
	case Predicate_botInlineMessageMediaContact:
		t := m.To_BotInlineMessageMediaContact()
		return t.DebugString()
	case Predicate_botInlineMessageMediaInvoice:
		t := m.To_BotInlineMessageMediaInvoice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BotInlineMessageMediaAuto
func (m *BotInlineMessage) To_BotInlineMessageMediaAuto() *TLBotInlineMessageMediaAuto {
	m.PredicateName = Predicate_botInlineMessageMediaAuto
	return &TLBotInlineMessageMediaAuto{
		Data2: m,
	}
}

// To_BotInlineMessageText
func (m *BotInlineMessage) To_BotInlineMessageText() *TLBotInlineMessageText {
	m.PredicateName = Predicate_botInlineMessageText
	return &TLBotInlineMessageText{
		Data2: m,
	}
}

// To_BotInlineMessageMediaGeo
func (m *BotInlineMessage) To_BotInlineMessageMediaGeo() *TLBotInlineMessageMediaGeo {
	m.PredicateName = Predicate_botInlineMessageMediaGeo
	return &TLBotInlineMessageMediaGeo{
		Data2: m,
	}
}

// To_BotInlineMessageMediaVenue
func (m *BotInlineMessage) To_BotInlineMessageMediaVenue() *TLBotInlineMessageMediaVenue {
	m.PredicateName = Predicate_botInlineMessageMediaVenue
	return &TLBotInlineMessageMediaVenue{
		Data2: m,
	}
}

// To_BotInlineMessageMediaContact
func (m *BotInlineMessage) To_BotInlineMessageMediaContact() *TLBotInlineMessageMediaContact {
	m.PredicateName = Predicate_botInlineMessageMediaContact
	return &TLBotInlineMessageMediaContact{
		Data2: m,
	}
}

// To_BotInlineMessageMediaInvoice
func (m *BotInlineMessage) To_BotInlineMessageMediaInvoice() *TLBotInlineMessageMediaInvoice {
	m.PredicateName = Predicate_botInlineMessageMediaInvoice
	return &TLBotInlineMessageMediaInvoice{
		Data2: m,
	}
}

// MakeTLBotInlineMessageMediaAuto
func MakeTLBotInlineMessageMediaAuto(data2 *BotInlineMessage) *TLBotInlineMessageMediaAuto {
	if data2 == nil {
		return &TLBotInlineMessageMediaAuto{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageMediaAuto,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageMediaAuto
		return &TLBotInlineMessageMediaAuto{Data2: data2}
	}
}

func (m *TLBotInlineMessageMediaAuto) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageMediaAuto
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageMediaAuto) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageMediaAuto) GetMessage() string  { return m.Data2.Message }

func (m *TLBotInlineMessageMediaAuto) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageMediaAuto) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageMediaAuto) GetPredicateName() string {
	return Predicate_botInlineMessageMediaAuto
}

func (m *TLBotInlineMessageMediaAuto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x764cf810: func() []byte {
			x.UInt(0x764cf810)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageMediaAuto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageMediaAuto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageMediaAuto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageMediaAuto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x764cf810: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*MessageEntity, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &MessageEntity{}
					v2[i].Decode(dBuf)
				}
				m.SetEntities(v2)
			}
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageMediaAuto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMessageText
func MakeTLBotInlineMessageText(data2 *BotInlineMessage) *TLBotInlineMessageText {
	if data2 == nil {
		return &TLBotInlineMessageText{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageText,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageText
		return &TLBotInlineMessageText{Data2: data2}
	}
}

func (m *TLBotInlineMessageText) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageText
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLBotInlineMessageText) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageText) GetMessage() string  { return m.Data2.Message }

func (m *TLBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageText) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageText) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageText) GetPredicateName() string {
	return Predicate_botInlineMessageText
}

func (m *TLBotInlineMessageText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c7f65e2: func() []byte {
			x.UInt(0x8c7f65e2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNoWebpage() == true {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c7f65e2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetNoWebpage(true)
			}
			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*MessageEntity, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &MessageEntity{}
					v2[i].Decode(dBuf)
				}
				m.SetEntities(v2)
			}
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMessageMediaGeo
func MakeTLBotInlineMessageMediaGeo(data2 *BotInlineMessage) *TLBotInlineMessageMediaGeo {
	if data2 == nil {
		return &TLBotInlineMessageMediaGeo{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageMediaGeo,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageMediaGeo
		return &TLBotInlineMessageMediaGeo{Data2: data2}
	}
}

func (m *TLBotInlineMessageMediaGeo) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageMediaGeo
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaGeo) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaGeo) SetHeading(v *types.Int32Value) { m.Data2.Heading = v }
func (m *TLBotInlineMessageMediaGeo) GetHeading() *types.Int32Value  { return m.Data2.Heading }

func (m *TLBotInlineMessageMediaGeo) SetPeriod(v *types.Int32Value) { m.Data2.Period = v }
func (m *TLBotInlineMessageMediaGeo) GetPeriod() *types.Int32Value  { return m.Data2.Period }

func (m *TLBotInlineMessageMediaGeo) SetProximityNotificationRadius(v *types.Int32Value) {
	m.Data2.ProximityNotificationRadius = v
}
func (m *TLBotInlineMessageMediaGeo) GetProximityNotificationRadius() *types.Int32Value {
	return m.Data2.ProximityNotificationRadius
}

func (m *TLBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageMediaGeo) GetPredicateName() string {
	return Predicate_botInlineMessageMediaGeo
}

func (m *TLBotInlineMessageMediaGeo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x51846fd: func() []byte {
			x.UInt(0x51846fd)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHeading() != nil {
					flags |= 1 << 0
				}
				if m.GetPeriod() != nil {
					flags |= 1 << 1
				}
				if m.GetProximityNotificationRadius() != nil {
					flags |= 1 << 3
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeo().Encode(layer))
			if m.GetHeading() != nil {
				x.Int(m.GetHeading().Value)
			}

			if m.GetPeriod() != nil {
				x.Int(m.GetPeriod().Value)
			}

			if m.GetProximityNotificationRadius() != nil {
				x.Int(m.GetProximityNotificationRadius().Value)
			}

			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageMediaGeo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageMediaGeo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageMediaGeo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageMediaGeo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x51846fd: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m5 := &GeoPoint{}
			m5.Decode(dBuf)
			m.SetGeo(m5)

			if (flags & (1 << 0)) != 0 {
				m.SetHeading(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetProximityNotificationRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageMediaGeo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMessageMediaVenue
func MakeTLBotInlineMessageMediaVenue(data2 *BotInlineMessage) *TLBotInlineMessageMediaVenue {
	if data2 == nil {
		return &TLBotInlineMessageMediaVenue{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageMediaVenue,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageMediaVenue
		return &TLBotInlineMessageMediaVenue{Data2: data2}
	}
}

func (m *TLBotInlineMessageMediaVenue) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageMediaVenue
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaVenue) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLBotInlineMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLBotInlineMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLBotInlineMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLBotInlineMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLBotInlineMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageMediaVenue) GetPredicateName() string {
	return Predicate_botInlineMessageMediaVenue
}

func (m *TLBotInlineMessageMediaVenue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8a86659c: func() []byte {
			x.UInt(0x8a86659c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeo().Encode(layer))
			x.String(m.GetTitle())
			x.String(m.GetAddress())
			x.String(m.GetProvider())
			x.String(m.GetVenueId())
			x.String(m.GetVenueType())
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageMediaVenue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageMediaVenue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageMediaVenue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageMediaVenue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8a86659c: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m5 := &GeoPoint{}
			m5.Decode(dBuf)
			m.SetGeo(m5)

			m.SetTitle(dBuf.String())
			m.SetAddress(dBuf.String())
			m.SetProvider(dBuf.String())
			m.SetVenueId(dBuf.String())
			m.SetVenueType(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageMediaVenue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMessageMediaContact
func MakeTLBotInlineMessageMediaContact(data2 *BotInlineMessage) *TLBotInlineMessageMediaContact {
	if data2 == nil {
		return &TLBotInlineMessageMediaContact{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageMediaContact,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageMediaContact
		return &TLBotInlineMessageMediaContact{Data2: data2}
	}
}

func (m *TLBotInlineMessageMediaContact) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageMediaContact
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLBotInlineMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLBotInlineMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLBotInlineMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLBotInlineMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLBotInlineMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageMediaContact) GetPredicateName() string {
	return Predicate_botInlineMessageMediaContact
}

func (m *TLBotInlineMessageMediaContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x18d1cdc2: func() []byte {
			x.UInt(0x18d1cdc2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetPhoneNumber())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.String(m.GetVcard())
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageMediaContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageMediaContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageMediaContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageMediaContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x18d1cdc2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetPhoneNumber(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetVcard(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageMediaContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBotInlineMessageMediaInvoice
func MakeTLBotInlineMessageMediaInvoice(data2 *BotInlineMessage) *TLBotInlineMessageMediaInvoice {
	if data2 == nil {
		return &TLBotInlineMessageMediaInvoice{Data2: &BotInlineMessage{
			PredicateName: Predicate_botInlineMessageMediaInvoice,
		}}
	} else {
		data2.PredicateName = Predicate_botInlineMessageMediaInvoice
		return &TLBotInlineMessageMediaInvoice{Data2: data2}
	}
}

func (m *TLBotInlineMessageMediaInvoice) To_BotInlineMessage() *BotInlineMessage {
	m.Data2.PredicateName = Predicate_botInlineMessageMediaInvoice
	return m.Data2
}

//// flags
func (m *TLBotInlineMessageMediaInvoice) SetShippingAddressRequested(v bool) {
	m.Data2.ShippingAddressRequested = v
}
func (m *TLBotInlineMessageMediaInvoice) GetShippingAddressRequested() bool {
	return m.Data2.ShippingAddressRequested
}

func (m *TLBotInlineMessageMediaInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLBotInlineMessageMediaInvoice) GetTest() bool  { return m.Data2.Test }

func (m *TLBotInlineMessageMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMessageMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLBotInlineMessageMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineMessageMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLBotInlineMessageMediaInvoice) SetPhoto(v *WebDocument) { m.Data2.Photo = v }
func (m *TLBotInlineMessageMediaInvoice) GetPhoto() *WebDocument  { return m.Data2.Photo }

func (m *TLBotInlineMessageMediaInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLBotInlineMessageMediaInvoice) GetCurrency() string  { return m.Data2.Currency }

func (m *TLBotInlineMessageMediaInvoice) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLBotInlineMessageMediaInvoice) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLBotInlineMessageMediaInvoice) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaInvoice) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLBotInlineMessageMediaInvoice) GetPredicateName() string {
	return Predicate_botInlineMessageMediaInvoice
}

func (m *TLBotInlineMessageMediaInvoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x354a9b09: func() []byte {
			x.UInt(0x354a9b09)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetShippingAddressRequested() == true {
					flags |= 1 << 1
				}
				if m.GetTest() == true {
					flags |= 1 << 3
				}

				if m.GetPhoto() != nil {
					flags |= 1 << 0
				}

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_botInlineMessageMediaInvoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_botInlineMessageMediaInvoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBotInlineMessageMediaInvoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotInlineMessageMediaInvoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x354a9b09: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetShippingAddressRequested(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetTest(true)
			}
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m21 := &WebDocument{}
				m21.Decode(dBuf)
				m.SetPhoto(m21)
			}
			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBotInlineMessageMediaInvoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_BotCallbackAnswer <--
//  + TL_MessagesBotCallbackAnswer
//

func (m *Messages_BotCallbackAnswer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_botCallbackAnswer:
		t := m.To_MessagesBotCallbackAnswer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_BotCallbackAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_BotCallbackAnswer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x36585ea4:
		m2 := MakeTLMessagesBotCallbackAnswer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_BotCallbackAnswer) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_botCallbackAnswer:
		t := m.To_MessagesBotCallbackAnswer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesBotCallbackAnswer
func (m *Messages_BotCallbackAnswer) To_MessagesBotCallbackAnswer() *TLMessagesBotCallbackAnswer {
	m.PredicateName = Predicate_messages_botCallbackAnswer
	return &TLMessagesBotCallbackAnswer{
		Data2: m,
	}
}

// MakeTLMessagesBotCallbackAnswer
func MakeTLMessagesBotCallbackAnswer(data2 *Messages_BotCallbackAnswer) *TLMessagesBotCallbackAnswer {
	if data2 == nil {
		return &TLMessagesBotCallbackAnswer{Data2: &Messages_BotCallbackAnswer{
			PredicateName: Predicate_messages_botCallbackAnswer,
		}}
	} else {
		data2.PredicateName = Predicate_messages_botCallbackAnswer
		return &TLMessagesBotCallbackAnswer{Data2: data2}
	}
}

func (m *TLMessagesBotCallbackAnswer) To_Messages_BotCallbackAnswer() *Messages_BotCallbackAnswer {
	m.Data2.PredicateName = Predicate_messages_botCallbackAnswer
	return m.Data2
}

//// flags
func (m *TLMessagesBotCallbackAnswer) SetAlert(v bool) { m.Data2.Alert = v }
func (m *TLMessagesBotCallbackAnswer) GetAlert() bool  { return m.Data2.Alert }

func (m *TLMessagesBotCallbackAnswer) SetHasUrl(v bool) { m.Data2.HasUrl = v }
func (m *TLMessagesBotCallbackAnswer) GetHasUrl() bool  { return m.Data2.HasUrl }

func (m *TLMessagesBotCallbackAnswer) SetNativeUi(v bool) { m.Data2.NativeUi = v }
func (m *TLMessagesBotCallbackAnswer) GetNativeUi() bool  { return m.Data2.NativeUi }

func (m *TLMessagesBotCallbackAnswer) SetMessage(v *types.StringValue) { m.Data2.Message = v }
func (m *TLMessagesBotCallbackAnswer) GetMessage() *types.StringValue  { return m.Data2.Message }

func (m *TLMessagesBotCallbackAnswer) SetUrl(v *types.StringValue) { m.Data2.Url = v }
func (m *TLMessagesBotCallbackAnswer) GetUrl() *types.StringValue  { return m.Data2.Url }

func (m *TLMessagesBotCallbackAnswer) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotCallbackAnswer) GetCacheTime() int32  { return m.Data2.CacheTime }

func (m *TLMessagesBotCallbackAnswer) GetPredicateName() string {
	return Predicate_messages_botCallbackAnswer
}

func (m *TLMessagesBotCallbackAnswer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x36585ea4: func() []byte {
			x.UInt(0x36585ea4)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAlert() == true {
					flags |= 1 << 1
				}
				if m.GetHasUrl() == true {
					flags |= 1 << 3
				}
				if m.GetNativeUi() == true {
					flags |= 1 << 4
				}
				if m.GetMessage() != nil {
					flags |= 1 << 0
				}
				if m.GetUrl() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetMessage() != nil {
				x.String(m.GetMessage().Value)
			}

			if m.GetUrl() != nil {
				x.String(m.GetUrl().Value)
			}

			x.Int(m.GetCacheTime())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_botCallbackAnswer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_botCallbackAnswer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesBotCallbackAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesBotCallbackAnswer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x36585ea4: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetAlert(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetHasUrl(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetNativeUi(true)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetMessage(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetUrl(&types.StringValue{Value: dBuf.String()})
			}

			m.SetCacheTime(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesBotCallbackAnswer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputStickerSetItem <--
//  + TL_InputStickerSetItem
//

func (m *InputStickerSetItem) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputStickerSetItem:
		t := m.To_InputStickerSetItem()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputStickerSetItem) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputStickerSetItem) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xffa0a496:
		m2 := MakeTLInputStickerSetItem(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputStickerSetItem) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputStickerSetItem:
		t := m.To_InputStickerSetItem()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputStickerSetItem
func (m *InputStickerSetItem) To_InputStickerSetItem() *TLInputStickerSetItem {
	m.PredicateName = Predicate_inputStickerSetItem
	return &TLInputStickerSetItem{
		Data2: m,
	}
}

// MakeTLInputStickerSetItem
func MakeTLInputStickerSetItem(data2 *InputStickerSetItem) *TLInputStickerSetItem {
	if data2 == nil {
		return &TLInputStickerSetItem{Data2: &InputStickerSetItem{
			PredicateName: Predicate_inputStickerSetItem,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickerSetItem
		return &TLInputStickerSetItem{Data2: data2}
	}
}

func (m *TLInputStickerSetItem) To_InputStickerSetItem() *InputStickerSetItem {
	m.Data2.PredicateName = Predicate_inputStickerSetItem
	return m.Data2
}

//// flags
func (m *TLInputStickerSetItem) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputStickerSetItem) GetDocument() *InputDocument  { return m.Data2.Document }

func (m *TLInputStickerSetItem) SetEmoji(v string) { m.Data2.Emoji = v }
func (m *TLInputStickerSetItem) GetEmoji() string  { return m.Data2.Emoji }

func (m *TLInputStickerSetItem) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLInputStickerSetItem) GetMaskCoords() *MaskCoords  { return m.Data2.MaskCoords }

func (m *TLInputStickerSetItem) GetPredicateName() string {
	return Predicate_inputStickerSetItem
}

func (m *TLInputStickerSetItem) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xffa0a496: func() []byte {
			x.UInt(0xffa0a496)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMaskCoords() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetDocument().Encode(layer))
			x.String(m.GetEmoji())
			if m.GetMaskCoords() != nil {
				x.Bytes(m.GetMaskCoords().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickerSetItem, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickerSetItem, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickerSetItem) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickerSetItem) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xffa0a496: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &InputDocument{}
			m1.Decode(dBuf)
			m.SetDocument(m1)

			m.SetEmoji(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m3 := &MaskCoords{}
				m3.Decode(dBuf)
				m.SetMaskCoords(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickerSetItem) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEvent <--
//  + TL_ChannelAdminLogEvent
//

func (m *ChannelAdminLogEvent) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelAdminLogEvent:
		t := m.To_ChannelAdminLogEvent()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelAdminLogEvent) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelAdminLogEvent) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1fad68cd:
		m2 := MakeTLChannelAdminLogEvent(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelAdminLogEvent) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelAdminLogEvent:
		t := m.To_ChannelAdminLogEvent()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelAdminLogEvent
func (m *ChannelAdminLogEvent) To_ChannelAdminLogEvent() *TLChannelAdminLogEvent {
	m.PredicateName = Predicate_channelAdminLogEvent
	return &TLChannelAdminLogEvent{
		Data2: m,
	}
}

// MakeTLChannelAdminLogEvent
func MakeTLChannelAdminLogEvent(data2 *ChannelAdminLogEvent) *TLChannelAdminLogEvent {
	if data2 == nil {
		return &TLChannelAdminLogEvent{Data2: &ChannelAdminLogEvent{
			PredicateName: Predicate_channelAdminLogEvent,
		}}
	} else {
		data2.PredicateName = Predicate_channelAdminLogEvent
		return &TLChannelAdminLogEvent{Data2: data2}
	}
}

func (m *TLChannelAdminLogEvent) To_ChannelAdminLogEvent() *ChannelAdminLogEvent {
	m.Data2.PredicateName = Predicate_channelAdminLogEvent
	return m.Data2
}

func (m *TLChannelAdminLogEvent) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannelAdminLogEvent) GetId() int64  { return m.Data2.Id }

func (m *TLChannelAdminLogEvent) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelAdminLogEvent) GetDate() int32  { return m.Data2.Date }

func (m *TLChannelAdminLogEvent) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLChannelAdminLogEvent) GetUserId() int64  { return m.Data2.UserId }

func (m *TLChannelAdminLogEvent) SetAction(v *ChannelAdminLogEventAction) { m.Data2.Action = v }
func (m *TLChannelAdminLogEvent) GetAction() *ChannelAdminLogEventAction  { return m.Data2.Action }

func (m *TLChannelAdminLogEvent) GetPredicateName() string {
	return Predicate_channelAdminLogEvent
}

func (m *TLChannelAdminLogEvent) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1fad68cd: func() []byte {
			x.UInt(0x1fad68cd)

			x.Long(m.GetId())
			x.Int(m.GetDate())
			x.Long(m.GetUserId())
			x.Bytes(m.GetAction().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelAdminLogEvent, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelAdminLogEvent, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelAdminLogEvent) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelAdminLogEvent) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1fad68cd: func() error {
			m.SetId(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetUserId(dBuf.Long())

			m3 := &ChannelAdminLogEventAction{}
			m3.Decode(dBuf)
			m.SetAction(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelAdminLogEvent) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// UserFull <--
//  + TL_UserFull
//

func (m *UserFull) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_userFull:
		t := m.To_UserFull()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *UserFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *UserFull) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcf366521:
		m2 := MakeTLUserFull(m)
		m2.Decode(dBuf)
	case 0xd697ff05:
		m2 := MakeTLUserFull(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *UserFull) DebugString() string {
	switch m.PredicateName {
	case Predicate_userFull:
		t := m.To_UserFull()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UserFull
func (m *UserFull) To_UserFull() *TLUserFull {
	m.PredicateName = Predicate_userFull
	return &TLUserFull{
		Data2: m,
	}
}

// MakeTLUserFull
func MakeTLUserFull(data2 *UserFull) *TLUserFull {
	if data2 == nil {
		return &TLUserFull{Data2: &UserFull{
			PredicateName: Predicate_userFull,
		}}
	} else {
		data2.PredicateName = Predicate_userFull
		return &TLUserFull{Data2: data2}
	}
}

func (m *TLUserFull) To_UserFull() *UserFull {
	m.Data2.PredicateName = Predicate_userFull
	return m.Data2
}

//// flags
func (m *TLUserFull) SetBlocked(v bool) { m.Data2.Blocked = v }
func (m *TLUserFull) GetBlocked() bool  { return m.Data2.Blocked }

func (m *TLUserFull) SetPhoneCallsAvailable(v bool) { m.Data2.PhoneCallsAvailable = v }
func (m *TLUserFull) GetPhoneCallsAvailable() bool  { return m.Data2.PhoneCallsAvailable }

func (m *TLUserFull) SetPhoneCallsPrivate(v bool) { m.Data2.PhoneCallsPrivate = v }
func (m *TLUserFull) GetPhoneCallsPrivate() bool  { return m.Data2.PhoneCallsPrivate }

func (m *TLUserFull) SetCanPinMessage(v bool) { m.Data2.CanPinMessage = v }
func (m *TLUserFull) GetCanPinMessage() bool  { return m.Data2.CanPinMessage }

func (m *TLUserFull) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLUserFull) GetHasScheduled() bool  { return m.Data2.HasScheduled }

func (m *TLUserFull) SetVideoCallsAvailable(v bool) { m.Data2.VideoCallsAvailable = v }
func (m *TLUserFull) GetVideoCallsAvailable() bool  { return m.Data2.VideoCallsAvailable }

func (m *TLUserFull) SetId(v int64) { m.Data2.Id = v }
func (m *TLUserFull) GetId() int64  { return m.Data2.Id }

func (m *TLUserFull) SetAbout(v *types.StringValue) { m.Data2.About = v }
func (m *TLUserFull) GetAbout() *types.StringValue  { return m.Data2.About }

func (m *TLUserFull) SetSettings(v *PeerSettings) { m.Data2.Settings = v }
func (m *TLUserFull) GetSettings() *PeerSettings  { return m.Data2.Settings }

func (m *TLUserFull) SetProfilePhoto(v *Photo) { m.Data2.ProfilePhoto = v }
func (m *TLUserFull) GetProfilePhoto() *Photo  { return m.Data2.ProfilePhoto }

func (m *TLUserFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUserFull) GetNotifySettings() *PeerNotifySettings  { return m.Data2.NotifySettings }

func (m *TLUserFull) SetBotInfo(v *BotInfo) { m.Data2.BotInfo = v }
func (m *TLUserFull) GetBotInfo() *BotInfo  { return m.Data2.BotInfo }

func (m *TLUserFull) SetPinnedMsgId(v *types.Int32Value) { m.Data2.PinnedMsgId = v }
func (m *TLUserFull) GetPinnedMsgId() *types.Int32Value  { return m.Data2.PinnedMsgId }

func (m *TLUserFull) SetCommonChatsCount(v int32) { m.Data2.CommonChatsCount = v }
func (m *TLUserFull) GetCommonChatsCount() int32  { return m.Data2.CommonChatsCount }

func (m *TLUserFull) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLUserFull) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLUserFull) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLUserFull) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLUserFull) SetThemeEmoticon(v *types.StringValue) { m.Data2.ThemeEmoticon = v }
func (m *TLUserFull) GetThemeEmoticon() *types.StringValue  { return m.Data2.ThemeEmoticon }

func (m *TLUserFull) SetPrivateForwardName(v *types.StringValue) { m.Data2.PrivateForwardName = v }
func (m *TLUserFull) GetPrivateForwardName() *types.StringValue  { return m.Data2.PrivateForwardName }

func (m *TLUserFull) SetUser(v *User) { m.Data2.User = v }
func (m *TLUserFull) GetUser() *User  { return m.Data2.User }

func (m *TLUserFull) GetPredicateName() string {
	return Predicate_userFull
}

func (m *TLUserFull) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcf366521: func() []byte {
			x.UInt(0xcf366521)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBlocked() == true {
					flags |= 1 << 0
				}
				if m.GetPhoneCallsAvailable() == true {
					flags |= 1 << 4
				}
				if m.GetPhoneCallsPrivate() == true {
					flags |= 1 << 5
				}
				if m.GetCanPinMessage() == true {
					flags |= 1 << 7
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 12
				}
				if m.GetVideoCallsAvailable() == true {
					flags |= 1 << 13
				}

				if m.GetAbout() != nil {
					flags |= 1 << 1
				}

				if m.GetProfilePhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetBotInfo() != nil {
					flags |= 1 << 3
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 6
				}

				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 14
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 15
				}
				if m.GetPrivateForwardName() != nil {
					flags |= 1 << 16
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			if m.GetAbout() != nil {
				x.String(m.GetAbout().Value)
			}

			x.Bytes(m.GetSettings().Encode(layer))
			if m.GetProfilePhoto() != nil {
				x.Bytes(m.GetProfilePhoto().Encode(layer))
			}

			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetBotInfo() != nil {
				x.Bytes(m.GetBotInfo().Encode(layer))
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			x.Int(m.GetCommonChatsCount())
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			if m.GetPrivateForwardName() != nil {
				x.String(m.GetPrivateForwardName().Value)
			}

			return x.GetBuf()
		},
		0xd697ff05: func() []byte {
			x.UInt(0xd697ff05)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBlocked() == true {
					flags |= 1 << 0
				}
				if m.GetPhoneCallsAvailable() == true {
					flags |= 1 << 4
				}
				if m.GetPhoneCallsPrivate() == true {
					flags |= 1 << 5
				}
				if m.GetCanPinMessage() == true {
					flags |= 1 << 7
				}
				if m.GetHasScheduled() == true {
					flags |= 1 << 12
				}
				if m.GetVideoCallsAvailable() == true {
					flags |= 1 << 13
				}

				if m.GetAbout() != nil {
					flags |= 1 << 1
				}

				if m.GetProfilePhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetBotInfo() != nil {
					flags |= 1 << 3
				}
				if m.GetPinnedMsgId() != nil {
					flags |= 1 << 6
				}

				if m.GetFolderId() != nil {
					flags |= 1 << 11
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 14
				}
				if m.GetThemeEmoticon() != nil {
					flags |= 1 << 15
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetUser().Encode(layer))
			if m.GetAbout() != nil {
				x.String(m.GetAbout().Value)
			}

			x.Bytes(m.GetSettings().Encode(layer))
			if m.GetProfilePhoto() != nil {
				x.Bytes(m.GetProfilePhoto().Encode(layer))
			}

			x.Bytes(m.GetNotifySettings().Encode(layer))
			if m.GetBotInfo() != nil {
				x.Bytes(m.GetBotInfo().Encode(layer))
			}

			if m.GetPinnedMsgId() != nil {
				x.Int(m.GetPinnedMsgId().Value)
			}

			x.Int(m.GetCommonChatsCount())
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			if m.GetThemeEmoticon() != nil {
				x.String(m.GetThemeEmoticon().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userFull, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userFull, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserFull) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserFull) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcf366521: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetBlocked(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetPhoneCallsAvailable(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetPhoneCallsPrivate(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanPinMessage(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetVideoCallsAvailable(true)
			}
			m.SetId(dBuf.Long())
			if (flags & (1 << 1)) != 0 {
				m.SetAbout(&types.StringValue{Value: dBuf.String()})
			}

			m9 := &PeerSettings{}
			m9.Decode(dBuf)
			m.SetSettings(m9)

			if (flags & (1 << 2)) != 0 {
				m10 := &Photo{}
				m10.Decode(dBuf)
				m.SetProfilePhoto(m10)
			}

			m11 := &PeerNotifySettings{}
			m11.Decode(dBuf)
			m.SetNotifySettings(m11)

			if (flags & (1 << 3)) != 0 {
				m12 := &BotInfo{}
				m12.Decode(dBuf)
				m.SetBotInfo(m12)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetCommonChatsCount(dBuf.Int())
			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 15)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 16)) != 0 {
				m.SetPrivateForwardName(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
		0xd697ff05: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetBlocked(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetPhoneCallsAvailable(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetPhoneCallsPrivate(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetCanPinMessage(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetHasScheduled(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetVideoCallsAvailable(true)
			}

			m19 := &User{}
			m19.Decode(dBuf)
			m.SetUser(m19)

			if (flags & (1 << 1)) != 0 {
				m.SetAbout(&types.StringValue{Value: dBuf.String()})
			}

			m9 := &PeerSettings{}
			m9.Decode(dBuf)
			m.SetSettings(m9)

			if (flags & (1 << 2)) != 0 {
				m10 := &Photo{}
				m10.Decode(dBuf)
				m.SetProfilePhoto(m10)
			}

			m11 := &PeerNotifySettings{}
			m11.Decode(dBuf)
			m.SetNotifySettings(m11)

			if (flags & (1 << 3)) != 0 {
				m12 := &BotInfo{}
				m12.Decode(dBuf)
				m.SetBotInfo(m12)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetPinnedMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetCommonChatsCount(dBuf.Int())
			if (flags & (1 << 11)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 14)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 15)) != 0 {
				m.SetThemeEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserFull) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputMessage <--
//  + TL_InputMessageID
//  + TL_InputMessageReplyTo
//  + TL_InputMessagePinned
//  + TL_InputMessageCallbackQuery
//

func (m *InputMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputMessageID:
		t := m.To_InputMessageID()
		xBuf = t.Encode(layer)
	case Predicate_inputMessageReplyTo:
		t := m.To_InputMessageReplyTo()
		xBuf = t.Encode(layer)
	case Predicate_inputMessagePinned:
		t := m.To_InputMessagePinned()
		xBuf = t.Encode(layer)
	case Predicate_inputMessageCallbackQuery:
		t := m.To_InputMessageCallbackQuery()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa676a322:
		m2 := MakeTLInputMessageID(m)
		m2.Decode(dBuf)
	case 0xbad88395:
		m2 := MakeTLInputMessageReplyTo(m)
		m2.Decode(dBuf)
	case 0x86872538:
		m2 := MakeTLInputMessagePinned(m)
		m2.Decode(dBuf)
	case 0xacfa1a7e:
		m2 := MakeTLInputMessageCallbackQuery(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputMessageID:
		t := m.To_InputMessageID()
		return t.DebugString()
	case Predicate_inputMessageReplyTo:
		t := m.To_InputMessageReplyTo()
		return t.DebugString()
	case Predicate_inputMessagePinned:
		t := m.To_InputMessagePinned()
		return t.DebugString()
	case Predicate_inputMessageCallbackQuery:
		t := m.To_InputMessageCallbackQuery()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputMessageID
func (m *InputMessage) To_InputMessageID() *TLInputMessageID {
	m.PredicateName = Predicate_inputMessageID
	return &TLInputMessageID{
		Data2: m,
	}
}

// To_InputMessageReplyTo
func (m *InputMessage) To_InputMessageReplyTo() *TLInputMessageReplyTo {
	m.PredicateName = Predicate_inputMessageReplyTo
	return &TLInputMessageReplyTo{
		Data2: m,
	}
}

// To_InputMessagePinned
func (m *InputMessage) To_InputMessagePinned() *TLInputMessagePinned {
	m.PredicateName = Predicate_inputMessagePinned
	return &TLInputMessagePinned{
		Data2: m,
	}
}

// To_InputMessageCallbackQuery
func (m *InputMessage) To_InputMessageCallbackQuery() *TLInputMessageCallbackQuery {
	m.PredicateName = Predicate_inputMessageCallbackQuery
	return &TLInputMessageCallbackQuery{
		Data2: m,
	}
}

// MakeTLInputMessageID
func MakeTLInputMessageID(data2 *InputMessage) *TLInputMessageID {
	if data2 == nil {
		return &TLInputMessageID{Data2: &InputMessage{
			PredicateName: Predicate_inputMessageID,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessageID
		return &TLInputMessageID{Data2: data2}
	}
}

func (m *TLInputMessageID) To_InputMessage() *InputMessage {
	m.Data2.PredicateName = Predicate_inputMessageID
	return m.Data2
}

func (m *TLInputMessageID) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageID) GetId() int32  { return m.Data2.Id }

func (m *TLInputMessageID) GetPredicateName() string {
	return Predicate_inputMessageID
}

func (m *TLInputMessageID) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa676a322: func() []byte {
			x.UInt(0xa676a322)

			x.Int(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessageID, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessageID, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessageID) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessageID) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa676a322: func() error {
			m.SetId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessageID) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessageReplyTo
func MakeTLInputMessageReplyTo(data2 *InputMessage) *TLInputMessageReplyTo {
	if data2 == nil {
		return &TLInputMessageReplyTo{Data2: &InputMessage{
			PredicateName: Predicate_inputMessageReplyTo,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessageReplyTo
		return &TLInputMessageReplyTo{Data2: data2}
	}
}

func (m *TLInputMessageReplyTo) To_InputMessage() *InputMessage {
	m.Data2.PredicateName = Predicate_inputMessageReplyTo
	return m.Data2
}

func (m *TLInputMessageReplyTo) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageReplyTo) GetId() int32  { return m.Data2.Id }

func (m *TLInputMessageReplyTo) GetPredicateName() string {
	return Predicate_inputMessageReplyTo
}

func (m *TLInputMessageReplyTo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbad88395: func() []byte {
			x.UInt(0xbad88395)

			x.Int(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessageReplyTo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessageReplyTo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessageReplyTo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessageReplyTo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbad88395: func() error {
			m.SetId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessageReplyTo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessagePinned
func MakeTLInputMessagePinned(data2 *InputMessage) *TLInputMessagePinned {
	if data2 == nil {
		return &TLInputMessagePinned{Data2: &InputMessage{
			PredicateName: Predicate_inputMessagePinned,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessagePinned
		return &TLInputMessagePinned{Data2: data2}
	}
}

func (m *TLInputMessagePinned) To_InputMessage() *InputMessage {
	m.Data2.PredicateName = Predicate_inputMessagePinned
	return m.Data2
}

func (m *TLInputMessagePinned) GetPredicateName() string {
	return Predicate_inputMessagePinned
}

func (m *TLInputMessagePinned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x86872538: func() []byte {
			x.UInt(0x86872538)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessagePinned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessagePinned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessagePinned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessagePinned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x86872538: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessagePinned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputMessageCallbackQuery
func MakeTLInputMessageCallbackQuery(data2 *InputMessage) *TLInputMessageCallbackQuery {
	if data2 == nil {
		return &TLInputMessageCallbackQuery{Data2: &InputMessage{
			PredicateName: Predicate_inputMessageCallbackQuery,
		}}
	} else {
		data2.PredicateName = Predicate_inputMessageCallbackQuery
		return &TLInputMessageCallbackQuery{Data2: data2}
	}
}

func (m *TLInputMessageCallbackQuery) To_InputMessage() *InputMessage {
	m.Data2.PredicateName = Predicate_inputMessageCallbackQuery
	return m.Data2
}

func (m *TLInputMessageCallbackQuery) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageCallbackQuery) GetId() int32  { return m.Data2.Id }

func (m *TLInputMessageCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLInputMessageCallbackQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLInputMessageCallbackQuery) GetPredicateName() string {
	return Predicate_inputMessageCallbackQuery
}

func (m *TLInputMessageCallbackQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xacfa1a7e: func() []byte {
			x.UInt(0xacfa1a7e)

			x.Int(m.GetId())
			x.Long(m.GetQueryId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputMessageCallbackQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputMessageCallbackQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputMessageCallbackQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputMessageCallbackQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xacfa1a7e: func() error {
			m.SetId(dBuf.Int())
			m.SetQueryId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputMessageCallbackQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecurePasswordKdfAlgo <--
//  + TL_SecurePasswordKdfAlgoUnknown
//  + TL_SecurePasswordKdfAlgoPBKDF2
//  + TL_SecurePasswordKdfAlgoSHA512
//

func (m *SecurePasswordKdfAlgo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_securePasswordKdfAlgoUnknown:
		t := m.To_SecurePasswordKdfAlgoUnknown()
		xBuf = t.Encode(layer)
	case Predicate_securePasswordKdfAlgoPBKDF2:
		t := m.To_SecurePasswordKdfAlgoPBKDF2()
		xBuf = t.Encode(layer)
	case Predicate_securePasswordKdfAlgoSHA512:
		t := m.To_SecurePasswordKdfAlgoSHA512()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecurePasswordKdfAlgo) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecurePasswordKdfAlgo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4a8537:
		m2 := MakeTLSecurePasswordKdfAlgoUnknown(m)
		m2.Decode(dBuf)
	case 0xbbf2dda0:
		m2 := MakeTLSecurePasswordKdfAlgoPBKDF2(m)
		m2.Decode(dBuf)
	case 0x86471d92:
		m2 := MakeTLSecurePasswordKdfAlgoSHA512(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecurePasswordKdfAlgo) DebugString() string {
	switch m.PredicateName {
	case Predicate_securePasswordKdfAlgoUnknown:
		t := m.To_SecurePasswordKdfAlgoUnknown()
		return t.DebugString()
	case Predicate_securePasswordKdfAlgoPBKDF2:
		t := m.To_SecurePasswordKdfAlgoPBKDF2()
		return t.DebugString()
	case Predicate_securePasswordKdfAlgoSHA512:
		t := m.To_SecurePasswordKdfAlgoSHA512()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecurePasswordKdfAlgoUnknown
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoUnknown() *TLSecurePasswordKdfAlgoUnknown {
	m.PredicateName = Predicate_securePasswordKdfAlgoUnknown
	return &TLSecurePasswordKdfAlgoUnknown{
		Data2: m,
	}
}

// To_SecurePasswordKdfAlgoPBKDF2
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoPBKDF2() *TLSecurePasswordKdfAlgoPBKDF2 {
	m.PredicateName = Predicate_securePasswordKdfAlgoPBKDF2
	return &TLSecurePasswordKdfAlgoPBKDF2{
		Data2: m,
	}
}

// To_SecurePasswordKdfAlgoSHA512
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoSHA512() *TLSecurePasswordKdfAlgoSHA512 {
	m.PredicateName = Predicate_securePasswordKdfAlgoSHA512
	return &TLSecurePasswordKdfAlgoSHA512{
		Data2: m,
	}
}

// MakeTLSecurePasswordKdfAlgoUnknown
func MakeTLSecurePasswordKdfAlgoUnknown(data2 *SecurePasswordKdfAlgo) *TLSecurePasswordKdfAlgoUnknown {
	if data2 == nil {
		return &TLSecurePasswordKdfAlgoUnknown{Data2: &SecurePasswordKdfAlgo{
			PredicateName: Predicate_securePasswordKdfAlgoUnknown,
		}}
	} else {
		data2.PredicateName = Predicate_securePasswordKdfAlgoUnknown
		return &TLSecurePasswordKdfAlgoUnknown{Data2: data2}
	}
}

func (m *TLSecurePasswordKdfAlgoUnknown) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	m.Data2.PredicateName = Predicate_securePasswordKdfAlgoUnknown
	return m.Data2
}

func (m *TLSecurePasswordKdfAlgoUnknown) GetPredicateName() string {
	return Predicate_securePasswordKdfAlgoUnknown
}

func (m *TLSecurePasswordKdfAlgoUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4a8537: func() []byte {
			x.UInt(0x4a8537)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_securePasswordKdfAlgoUnknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_securePasswordKdfAlgoUnknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecurePasswordKdfAlgoUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecurePasswordKdfAlgoUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4a8537: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecurePasswordKdfAlgoUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecurePasswordKdfAlgoPBKDF2
func MakeTLSecurePasswordKdfAlgoPBKDF2(data2 *SecurePasswordKdfAlgo) *TLSecurePasswordKdfAlgoPBKDF2 {
	if data2 == nil {
		return &TLSecurePasswordKdfAlgoPBKDF2{Data2: &SecurePasswordKdfAlgo{
			PredicateName: Predicate_securePasswordKdfAlgoPBKDF2,
		}}
	} else {
		data2.PredicateName = Predicate_securePasswordKdfAlgoPBKDF2
		return &TLSecurePasswordKdfAlgoPBKDF2{Data2: data2}
	}
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	m.Data2.PredicateName = Predicate_securePasswordKdfAlgoPBKDF2
	return m.Data2
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdfAlgoPBKDF2) GetSalt() []byte  { return m.Data2.Salt }

func (m *TLSecurePasswordKdfAlgoPBKDF2) GetPredicateName() string {
	return Predicate_securePasswordKdfAlgoPBKDF2
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbbf2dda0: func() []byte {
			x.UInt(0xbbf2dda0)

			x.StringBytes(m.GetSalt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_securePasswordKdfAlgoPBKDF2, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_securePasswordKdfAlgoPBKDF2, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbbf2dda0: func() error {
			m.SetSalt(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecurePasswordKdfAlgoPBKDF2) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecurePasswordKdfAlgoSHA512
func MakeTLSecurePasswordKdfAlgoSHA512(data2 *SecurePasswordKdfAlgo) *TLSecurePasswordKdfAlgoSHA512 {
	if data2 == nil {
		return &TLSecurePasswordKdfAlgoSHA512{Data2: &SecurePasswordKdfAlgo{
			PredicateName: Predicate_securePasswordKdfAlgoSHA512,
		}}
	} else {
		data2.PredicateName = Predicate_securePasswordKdfAlgoSHA512
		return &TLSecurePasswordKdfAlgoSHA512{Data2: data2}
	}
}

func (m *TLSecurePasswordKdfAlgoSHA512) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
	m.Data2.PredicateName = Predicate_securePasswordKdfAlgoSHA512
	return m.Data2
}

func (m *TLSecurePasswordKdfAlgoSHA512) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdfAlgoSHA512) GetSalt() []byte  { return m.Data2.Salt }

func (m *TLSecurePasswordKdfAlgoSHA512) GetPredicateName() string {
	return Predicate_securePasswordKdfAlgoSHA512
}

func (m *TLSecurePasswordKdfAlgoSHA512) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x86471d92: func() []byte {
			x.UInt(0x86471d92)

			x.StringBytes(m.GetSalt())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_securePasswordKdfAlgoSHA512, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_securePasswordKdfAlgoSHA512, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecurePasswordKdfAlgoSHA512) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecurePasswordKdfAlgoSHA512) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x86471d92: func() error {
			m.SetSalt(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecurePasswordKdfAlgoSHA512) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputAppEvent <--
//  + TL_InputAppEvent
//

func (m *InputAppEvent) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputAppEvent:
		t := m.To_InputAppEvent()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputAppEvent) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputAppEvent) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1d1b1245:
		m2 := MakeTLInputAppEvent(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputAppEvent) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputAppEvent:
		t := m.To_InputAppEvent()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputAppEvent
func (m *InputAppEvent) To_InputAppEvent() *TLInputAppEvent {
	m.PredicateName = Predicate_inputAppEvent
	return &TLInputAppEvent{
		Data2: m,
	}
}

// MakeTLInputAppEvent
func MakeTLInputAppEvent(data2 *InputAppEvent) *TLInputAppEvent {
	if data2 == nil {
		return &TLInputAppEvent{Data2: &InputAppEvent{
			PredicateName: Predicate_inputAppEvent,
		}}
	} else {
		data2.PredicateName = Predicate_inputAppEvent
		return &TLInputAppEvent{Data2: data2}
	}
}

func (m *TLInputAppEvent) To_InputAppEvent() *InputAppEvent {
	m.Data2.PredicateName = Predicate_inputAppEvent
	return m.Data2
}

func (m *TLInputAppEvent) SetTime(v float64) { m.Data2.Time = v }
func (m *TLInputAppEvent) GetTime() float64  { return m.Data2.Time }

func (m *TLInputAppEvent) SetType(v string) { m.Data2.Type = v }
func (m *TLInputAppEvent) GetType() string  { return m.Data2.Type }

func (m *TLInputAppEvent) SetPeer(v int64) { m.Data2.Peer = v }
func (m *TLInputAppEvent) GetPeer() int64  { return m.Data2.Peer }

func (m *TLInputAppEvent) SetData(v *JSONValue) { m.Data2.Data = v }
func (m *TLInputAppEvent) GetData() *JSONValue  { return m.Data2.Data }

func (m *TLInputAppEvent) GetPredicateName() string {
	return Predicate_inputAppEvent
}

func (m *TLInputAppEvent) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1d1b1245: func() []byte {
			x.UInt(0x1d1b1245)

			x.Double(m.GetTime())
			x.String(m.GetType())
			x.Long(m.GetPeer())
			x.Bytes(m.GetData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputAppEvent, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputAppEvent, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputAppEvent) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputAppEvent) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1d1b1245: func() error {
			m.SetTime(dBuf.Double())
			m.SetType(dBuf.String())
			m.SetPeer(dBuf.Long())

			m3 := &JSONValue{}
			m3.Decode(dBuf)
			m.SetData(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputAppEvent) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatTheme <--
//  + TL_ChatTheme
//

func (m *ChatTheme) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatTheme:
		t := m.To_ChatTheme()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatTheme) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xed0b5c33:
		m2 := MakeTLChatTheme(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatTheme) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatTheme:
		t := m.To_ChatTheme()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatTheme
func (m *ChatTheme) To_ChatTheme() *TLChatTheme {
	m.PredicateName = Predicate_chatTheme
	return &TLChatTheme{
		Data2: m,
	}
}

// MakeTLChatTheme
func MakeTLChatTheme(data2 *ChatTheme) *TLChatTheme {
	if data2 == nil {
		return &TLChatTheme{Data2: &ChatTheme{
			PredicateName: Predicate_chatTheme,
		}}
	} else {
		data2.PredicateName = Predicate_chatTheme
		return &TLChatTheme{Data2: data2}
	}
}

func (m *TLChatTheme) To_ChatTheme() *ChatTheme {
	m.Data2.PredicateName = Predicate_chatTheme
	return m.Data2
}

func (m *TLChatTheme) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLChatTheme) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLChatTheme) SetTheme(v *Theme) { m.Data2.Theme = v }
func (m *TLChatTheme) GetTheme() *Theme  { return m.Data2.Theme }

func (m *TLChatTheme) SetDarkTheme(v *Theme) { m.Data2.DarkTheme = v }
func (m *TLChatTheme) GetDarkTheme() *Theme  { return m.Data2.DarkTheme }

func (m *TLChatTheme) GetPredicateName() string {
	return Predicate_chatTheme
}

func (m *TLChatTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed0b5c33: func() []byte {
			x.UInt(0xed0b5c33)

			x.String(m.GetEmoticon())
			x.Bytes(m.GetTheme().Encode(layer))
			x.Bytes(m.GetDarkTheme().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatTheme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatTheme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed0b5c33: func() error {
			m.SetEmoticon(dBuf.String())

			m1 := &Theme{}
			m1.Decode(dBuf)
			m.SetTheme(m1)

			m2 := &Theme{}
			m2.Decode(dBuf)
			m.SetDarkTheme(m2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// LangPackDifference <--
//  + TL_LangPackDifference
//

func (m *LangPackDifference) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_langPackDifference:
		t := m.To_LangPackDifference()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *LangPackDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *LangPackDifference) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf385c1f6:
		m2 := MakeTLLangPackDifference(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *LangPackDifference) DebugString() string {
	switch m.PredicateName {
	case Predicate_langPackDifference:
		t := m.To_LangPackDifference()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_LangPackDifference
func (m *LangPackDifference) To_LangPackDifference() *TLLangPackDifference {
	m.PredicateName = Predicate_langPackDifference
	return &TLLangPackDifference{
		Data2: m,
	}
}

// MakeTLLangPackDifference
func MakeTLLangPackDifference(data2 *LangPackDifference) *TLLangPackDifference {
	if data2 == nil {
		return &TLLangPackDifference{Data2: &LangPackDifference{
			PredicateName: Predicate_langPackDifference,
		}}
	} else {
		data2.PredicateName = Predicate_langPackDifference
		return &TLLangPackDifference{Data2: data2}
	}
}

func (m *TLLangPackDifference) To_LangPackDifference() *LangPackDifference {
	m.Data2.PredicateName = Predicate_langPackDifference
	return m.Data2
}

func (m *TLLangPackDifference) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackDifference) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLLangPackDifference) SetFromVersion(v int32) { m.Data2.FromVersion = v }
func (m *TLLangPackDifference) GetFromVersion() int32  { return m.Data2.FromVersion }

func (m *TLLangPackDifference) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLLangPackDifference) GetVersion() int32  { return m.Data2.Version }

func (m *TLLangPackDifference) SetStrings(v []*LangPackString) { m.Data2.Strings = v }
func (m *TLLangPackDifference) GetStrings() []*LangPackString  { return m.Data2.Strings }

func (m *TLLangPackDifference) GetPredicateName() string {
	return Predicate_langPackDifference
}

func (m *TLLangPackDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf385c1f6: func() []byte {
			x.UInt(0xf385c1f6)

			x.String(m.GetLangCode())
			x.Int(m.GetFromVersion())
			x.Int(m.GetVersion())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetStrings())))
			for _, v := range m.GetStrings() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_langPackDifference, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_langPackDifference, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLangPackDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangPackDifference) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf385c1f6: func() error {
			m.SetLangCode(dBuf.String())
			m.SetFromVersion(dBuf.Int())
			m.SetVersion(dBuf.Int())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*LangPackString, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &LangPackString{}
				v3[i].Decode(dBuf)
			}
			m.SetStrings(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLangPackDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FavedStickers <--
//  + TL_MessagesFavedStickersNotModified
//  + TL_MessagesFavedStickers
//

func (m *Messages_FavedStickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_favedStickersNotModified:
		t := m.To_MessagesFavedStickersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_favedStickers:
		t := m.To_MessagesFavedStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_FavedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_FavedStickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9e8fa6d3:
		m2 := MakeTLMessagesFavedStickersNotModified(m)
		m2.Decode(dBuf)
	case 0x2cb51097:
		m2 := MakeTLMessagesFavedStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_FavedStickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_favedStickersNotModified:
		t := m.To_MessagesFavedStickersNotModified()
		return t.DebugString()
	case Predicate_messages_favedStickers:
		t := m.To_MessagesFavedStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesFavedStickersNotModified
func (m *Messages_FavedStickers) To_MessagesFavedStickersNotModified() *TLMessagesFavedStickersNotModified {
	m.PredicateName = Predicate_messages_favedStickersNotModified
	return &TLMessagesFavedStickersNotModified{
		Data2: m,
	}
}

// To_MessagesFavedStickers
func (m *Messages_FavedStickers) To_MessagesFavedStickers() *TLMessagesFavedStickers {
	m.PredicateName = Predicate_messages_favedStickers
	return &TLMessagesFavedStickers{
		Data2: m,
	}
}

// MakeTLMessagesFavedStickersNotModified
func MakeTLMessagesFavedStickersNotModified(data2 *Messages_FavedStickers) *TLMessagesFavedStickersNotModified {
	if data2 == nil {
		return &TLMessagesFavedStickersNotModified{Data2: &Messages_FavedStickers{
			PredicateName: Predicate_messages_favedStickersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_favedStickersNotModified
		return &TLMessagesFavedStickersNotModified{Data2: data2}
	}
}

func (m *TLMessagesFavedStickersNotModified) To_Messages_FavedStickers() *Messages_FavedStickers {
	m.Data2.PredicateName = Predicate_messages_favedStickersNotModified
	return m.Data2
}

func (m *TLMessagesFavedStickersNotModified) GetPredicateName() string {
	return Predicate_messages_favedStickersNotModified
}

func (m *TLMessagesFavedStickersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9e8fa6d3: func() []byte {
			x.UInt(0x9e8fa6d3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_favedStickersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_favedStickersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFavedStickersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFavedStickersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9e8fa6d3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFavedStickersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesFavedStickers
func MakeTLMessagesFavedStickers(data2 *Messages_FavedStickers) *TLMessagesFavedStickers {
	if data2 == nil {
		return &TLMessagesFavedStickers{Data2: &Messages_FavedStickers{
			PredicateName: Predicate_messages_favedStickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_favedStickers
		return &TLMessagesFavedStickers{Data2: data2}
	}
}

func (m *TLMessagesFavedStickers) To_Messages_FavedStickers() *Messages_FavedStickers {
	m.Data2.PredicateName = Predicate_messages_favedStickers
	return m.Data2
}

func (m *TLMessagesFavedStickers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesFavedStickers) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesFavedStickers) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesFavedStickers) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesFavedStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesFavedStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func (m *TLMessagesFavedStickers) GetPredicateName() string {
	return Predicate_messages_favedStickers
}

func (m *TLMessagesFavedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2cb51097: func() []byte {
			x.UInt(0x2cb51097)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPacks())))
			for _, v := range m.GetPacks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetStickers())))
			for _, v := range m.GetStickers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_favedStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_favedStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFavedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFavedStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2cb51097: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerPack, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerPack{}
				v1[i].Decode(dBuf)
			}
			m.SetPacks(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Document, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Document{}
				v2[i].Decode(dBuf)
			}
			m.SetStickers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFavedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WebAuthorization <--
//  + TL_WebAuthorization
//

func (m *WebAuthorization) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_webAuthorization:
		t := m.To_WebAuthorization()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WebAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *WebAuthorization) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa6f8f452:
		m2 := MakeTLWebAuthorization(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WebAuthorization) DebugString() string {
	switch m.PredicateName {
	case Predicate_webAuthorization:
		t := m.To_WebAuthorization()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WebAuthorization
func (m *WebAuthorization) To_WebAuthorization() *TLWebAuthorization {
	m.PredicateName = Predicate_webAuthorization
	return &TLWebAuthorization{
		Data2: m,
	}
}

// MakeTLWebAuthorization
func MakeTLWebAuthorization(data2 *WebAuthorization) *TLWebAuthorization {
	if data2 == nil {
		return &TLWebAuthorization{Data2: &WebAuthorization{
			PredicateName: Predicate_webAuthorization,
		}}
	} else {
		data2.PredicateName = Predicate_webAuthorization
		return &TLWebAuthorization{Data2: data2}
	}
}

func (m *TLWebAuthorization) To_WebAuthorization() *WebAuthorization {
	m.Data2.PredicateName = Predicate_webAuthorization
	return m.Data2
}

func (m *TLWebAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLWebAuthorization) GetHash() int64  { return m.Data2.Hash }

func (m *TLWebAuthorization) SetBotId(v int64) { m.Data2.BotId = v }
func (m *TLWebAuthorization) GetBotId() int64  { return m.Data2.BotId }

func (m *TLWebAuthorization) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLWebAuthorization) GetDomain() string  { return m.Data2.Domain }

func (m *TLWebAuthorization) SetBrowser(v string) { m.Data2.Browser = v }
func (m *TLWebAuthorization) GetBrowser() string  { return m.Data2.Browser }

func (m *TLWebAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLWebAuthorization) GetPlatform() string  { return m.Data2.Platform }

func (m *TLWebAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLWebAuthorization) GetDateCreated() int32  { return m.Data2.DateCreated }

func (m *TLWebAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLWebAuthorization) GetDateActive() int32  { return m.Data2.DateActive }

func (m *TLWebAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLWebAuthorization) GetIp() string  { return m.Data2.Ip }

func (m *TLWebAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLWebAuthorization) GetRegion() string  { return m.Data2.Region }

func (m *TLWebAuthorization) GetPredicateName() string {
	return Predicate_webAuthorization
}

func (m *TLWebAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa6f8f452: func() []byte {
			x.UInt(0xa6f8f452)

			x.Long(m.GetHash())
			x.Long(m.GetBotId())
			x.String(m.GetDomain())
			x.String(m.GetBrowser())
			x.String(m.GetPlatform())
			x.Int(m.GetDateCreated())
			x.Int(m.GetDateActive())
			x.String(m.GetIp())
			x.String(m.GetRegion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webAuthorization, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webAuthorization, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebAuthorization) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa6f8f452: func() error {
			m.SetHash(dBuf.Long())
			m.SetBotId(dBuf.Long())
			m.SetDomain(dBuf.String())
			m.SetBrowser(dBuf.String())
			m.SetPlatform(dBuf.String())
			m.SetDateCreated(dBuf.Int())
			m.SetDateActive(dBuf.Int())
			m.SetIp(dBuf.String())
			m.SetRegion(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputWallPaper <--
//  + TL_InputWallPaper
//  + TL_InputWallPaperSlug
//  + TL_InputWallPaperNoFile
//

func (m *InputWallPaper) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputWallPaper:
		t := m.To_InputWallPaper()
		xBuf = t.Encode(layer)
	case Predicate_inputWallPaperSlug:
		t := m.To_InputWallPaperSlug()
		xBuf = t.Encode(layer)
	case Predicate_inputWallPaperNoFile:
		t := m.To_InputWallPaperNoFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputWallPaper) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe630b979:
		m2 := MakeTLInputWallPaper(m)
		m2.Decode(dBuf)
	case 0x72091c80:
		m2 := MakeTLInputWallPaperSlug(m)
		m2.Decode(dBuf)
	case 0x967a462e:
		m2 := MakeTLInputWallPaperNoFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputWallPaper) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputWallPaper:
		t := m.To_InputWallPaper()
		return t.DebugString()
	case Predicate_inputWallPaperSlug:
		t := m.To_InputWallPaperSlug()
		return t.DebugString()
	case Predicate_inputWallPaperNoFile:
		t := m.To_InputWallPaperNoFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputWallPaper
func (m *InputWallPaper) To_InputWallPaper() *TLInputWallPaper {
	m.PredicateName = Predicate_inputWallPaper
	return &TLInputWallPaper{
		Data2: m,
	}
}

// To_InputWallPaperSlug
func (m *InputWallPaper) To_InputWallPaperSlug() *TLInputWallPaperSlug {
	m.PredicateName = Predicate_inputWallPaperSlug
	return &TLInputWallPaperSlug{
		Data2: m,
	}
}

// To_InputWallPaperNoFile
func (m *InputWallPaper) To_InputWallPaperNoFile() *TLInputWallPaperNoFile {
	m.PredicateName = Predicate_inputWallPaperNoFile
	return &TLInputWallPaperNoFile{
		Data2: m,
	}
}

// MakeTLInputWallPaper
func MakeTLInputWallPaper(data2 *InputWallPaper) *TLInputWallPaper {
	if data2 == nil {
		return &TLInputWallPaper{Data2: &InputWallPaper{
			PredicateName: Predicate_inputWallPaper,
		}}
	} else {
		data2.PredicateName = Predicate_inputWallPaper
		return &TLInputWallPaper{Data2: data2}
	}
}

func (m *TLInputWallPaper) To_InputWallPaper() *InputWallPaper {
	m.Data2.PredicateName = Predicate_inputWallPaper
	return m.Data2
}

func (m *TLInputWallPaper) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputWallPaper) GetId() int64  { return m.Data2.Id }

func (m *TLInputWallPaper) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWallPaper) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputWallPaper) GetPredicateName() string {
	return Predicate_inputWallPaper
}

func (m *TLInputWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe630b979: func() []byte {
			x.UInt(0xe630b979)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWallPaper, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWallPaper, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWallPaper) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe630b979: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputWallPaperSlug
func MakeTLInputWallPaperSlug(data2 *InputWallPaper) *TLInputWallPaperSlug {
	if data2 == nil {
		return &TLInputWallPaperSlug{Data2: &InputWallPaper{
			PredicateName: Predicate_inputWallPaperSlug,
		}}
	} else {
		data2.PredicateName = Predicate_inputWallPaperSlug
		return &TLInputWallPaperSlug{Data2: data2}
	}
}

func (m *TLInputWallPaperSlug) To_InputWallPaper() *InputWallPaper {
	m.Data2.PredicateName = Predicate_inputWallPaperSlug
	return m.Data2
}

func (m *TLInputWallPaperSlug) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLInputWallPaperSlug) GetSlug() string  { return m.Data2.Slug }

func (m *TLInputWallPaperSlug) GetPredicateName() string {
	return Predicate_inputWallPaperSlug
}

func (m *TLInputWallPaperSlug) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x72091c80: func() []byte {
			x.UInt(0x72091c80)

			x.String(m.GetSlug())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWallPaperSlug, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWallPaperSlug, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWallPaperSlug) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWallPaperSlug) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x72091c80: func() error {
			m.SetSlug(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWallPaperSlug) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputWallPaperNoFile
func MakeTLInputWallPaperNoFile(data2 *InputWallPaper) *TLInputWallPaperNoFile {
	if data2 == nil {
		return &TLInputWallPaperNoFile{Data2: &InputWallPaper{
			PredicateName: Predicate_inputWallPaperNoFile,
		}}
	} else {
		data2.PredicateName = Predicate_inputWallPaperNoFile
		return &TLInputWallPaperNoFile{Data2: data2}
	}
}

func (m *TLInputWallPaperNoFile) To_InputWallPaper() *InputWallPaper {
	m.Data2.PredicateName = Predicate_inputWallPaperNoFile
	return m.Data2
}

func (m *TLInputWallPaperNoFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputWallPaperNoFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputWallPaperNoFile) GetPredicateName() string {
	return Predicate_inputWallPaperNoFile
}

func (m *TLInputWallPaperNoFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x967a462e: func() []byte {
			x.UInt(0x967a462e)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputWallPaperNoFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputWallPaperNoFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputWallPaperNoFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputWallPaperNoFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x967a462e: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputWallPaperNoFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_CountriesList <--
//  + TL_HelpCountriesListNotModified
//  + TL_HelpCountriesList
//

func (m *Help_CountriesList) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_countriesListNotModified:
		t := m.To_HelpCountriesListNotModified()
		xBuf = t.Encode(layer)
	case Predicate_help_countriesList:
		t := m.To_HelpCountriesList()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_CountriesList) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_CountriesList) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x93cc1f32:
		m2 := MakeTLHelpCountriesListNotModified(m)
		m2.Decode(dBuf)
	case 0x87d0759e:
		m2 := MakeTLHelpCountriesList(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_CountriesList) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_countriesListNotModified:
		t := m.To_HelpCountriesListNotModified()
		return t.DebugString()
	case Predicate_help_countriesList:
		t := m.To_HelpCountriesList()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpCountriesListNotModified
func (m *Help_CountriesList) To_HelpCountriesListNotModified() *TLHelpCountriesListNotModified {
	m.PredicateName = Predicate_help_countriesListNotModified
	return &TLHelpCountriesListNotModified{
		Data2: m,
	}
}

// To_HelpCountriesList
func (m *Help_CountriesList) To_HelpCountriesList() *TLHelpCountriesList {
	m.PredicateName = Predicate_help_countriesList
	return &TLHelpCountriesList{
		Data2: m,
	}
}

// MakeTLHelpCountriesListNotModified
func MakeTLHelpCountriesListNotModified(data2 *Help_CountriesList) *TLHelpCountriesListNotModified {
	if data2 == nil {
		return &TLHelpCountriesListNotModified{Data2: &Help_CountriesList{
			PredicateName: Predicate_help_countriesListNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_help_countriesListNotModified
		return &TLHelpCountriesListNotModified{Data2: data2}
	}
}

func (m *TLHelpCountriesListNotModified) To_Help_CountriesList() *Help_CountriesList {
	m.Data2.PredicateName = Predicate_help_countriesListNotModified
	return m.Data2
}

func (m *TLHelpCountriesListNotModified) GetPredicateName() string {
	return Predicate_help_countriesListNotModified
}

func (m *TLHelpCountriesListNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x93cc1f32: func() []byte {
			x.UInt(0x93cc1f32)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_countriesListNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_countriesListNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpCountriesListNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpCountriesListNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x93cc1f32: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpCountriesListNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpCountriesList
func MakeTLHelpCountriesList(data2 *Help_CountriesList) *TLHelpCountriesList {
	if data2 == nil {
		return &TLHelpCountriesList{Data2: &Help_CountriesList{
			PredicateName: Predicate_help_countriesList,
		}}
	} else {
		data2.PredicateName = Predicate_help_countriesList
		return &TLHelpCountriesList{Data2: data2}
	}
}

func (m *TLHelpCountriesList) To_Help_CountriesList() *Help_CountriesList {
	m.Data2.PredicateName = Predicate_help_countriesList
	return m.Data2
}

func (m *TLHelpCountriesList) SetCountries(v []*Help_Country) { m.Data2.Countries = v }
func (m *TLHelpCountriesList) GetCountries() []*Help_Country  { return m.Data2.Countries }

func (m *TLHelpCountriesList) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLHelpCountriesList) GetHash() int32  { return m.Data2.Hash }

func (m *TLHelpCountriesList) GetPredicateName() string {
	return Predicate_help_countriesList
}

func (m *TLHelpCountriesList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x87d0759e: func() []byte {
			x.UInt(0x87d0759e)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCountries())))
			for _, v := range m.GetCountries() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_countriesList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_countriesList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpCountriesList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpCountriesList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x87d0759e: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Help_Country, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Help_Country{}
				v0[i].Decode(dBuf)
			}
			m.SetCountries(v0)

			m.SetHash(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpCountriesList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedFoundMessages <--
//  + TL_MessagesAffectedFoundMessages
//

func (m *Messages_AffectedFoundMessages) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_affectedFoundMessages:
		t := m.To_MessagesAffectedFoundMessages()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_AffectedFoundMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_AffectedFoundMessages) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xef8d3e6c:
		m2 := MakeTLMessagesAffectedFoundMessages(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_AffectedFoundMessages) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_affectedFoundMessages:
		t := m.To_MessagesAffectedFoundMessages()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesAffectedFoundMessages
func (m *Messages_AffectedFoundMessages) To_MessagesAffectedFoundMessages() *TLMessagesAffectedFoundMessages {
	m.PredicateName = Predicate_messages_affectedFoundMessages
	return &TLMessagesAffectedFoundMessages{
		Data2: m,
	}
}

// MakeTLMessagesAffectedFoundMessages
func MakeTLMessagesAffectedFoundMessages(data2 *Messages_AffectedFoundMessages) *TLMessagesAffectedFoundMessages {
	if data2 == nil {
		return &TLMessagesAffectedFoundMessages{Data2: &Messages_AffectedFoundMessages{
			PredicateName: Predicate_messages_affectedFoundMessages,
		}}
	} else {
		data2.PredicateName = Predicate_messages_affectedFoundMessages
		return &TLMessagesAffectedFoundMessages{Data2: data2}
	}
}

func (m *TLMessagesAffectedFoundMessages) To_Messages_AffectedFoundMessages() *Messages_AffectedFoundMessages {
	m.Data2.PredicateName = Predicate_messages_affectedFoundMessages
	return m.Data2
}

func (m *TLMessagesAffectedFoundMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedFoundMessages) GetPts() int32  { return m.Data2.Pts }

func (m *TLMessagesAffectedFoundMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedFoundMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLMessagesAffectedFoundMessages) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessagesAffectedFoundMessages) GetOffset() int32  { return m.Data2.Offset }

func (m *TLMessagesAffectedFoundMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLMessagesAffectedFoundMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLMessagesAffectedFoundMessages) GetPredicateName() string {
	return Predicate_messages_affectedFoundMessages
}

func (m *TLMessagesAffectedFoundMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xef8d3e6c: func() []byte {
			x.UInt(0xef8d3e6c)

			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetOffset())

			x.VectorInt(m.GetMessages())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_affectedFoundMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_affectedFoundMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAffectedFoundMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAffectedFoundMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xef8d3e6c: func() error {
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetOffset(dBuf.Int())

			m.SetMessages(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAffectedFoundMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageReplyHeader <--
//  + TL_MessageReplyHeader
//

func (m *MessageReplyHeader) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageReplyHeader:
		t := m.To_MessageReplyHeader()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageReplyHeader) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageReplyHeader) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa6d57763:
		m2 := MakeTLMessageReplyHeader(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageReplyHeader) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageReplyHeader:
		t := m.To_MessageReplyHeader()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageReplyHeader
func (m *MessageReplyHeader) To_MessageReplyHeader() *TLMessageReplyHeader {
	m.PredicateName = Predicate_messageReplyHeader
	return &TLMessageReplyHeader{
		Data2: m,
	}
}

// MakeTLMessageReplyHeader
func MakeTLMessageReplyHeader(data2 *MessageReplyHeader) *TLMessageReplyHeader {
	if data2 == nil {
		return &TLMessageReplyHeader{Data2: &MessageReplyHeader{
			PredicateName: Predicate_messageReplyHeader,
		}}
	} else {
		data2.PredicateName = Predicate_messageReplyHeader
		return &TLMessageReplyHeader{Data2: data2}
	}
}

func (m *TLMessageReplyHeader) To_MessageReplyHeader() *MessageReplyHeader {
	m.Data2.PredicateName = Predicate_messageReplyHeader
	return m.Data2
}

//// flags
func (m *TLMessageReplyHeader) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessageReplyHeader) GetReplyToMsgId() int32  { return m.Data2.ReplyToMsgId }

func (m *TLMessageReplyHeader) SetReplyToPeerId(v *Peer) { m.Data2.ReplyToPeerId = v }
func (m *TLMessageReplyHeader) GetReplyToPeerId() *Peer  { return m.Data2.ReplyToPeerId }

func (m *TLMessageReplyHeader) SetReplyToTopId(v *types.Int32Value) { m.Data2.ReplyToTopId = v }
func (m *TLMessageReplyHeader) GetReplyToTopId() *types.Int32Value  { return m.Data2.ReplyToTopId }

func (m *TLMessageReplyHeader) GetPredicateName() string {
	return Predicate_messageReplyHeader
}

func (m *TLMessageReplyHeader) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa6d57763: func() []byte {
			x.UInt(0xa6d57763)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyToPeerId() != nil {
					flags |= 1 << 0
				}
				if m.GetReplyToTopId() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetReplyToMsgId())
			if m.GetReplyToPeerId() != nil {
				x.Bytes(m.GetReplyToPeerId().Encode(layer))
			}

			if m.GetReplyToTopId() != nil {
				x.Int(m.GetReplyToTopId().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageReplyHeader, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageReplyHeader, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageReplyHeader) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageReplyHeader) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa6d57763: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetReplyToMsgId(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m2 := &Peer{}
				m2.Decode(dBuf)
				m.SetReplyToPeerId(m2)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetReplyToTopId(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageReplyHeader) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GroupCallParticipantVideo <--
//  + TL_GroupCallParticipantVideo
//

func (m *GroupCallParticipantVideo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_groupCallParticipantVideo:
		t := m.To_GroupCallParticipantVideo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GroupCallParticipantVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *GroupCallParticipantVideo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x67753ac8:
		m2 := MakeTLGroupCallParticipantVideo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GroupCallParticipantVideo) DebugString() string {
	switch m.PredicateName {
	case Predicate_groupCallParticipantVideo:
		t := m.To_GroupCallParticipantVideo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GroupCallParticipantVideo
func (m *GroupCallParticipantVideo) To_GroupCallParticipantVideo() *TLGroupCallParticipantVideo {
	m.PredicateName = Predicate_groupCallParticipantVideo
	return &TLGroupCallParticipantVideo{
		Data2: m,
	}
}

// MakeTLGroupCallParticipantVideo
func MakeTLGroupCallParticipantVideo(data2 *GroupCallParticipantVideo) *TLGroupCallParticipantVideo {
	if data2 == nil {
		return &TLGroupCallParticipantVideo{Data2: &GroupCallParticipantVideo{
			PredicateName: Predicate_groupCallParticipantVideo,
		}}
	} else {
		data2.PredicateName = Predicate_groupCallParticipantVideo
		return &TLGroupCallParticipantVideo{Data2: data2}
	}
}

func (m *TLGroupCallParticipantVideo) To_GroupCallParticipantVideo() *GroupCallParticipantVideo {
	m.Data2.PredicateName = Predicate_groupCallParticipantVideo
	return m.Data2
}

//// flags
func (m *TLGroupCallParticipantVideo) SetPaused(v bool) { m.Data2.Paused = v }
func (m *TLGroupCallParticipantVideo) GetPaused() bool  { return m.Data2.Paused }

func (m *TLGroupCallParticipantVideo) SetEndpoint(v string) { m.Data2.Endpoint = v }
func (m *TLGroupCallParticipantVideo) GetEndpoint() string  { return m.Data2.Endpoint }

func (m *TLGroupCallParticipantVideo) SetSourceGroups(v []*GroupCallParticipantVideoSourceGroup) {
	m.Data2.SourceGroups = v
}
func (m *TLGroupCallParticipantVideo) GetSourceGroups() []*GroupCallParticipantVideoSourceGroup {
	return m.Data2.SourceGroups
}

func (m *TLGroupCallParticipantVideo) SetAudioSource(v *types.Int32Value) { m.Data2.AudioSource = v }
func (m *TLGroupCallParticipantVideo) GetAudioSource() *types.Int32Value  { return m.Data2.AudioSource }

func (m *TLGroupCallParticipantVideo) GetPredicateName() string {
	return Predicate_groupCallParticipantVideo
}

func (m *TLGroupCallParticipantVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x67753ac8: func() []byte {
			x.UInt(0x67753ac8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPaused() == true {
					flags |= 1 << 0
				}

				if m.GetAudioSource() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetEndpoint())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSourceGroups())))
			for _, v := range m.GetSourceGroups() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetAudioSource() != nil {
				x.Int(m.GetAudioSource().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCallParticipantVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCallParticipantVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCallParticipantVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCallParticipantVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x67753ac8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPaused(true)
			}
			m.SetEndpoint(dBuf.String())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*GroupCallParticipantVideoSourceGroup, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &GroupCallParticipantVideoSourceGroup{}
				v3[i].Decode(dBuf)
			}
			m.SetSourceGroups(v3)

			if (flags & (1 << 1)) != 0 {
				m.SetAudioSource(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCallParticipantVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Bool <--
//  + TL_BoolFalse
//  + TL_BoolTrue
//

func (m *Bool) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_boolFalse:
		t := m.To_BoolFalse()
		xBuf = t.Encode(layer)
	case Predicate_boolTrue:
		t := m.To_BoolTrue()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Bool) CalcByteSize(layer int32) int {
	return 0
}

func (m *Bool) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbc799737:
		m2 := MakeTLBoolFalse(m)
		m2.Decode(dBuf)
	case 0x997275b5:
		m2 := MakeTLBoolTrue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Bool) DebugString() string {
	switch m.PredicateName {
	case Predicate_boolFalse:
		t := m.To_BoolFalse()
		return t.DebugString()
	case Predicate_boolTrue:
		t := m.To_BoolTrue()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BoolFalse
func (m *Bool) To_BoolFalse() *TLBoolFalse {
	m.PredicateName = Predicate_boolFalse
	return &TLBoolFalse{
		Data2: m,
	}
}

// To_BoolTrue
func (m *Bool) To_BoolTrue() *TLBoolTrue {
	m.PredicateName = Predicate_boolTrue
	return &TLBoolTrue{
		Data2: m,
	}
}

// MakeTLBoolFalse
func MakeTLBoolFalse(data2 *Bool) *TLBoolFalse {
	if data2 == nil {
		return &TLBoolFalse{Data2: &Bool{
			PredicateName: Predicate_boolFalse,
		}}
	} else {
		data2.PredicateName = Predicate_boolFalse
		return &TLBoolFalse{Data2: data2}
	}
}

func (m *TLBoolFalse) To_Bool() *Bool {
	m.Data2.PredicateName = Predicate_boolFalse
	return m.Data2
}

func (m *TLBoolFalse) GetPredicateName() string {
	return Predicate_boolFalse
}

func (m *TLBoolFalse) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbc799737: func() []byte {
			x.UInt(0xbc799737)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_boolFalse, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_boolFalse, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBoolFalse) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBoolFalse) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbc799737: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBoolFalse) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLBoolTrue
func MakeTLBoolTrue(data2 *Bool) *TLBoolTrue {
	if data2 == nil {
		return &TLBoolTrue{Data2: &Bool{
			PredicateName: Predicate_boolTrue,
		}}
	} else {
		data2.PredicateName = Predicate_boolTrue
		return &TLBoolTrue{Data2: data2}
	}
}

func (m *TLBoolTrue) To_Bool() *Bool {
	m.Data2.PredicateName = Predicate_boolTrue
	return m.Data2
}

func (m *TLBoolTrue) GetPredicateName() string {
	return Predicate_boolTrue
}

func (m *TLBoolTrue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x997275b5: func() []byte {
			x.UInt(0x997275b5)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_boolTrue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_boolTrue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBoolTrue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBoolTrue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x997275b5: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBoolTrue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Photos_Photos <--
//  + TL_PhotosPhotos
//  + TL_PhotosPhotosSlice
//

func (m *Photos_Photos) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_photos_photos:
		t := m.To_PhotosPhotos()
		xBuf = t.Encode(layer)
	case Predicate_photos_photosSlice:
		t := m.To_PhotosPhotosSlice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Photos_Photos) CalcByteSize(layer int32) int {
	return 0
}

func (m *Photos_Photos) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8dca6aa5:
		m2 := MakeTLPhotosPhotos(m)
		m2.Decode(dBuf)
	case 0x15051f54:
		m2 := MakeTLPhotosPhotosSlice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Photos_Photos) DebugString() string {
	switch m.PredicateName {
	case Predicate_photos_photos:
		t := m.To_PhotosPhotos()
		return t.DebugString()
	case Predicate_photos_photosSlice:
		t := m.To_PhotosPhotosSlice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhotosPhotos
func (m *Photos_Photos) To_PhotosPhotos() *TLPhotosPhotos {
	m.PredicateName = Predicate_photos_photos
	return &TLPhotosPhotos{
		Data2: m,
	}
}

// To_PhotosPhotosSlice
func (m *Photos_Photos) To_PhotosPhotosSlice() *TLPhotosPhotosSlice {
	m.PredicateName = Predicate_photos_photosSlice
	return &TLPhotosPhotosSlice{
		Data2: m,
	}
}

// MakeTLPhotosPhotos
func MakeTLPhotosPhotos(data2 *Photos_Photos) *TLPhotosPhotos {
	if data2 == nil {
		return &TLPhotosPhotos{Data2: &Photos_Photos{
			PredicateName: Predicate_photos_photos,
		}}
	} else {
		data2.PredicateName = Predicate_photos_photos
		return &TLPhotosPhotos{Data2: data2}
	}
}

func (m *TLPhotosPhotos) To_Photos_Photos() *Photos_Photos {
	m.Data2.PredicateName = Predicate_photos_photos
	return m.Data2
}

func (m *TLPhotosPhotos) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotos) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPhotosPhotos) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotos) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhotosPhotos) GetPredicateName() string {
	return Predicate_photos_photos
}

func (m *TLPhotosPhotos) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8dca6aa5: func() []byte {
			x.UInt(0x8dca6aa5)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPhotos())))
			for _, v := range m.GetPhotos() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photos_photos, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photos_photos, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotosPhotos) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosPhotos) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8dca6aa5: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Photo, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Photo{}
				v0[i].Decode(dBuf)
			}
			m.SetPhotos(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotosPhotos) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPhotosPhotosSlice
func MakeTLPhotosPhotosSlice(data2 *Photos_Photos) *TLPhotosPhotosSlice {
	if data2 == nil {
		return &TLPhotosPhotosSlice{Data2: &Photos_Photos{
			PredicateName: Predicate_photos_photosSlice,
		}}
	} else {
		data2.PredicateName = Predicate_photos_photosSlice
		return &TLPhotosPhotosSlice{Data2: data2}
	}
}

func (m *TLPhotosPhotosSlice) To_Photos_Photos() *Photos_Photos {
	m.Data2.PredicateName = Predicate_photos_photosSlice
	return m.Data2
}

func (m *TLPhotosPhotosSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLPhotosPhotosSlice) GetCount() int32  { return m.Data2.Count }

func (m *TLPhotosPhotosSlice) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotosSlice) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPhotosPhotosSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotosSlice) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhotosPhotosSlice) GetPredicateName() string {
	return Predicate_photos_photosSlice
}

func (m *TLPhotosPhotosSlice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x15051f54: func() []byte {
			x.UInt(0x15051f54)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPhotos())))
			for _, v := range m.GetPhotos() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_photos_photosSlice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_photos_photosSlice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhotosPhotosSlice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosPhotosSlice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x15051f54: func() error {
			m.SetCount(dBuf.Int())
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Photo, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Photo{}
				v0[i].Decode(dBuf)
			}
			m.SetPhotos(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhotosPhotosSlice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ReceivedNotifyMessage <--
//  + TL_ReceivedNotifyMessage
//

func (m *ReceivedNotifyMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_receivedNotifyMessage:
		t := m.To_ReceivedNotifyMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ReceivedNotifyMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *ReceivedNotifyMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa384b779:
		m2 := MakeTLReceivedNotifyMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ReceivedNotifyMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_receivedNotifyMessage:
		t := m.To_ReceivedNotifyMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ReceivedNotifyMessage
func (m *ReceivedNotifyMessage) To_ReceivedNotifyMessage() *TLReceivedNotifyMessage {
	m.PredicateName = Predicate_receivedNotifyMessage
	return &TLReceivedNotifyMessage{
		Data2: m,
	}
}

// MakeTLReceivedNotifyMessage
func MakeTLReceivedNotifyMessage(data2 *ReceivedNotifyMessage) *TLReceivedNotifyMessage {
	if data2 == nil {
		return &TLReceivedNotifyMessage{Data2: &ReceivedNotifyMessage{
			PredicateName: Predicate_receivedNotifyMessage,
		}}
	} else {
		data2.PredicateName = Predicate_receivedNotifyMessage
		return &TLReceivedNotifyMessage{Data2: data2}
	}
}

func (m *TLReceivedNotifyMessage) To_ReceivedNotifyMessage() *ReceivedNotifyMessage {
	m.Data2.PredicateName = Predicate_receivedNotifyMessage
	return m.Data2
}

func (m *TLReceivedNotifyMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLReceivedNotifyMessage) GetId() int32  { return m.Data2.Id }

func (m *TLReceivedNotifyMessage) SetFlags(v int32) { m.Data2.Flags = v }
func (m *TLReceivedNotifyMessage) GetFlags() int32  { return m.Data2.Flags }

func (m *TLReceivedNotifyMessage) GetPredicateName() string {
	return Predicate_receivedNotifyMessage
}

func (m *TLReceivedNotifyMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa384b779: func() []byte {
			x.UInt(0xa384b779)

			x.Int(m.GetId())
			x.Int(m.GetFlags())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_receivedNotifyMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_receivedNotifyMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReceivedNotifyMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReceivedNotifyMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa384b779: func() error {
			m.SetId(dBuf.Int())
			m.SetFlags(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReceivedNotifyMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatInvite <--
//  + TL_ChatInviteAlready
//  + TL_ChatInvite
//  + TL_ChatInvitePeek
//

func (m *ChatInvite) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatInviteAlready:
		t := m.To_ChatInviteAlready()
		xBuf = t.Encode(layer)
	case Predicate_chatInvite:
		t := m.To_ChatInvite()
		xBuf = t.Encode(layer)
	case Predicate_chatInvitePeek:
		t := m.To_ChatInvitePeek()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatInvite) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5a686d7c:
		m2 := MakeTLChatInviteAlready(m)
		m2.Decode(dBuf)
	case 0x300c44c1:
		m2 := MakeTLChatInvite(m)
		m2.Decode(dBuf)
	case 0xdfc2f58e:
		m2 := MakeTLChatInvite(m)
		m2.Decode(dBuf)
	case 0x61695cb0:
		m2 := MakeTLChatInvitePeek(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatInvite) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatInviteAlready:
		t := m.To_ChatInviteAlready()
		return t.DebugString()
	case Predicate_chatInvite:
		t := m.To_ChatInvite()
		return t.DebugString()
	case Predicate_chatInvitePeek:
		t := m.To_ChatInvitePeek()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatInviteAlready
func (m *ChatInvite) To_ChatInviteAlready() *TLChatInviteAlready {
	m.PredicateName = Predicate_chatInviteAlready
	return &TLChatInviteAlready{
		Data2: m,
	}
}

// To_ChatInvite
func (m *ChatInvite) To_ChatInvite() *TLChatInvite {
	m.PredicateName = Predicate_chatInvite
	return &TLChatInvite{
		Data2: m,
	}
}

// To_ChatInvitePeek
func (m *ChatInvite) To_ChatInvitePeek() *TLChatInvitePeek {
	m.PredicateName = Predicate_chatInvitePeek
	return &TLChatInvitePeek{
		Data2: m,
	}
}

// MakeTLChatInviteAlready
func MakeTLChatInviteAlready(data2 *ChatInvite) *TLChatInviteAlready {
	if data2 == nil {
		return &TLChatInviteAlready{Data2: &ChatInvite{
			PredicateName: Predicate_chatInviteAlready,
		}}
	} else {
		data2.PredicateName = Predicate_chatInviteAlready
		return &TLChatInviteAlready{Data2: data2}
	}
}

func (m *TLChatInviteAlready) To_ChatInvite() *ChatInvite {
	m.Data2.PredicateName = Predicate_chatInviteAlready
	return m.Data2
}

func (m *TLChatInviteAlready) SetChat(v *Chat) { m.Data2.Chat = v }
func (m *TLChatInviteAlready) GetChat() *Chat  { return m.Data2.Chat }

func (m *TLChatInviteAlready) GetPredicateName() string {
	return Predicate_chatInviteAlready
}

func (m *TLChatInviteAlready) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5a686d7c: func() []byte {
			x.UInt(0x5a686d7c)

			x.Bytes(m.GetChat().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatInviteAlready, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatInviteAlready, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatInviteAlready) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatInviteAlready) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5a686d7c: func() error {

			m0 := &Chat{}
			m0.Decode(dBuf)
			m.SetChat(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatInviteAlready) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatInvite
func MakeTLChatInvite(data2 *ChatInvite) *TLChatInvite {
	if data2 == nil {
		return &TLChatInvite{Data2: &ChatInvite{
			PredicateName: Predicate_chatInvite,
		}}
	} else {
		data2.PredicateName = Predicate_chatInvite
		return &TLChatInvite{Data2: data2}
	}
}

func (m *TLChatInvite) To_ChatInvite() *ChatInvite {
	m.Data2.PredicateName = Predicate_chatInvite
	return m.Data2
}

//// flags
func (m *TLChatInvite) SetChannel(v bool) { m.Data2.Channel = v }
func (m *TLChatInvite) GetChannel() bool  { return m.Data2.Channel }

func (m *TLChatInvite) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChatInvite) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChatInvite) SetPublic(v bool) { m.Data2.Public = v }
func (m *TLChatInvite) GetPublic() bool  { return m.Data2.Public }

func (m *TLChatInvite) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChatInvite) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChatInvite) SetRequestNeeded(v bool) { m.Data2.RequestNeeded = v }
func (m *TLChatInvite) GetRequestNeeded() bool  { return m.Data2.RequestNeeded }

func (m *TLChatInvite) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatInvite) GetTitle() string  { return m.Data2.Title }

func (m *TLChatInvite) SetAbout(v *types.StringValue) { m.Data2.About = v }
func (m *TLChatInvite) GetAbout() *types.StringValue  { return m.Data2.About }

func (m *TLChatInvite) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLChatInvite) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLChatInvite) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChatInvite) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func (m *TLChatInvite) SetParticipants(v []*User) { m.Data2.Participants = v }
func (m *TLChatInvite) GetParticipants() []*User  { return m.Data2.Participants }

func (m *TLChatInvite) GetPredicateName() string {
	return Predicate_chatInvite
}

func (m *TLChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x300c44c1: func() []byte {
			x.UInt(0x300c44c1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChannel() == true {
					flags |= 1 << 0
				}
				if m.GetBroadcast() == true {
					flags |= 1 << 1
				}
				if m.GetPublic() == true {
					flags |= 1 << 2
				}
				if m.GetMegagroup() == true {
					flags |= 1 << 3
				}
				if m.GetRequestNeeded() == true {
					flags |= 1 << 6
				}

				if m.GetAbout() != nil {
					flags |= 1 << 5
				}

				if m.GetParticipants() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			if m.GetAbout() != nil {
				x.String(m.GetAbout().Value)
			}

			x.Bytes(m.GetPhoto().Encode(layer))
			x.Int(m.GetParticipantsCount())
			if m.GetParticipants() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetParticipants())))
				for _, v := range m.GetParticipants() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
		0xdfc2f58e: func() []byte {
			x.UInt(0xdfc2f58e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChannel() == true {
					flags |= 1 << 0
				}
				if m.GetBroadcast() == true {
					flags |= 1 << 1
				}
				if m.GetPublic() == true {
					flags |= 1 << 2
				}
				if m.GetMegagroup() == true {
					flags |= 1 << 3
				}

				if m.GetParticipants() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			x.Bytes(m.GetPhoto().Encode(layer))
			x.Int(m.GetParticipantsCount())
			if m.GetParticipants() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetParticipants())))
				for _, v := range m.GetParticipants() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x300c44c1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetChannel(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetBroadcast(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetPublic(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetMegagroup(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetRequestNeeded(true)
			}
			m.SetTitle(dBuf.String())
			if (flags & (1 << 5)) != 0 {
				m.SetAbout(&types.StringValue{Value: dBuf.String()})
			}

			m9 := &Photo{}
			m9.Decode(dBuf)
			m.SetPhoto(m9)

			m.SetParticipantsCount(dBuf.Int())
			if (flags & (1 << 4)) != 0 {
				c11 := dBuf.Int()
				if c11 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 11, c11)
					return dBuf.GetError()
				}
				l11 := dBuf.Int()
				v11 := make([]*User, l11)
				for i := int32(0); i < l11; i++ {
					v11[i] = &User{}
					v11[i].Decode(dBuf)
				}
				m.SetParticipants(v11)
			}
			return dBuf.GetError()
		},
		0xdfc2f58e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetChannel(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetBroadcast(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetPublic(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetMegagroup(true)
			}
			m.SetTitle(dBuf.String())

			m9 := &Photo{}
			m9.Decode(dBuf)
			m.SetPhoto(m9)

			m.SetParticipantsCount(dBuf.Int())
			if (flags & (1 << 4)) != 0 {
				c11 := dBuf.Int()
				if c11 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 11, c11)
					return dBuf.GetError()
				}
				l11 := dBuf.Int()
				v11 := make([]*User, l11)
				for i := int32(0); i < l11; i++ {
					v11[i] = &User{}
					v11[i].Decode(dBuf)
				}
				m.SetParticipants(v11)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatInvitePeek
func MakeTLChatInvitePeek(data2 *ChatInvite) *TLChatInvitePeek {
	if data2 == nil {
		return &TLChatInvitePeek{Data2: &ChatInvite{
			PredicateName: Predicate_chatInvitePeek,
		}}
	} else {
		data2.PredicateName = Predicate_chatInvitePeek
		return &TLChatInvitePeek{Data2: data2}
	}
}

func (m *TLChatInvitePeek) To_ChatInvite() *ChatInvite {
	m.Data2.PredicateName = Predicate_chatInvitePeek
	return m.Data2
}

func (m *TLChatInvitePeek) SetChat(v *Chat) { m.Data2.Chat = v }
func (m *TLChatInvitePeek) GetChat() *Chat  { return m.Data2.Chat }

func (m *TLChatInvitePeek) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLChatInvitePeek) GetExpires() int32  { return m.Data2.Expires }

func (m *TLChatInvitePeek) GetPredicateName() string {
	return Predicate_chatInvitePeek
}

func (m *TLChatInvitePeek) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x61695cb0: func() []byte {
			x.UInt(0x61695cb0)

			x.Bytes(m.GetChat().Encode(layer))
			x.Int(m.GetExpires())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatInvitePeek, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatInvitePeek, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatInvitePeek) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatInvitePeek) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x61695cb0: func() error {

			m0 := &Chat{}
			m0.Decode(dBuf)
			m.SetChat(m0)

			m.SetExpires(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatInvitePeek) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_RecentStickers <--
//  + TL_MessagesRecentStickersNotModified
//  + TL_MessagesRecentStickers
//

func (m *Messages_RecentStickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_recentStickersNotModified:
		t := m.To_MessagesRecentStickersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_recentStickers:
		t := m.To_MessagesRecentStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_RecentStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_RecentStickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb17f890:
		m2 := MakeTLMessagesRecentStickersNotModified(m)
		m2.Decode(dBuf)
	case 0x88d37c56:
		m2 := MakeTLMessagesRecentStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_RecentStickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_recentStickersNotModified:
		t := m.To_MessagesRecentStickersNotModified()
		return t.DebugString()
	case Predicate_messages_recentStickers:
		t := m.To_MessagesRecentStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesRecentStickersNotModified
func (m *Messages_RecentStickers) To_MessagesRecentStickersNotModified() *TLMessagesRecentStickersNotModified {
	m.PredicateName = Predicate_messages_recentStickersNotModified
	return &TLMessagesRecentStickersNotModified{
		Data2: m,
	}
}

// To_MessagesRecentStickers
func (m *Messages_RecentStickers) To_MessagesRecentStickers() *TLMessagesRecentStickers {
	m.PredicateName = Predicate_messages_recentStickers
	return &TLMessagesRecentStickers{
		Data2: m,
	}
}

// MakeTLMessagesRecentStickersNotModified
func MakeTLMessagesRecentStickersNotModified(data2 *Messages_RecentStickers) *TLMessagesRecentStickersNotModified {
	if data2 == nil {
		return &TLMessagesRecentStickersNotModified{Data2: &Messages_RecentStickers{
			PredicateName: Predicate_messages_recentStickersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_recentStickersNotModified
		return &TLMessagesRecentStickersNotModified{Data2: data2}
	}
}

func (m *TLMessagesRecentStickersNotModified) To_Messages_RecentStickers() *Messages_RecentStickers {
	m.Data2.PredicateName = Predicate_messages_recentStickersNotModified
	return m.Data2
}

func (m *TLMessagesRecentStickersNotModified) GetPredicateName() string {
	return Predicate_messages_recentStickersNotModified
}

func (m *TLMessagesRecentStickersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb17f890: func() []byte {
			x.UInt(0xb17f890)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_recentStickersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_recentStickersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesRecentStickersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesRecentStickersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb17f890: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesRecentStickersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesRecentStickers
func MakeTLMessagesRecentStickers(data2 *Messages_RecentStickers) *TLMessagesRecentStickers {
	if data2 == nil {
		return &TLMessagesRecentStickers{Data2: &Messages_RecentStickers{
			PredicateName: Predicate_messages_recentStickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_recentStickers
		return &TLMessagesRecentStickers{Data2: data2}
	}
}

func (m *TLMessagesRecentStickers) To_Messages_RecentStickers() *Messages_RecentStickers {
	m.Data2.PredicateName = Predicate_messages_recentStickers
	return m.Data2
}

func (m *TLMessagesRecentStickers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesRecentStickers) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesRecentStickers) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesRecentStickers) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesRecentStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesRecentStickers) GetStickers() []*Document  { return m.Data2.Stickers }

func (m *TLMessagesRecentStickers) SetDates(v []int32) { m.Data2.Dates = v }
func (m *TLMessagesRecentStickers) GetDates() []int32  { return m.Data2.Dates }

func (m *TLMessagesRecentStickers) GetPredicateName() string {
	return Predicate_messages_recentStickers
}

func (m *TLMessagesRecentStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x88d37c56: func() []byte {
			x.UInt(0x88d37c56)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPacks())))
			for _, v := range m.GetPacks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetStickers())))
			for _, v := range m.GetStickers() {
				x.Bytes((*v).Encode(layer))
			}

			x.VectorInt(m.GetDates())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_recentStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_recentStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesRecentStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesRecentStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x88d37c56: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerPack, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerPack{}
				v1[i].Decode(dBuf)
			}
			m.SetPacks(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Document, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Document{}
				v2[i].Decode(dBuf)
			}
			m.SetStickers(v2)

			m.SetDates(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesRecentStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_SavedInfo <--
//  + TL_PaymentsSavedInfo
//

func (m *Payments_SavedInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_savedInfo:
		t := m.To_PaymentsSavedInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_SavedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_SavedInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfb8fe43c:
		m2 := MakeTLPaymentsSavedInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_SavedInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_savedInfo:
		t := m.To_PaymentsSavedInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsSavedInfo
func (m *Payments_SavedInfo) To_PaymentsSavedInfo() *TLPaymentsSavedInfo {
	m.PredicateName = Predicate_payments_savedInfo
	return &TLPaymentsSavedInfo{
		Data2: m,
	}
}

// MakeTLPaymentsSavedInfo
func MakeTLPaymentsSavedInfo(data2 *Payments_SavedInfo) *TLPaymentsSavedInfo {
	if data2 == nil {
		return &TLPaymentsSavedInfo{Data2: &Payments_SavedInfo{
			PredicateName: Predicate_payments_savedInfo,
		}}
	} else {
		data2.PredicateName = Predicate_payments_savedInfo
		return &TLPaymentsSavedInfo{Data2: data2}
	}
}

func (m *TLPaymentsSavedInfo) To_Payments_SavedInfo() *Payments_SavedInfo {
	m.Data2.PredicateName = Predicate_payments_savedInfo
	return m.Data2
}

//// flags
func (m *TLPaymentsSavedInfo) SetHasSavedCredentials(v bool) { m.Data2.HasSavedCredentials = v }
func (m *TLPaymentsSavedInfo) GetHasSavedCredentials() bool  { return m.Data2.HasSavedCredentials }

func (m *TLPaymentsSavedInfo) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsSavedInfo) GetSavedInfo() *PaymentRequestedInfo  { return m.Data2.SavedInfo }

func (m *TLPaymentsSavedInfo) GetPredicateName() string {
	return Predicate_payments_savedInfo
}

func (m *TLPaymentsSavedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfb8fe43c: func() []byte {
			x.UInt(0xfb8fe43c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHasSavedCredentials() == true {
					flags |= 1 << 1
				}
				if m.GetSavedInfo() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetSavedInfo() != nil {
				x.Bytes(m.GetSavedInfo().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_savedInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_savedInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsSavedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsSavedInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfb8fe43c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetHasSavedCredentials(true)
			}
			if (flags & (1 << 0)) != 0 {
				m2 := &PaymentRequestedInfo{}
				m2.Decode(dBuf)
				m.SetSavedInfo(m2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsSavedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Channels_SendAsPeers <--
//  + TL_ChannelsSendAsPeers
//

func (m *Channels_SendAsPeers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channels_sendAsPeers:
		t := m.To_ChannelsSendAsPeers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Channels_SendAsPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Channels_SendAsPeers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8356cda9:
		m2 := MakeTLChannelsSendAsPeers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Channels_SendAsPeers) DebugString() string {
	switch m.PredicateName {
	case Predicate_channels_sendAsPeers:
		t := m.To_ChannelsSendAsPeers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelsSendAsPeers
func (m *Channels_SendAsPeers) To_ChannelsSendAsPeers() *TLChannelsSendAsPeers {
	m.PredicateName = Predicate_channels_sendAsPeers
	return &TLChannelsSendAsPeers{
		Data2: m,
	}
}

// MakeTLChannelsSendAsPeers
func MakeTLChannelsSendAsPeers(data2 *Channels_SendAsPeers) *TLChannelsSendAsPeers {
	if data2 == nil {
		return &TLChannelsSendAsPeers{Data2: &Channels_SendAsPeers{
			PredicateName: Predicate_channels_sendAsPeers,
		}}
	} else {
		data2.PredicateName = Predicate_channels_sendAsPeers
		return &TLChannelsSendAsPeers{Data2: data2}
	}
}

func (m *TLChannelsSendAsPeers) To_Channels_SendAsPeers() *Channels_SendAsPeers {
	m.Data2.PredicateName = Predicate_channels_sendAsPeers
	return m.Data2
}

func (m *TLChannelsSendAsPeers) SetPeers(v []*Peer) { m.Data2.Peers = v }
func (m *TLChannelsSendAsPeers) GetPeers() []*Peer  { return m.Data2.Peers }

func (m *TLChannelsSendAsPeers) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsSendAsPeers) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLChannelsSendAsPeers) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsSendAsPeers) GetUsers() []*User  { return m.Data2.Users }

func (m *TLChannelsSendAsPeers) GetPredicateName() string {
	return Predicate_channels_sendAsPeers
}

func (m *TLChannelsSendAsPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8356cda9: func() []byte {
			x.UInt(0x8356cda9)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPeers())))
			for _, v := range m.GetPeers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channels_sendAsPeers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channels_sendAsPeers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelsSendAsPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsSendAsPeers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8356cda9: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Peer, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Peer{}
				v0[i].Decode(dBuf)
			}
			m.SetPeers(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelsSendAsPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// AuthKeyInfo <--
//  + TL_AuthKeyInfo
//

func (m *AuthKeyInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_authKeyInfo:
		t := m.To_AuthKeyInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *AuthKeyInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *AuthKeyInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcceeefc0:
		m2 := MakeTLAuthKeyInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *AuthKeyInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_authKeyInfo:
		t := m.To_AuthKeyInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthKeyInfo
func (m *AuthKeyInfo) To_AuthKeyInfo() *TLAuthKeyInfo {
	m.PredicateName = Predicate_authKeyInfo
	return &TLAuthKeyInfo{
		Data2: m,
	}
}

// MakeTLAuthKeyInfo
func MakeTLAuthKeyInfo(data2 *AuthKeyInfo) *TLAuthKeyInfo {
	if data2 == nil {
		return &TLAuthKeyInfo{Data2: &AuthKeyInfo{
			PredicateName: Predicate_authKeyInfo,
		}}
	} else {
		data2.PredicateName = Predicate_authKeyInfo
		return &TLAuthKeyInfo{Data2: data2}
	}
}

func (m *TLAuthKeyInfo) To_AuthKeyInfo() *AuthKeyInfo {
	m.Data2.PredicateName = Predicate_authKeyInfo
	return m.Data2
}

func (m *TLAuthKeyInfo) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLAuthKeyInfo) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLAuthKeyInfo) SetAuthKey(v []byte) { m.Data2.AuthKey = v }
func (m *TLAuthKeyInfo) GetAuthKey() []byte  { return m.Data2.AuthKey }

func (m *TLAuthKeyInfo) SetAuthKeyType(v int32) { m.Data2.AuthKeyType = v }
func (m *TLAuthKeyInfo) GetAuthKeyType() int32  { return m.Data2.AuthKeyType }

func (m *TLAuthKeyInfo) SetPermAuthKeyId(v int64) { m.Data2.PermAuthKeyId = v }
func (m *TLAuthKeyInfo) GetPermAuthKeyId() int64  { return m.Data2.PermAuthKeyId }

func (m *TLAuthKeyInfo) SetTempAuthKeyId(v int64) { m.Data2.TempAuthKeyId = v }
func (m *TLAuthKeyInfo) GetTempAuthKeyId() int64  { return m.Data2.TempAuthKeyId }

func (m *TLAuthKeyInfo) SetMediaTempAuthKeyId(v int64) { m.Data2.MediaTempAuthKeyId = v }
func (m *TLAuthKeyInfo) GetMediaTempAuthKeyId() int64  { return m.Data2.MediaTempAuthKeyId }

func (m *TLAuthKeyInfo) GetPredicateName() string {
	return Predicate_authKeyInfo
}

func (m *TLAuthKeyInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcceeefc0: func() []byte {
			x.UInt(0xcceeefc0)

			x.Long(m.GetAuthKeyId())
			x.StringBytes(m.GetAuthKey())
			x.Int(m.GetAuthKeyType())
			x.Long(m.GetPermAuthKeyId())
			x.Long(m.GetTempAuthKeyId())
			x.Long(m.GetMediaTempAuthKeyId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_authKeyInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_authKeyInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthKeyInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthKeyInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcceeefc0: func() error {
			m.SetAuthKeyId(dBuf.Long())
			m.SetAuthKey(dBuf.StringBytes())
			m.SetAuthKeyType(dBuf.Int())
			m.SetPermAuthKeyId(dBuf.Long())
			m.SetTempAuthKeyId(dBuf.Long())
			m.SetMediaTempAuthKeyId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthKeyInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// FolderPeer <--
//  + TL_FolderPeer
//

func (m *FolderPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_folderPeer:
		t := m.To_FolderPeer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *FolderPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *FolderPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe9baa668:
		m2 := MakeTLFolderPeer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *FolderPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_folderPeer:
		t := m.To_FolderPeer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_FolderPeer
func (m *FolderPeer) To_FolderPeer() *TLFolderPeer {
	m.PredicateName = Predicate_folderPeer
	return &TLFolderPeer{
		Data2: m,
	}
}

// MakeTLFolderPeer
func MakeTLFolderPeer(data2 *FolderPeer) *TLFolderPeer {
	if data2 == nil {
		return &TLFolderPeer{Data2: &FolderPeer{
			PredicateName: Predicate_folderPeer,
		}}
	} else {
		data2.PredicateName = Predicate_folderPeer
		return &TLFolderPeer{Data2: data2}
	}
}

func (m *TLFolderPeer) To_FolderPeer() *FolderPeer {
	m.Data2.PredicateName = Predicate_folderPeer
	return m.Data2
}

func (m *TLFolderPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLFolderPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLFolderPeer) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLFolderPeer) GetFolderId() int32  { return m.Data2.FolderId }

func (m *TLFolderPeer) GetPredicateName() string {
	return Predicate_folderPeer
}

func (m *TLFolderPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe9baa668: func() []byte {
			x.UInt(0xe9baa668)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetFolderId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_folderPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_folderPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLFolderPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFolderPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe9baa668: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			m.SetFolderId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLFolderPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputThemeSettings <--
//  + TL_InputThemeSettings
//

func (m *InputThemeSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputThemeSettings:
		t := m.To_InputThemeSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputThemeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputThemeSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8fde504f:
		m2 := MakeTLInputThemeSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputThemeSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputThemeSettings:
		t := m.To_InputThemeSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputThemeSettings
func (m *InputThemeSettings) To_InputThemeSettings() *TLInputThemeSettings {
	m.PredicateName = Predicate_inputThemeSettings
	return &TLInputThemeSettings{
		Data2: m,
	}
}

// MakeTLInputThemeSettings
func MakeTLInputThemeSettings(data2 *InputThemeSettings) *TLInputThemeSettings {
	if data2 == nil {
		return &TLInputThemeSettings{Data2: &InputThemeSettings{
			PredicateName: Predicate_inputThemeSettings,
		}}
	} else {
		data2.PredicateName = Predicate_inputThemeSettings
		return &TLInputThemeSettings{Data2: data2}
	}
}

func (m *TLInputThemeSettings) To_InputThemeSettings() *InputThemeSettings {
	m.Data2.PredicateName = Predicate_inputThemeSettings
	return m.Data2
}

//// flags
func (m *TLInputThemeSettings) SetMessageColorsAnimated(v bool) { m.Data2.MessageColorsAnimated = v }
func (m *TLInputThemeSettings) GetMessageColorsAnimated() bool  { return m.Data2.MessageColorsAnimated }

func (m *TLInputThemeSettings) SetBaseTheme(v *BaseTheme) { m.Data2.BaseTheme = v }
func (m *TLInputThemeSettings) GetBaseTheme() *BaseTheme  { return m.Data2.BaseTheme }

func (m *TLInputThemeSettings) SetAccentColor(v int32) { m.Data2.AccentColor = v }
func (m *TLInputThemeSettings) GetAccentColor() int32  { return m.Data2.AccentColor }

func (m *TLInputThemeSettings) SetOutboxAccentColor(v *types.Int32Value) {
	m.Data2.OutboxAccentColor = v
}
func (m *TLInputThemeSettings) GetOutboxAccentColor() *types.Int32Value {
	return m.Data2.OutboxAccentColor
}

func (m *TLInputThemeSettings) SetMessageColors(v []int32) { m.Data2.MessageColors = v }
func (m *TLInputThemeSettings) GetMessageColors() []int32  { return m.Data2.MessageColors }

func (m *TLInputThemeSettings) SetWallpaper(v *InputWallPaper) { m.Data2.Wallpaper = v }
func (m *TLInputThemeSettings) GetWallpaper() *InputWallPaper  { return m.Data2.Wallpaper }

func (m *TLInputThemeSettings) SetWallpaperSettings(v *WallPaperSettings) {
	m.Data2.WallpaperSettings = v
}
func (m *TLInputThemeSettings) GetWallpaperSettings() *WallPaperSettings {
	return m.Data2.WallpaperSettings
}

func (m *TLInputThemeSettings) GetPredicateName() string {
	return Predicate_inputThemeSettings
}

func (m *TLInputThemeSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8fde504f: func() []byte {
			x.UInt(0x8fde504f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMessageColorsAnimated() == true {
					flags |= 1 << 2
				}

				if m.GetOutboxAccentColor() != nil {
					flags |= 1 << 3
				}
				if m.GetMessageColors() != nil {
					flags |= 1 << 0
				}
				if m.GetWallpaper() != nil {
					flags |= 1 << 1
				}
				if m.GetWallpaperSettings() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetBaseTheme().Encode(layer))
			x.Int(m.GetAccentColor())
			if m.GetOutboxAccentColor() != nil {
				x.Int(m.GetOutboxAccentColor().Value)
			}

			if m.GetMessageColors() != nil {
				x.VectorInt(m.GetMessageColors())
			}
			if m.GetWallpaper() != nil {
				x.Bytes(m.GetWallpaper().Encode(layer))
			}

			if m.GetWallpaperSettings() != nil {
				x.Bytes(m.GetWallpaperSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputThemeSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputThemeSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputThemeSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputThemeSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8fde504f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetMessageColorsAnimated(true)
			}

			m2 := &BaseTheme{}
			m2.Decode(dBuf)
			m.SetBaseTheme(m2)

			m.SetAccentColor(dBuf.Int())
			if (flags & (1 << 3)) != 0 {
				m.SetOutboxAccentColor(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetMessageColors(dBuf.VectorInt())
			}
			if (flags & (1 << 1)) != 0 {
				m6 := &InputWallPaper{}
				m6.Decode(dBuf)
				m.SetWallpaper(m6)
			}
			if (flags & (1 << 1)) != 0 {
				m7 := &WallPaperSettings{}
				m7.Decode(dBuf)
				m.SetWallpaperSettings(m7)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputThemeSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopPoster <--
//  + TL_StatsGroupTopPoster
//

func (m *StatsGroupTopPoster) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsGroupTopPoster:
		t := m.To_StatsGroupTopPoster()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsGroupTopPoster) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsGroupTopPoster) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9d04af9b:
		m2 := MakeTLStatsGroupTopPoster(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsGroupTopPoster) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsGroupTopPoster:
		t := m.To_StatsGroupTopPoster()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsGroupTopPoster
func (m *StatsGroupTopPoster) To_StatsGroupTopPoster() *TLStatsGroupTopPoster {
	m.PredicateName = Predicate_statsGroupTopPoster
	return &TLStatsGroupTopPoster{
		Data2: m,
	}
}

// MakeTLStatsGroupTopPoster
func MakeTLStatsGroupTopPoster(data2 *StatsGroupTopPoster) *TLStatsGroupTopPoster {
	if data2 == nil {
		return &TLStatsGroupTopPoster{Data2: &StatsGroupTopPoster{
			PredicateName: Predicate_statsGroupTopPoster,
		}}
	} else {
		data2.PredicateName = Predicate_statsGroupTopPoster
		return &TLStatsGroupTopPoster{Data2: data2}
	}
}

func (m *TLStatsGroupTopPoster) To_StatsGroupTopPoster() *StatsGroupTopPoster {
	m.Data2.PredicateName = Predicate_statsGroupTopPoster
	return m.Data2
}

func (m *TLStatsGroupTopPoster) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLStatsGroupTopPoster) GetUserId() int64  { return m.Data2.UserId }

func (m *TLStatsGroupTopPoster) SetMessages(v int32) { m.Data2.Messages = v }
func (m *TLStatsGroupTopPoster) GetMessages() int32  { return m.Data2.Messages }

func (m *TLStatsGroupTopPoster) SetAvgChars(v int32) { m.Data2.AvgChars = v }
func (m *TLStatsGroupTopPoster) GetAvgChars() int32  { return m.Data2.AvgChars }

func (m *TLStatsGroupTopPoster) GetPredicateName() string {
	return Predicate_statsGroupTopPoster
}

func (m *TLStatsGroupTopPoster) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9d04af9b: func() []byte {
			x.UInt(0x9d04af9b)

			x.Long(m.GetUserId())
			x.Int(m.GetMessages())
			x.Int(m.GetAvgChars())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGroupTopPoster, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGroupTopPoster, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGroupTopPoster) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGroupTopPoster) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9d04af9b: func() error {
			m.SetUserId(dBuf.Long())
			m.SetMessages(dBuf.Int())
			m.SetAvgChars(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGroupTopPoster) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_CheckedHistoryImportPeer <--
//  + TL_MessagesCheckedHistoryImportPeer
//

func (m *Messages_CheckedHistoryImportPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_checkedHistoryImportPeer:
		t := m.To_MessagesCheckedHistoryImportPeer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_CheckedHistoryImportPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_CheckedHistoryImportPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa24de717:
		m2 := MakeTLMessagesCheckedHistoryImportPeer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_CheckedHistoryImportPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_checkedHistoryImportPeer:
		t := m.To_MessagesCheckedHistoryImportPeer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesCheckedHistoryImportPeer
func (m *Messages_CheckedHistoryImportPeer) To_MessagesCheckedHistoryImportPeer() *TLMessagesCheckedHistoryImportPeer {
	m.PredicateName = Predicate_messages_checkedHistoryImportPeer
	return &TLMessagesCheckedHistoryImportPeer{
		Data2: m,
	}
}

// MakeTLMessagesCheckedHistoryImportPeer
func MakeTLMessagesCheckedHistoryImportPeer(data2 *Messages_CheckedHistoryImportPeer) *TLMessagesCheckedHistoryImportPeer {
	if data2 == nil {
		return &TLMessagesCheckedHistoryImportPeer{Data2: &Messages_CheckedHistoryImportPeer{
			PredicateName: Predicate_messages_checkedHistoryImportPeer,
		}}
	} else {
		data2.PredicateName = Predicate_messages_checkedHistoryImportPeer
		return &TLMessagesCheckedHistoryImportPeer{Data2: data2}
	}
}

func (m *TLMessagesCheckedHistoryImportPeer) To_Messages_CheckedHistoryImportPeer() *Messages_CheckedHistoryImportPeer {
	m.Data2.PredicateName = Predicate_messages_checkedHistoryImportPeer
	return m.Data2
}

func (m *TLMessagesCheckedHistoryImportPeer) SetConfirmText(v string) { m.Data2.ConfirmText = v }
func (m *TLMessagesCheckedHistoryImportPeer) GetConfirmText() string  { return m.Data2.ConfirmText }

func (m *TLMessagesCheckedHistoryImportPeer) GetPredicateName() string {
	return Predicate_messages_checkedHistoryImportPeer
}

func (m *TLMessagesCheckedHistoryImportPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa24de717: func() []byte {
			x.UInt(0xa24de717)

			x.String(m.GetConfirmText())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_checkedHistoryImportPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_checkedHistoryImportPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesCheckedHistoryImportPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesCheckedHistoryImportPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa24de717: func() error {
			m.SetConfirmText(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesCheckedHistoryImportPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PageTableRow <--
//  + TL_PageTableRow
//

func (m *PageTableRow) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pageTableRow:
		t := m.To_PageTableRow()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PageTableRow) CalcByteSize(layer int32) int {
	return 0
}

func (m *PageTableRow) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe0c0c5e5:
		m2 := MakeTLPageTableRow(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PageTableRow) DebugString() string {
	switch m.PredicateName {
	case Predicate_pageTableRow:
		t := m.To_PageTableRow()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PageTableRow
func (m *PageTableRow) To_PageTableRow() *TLPageTableRow {
	m.PredicateName = Predicate_pageTableRow
	return &TLPageTableRow{
		Data2: m,
	}
}

// MakeTLPageTableRow
func MakeTLPageTableRow(data2 *PageTableRow) *TLPageTableRow {
	if data2 == nil {
		return &TLPageTableRow{Data2: &PageTableRow{
			PredicateName: Predicate_pageTableRow,
		}}
	} else {
		data2.PredicateName = Predicate_pageTableRow
		return &TLPageTableRow{Data2: data2}
	}
}

func (m *TLPageTableRow) To_PageTableRow() *PageTableRow {
	m.Data2.PredicateName = Predicate_pageTableRow
	return m.Data2
}

func (m *TLPageTableRow) SetCells(v []*PageTableCell) { m.Data2.Cells = v }
func (m *TLPageTableRow) GetCells() []*PageTableCell  { return m.Data2.Cells }

func (m *TLPageTableRow) GetPredicateName() string {
	return Predicate_pageTableRow
}

func (m *TLPageTableRow) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe0c0c5e5: func() []byte {
			x.UInt(0xe0c0c5e5)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCells())))
			for _, v := range m.GetCells() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pageTableRow, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pageTableRow, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPageTableRow) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPageTableRow) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe0c0c5e5: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*PageTableCell, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &PageTableCell{}
				v0[i].Decode(dBuf)
			}
			m.SetCells(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPageTableRow) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputFolderPeer <--
//  + TL_InputFolderPeer
//

func (m *InputFolderPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputFolderPeer:
		t := m.To_InputFolderPeer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputFolderPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputFolderPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfbd2c296:
		m2 := MakeTLInputFolderPeer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputFolderPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputFolderPeer:
		t := m.To_InputFolderPeer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputFolderPeer
func (m *InputFolderPeer) To_InputFolderPeer() *TLInputFolderPeer {
	m.PredicateName = Predicate_inputFolderPeer
	return &TLInputFolderPeer{
		Data2: m,
	}
}

// MakeTLInputFolderPeer
func MakeTLInputFolderPeer(data2 *InputFolderPeer) *TLInputFolderPeer {
	if data2 == nil {
		return &TLInputFolderPeer{Data2: &InputFolderPeer{
			PredicateName: Predicate_inputFolderPeer,
		}}
	} else {
		data2.PredicateName = Predicate_inputFolderPeer
		return &TLInputFolderPeer{Data2: data2}
	}
}

func (m *TLInputFolderPeer) To_InputFolderPeer() *InputFolderPeer {
	m.Data2.PredicateName = Predicate_inputFolderPeer
	return m.Data2
}

func (m *TLInputFolderPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputFolderPeer) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputFolderPeer) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLInputFolderPeer) GetFolderId() int32  { return m.Data2.FolderId }

func (m *TLInputFolderPeer) GetPredicateName() string {
	return Predicate_inputFolderPeer
}

func (m *TLInputFolderPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfbd2c296: func() []byte {
			x.UInt(0xfbd2c296)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetFolderId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputFolderPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputFolderPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputFolderPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputFolderPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfbd2c296: func() error {

			m0 := &InputPeer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			m.SetFolderId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputFolderPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Message <--
//  + TL_MessageEmpty
//  + TL_Message
//  + TL_MessageService
//

func (m *Message) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageEmpty:
		t := m.To_MessageEmpty()
		xBuf = t.Encode(layer)
	case Predicate_message:
		t := m.To_Message()
		xBuf = t.Encode(layer)
	case Predicate_messageService:
		t := m.To_MessageService()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Message) CalcByteSize(layer int32) int {
	return 0
}

func (m *Message) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x90a6ca84:
		m2 := MakeTLMessageEmpty(m)
		m2.Decode(dBuf)
	case 0x38116ee0:
		m2 := MakeTLMessage(m)
		m2.Decode(dBuf)
	case 0x85d6cbe2:
		m2 := MakeTLMessage(m)
		m2.Decode(dBuf)
	case 0x2b085862:
		m2 := MakeTLMessageService(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Message) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageEmpty:
		t := m.To_MessageEmpty()
		return t.DebugString()
	case Predicate_message:
		t := m.To_Message()
		return t.DebugString()
	case Predicate_messageService:
		t := m.To_MessageService()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageEmpty
func (m *Message) To_MessageEmpty() *TLMessageEmpty {
	m.PredicateName = Predicate_messageEmpty
	return &TLMessageEmpty{
		Data2: m,
	}
}

// To_Message
func (m *Message) To_Message() *TLMessage {
	m.PredicateName = Predicate_message
	return &TLMessage{
		Data2: m,
	}
}

// To_MessageService
func (m *Message) To_MessageService() *TLMessageService {
	m.PredicateName = Predicate_messageService
	return &TLMessageService{
		Data2: m,
	}
}

// MakeTLMessageEmpty
func MakeTLMessageEmpty(data2 *Message) *TLMessageEmpty {
	if data2 == nil {
		return &TLMessageEmpty{Data2: &Message{
			PredicateName: Predicate_messageEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_messageEmpty
		return &TLMessageEmpty{Data2: data2}
	}
}

func (m *TLMessageEmpty) To_Message() *Message {
	m.Data2.PredicateName = Predicate_messageEmpty
	return m.Data2
}

//// flags
func (m *TLMessageEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageEmpty) GetId() int32  { return m.Data2.Id }

func (m *TLMessageEmpty) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLMessageEmpty) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLMessageEmpty) GetPredicateName() string {
	return Predicate_messageEmpty
}

func (m *TLMessageEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x90a6ca84: func() []byte {
			x.UInt(0x90a6ca84)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPeerId() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			if m.GetPeerId() != nil {
				x.Bytes(m.GetPeerId().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x90a6ca84: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m2 := &Peer{}
				m2.Decode(dBuf)
				m.SetPeerId(m2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessage
func MakeTLMessage(data2 *Message) *TLMessage {
	if data2 == nil {
		return &TLMessage{Data2: &Message{
			PredicateName: Predicate_message,
		}}
	} else {
		data2.PredicateName = Predicate_message
		return &TLMessage{Data2: data2}
	}
}

func (m *TLMessage) To_Message() *Message {
	m.Data2.PredicateName = Predicate_message
	return m.Data2
}

//// flags
func (m *TLMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLMessage) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessage) GetPost() bool  { return m.Data2.Post }

func (m *TLMessage) SetFromScheduled(v bool) { m.Data2.FromScheduled = v }
func (m *TLMessage) GetFromScheduled() bool  { return m.Data2.FromScheduled }

func (m *TLMessage) SetLegacy(v bool) { m.Data2.Legacy = v }
func (m *TLMessage) GetLegacy() bool  { return m.Data2.Legacy }

func (m *TLMessage) SetEditHide(v bool) { m.Data2.EditHide = v }
func (m *TLMessage) GetEditHide() bool  { return m.Data2.EditHide }

func (m *TLMessage) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLMessage) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLMessage) SetNoforwards(v bool) { m.Data2.Noforwards = v }
func (m *TLMessage) GetNoforwards() bool  { return m.Data2.Noforwards }

func (m *TLMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessage) GetId() int32  { return m.Data2.Id }

func (m *TLMessage) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLMessage) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLMessage) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLMessage) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLMessage) SetViaBotId(v *types.Int64Value) { m.Data2.ViaBotId = v }
func (m *TLMessage) GetViaBotId() *types.Int64Value  { return m.Data2.ViaBotId }

func (m *TLMessage) SetReplyTo(v *MessageReplyHeader) { m.Data2.ReplyTo = v }
func (m *TLMessage) GetReplyTo() *MessageReplyHeader  { return m.Data2.ReplyTo }

func (m *TLMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLMessage) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLMessage) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLMessage) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLMessage) SetViews(v *types.Int32Value) { m.Data2.Views = v }
func (m *TLMessage) GetViews() *types.Int32Value  { return m.Data2.Views }

func (m *TLMessage) SetForwards(v *types.Int32Value) { m.Data2.Forwards = v }
func (m *TLMessage) GetForwards() *types.Int32Value  { return m.Data2.Forwards }

func (m *TLMessage) SetReplies(v *MessageReplies) { m.Data2.Replies = v }
func (m *TLMessage) GetReplies() *MessageReplies  { return m.Data2.Replies }

func (m *TLMessage) SetEditDate(v *types.Int32Value) { m.Data2.EditDate = v }
func (m *TLMessage) GetEditDate() *types.Int32Value  { return m.Data2.EditDate }

func (m *TLMessage) SetPostAuthor(v *types.StringValue) { m.Data2.PostAuthor = v }
func (m *TLMessage) GetPostAuthor() *types.StringValue  { return m.Data2.PostAuthor }

func (m *TLMessage) SetGroupedId(v *types.Int64Value) { m.Data2.GroupedId = v }
func (m *TLMessage) GetGroupedId() *types.Int64Value  { return m.Data2.GroupedId }

func (m *TLMessage) SetReactions(v *MessageReactions) { m.Data2.Reactions = v }
func (m *TLMessage) GetReactions() *MessageReactions  { return m.Data2.Reactions }

func (m *TLMessage) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason = v }
func (m *TLMessage) GetRestrictionReason() []*RestrictionReason  { return m.Data2.RestrictionReason }

func (m *TLMessage) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLMessage) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLMessage) GetPredicateName() string {
	return Predicate_message
}

func (m *TLMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x38116ee0: func() []byte {
			x.UInt(0x38116ee0)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}
				if m.GetMentioned() == true {
					flags |= 1 << 4
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 5
				}
				if m.GetSilent() == true {
					flags |= 1 << 13
				}
				if m.GetPost() == true {
					flags |= 1 << 14
				}
				if m.GetFromScheduled() == true {
					flags |= 1 << 18
				}
				if m.GetLegacy() == true {
					flags |= 1 << 19
				}
				if m.GetEditHide() == true {
					flags |= 1 << 21
				}
				if m.GetPinned() == true {
					flags |= 1 << 24
				}
				if m.GetNoforwards() == true {
					flags |= 1 << 26
				}

				if m.GetFromId() != nil {
					flags |= 1 << 8
				}

				if m.GetFwdFrom() != nil {
					flags |= 1 << 2
				}
				if m.GetViaBotId() != nil {
					flags |= 1 << 11
				}
				if m.GetReplyTo() != nil {
					flags |= 1 << 3
				}

				if m.GetMedia() != nil {
					flags |= 1 << 9
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 6
				}
				if m.GetEntities() != nil {
					flags |= 1 << 7
				}
				if m.GetViews() != nil {
					flags |= 1 << 10
				}
				if m.GetForwards() != nil {
					flags |= 1 << 10
				}
				if m.GetReplies() != nil {
					flags |= 1 << 23
				}
				if m.GetEditDate() != nil {
					flags |= 1 << 15
				}
				if m.GetPostAuthor() != nil {
					flags |= 1 << 16
				}
				if m.GetGroupedId() != nil {
					flags |= 1 << 17
				}
				if m.GetReactions() != nil {
					flags |= 1 << 20
				}
				if m.GetRestrictionReason() != nil {
					flags |= 1 << 22
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			if m.GetFromId() != nil {
				x.Bytes(m.GetFromId().Encode(layer))
			}

			x.Bytes(m.GetPeerId().Encode(layer))
			if m.GetFwdFrom() != nil {
				x.Bytes(m.GetFwdFrom().Encode(layer))
			}

			if m.GetViaBotId() != nil {
				x.Long(m.GetViaBotId().Value)
			}

			if m.GetReplyTo() != nil {
				x.Bytes(m.GetReplyTo().Encode(layer))
			}

			x.Int(m.GetDate())
			x.String(m.GetMessage())
			if m.GetMedia() != nil {
				x.Bytes(m.GetMedia().Encode(layer))
			}

			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetViews() != nil {
				x.Int(m.GetViews().Value)
			}

			if m.GetForwards() != nil {
				x.Int(m.GetForwards().Value)
			}

			if m.GetReplies() != nil {
				x.Bytes(m.GetReplies().Encode(layer))
			}

			if m.GetEditDate() != nil {
				x.Int(m.GetEditDate().Value)
			}

			if m.GetPostAuthor() != nil {
				x.String(m.GetPostAuthor().Value)
			}

			if m.GetGroupedId() != nil {
				x.Long(m.GetGroupedId().Value)
			}

			if m.GetReactions() != nil {
				x.Bytes(m.GetReactions().Encode(layer))
			}

			if m.GetRestrictionReason() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRestrictionReason())))
				for _, v := range m.GetRestrictionReason() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
		0x85d6cbe2: func() []byte {
			x.UInt(0x85d6cbe2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}
				if m.GetMentioned() == true {
					flags |= 1 << 4
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 5
				}
				if m.GetSilent() == true {
					flags |= 1 << 13
				}
				if m.GetPost() == true {
					flags |= 1 << 14
				}
				if m.GetFromScheduled() == true {
					flags |= 1 << 18
				}
				if m.GetLegacy() == true {
					flags |= 1 << 19
				}
				if m.GetEditHide() == true {
					flags |= 1 << 21
				}
				if m.GetPinned() == true {
					flags |= 1 << 24
				}
				if m.GetNoforwards() == true {
					flags |= 1 << 26
				}

				if m.GetFromId() != nil {
					flags |= 1 << 8
				}

				if m.GetFwdFrom() != nil {
					flags |= 1 << 2
				}
				if m.GetViaBotId() != nil {
					flags |= 1 << 11
				}
				if m.GetReplyTo() != nil {
					flags |= 1 << 3
				}

				if m.GetMedia() != nil {
					flags |= 1 << 9
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 6
				}
				if m.GetEntities() != nil {
					flags |= 1 << 7
				}
				if m.GetViews() != nil {
					flags |= 1 << 10
				}
				if m.GetForwards() != nil {
					flags |= 1 << 10
				}
				if m.GetReplies() != nil {
					flags |= 1 << 23
				}
				if m.GetEditDate() != nil {
					flags |= 1 << 15
				}
				if m.GetPostAuthor() != nil {
					flags |= 1 << 16
				}
				if m.GetGroupedId() != nil {
					flags |= 1 << 17
				}
				if m.GetRestrictionReason() != nil {
					flags |= 1 << 22
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			if m.GetFromId() != nil {
				x.Bytes(m.GetFromId().Encode(layer))
			}

			x.Bytes(m.GetPeerId().Encode(layer))
			if m.GetFwdFrom() != nil {
				x.Bytes(m.GetFwdFrom().Encode(layer))
			}

			if m.GetViaBotId() != nil {
				x.Long(m.GetViaBotId().Value)
			}

			if m.GetReplyTo() != nil {
				x.Bytes(m.GetReplyTo().Encode(layer))
			}

			x.Int(m.GetDate())
			x.String(m.GetMessage())
			if m.GetMedia() != nil {
				x.Bytes(m.GetMedia().Encode(layer))
			}

			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetViews() != nil {
				x.Int(m.GetViews().Value)
			}

			if m.GetForwards() != nil {
				x.Int(m.GetForwards().Value)
			}

			if m.GetReplies() != nil {
				x.Bytes(m.GetReplies().Encode(layer))
			}

			if m.GetEditDate() != nil {
				x.Int(m.GetEditDate().Value)
			}

			if m.GetPostAuthor() != nil {
				x.String(m.GetPostAuthor().Value)
			}

			if m.GetGroupedId() != nil {
				x.Long(m.GetGroupedId().Value)
			}

			if m.GetRestrictionReason() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRestrictionReason())))
				for _, v := range m.GetRestrictionReason() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_message, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_message, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x38116ee0: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetSilent(true)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetPost(true)
			}
			if (flags & (1 << 18)) != 0 {
				m.SetFromScheduled(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetLegacy(true)
			}
			if (flags & (1 << 21)) != 0 {
				m.SetEditHide(true)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 26)) != 0 {
				m.SetNoforwards(true)
			}
			m.SetId(dBuf.Int())
			if (flags & (1 << 8)) != 0 {
				m13 := &Peer{}
				m13.Decode(dBuf)
				m.SetFromId(m13)
			}

			m2 := &Peer{}
			m2.Decode(dBuf)
			m.SetPeerId(m2)

			if (flags & (1 << 2)) != 0 {
				m14 := &MessageFwdHeader{}
				m14.Decode(dBuf)
				m.SetFwdFrom(m14)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetViaBotId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m16 := &MessageReplyHeader{}
				m16.Decode(dBuf)
				m.SetReplyTo(m16)
			}
			m.SetDate(dBuf.Int())
			m.SetMessage(dBuf.String())
			if (flags & (1 << 9)) != 0 {
				m19 := &MessageMedia{}
				m19.Decode(dBuf)
				m.SetMedia(m19)
			}
			if (flags & (1 << 6)) != 0 {
				m20 := &ReplyMarkup{}
				m20.Decode(dBuf)
				m.SetReplyMarkup(m20)
			}
			if (flags & (1 << 7)) != 0 {
				c21 := dBuf.Int()
				if c21 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 21, c21)
					return dBuf.GetError()
				}
				l21 := dBuf.Int()
				v21 := make([]*MessageEntity, l21)
				for i := int32(0); i < l21; i++ {
					v21[i] = &MessageEntity{}
					v21[i].Decode(dBuf)
				}
				m.SetEntities(v21)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetViews(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 10)) != 0 {
				m.SetForwards(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 23)) != 0 {
				m24 := &MessageReplies{}
				m24.Decode(dBuf)
				m.SetReplies(m24)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetEditDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 16)) != 0 {
				m.SetPostAuthor(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetGroupedId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 20)) != 0 {
				m28 := &MessageReactions{}
				m28.Decode(dBuf)
				m.SetReactions(m28)
			}
			if (flags & (1 << 22)) != 0 {
				c29 := dBuf.Int()
				if c29 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 29, c29)
					return dBuf.GetError()
				}
				l29 := dBuf.Int()
				v29 := make([]*RestrictionReason, l29)
				for i := int32(0); i < l29; i++ {
					v29[i] = &RestrictionReason{}
					v29[i].Decode(dBuf)
				}
				m.SetRestrictionReason(v29)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
		0x85d6cbe2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetSilent(true)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetPost(true)
			}
			if (flags & (1 << 18)) != 0 {
				m.SetFromScheduled(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetLegacy(true)
			}
			if (flags & (1 << 21)) != 0 {
				m.SetEditHide(true)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 26)) != 0 {
				m.SetNoforwards(true)
			}
			m.SetId(dBuf.Int())
			if (flags & (1 << 8)) != 0 {
				m13 := &Peer{}
				m13.Decode(dBuf)
				m.SetFromId(m13)
			}

			m2 := &Peer{}
			m2.Decode(dBuf)
			m.SetPeerId(m2)

			if (flags & (1 << 2)) != 0 {
				m14 := &MessageFwdHeader{}
				m14.Decode(dBuf)
				m.SetFwdFrom(m14)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetViaBotId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m16 := &MessageReplyHeader{}
				m16.Decode(dBuf)
				m.SetReplyTo(m16)
			}
			m.SetDate(dBuf.Int())
			m.SetMessage(dBuf.String())
			if (flags & (1 << 9)) != 0 {
				m19 := &MessageMedia{}
				m19.Decode(dBuf)
				m.SetMedia(m19)
			}
			if (flags & (1 << 6)) != 0 {
				m20 := &ReplyMarkup{}
				m20.Decode(dBuf)
				m.SetReplyMarkup(m20)
			}
			if (flags & (1 << 7)) != 0 {
				c21 := dBuf.Int()
				if c21 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 21, c21)
					return dBuf.GetError()
				}
				l21 := dBuf.Int()
				v21 := make([]*MessageEntity, l21)
				for i := int32(0); i < l21; i++ {
					v21[i] = &MessageEntity{}
					v21[i].Decode(dBuf)
				}
				m.SetEntities(v21)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetViews(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 10)) != 0 {
				m.SetForwards(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 23)) != 0 {
				m24 := &MessageReplies{}
				m24.Decode(dBuf)
				m.SetReplies(m24)
			}
			if (flags & (1 << 15)) != 0 {
				m.SetEditDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 16)) != 0 {
				m.SetPostAuthor(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 17)) != 0 {
				m.SetGroupedId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 22)) != 0 {
				c29 := dBuf.Int()
				if c29 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 29, c29)
					return dBuf.GetError()
				}
				l29 := dBuf.Int()
				v29 := make([]*RestrictionReason, l29)
				for i := int32(0); i < l29; i++ {
					v29[i] = &RestrictionReason{}
					v29[i].Decode(dBuf)
				}
				m.SetRestrictionReason(v29)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageService
func MakeTLMessageService(data2 *Message) *TLMessageService {
	if data2 == nil {
		return &TLMessageService{Data2: &Message{
			PredicateName: Predicate_messageService,
		}}
	} else {
		data2.PredicateName = Predicate_messageService
		return &TLMessageService{Data2: data2}
	}
}

func (m *TLMessageService) To_Message() *Message {
	m.Data2.PredicateName = Predicate_messageService
	return m.Data2
}

//// flags
func (m *TLMessageService) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessageService) GetOut() bool  { return m.Data2.Out }

func (m *TLMessageService) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessageService) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLMessageService) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessageService) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLMessageService) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessageService) GetSilent() bool  { return m.Data2.Silent }

func (m *TLMessageService) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessageService) GetPost() bool  { return m.Data2.Post }

func (m *TLMessageService) SetLegacy(v bool) { m.Data2.Legacy = v }
func (m *TLMessageService) GetLegacy() bool  { return m.Data2.Legacy }

func (m *TLMessageService) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageService) GetId() int32  { return m.Data2.Id }

func (m *TLMessageService) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLMessageService) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLMessageService) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLMessageService) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLMessageService) SetReplyTo(v *MessageReplyHeader) { m.Data2.ReplyTo = v }
func (m *TLMessageService) GetReplyTo() *MessageReplyHeader  { return m.Data2.ReplyTo }

func (m *TLMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageService) GetDate() int32  { return m.Data2.Date }

func (m *TLMessageService) SetAction(v *MessageAction) { m.Data2.Action = v }
func (m *TLMessageService) GetAction() *MessageAction  { return m.Data2.Action }

func (m *TLMessageService) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLMessageService) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLMessageService) GetPredicateName() string {
	return Predicate_messageService
}

func (m *TLMessageService) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2b085862: func() []byte {
			x.UInt(0x2b085862)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}
				if m.GetMentioned() == true {
					flags |= 1 << 4
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 5
				}
				if m.GetSilent() == true {
					flags |= 1 << 13
				}
				if m.GetPost() == true {
					flags |= 1 << 14
				}
				if m.GetLegacy() == true {
					flags |= 1 << 19
				}

				if m.GetFromId() != nil {
					flags |= 1 << 8
				}

				if m.GetReplyTo() != nil {
					flags |= 1 << 3
				}

				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			if m.GetFromId() != nil {
				x.Bytes(m.GetFromId().Encode(layer))
			}

			x.Bytes(m.GetPeerId().Encode(layer))
			if m.GetReplyTo() != nil {
				x.Bytes(m.GetReplyTo().Encode(layer))
			}

			x.Int(m.GetDate())
			x.Bytes(m.GetAction().Encode(layer))
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageService, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageService, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageService) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageService) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2b085862: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetSilent(true)
			}
			if (flags & (1 << 14)) != 0 {
				m.SetPost(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetLegacy(true)
			}
			m.SetId(dBuf.Int())
			if (flags & (1 << 8)) != 0 {
				m13 := &Peer{}
				m13.Decode(dBuf)
				m.SetFromId(m13)
			}

			m2 := &Peer{}
			m2.Decode(dBuf)
			m.SetPeerId(m2)

			if (flags & (1 << 3)) != 0 {
				m16 := &MessageReplyHeader{}
				m16.Decode(dBuf)
				m.SetReplyTo(m16)
			}
			m.SetDate(dBuf.Int())

			m31 := &MessageAction{}
			m31.Decode(dBuf)
			m.SetAction(m31)

			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageService) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GeoPoint <--
//  + TL_GeoPointEmpty
//  + TL_GeoPoint
//

func (m *GeoPoint) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_geoPointEmpty:
		t := m.To_GeoPointEmpty()
		xBuf = t.Encode(layer)
	case Predicate_geoPoint:
		t := m.To_GeoPoint()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GeoPoint) CalcByteSize(layer int32) int {
	return 0
}

func (m *GeoPoint) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1117dd5f:
		m2 := MakeTLGeoPointEmpty(m)
		m2.Decode(dBuf)
	case 0xb2a2f663:
		m2 := MakeTLGeoPoint(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GeoPoint) DebugString() string {
	switch m.PredicateName {
	case Predicate_geoPointEmpty:
		t := m.To_GeoPointEmpty()
		return t.DebugString()
	case Predicate_geoPoint:
		t := m.To_GeoPoint()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GeoPointEmpty
func (m *GeoPoint) To_GeoPointEmpty() *TLGeoPointEmpty {
	m.PredicateName = Predicate_geoPointEmpty
	return &TLGeoPointEmpty{
		Data2: m,
	}
}

// To_GeoPoint
func (m *GeoPoint) To_GeoPoint() *TLGeoPoint {
	m.PredicateName = Predicate_geoPoint
	return &TLGeoPoint{
		Data2: m,
	}
}

// MakeTLGeoPointEmpty
func MakeTLGeoPointEmpty(data2 *GeoPoint) *TLGeoPointEmpty {
	if data2 == nil {
		return &TLGeoPointEmpty{Data2: &GeoPoint{
			PredicateName: Predicate_geoPointEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_geoPointEmpty
		return &TLGeoPointEmpty{Data2: data2}
	}
}

func (m *TLGeoPointEmpty) To_GeoPoint() *GeoPoint {
	m.Data2.PredicateName = Predicate_geoPointEmpty
	return m.Data2
}

func (m *TLGeoPointEmpty) GetPredicateName() string {
	return Predicate_geoPointEmpty
}

func (m *TLGeoPointEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1117dd5f: func() []byte {
			x.UInt(0x1117dd5f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_geoPointEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_geoPointEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGeoPointEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGeoPointEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1117dd5f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGeoPointEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLGeoPoint
func MakeTLGeoPoint(data2 *GeoPoint) *TLGeoPoint {
	if data2 == nil {
		return &TLGeoPoint{Data2: &GeoPoint{
			PredicateName: Predicate_geoPoint,
		}}
	} else {
		data2.PredicateName = Predicate_geoPoint
		return &TLGeoPoint{Data2: data2}
	}
}

func (m *TLGeoPoint) To_GeoPoint() *GeoPoint {
	m.Data2.PredicateName = Predicate_geoPoint
	return m.Data2
}

//// flags
func (m *TLGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLGeoPoint) GetLong() float64  { return m.Data2.Long }

func (m *TLGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLGeoPoint) GetLat() float64  { return m.Data2.Lat }

func (m *TLGeoPoint) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGeoPoint) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLGeoPoint) SetAccuracyRadius(v *types.Int32Value) { m.Data2.AccuracyRadius = v }
func (m *TLGeoPoint) GetAccuracyRadius() *types.Int32Value  { return m.Data2.AccuracyRadius }

func (m *TLGeoPoint) GetPredicateName() string {
	return Predicate_geoPoint
}

func (m *TLGeoPoint) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb2a2f663: func() []byte {
			x.UInt(0xb2a2f663)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAccuracyRadius() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Double(m.GetLong())
			x.Double(m.GetLat())
			x.Long(m.GetAccessHash())
			if m.GetAccuracyRadius() != nil {
				x.Int(m.GetAccuracyRadius().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_geoPoint, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_geoPoint, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGeoPoint) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGeoPoint) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb2a2f663: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetLong(dBuf.Double())
			m.SetLat(dBuf.Double())
			m.SetAccessHash(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetAccuracyRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGeoPoint) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ReplyMarkup <--
//  + TL_ReplyKeyboardHide
//  + TL_ReplyKeyboardForceReply
//  + TL_ReplyKeyboardMarkup
//  + TL_ReplyInlineMarkup
//

func (m *ReplyMarkup) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_replyKeyboardHide:
		t := m.To_ReplyKeyboardHide()
		xBuf = t.Encode(layer)
	case Predicate_replyKeyboardForceReply:
		t := m.To_ReplyKeyboardForceReply()
		xBuf = t.Encode(layer)
	case Predicate_replyKeyboardMarkup:
		t := m.To_ReplyKeyboardMarkup()
		xBuf = t.Encode(layer)
	case Predicate_replyInlineMarkup:
		t := m.To_ReplyInlineMarkup()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ReplyMarkup) CalcByteSize(layer int32) int {
	return 0
}

func (m *ReplyMarkup) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa03e5b85:
		m2 := MakeTLReplyKeyboardHide(m)
		m2.Decode(dBuf)
	case 0x86b40b08:
		m2 := MakeTLReplyKeyboardForceReply(m)
		m2.Decode(dBuf)
	case 0x85dd99d1:
		m2 := MakeTLReplyKeyboardMarkup(m)
		m2.Decode(dBuf)
	case 0x48a30254:
		m2 := MakeTLReplyInlineMarkup(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ReplyMarkup) DebugString() string {
	switch m.PredicateName {
	case Predicate_replyKeyboardHide:
		t := m.To_ReplyKeyboardHide()
		return t.DebugString()
	case Predicate_replyKeyboardForceReply:
		t := m.To_ReplyKeyboardForceReply()
		return t.DebugString()
	case Predicate_replyKeyboardMarkup:
		t := m.To_ReplyKeyboardMarkup()
		return t.DebugString()
	case Predicate_replyInlineMarkup:
		t := m.To_ReplyInlineMarkup()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ReplyKeyboardHide
func (m *ReplyMarkup) To_ReplyKeyboardHide() *TLReplyKeyboardHide {
	m.PredicateName = Predicate_replyKeyboardHide
	return &TLReplyKeyboardHide{
		Data2: m,
	}
}

// To_ReplyKeyboardForceReply
func (m *ReplyMarkup) To_ReplyKeyboardForceReply() *TLReplyKeyboardForceReply {
	m.PredicateName = Predicate_replyKeyboardForceReply
	return &TLReplyKeyboardForceReply{
		Data2: m,
	}
}

// To_ReplyKeyboardMarkup
func (m *ReplyMarkup) To_ReplyKeyboardMarkup() *TLReplyKeyboardMarkup {
	m.PredicateName = Predicate_replyKeyboardMarkup
	return &TLReplyKeyboardMarkup{
		Data2: m,
	}
}

// To_ReplyInlineMarkup
func (m *ReplyMarkup) To_ReplyInlineMarkup() *TLReplyInlineMarkup {
	m.PredicateName = Predicate_replyInlineMarkup
	return &TLReplyInlineMarkup{
		Data2: m,
	}
}

// MakeTLReplyKeyboardHide
func MakeTLReplyKeyboardHide(data2 *ReplyMarkup) *TLReplyKeyboardHide {
	if data2 == nil {
		return &TLReplyKeyboardHide{Data2: &ReplyMarkup{
			PredicateName: Predicate_replyKeyboardHide,
		}}
	} else {
		data2.PredicateName = Predicate_replyKeyboardHide
		return &TLReplyKeyboardHide{Data2: data2}
	}
}

func (m *TLReplyKeyboardHide) To_ReplyMarkup() *ReplyMarkup {
	m.Data2.PredicateName = Predicate_replyKeyboardHide
	return m.Data2
}

//// flags
func (m *TLReplyKeyboardHide) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardHide) GetSelective() bool  { return m.Data2.Selective }

func (m *TLReplyKeyboardHide) GetPredicateName() string {
	return Predicate_replyKeyboardHide
}

func (m *TLReplyKeyboardHide) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa03e5b85: func() []byte {
			x.UInt(0xa03e5b85)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSelective() == true {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_replyKeyboardHide, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_replyKeyboardHide, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReplyKeyboardHide) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReplyKeyboardHide) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa03e5b85: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetSelective(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReplyKeyboardHide) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLReplyKeyboardForceReply
func MakeTLReplyKeyboardForceReply(data2 *ReplyMarkup) *TLReplyKeyboardForceReply {
	if data2 == nil {
		return &TLReplyKeyboardForceReply{Data2: &ReplyMarkup{
			PredicateName: Predicate_replyKeyboardForceReply,
		}}
	} else {
		data2.PredicateName = Predicate_replyKeyboardForceReply
		return &TLReplyKeyboardForceReply{Data2: data2}
	}
}

func (m *TLReplyKeyboardForceReply) To_ReplyMarkup() *ReplyMarkup {
	m.Data2.PredicateName = Predicate_replyKeyboardForceReply
	return m.Data2
}

//// flags
func (m *TLReplyKeyboardForceReply) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardForceReply) GetSingleUse() bool  { return m.Data2.SingleUse }

func (m *TLReplyKeyboardForceReply) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardForceReply) GetSelective() bool  { return m.Data2.Selective }

func (m *TLReplyKeyboardForceReply) SetPlaceholder(v *types.StringValue) { m.Data2.Placeholder = v }
func (m *TLReplyKeyboardForceReply) GetPlaceholder() *types.StringValue  { return m.Data2.Placeholder }

func (m *TLReplyKeyboardForceReply) GetPredicateName() string {
	return Predicate_replyKeyboardForceReply
}

func (m *TLReplyKeyboardForceReply) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x86b40b08: func() []byte {
			x.UInt(0x86b40b08)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetSingleUse() == true {
					flags |= 1 << 1
				}
				if m.GetSelective() == true {
					flags |= 1 << 2
				}
				if m.GetPlaceholder() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetPlaceholder() != nil {
				x.String(m.GetPlaceholder().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_replyKeyboardForceReply, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_replyKeyboardForceReply, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReplyKeyboardForceReply) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReplyKeyboardForceReply) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x86b40b08: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetSingleUse(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetSelective(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetPlaceholder(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReplyKeyboardForceReply) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLReplyKeyboardMarkup
func MakeTLReplyKeyboardMarkup(data2 *ReplyMarkup) *TLReplyKeyboardMarkup {
	if data2 == nil {
		return &TLReplyKeyboardMarkup{Data2: &ReplyMarkup{
			PredicateName: Predicate_replyKeyboardMarkup,
		}}
	} else {
		data2.PredicateName = Predicate_replyKeyboardMarkup
		return &TLReplyKeyboardMarkup{Data2: data2}
	}
}

func (m *TLReplyKeyboardMarkup) To_ReplyMarkup() *ReplyMarkup {
	m.Data2.PredicateName = Predicate_replyKeyboardMarkup
	return m.Data2
}

//// flags
func (m *TLReplyKeyboardMarkup) SetResize(v bool) { m.Data2.Resize = v }
func (m *TLReplyKeyboardMarkup) GetResize() bool  { return m.Data2.Resize }

func (m *TLReplyKeyboardMarkup) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardMarkup) GetSingleUse() bool  { return m.Data2.SingleUse }

func (m *TLReplyKeyboardMarkup) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardMarkup) GetSelective() bool  { return m.Data2.Selective }

func (m *TLReplyKeyboardMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyKeyboardMarkup) GetRows() []*KeyboardButtonRow  { return m.Data2.Rows }

func (m *TLReplyKeyboardMarkup) SetPlaceholder(v *types.StringValue) { m.Data2.Placeholder = v }
func (m *TLReplyKeyboardMarkup) GetPlaceholder() *types.StringValue  { return m.Data2.Placeholder }

func (m *TLReplyKeyboardMarkup) GetPredicateName() string {
	return Predicate_replyKeyboardMarkup
}

func (m *TLReplyKeyboardMarkup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x85dd99d1: func() []byte {
			x.UInt(0x85dd99d1)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetResize() == true {
					flags |= 1 << 0
				}
				if m.GetSingleUse() == true {
					flags |= 1 << 1
				}
				if m.GetSelective() == true {
					flags |= 1 << 2
				}

				if m.GetPlaceholder() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRows())))
			for _, v := range m.GetRows() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetPlaceholder() != nil {
				x.String(m.GetPlaceholder().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_replyKeyboardMarkup, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_replyKeyboardMarkup, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReplyKeyboardMarkup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReplyKeyboardMarkup) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x85dd99d1: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetResize(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSingleUse(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetSelective(true)
			}
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*KeyboardButtonRow, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &KeyboardButtonRow{}
				v5[i].Decode(dBuf)
			}
			m.SetRows(v5)

			if (flags & (1 << 3)) != 0 {
				m.SetPlaceholder(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReplyKeyboardMarkup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLReplyInlineMarkup
func MakeTLReplyInlineMarkup(data2 *ReplyMarkup) *TLReplyInlineMarkup {
	if data2 == nil {
		return &TLReplyInlineMarkup{Data2: &ReplyMarkup{
			PredicateName: Predicate_replyInlineMarkup,
		}}
	} else {
		data2.PredicateName = Predicate_replyInlineMarkup
		return &TLReplyInlineMarkup{Data2: data2}
	}
}

func (m *TLReplyInlineMarkup) To_ReplyMarkup() *ReplyMarkup {
	m.Data2.PredicateName = Predicate_replyInlineMarkup
	return m.Data2
}

func (m *TLReplyInlineMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyInlineMarkup) GetRows() []*KeyboardButtonRow  { return m.Data2.Rows }

func (m *TLReplyInlineMarkup) GetPredicateName() string {
	return Predicate_replyInlineMarkup
}

func (m *TLReplyInlineMarkup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x48a30254: func() []byte {
			x.UInt(0x48a30254)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRows())))
			for _, v := range m.GetRows() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_replyInlineMarkup, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_replyInlineMarkup, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLReplyInlineMarkup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReplyInlineMarkup) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x48a30254: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*KeyboardButtonRow, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &KeyboardButtonRow{}
				v5[i].Decode(dBuf)
			}
			m.SetRows(v5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLReplyInlineMarkup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// LabeledPrice <--
//  + TL_LabeledPrice
//

func (m *LabeledPrice) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_labeledPrice:
		t := m.To_LabeledPrice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *LabeledPrice) CalcByteSize(layer int32) int {
	return 0
}

func (m *LabeledPrice) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcb296bf8:
		m2 := MakeTLLabeledPrice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *LabeledPrice) DebugString() string {
	switch m.PredicateName {
	case Predicate_labeledPrice:
		t := m.To_LabeledPrice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_LabeledPrice
func (m *LabeledPrice) To_LabeledPrice() *TLLabeledPrice {
	m.PredicateName = Predicate_labeledPrice
	return &TLLabeledPrice{
		Data2: m,
	}
}

// MakeTLLabeledPrice
func MakeTLLabeledPrice(data2 *LabeledPrice) *TLLabeledPrice {
	if data2 == nil {
		return &TLLabeledPrice{Data2: &LabeledPrice{
			PredicateName: Predicate_labeledPrice,
		}}
	} else {
		data2.PredicateName = Predicate_labeledPrice
		return &TLLabeledPrice{Data2: data2}
	}
}

func (m *TLLabeledPrice) To_LabeledPrice() *LabeledPrice {
	m.Data2.PredicateName = Predicate_labeledPrice
	return m.Data2
}

func (m *TLLabeledPrice) SetLabel(v string) { m.Data2.Label = v }
func (m *TLLabeledPrice) GetLabel() string  { return m.Data2.Label }

func (m *TLLabeledPrice) SetAmount(v int64) { m.Data2.Amount = v }
func (m *TLLabeledPrice) GetAmount() int64  { return m.Data2.Amount }

func (m *TLLabeledPrice) GetPredicateName() string {
	return Predicate_labeledPrice
}

func (m *TLLabeledPrice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcb296bf8: func() []byte {
			x.UInt(0xcb296bf8)

			x.String(m.GetLabel())
			x.Long(m.GetAmount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_labeledPrice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_labeledPrice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLLabeledPrice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLabeledPrice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcb296bf8: func() error {
			m.SetLabel(dBuf.String())
			m.SetAmount(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLLabeledPrice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PostAddress <--
//  + TL_PostAddress
//

func (m *PostAddress) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_postAddress:
		t := m.To_PostAddress()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PostAddress) CalcByteSize(layer int32) int {
	return 0
}

func (m *PostAddress) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1e8caaeb:
		m2 := MakeTLPostAddress(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PostAddress) DebugString() string {
	switch m.PredicateName {
	case Predicate_postAddress:
		t := m.To_PostAddress()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PostAddress
func (m *PostAddress) To_PostAddress() *TLPostAddress {
	m.PredicateName = Predicate_postAddress
	return &TLPostAddress{
		Data2: m,
	}
}

// MakeTLPostAddress
func MakeTLPostAddress(data2 *PostAddress) *TLPostAddress {
	if data2 == nil {
		return &TLPostAddress{Data2: &PostAddress{
			PredicateName: Predicate_postAddress,
		}}
	} else {
		data2.PredicateName = Predicate_postAddress
		return &TLPostAddress{Data2: data2}
	}
}

func (m *TLPostAddress) To_PostAddress() *PostAddress {
	m.Data2.PredicateName = Predicate_postAddress
	return m.Data2
}

func (m *TLPostAddress) SetStreetLine1(v string) { m.Data2.StreetLine1 = v }
func (m *TLPostAddress) GetStreetLine1() string  { return m.Data2.StreetLine1 }

func (m *TLPostAddress) SetStreetLine2(v string) { m.Data2.StreetLine2 = v }
func (m *TLPostAddress) GetStreetLine2() string  { return m.Data2.StreetLine2 }

func (m *TLPostAddress) SetCity(v string) { m.Data2.City = v }
func (m *TLPostAddress) GetCity() string  { return m.Data2.City }

func (m *TLPostAddress) SetState(v string) { m.Data2.State = v }
func (m *TLPostAddress) GetState() string  { return m.Data2.State }

func (m *TLPostAddress) SetCountryIso2(v string) { m.Data2.CountryIso2 = v }
func (m *TLPostAddress) GetCountryIso2() string  { return m.Data2.CountryIso2 }

func (m *TLPostAddress) SetPostCode(v string) { m.Data2.PostCode = v }
func (m *TLPostAddress) GetPostCode() string  { return m.Data2.PostCode }

func (m *TLPostAddress) GetPredicateName() string {
	return Predicate_postAddress
}

func (m *TLPostAddress) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e8caaeb: func() []byte {
			x.UInt(0x1e8caaeb)

			x.String(m.GetStreetLine1())
			x.String(m.GetStreetLine2())
			x.String(m.GetCity())
			x.String(m.GetState())
			x.String(m.GetCountryIso2())
			x.String(m.GetPostCode())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_postAddress, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_postAddress, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPostAddress) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPostAddress) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e8caaeb: func() error {
			m.SetStreetLine1(dBuf.String())
			m.SetStreetLine2(dBuf.String())
			m.SetCity(dBuf.String())
			m.SetState(dBuf.String())
			m.SetCountryIso2(dBuf.String())
			m.SetPostCode(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPostAddress) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureCredentialsEncrypted <--
//  + TL_SecureCredentialsEncrypted
//

func (m *SecureCredentialsEncrypted) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureCredentialsEncrypted:
		t := m.To_SecureCredentialsEncrypted()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureCredentialsEncrypted) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureCredentialsEncrypted) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x33f0ea47:
		m2 := MakeTLSecureCredentialsEncrypted(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureCredentialsEncrypted) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureCredentialsEncrypted:
		t := m.To_SecureCredentialsEncrypted()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureCredentialsEncrypted
func (m *SecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *TLSecureCredentialsEncrypted {
	m.PredicateName = Predicate_secureCredentialsEncrypted
	return &TLSecureCredentialsEncrypted{
		Data2: m,
	}
}

// MakeTLSecureCredentialsEncrypted
func MakeTLSecureCredentialsEncrypted(data2 *SecureCredentialsEncrypted) *TLSecureCredentialsEncrypted {
	if data2 == nil {
		return &TLSecureCredentialsEncrypted{Data2: &SecureCredentialsEncrypted{
			PredicateName: Predicate_secureCredentialsEncrypted,
		}}
	} else {
		data2.PredicateName = Predicate_secureCredentialsEncrypted
		return &TLSecureCredentialsEncrypted{Data2: data2}
	}
}

func (m *TLSecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *SecureCredentialsEncrypted {
	m.Data2.PredicateName = Predicate_secureCredentialsEncrypted
	return m.Data2
}

func (m *TLSecureCredentialsEncrypted) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureCredentialsEncrypted) GetData() []byte  { return m.Data2.Data }

func (m *TLSecureCredentialsEncrypted) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureCredentialsEncrypted) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureCredentialsEncrypted) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureCredentialsEncrypted) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLSecureCredentialsEncrypted) GetPredicateName() string {
	return Predicate_secureCredentialsEncrypted
}

func (m *TLSecureCredentialsEncrypted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x33f0ea47: func() []byte {
			x.UInt(0x33f0ea47)

			x.StringBytes(m.GetData())
			x.StringBytes(m.GetHash())
			x.StringBytes(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureCredentialsEncrypted, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureCredentialsEncrypted, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureCredentialsEncrypted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureCredentialsEncrypted) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x33f0ea47: func() error {
			m.SetData(dBuf.StringBytes())
			m.SetHash(dBuf.StringBytes())
			m.SetSecret(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureCredentialsEncrypted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Stickers_SuggestedShortName <--
//  + TL_StickersSuggestedShortName
//

func (m *Stickers_SuggestedShortName) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stickers_suggestedShortName:
		t := m.To_StickersSuggestedShortName()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Stickers_SuggestedShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *Stickers_SuggestedShortName) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x85fea03f:
		m2 := MakeTLStickersSuggestedShortName(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Stickers_SuggestedShortName) DebugString() string {
	switch m.PredicateName {
	case Predicate_stickers_suggestedShortName:
		t := m.To_StickersSuggestedShortName()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StickersSuggestedShortName
func (m *Stickers_SuggestedShortName) To_StickersSuggestedShortName() *TLStickersSuggestedShortName {
	m.PredicateName = Predicate_stickers_suggestedShortName
	return &TLStickersSuggestedShortName{
		Data2: m,
	}
}

// MakeTLStickersSuggestedShortName
func MakeTLStickersSuggestedShortName(data2 *Stickers_SuggestedShortName) *TLStickersSuggestedShortName {
	if data2 == nil {
		return &TLStickersSuggestedShortName{Data2: &Stickers_SuggestedShortName{
			PredicateName: Predicate_stickers_suggestedShortName,
		}}
	} else {
		data2.PredicateName = Predicate_stickers_suggestedShortName
		return &TLStickersSuggestedShortName{Data2: data2}
	}
}

func (m *TLStickersSuggestedShortName) To_Stickers_SuggestedShortName() *Stickers_SuggestedShortName {
	m.Data2.PredicateName = Predicate_stickers_suggestedShortName
	return m.Data2
}

func (m *TLStickersSuggestedShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLStickersSuggestedShortName) GetShortName() string  { return m.Data2.ShortName }

func (m *TLStickersSuggestedShortName) GetPredicateName() string {
	return Predicate_stickers_suggestedShortName
}

func (m *TLStickersSuggestedShortName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x85fea03f: func() []byte {
			x.UInt(0x85fea03f)

			x.String(m.GetShortName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stickers_suggestedShortName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stickers_suggestedShortName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStickersSuggestedShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersSuggestedShortName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x85fea03f: func() error {
			m.SetShortName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStickersSuggestedShortName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// CdnConfig <--
//  + TL_CdnConfig
//

func (m *CdnConfig) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_cdnConfig:
		t := m.To_CdnConfig()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *CdnConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *CdnConfig) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5725e40a:
		m2 := MakeTLCdnConfig(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *CdnConfig) DebugString() string {
	switch m.PredicateName {
	case Predicate_cdnConfig:
		t := m.To_CdnConfig()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_CdnConfig
func (m *CdnConfig) To_CdnConfig() *TLCdnConfig {
	m.PredicateName = Predicate_cdnConfig
	return &TLCdnConfig{
		Data2: m,
	}
}

// MakeTLCdnConfig
func MakeTLCdnConfig(data2 *CdnConfig) *TLCdnConfig {
	if data2 == nil {
		return &TLCdnConfig{Data2: &CdnConfig{
			PredicateName: Predicate_cdnConfig,
		}}
	} else {
		data2.PredicateName = Predicate_cdnConfig
		return &TLCdnConfig{Data2: data2}
	}
}

func (m *TLCdnConfig) To_CdnConfig() *CdnConfig {
	m.Data2.PredicateName = Predicate_cdnConfig
	return m.Data2
}

func (m *TLCdnConfig) SetPublicKeys(v []*CdnPublicKey) { m.Data2.PublicKeys = v }
func (m *TLCdnConfig) GetPublicKeys() []*CdnPublicKey  { return m.Data2.PublicKeys }

func (m *TLCdnConfig) GetPredicateName() string {
	return Predicate_cdnConfig
}

func (m *TLCdnConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5725e40a: func() []byte {
			x.UInt(0x5725e40a)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPublicKeys())))
			for _, v := range m.GetPublicKeys() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_cdnConfig, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_cdnConfig, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLCdnConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLCdnConfig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5725e40a: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*CdnPublicKey, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &CdnPublicKey{}
				v0[i].Decode(dBuf)
			}
			m.SetPublicKeys(v0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLCdnConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_SentCode <--
//  + TL_AuthSentCode
//

func (m *Auth_SentCode) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_sentCode:
		t := m.To_AuthSentCode()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_SentCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_SentCode) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5e002502:
		m2 := MakeTLAuthSentCode(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_SentCode) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_sentCode:
		t := m.To_AuthSentCode()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthSentCode
func (m *Auth_SentCode) To_AuthSentCode() *TLAuthSentCode {
	m.PredicateName = Predicate_auth_sentCode
	return &TLAuthSentCode{
		Data2: m,
	}
}

// MakeTLAuthSentCode
func MakeTLAuthSentCode(data2 *Auth_SentCode) *TLAuthSentCode {
	if data2 == nil {
		return &TLAuthSentCode{Data2: &Auth_SentCode{
			PredicateName: Predicate_auth_sentCode,
		}}
	} else {
		data2.PredicateName = Predicate_auth_sentCode
		return &TLAuthSentCode{Data2: data2}
	}
}

func (m *TLAuthSentCode) To_Auth_SentCode() *Auth_SentCode {
	m.Data2.PredicateName = Predicate_auth_sentCode
	return m.Data2
}

//// flags
func (m *TLAuthSentCode) SetType(v *Auth_SentCodeType) { m.Data2.Type = v }
func (m *TLAuthSentCode) GetType() *Auth_SentCodeType  { return m.Data2.Type }

func (m *TLAuthSentCode) SetPhoneCodeHash(v string) { m.Data2.PhoneCodeHash = v }
func (m *TLAuthSentCode) GetPhoneCodeHash() string  { return m.Data2.PhoneCodeHash }

func (m *TLAuthSentCode) SetNextType(v *Auth_CodeType) { m.Data2.NextType = v }
func (m *TLAuthSentCode) GetNextType() *Auth_CodeType  { return m.Data2.NextType }

func (m *TLAuthSentCode) SetTimeout(v *types.Int32Value) { m.Data2.Timeout = v }
func (m *TLAuthSentCode) GetTimeout() *types.Int32Value  { return m.Data2.Timeout }

func (m *TLAuthSentCode) GetPredicateName() string {
	return Predicate_auth_sentCode
}

func (m *TLAuthSentCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5e002502: func() []byte {
			x.UInt(0x5e002502)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNextType() != nil {
					flags |= 1 << 1
				}
				if m.GetTimeout() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetType().Encode(layer))
			x.String(m.GetPhoneCodeHash())
			if m.GetNextType() != nil {
				x.Bytes(m.GetNextType().Encode(layer))
			}

			if m.GetTimeout() != nil {
				x.Int(m.GetTimeout().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_sentCode, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_sentCode, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthSentCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSentCode) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5e002502: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &Auth_SentCodeType{}
			m1.Decode(dBuf)
			m.SetType(m1)

			m.SetPhoneCodeHash(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m3 := &Auth_CodeType{}
				m3.Decode(dBuf)
				m.SetNextType(m3)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTimeout(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthSentCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputEncryptedFile <--
//  + TL_InputEncryptedFileEmpty
//  + TL_InputEncryptedFileUploaded
//  + TL_InputEncryptedFile
//  + TL_InputEncryptedFileBigUploaded
//

func (m *InputEncryptedFile) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputEncryptedFileEmpty:
		t := m.To_InputEncryptedFileEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputEncryptedFileUploaded:
		t := m.To_InputEncryptedFileUploaded()
		xBuf = t.Encode(layer)
	case Predicate_inputEncryptedFile:
		t := m.To_InputEncryptedFile()
		xBuf = t.Encode(layer)
	case Predicate_inputEncryptedFileBigUploaded:
		t := m.To_InputEncryptedFileBigUploaded()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputEncryptedFile) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1837c364:
		m2 := MakeTLInputEncryptedFileEmpty(m)
		m2.Decode(dBuf)
	case 0x64bd0306:
		m2 := MakeTLInputEncryptedFileUploaded(m)
		m2.Decode(dBuf)
	case 0x5a17b5e5:
		m2 := MakeTLInputEncryptedFile(m)
		m2.Decode(dBuf)
	case 0x2dc173c8:
		m2 := MakeTLInputEncryptedFileBigUploaded(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputEncryptedFile) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputEncryptedFileEmpty:
		t := m.To_InputEncryptedFileEmpty()
		return t.DebugString()
	case Predicate_inputEncryptedFileUploaded:
		t := m.To_InputEncryptedFileUploaded()
		return t.DebugString()
	case Predicate_inputEncryptedFile:
		t := m.To_InputEncryptedFile()
		return t.DebugString()
	case Predicate_inputEncryptedFileBigUploaded:
		t := m.To_InputEncryptedFileBigUploaded()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputEncryptedFileEmpty
func (m *InputEncryptedFile) To_InputEncryptedFileEmpty() *TLInputEncryptedFileEmpty {
	m.PredicateName = Predicate_inputEncryptedFileEmpty
	return &TLInputEncryptedFileEmpty{
		Data2: m,
	}
}

// To_InputEncryptedFileUploaded
func (m *InputEncryptedFile) To_InputEncryptedFileUploaded() *TLInputEncryptedFileUploaded {
	m.PredicateName = Predicate_inputEncryptedFileUploaded
	return &TLInputEncryptedFileUploaded{
		Data2: m,
	}
}

// To_InputEncryptedFile
func (m *InputEncryptedFile) To_InputEncryptedFile() *TLInputEncryptedFile {
	m.PredicateName = Predicate_inputEncryptedFile
	return &TLInputEncryptedFile{
		Data2: m,
	}
}

// To_InputEncryptedFileBigUploaded
func (m *InputEncryptedFile) To_InputEncryptedFileBigUploaded() *TLInputEncryptedFileBigUploaded {
	m.PredicateName = Predicate_inputEncryptedFileBigUploaded
	return &TLInputEncryptedFileBigUploaded{
		Data2: m,
	}
}

// MakeTLInputEncryptedFileEmpty
func MakeTLInputEncryptedFileEmpty(data2 *InputEncryptedFile) *TLInputEncryptedFileEmpty {
	if data2 == nil {
		return &TLInputEncryptedFileEmpty{Data2: &InputEncryptedFile{
			PredicateName: Predicate_inputEncryptedFileEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedFileEmpty
		return &TLInputEncryptedFileEmpty{Data2: data2}
	}
}

func (m *TLInputEncryptedFileEmpty) To_InputEncryptedFile() *InputEncryptedFile {
	m.Data2.PredicateName = Predicate_inputEncryptedFileEmpty
	return m.Data2
}

func (m *TLInputEncryptedFileEmpty) GetPredicateName() string {
	return Predicate_inputEncryptedFileEmpty
}

func (m *TLInputEncryptedFileEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1837c364: func() []byte {
			x.UInt(0x1837c364)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedFileEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedFileEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedFileEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedFileEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1837c364: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedFileEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputEncryptedFileUploaded
func MakeTLInputEncryptedFileUploaded(data2 *InputEncryptedFile) *TLInputEncryptedFileUploaded {
	if data2 == nil {
		return &TLInputEncryptedFileUploaded{Data2: &InputEncryptedFile{
			PredicateName: Predicate_inputEncryptedFileUploaded,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedFileUploaded
		return &TLInputEncryptedFileUploaded{Data2: data2}
	}
}

func (m *TLInputEncryptedFileUploaded) To_InputEncryptedFile() *InputEncryptedFile {
	m.Data2.PredicateName = Predicate_inputEncryptedFileUploaded
	return m.Data2
}

func (m *TLInputEncryptedFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputEncryptedFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputEncryptedFileUploaded) GetMd5Checksum() string  { return m.Data2.Md5Checksum }

func (m *TLInputEncryptedFileUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileUploaded) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func (m *TLInputEncryptedFileUploaded) GetPredicateName() string {
	return Predicate_inputEncryptedFileUploaded
}

func (m *TLInputEncryptedFileUploaded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x64bd0306: func() []byte {
			x.UInt(0x64bd0306)

			x.Long(m.GetId())
			x.Int(m.GetParts())
			x.String(m.GetMd5Checksum())
			x.Int(m.GetKeyFingerprint())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedFileUploaded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedFileUploaded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedFileUploaded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedFileUploaded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x64bd0306: func() error {
			m.SetId(dBuf.Long())
			m.SetParts(dBuf.Int())
			m.SetMd5Checksum(dBuf.String())
			m.SetKeyFingerprint(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedFileUploaded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputEncryptedFile
func MakeTLInputEncryptedFile(data2 *InputEncryptedFile) *TLInputEncryptedFile {
	if data2 == nil {
		return &TLInputEncryptedFile{Data2: &InputEncryptedFile{
			PredicateName: Predicate_inputEncryptedFile,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedFile
		return &TLInputEncryptedFile{Data2: data2}
	}
}

func (m *TLInputEncryptedFile) To_InputEncryptedFile() *InputEncryptedFile {
	m.Data2.PredicateName = Predicate_inputEncryptedFile
	return m.Data2
}

func (m *TLInputEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFile) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFile) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputEncryptedFile) GetPredicateName() string {
	return Predicate_inputEncryptedFile
}

func (m *TLInputEncryptedFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5a17b5e5: func() []byte {
			x.UInt(0x5a17b5e5)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5a17b5e5: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputEncryptedFileBigUploaded
func MakeTLInputEncryptedFileBigUploaded(data2 *InputEncryptedFile) *TLInputEncryptedFileBigUploaded {
	if data2 == nil {
		return &TLInputEncryptedFileBigUploaded{Data2: &InputEncryptedFile{
			PredicateName: Predicate_inputEncryptedFileBigUploaded,
		}}
	} else {
		data2.PredicateName = Predicate_inputEncryptedFileBigUploaded
		return &TLInputEncryptedFileBigUploaded{Data2: data2}
	}
}

func (m *TLInputEncryptedFileBigUploaded) To_InputEncryptedFile() *InputEncryptedFile {
	m.Data2.PredicateName = Predicate_inputEncryptedFileBigUploaded
	return m.Data2
}

func (m *TLInputEncryptedFileBigUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileBigUploaded) GetId() int64  { return m.Data2.Id }

func (m *TLInputEncryptedFileBigUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileBigUploaded) GetParts() int32  { return m.Data2.Parts }

func (m *TLInputEncryptedFileBigUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileBigUploaded) GetKeyFingerprint() int32  { return m.Data2.KeyFingerprint }

func (m *TLInputEncryptedFileBigUploaded) GetPredicateName() string {
	return Predicate_inputEncryptedFileBigUploaded
}

func (m *TLInputEncryptedFileBigUploaded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2dc173c8: func() []byte {
			x.UInt(0x2dc173c8)

			x.Long(m.GetId())
			x.Int(m.GetParts())
			x.Int(m.GetKeyFingerprint())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputEncryptedFileBigUploaded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputEncryptedFileBigUploaded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputEncryptedFileBigUploaded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputEncryptedFileBigUploaded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2dc173c8: func() error {
			m.SetId(dBuf.Long())
			m.SetParts(dBuf.Int())
			m.SetKeyFingerprint(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputEncryptedFileBigUploaded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PrivacyRule <--
//  + TL_PrivacyValueAllowContacts
//  + TL_PrivacyValueAllowAll
//  + TL_PrivacyValueAllowUsers
//  + TL_PrivacyValueDisallowContacts
//  + TL_PrivacyValueDisallowAll
//  + TL_PrivacyValueDisallowUsers
//  + TL_PrivacyValueAllowChatParticipants
//  + TL_PrivacyValueDisallowChatParticipants
//

func (m *PrivacyRule) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_privacyValueAllowContacts:
		t := m.To_PrivacyValueAllowContacts()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueAllowAll:
		t := m.To_PrivacyValueAllowAll()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueAllowUsers:
		t := m.To_PrivacyValueAllowUsers()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueDisallowContacts:
		t := m.To_PrivacyValueDisallowContacts()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueDisallowAll:
		t := m.To_PrivacyValueDisallowAll()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueDisallowUsers:
		t := m.To_PrivacyValueDisallowUsers()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueAllowChatParticipants:
		t := m.To_PrivacyValueAllowChatParticipants()
		xBuf = t.Encode(layer)
	case Predicate_privacyValueDisallowChatParticipants:
		t := m.To_PrivacyValueDisallowChatParticipants()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PrivacyRule) CalcByteSize(layer int32) int {
	return 0
}

func (m *PrivacyRule) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfffe1bac:
		m2 := MakeTLPrivacyValueAllowContacts(m)
		m2.Decode(dBuf)
	case 0x65427b82:
		m2 := MakeTLPrivacyValueAllowAll(m)
		m2.Decode(dBuf)
	case 0xb8905fb2:
		m2 := MakeTLPrivacyValueAllowUsers(m)
		m2.Decode(dBuf)
	case 0xf888fa1a:
		m2 := MakeTLPrivacyValueDisallowContacts(m)
		m2.Decode(dBuf)
	case 0x8b73e763:
		m2 := MakeTLPrivacyValueDisallowAll(m)
		m2.Decode(dBuf)
	case 0xe4621141:
		m2 := MakeTLPrivacyValueDisallowUsers(m)
		m2.Decode(dBuf)
	case 0x6b134e8e:
		m2 := MakeTLPrivacyValueAllowChatParticipants(m)
		m2.Decode(dBuf)
	case 0x41c87565:
		m2 := MakeTLPrivacyValueDisallowChatParticipants(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PrivacyRule) DebugString() string {
	switch m.PredicateName {
	case Predicate_privacyValueAllowContacts:
		t := m.To_PrivacyValueAllowContacts()
		return t.DebugString()
	case Predicate_privacyValueAllowAll:
		t := m.To_PrivacyValueAllowAll()
		return t.DebugString()
	case Predicate_privacyValueAllowUsers:
		t := m.To_PrivacyValueAllowUsers()
		return t.DebugString()
	case Predicate_privacyValueDisallowContacts:
		t := m.To_PrivacyValueDisallowContacts()
		return t.DebugString()
	case Predicate_privacyValueDisallowAll:
		t := m.To_PrivacyValueDisallowAll()
		return t.DebugString()
	case Predicate_privacyValueDisallowUsers:
		t := m.To_PrivacyValueDisallowUsers()
		return t.DebugString()
	case Predicate_privacyValueAllowChatParticipants:
		t := m.To_PrivacyValueAllowChatParticipants()
		return t.DebugString()
	case Predicate_privacyValueDisallowChatParticipants:
		t := m.To_PrivacyValueDisallowChatParticipants()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PrivacyValueAllowContacts
func (m *PrivacyRule) To_PrivacyValueAllowContacts() *TLPrivacyValueAllowContacts {
	m.PredicateName = Predicate_privacyValueAllowContacts
	return &TLPrivacyValueAllowContacts{
		Data2: m,
	}
}

// To_PrivacyValueAllowAll
func (m *PrivacyRule) To_PrivacyValueAllowAll() *TLPrivacyValueAllowAll {
	m.PredicateName = Predicate_privacyValueAllowAll
	return &TLPrivacyValueAllowAll{
		Data2: m,
	}
}

// To_PrivacyValueAllowUsers
func (m *PrivacyRule) To_PrivacyValueAllowUsers() *TLPrivacyValueAllowUsers {
	m.PredicateName = Predicate_privacyValueAllowUsers
	return &TLPrivacyValueAllowUsers{
		Data2: m,
	}
}

// To_PrivacyValueDisallowContacts
func (m *PrivacyRule) To_PrivacyValueDisallowContacts() *TLPrivacyValueDisallowContacts {
	m.PredicateName = Predicate_privacyValueDisallowContacts
	return &TLPrivacyValueDisallowContacts{
		Data2: m,
	}
}

// To_PrivacyValueDisallowAll
func (m *PrivacyRule) To_PrivacyValueDisallowAll() *TLPrivacyValueDisallowAll {
	m.PredicateName = Predicate_privacyValueDisallowAll
	return &TLPrivacyValueDisallowAll{
		Data2: m,
	}
}

// To_PrivacyValueDisallowUsers
func (m *PrivacyRule) To_PrivacyValueDisallowUsers() *TLPrivacyValueDisallowUsers {
	m.PredicateName = Predicate_privacyValueDisallowUsers
	return &TLPrivacyValueDisallowUsers{
		Data2: m,
	}
}

// To_PrivacyValueAllowChatParticipants
func (m *PrivacyRule) To_PrivacyValueAllowChatParticipants() *TLPrivacyValueAllowChatParticipants {
	m.PredicateName = Predicate_privacyValueAllowChatParticipants
	return &TLPrivacyValueAllowChatParticipants{
		Data2: m,
	}
}

// To_PrivacyValueDisallowChatParticipants
func (m *PrivacyRule) To_PrivacyValueDisallowChatParticipants() *TLPrivacyValueDisallowChatParticipants {
	m.PredicateName = Predicate_privacyValueDisallowChatParticipants
	return &TLPrivacyValueDisallowChatParticipants{
		Data2: m,
	}
}

// MakeTLPrivacyValueAllowContacts
func MakeTLPrivacyValueAllowContacts(data2 *PrivacyRule) *TLPrivacyValueAllowContacts {
	if data2 == nil {
		return &TLPrivacyValueAllowContacts{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueAllowContacts,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueAllowContacts
		return &TLPrivacyValueAllowContacts{Data2: data2}
	}
}

func (m *TLPrivacyValueAllowContacts) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueAllowContacts
	return m.Data2
}

func (m *TLPrivacyValueAllowContacts) GetPredicateName() string {
	return Predicate_privacyValueAllowContacts
}

func (m *TLPrivacyValueAllowContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfffe1bac: func() []byte {
			x.UInt(0xfffe1bac)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueAllowContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueAllowContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueAllowContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueAllowContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfffe1bac: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueAllowContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueAllowAll
func MakeTLPrivacyValueAllowAll(data2 *PrivacyRule) *TLPrivacyValueAllowAll {
	if data2 == nil {
		return &TLPrivacyValueAllowAll{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueAllowAll,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueAllowAll
		return &TLPrivacyValueAllowAll{Data2: data2}
	}
}

func (m *TLPrivacyValueAllowAll) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueAllowAll
	return m.Data2
}

func (m *TLPrivacyValueAllowAll) GetPredicateName() string {
	return Predicate_privacyValueAllowAll
}

func (m *TLPrivacyValueAllowAll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x65427b82: func() []byte {
			x.UInt(0x65427b82)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueAllowAll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueAllowAll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueAllowAll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueAllowAll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x65427b82: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueAllowAll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueAllowUsers
func MakeTLPrivacyValueAllowUsers(data2 *PrivacyRule) *TLPrivacyValueAllowUsers {
	if data2 == nil {
		return &TLPrivacyValueAllowUsers{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueAllowUsers,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueAllowUsers
		return &TLPrivacyValueAllowUsers{Data2: data2}
	}
}

func (m *TLPrivacyValueAllowUsers) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueAllowUsers
	return m.Data2
}

func (m *TLPrivacyValueAllowUsers) SetUsers(v []int64) { m.Data2.Users = v }
func (m *TLPrivacyValueAllowUsers) GetUsers() []int64  { return m.Data2.Users }

func (m *TLPrivacyValueAllowUsers) GetPredicateName() string {
	return Predicate_privacyValueAllowUsers
}

func (m *TLPrivacyValueAllowUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb8905fb2: func() []byte {
			x.UInt(0xb8905fb2)

			x.VectorLong(m.GetUsers())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueAllowUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueAllowUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueAllowUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueAllowUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb8905fb2: func() error {

			m.SetUsers(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueAllowUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueDisallowContacts
func MakeTLPrivacyValueDisallowContacts(data2 *PrivacyRule) *TLPrivacyValueDisallowContacts {
	if data2 == nil {
		return &TLPrivacyValueDisallowContacts{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueDisallowContacts,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueDisallowContacts
		return &TLPrivacyValueDisallowContacts{Data2: data2}
	}
}

func (m *TLPrivacyValueDisallowContacts) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueDisallowContacts
	return m.Data2
}

func (m *TLPrivacyValueDisallowContacts) GetPredicateName() string {
	return Predicate_privacyValueDisallowContacts
}

func (m *TLPrivacyValueDisallowContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf888fa1a: func() []byte {
			x.UInt(0xf888fa1a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueDisallowContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueDisallowContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueDisallowContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueDisallowContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf888fa1a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueDisallowContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueDisallowAll
func MakeTLPrivacyValueDisallowAll(data2 *PrivacyRule) *TLPrivacyValueDisallowAll {
	if data2 == nil {
		return &TLPrivacyValueDisallowAll{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueDisallowAll,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueDisallowAll
		return &TLPrivacyValueDisallowAll{Data2: data2}
	}
}

func (m *TLPrivacyValueDisallowAll) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueDisallowAll
	return m.Data2
}

func (m *TLPrivacyValueDisallowAll) GetPredicateName() string {
	return Predicate_privacyValueDisallowAll
}

func (m *TLPrivacyValueDisallowAll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8b73e763: func() []byte {
			x.UInt(0x8b73e763)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueDisallowAll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueDisallowAll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueDisallowAll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueDisallowAll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8b73e763: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueDisallowAll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueDisallowUsers
func MakeTLPrivacyValueDisallowUsers(data2 *PrivacyRule) *TLPrivacyValueDisallowUsers {
	if data2 == nil {
		return &TLPrivacyValueDisallowUsers{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueDisallowUsers,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueDisallowUsers
		return &TLPrivacyValueDisallowUsers{Data2: data2}
	}
}

func (m *TLPrivacyValueDisallowUsers) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueDisallowUsers
	return m.Data2
}

func (m *TLPrivacyValueDisallowUsers) SetUsers(v []int64) { m.Data2.Users = v }
func (m *TLPrivacyValueDisallowUsers) GetUsers() []int64  { return m.Data2.Users }

func (m *TLPrivacyValueDisallowUsers) GetPredicateName() string {
	return Predicate_privacyValueDisallowUsers
}

func (m *TLPrivacyValueDisallowUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe4621141: func() []byte {
			x.UInt(0xe4621141)

			x.VectorLong(m.GetUsers())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueDisallowUsers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueDisallowUsers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueDisallowUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueDisallowUsers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe4621141: func() error {

			m.SetUsers(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueDisallowUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueAllowChatParticipants
func MakeTLPrivacyValueAllowChatParticipants(data2 *PrivacyRule) *TLPrivacyValueAllowChatParticipants {
	if data2 == nil {
		return &TLPrivacyValueAllowChatParticipants{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueAllowChatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueAllowChatParticipants
		return &TLPrivacyValueAllowChatParticipants{Data2: data2}
	}
}

func (m *TLPrivacyValueAllowChatParticipants) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueAllowChatParticipants
	return m.Data2
}

func (m *TLPrivacyValueAllowChatParticipants) SetChats(v []int64) { m.Data2.Chats = v }
func (m *TLPrivacyValueAllowChatParticipants) GetChats() []int64  { return m.Data2.Chats }

func (m *TLPrivacyValueAllowChatParticipants) GetPredicateName() string {
	return Predicate_privacyValueAllowChatParticipants
}

func (m *TLPrivacyValueAllowChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6b134e8e: func() []byte {
			x.UInt(0x6b134e8e)

			x.VectorLong(m.GetChats())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueAllowChatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueAllowChatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueAllowChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueAllowChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6b134e8e: func() error {

			m.SetChats(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueAllowChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPrivacyValueDisallowChatParticipants
func MakeTLPrivacyValueDisallowChatParticipants(data2 *PrivacyRule) *TLPrivacyValueDisallowChatParticipants {
	if data2 == nil {
		return &TLPrivacyValueDisallowChatParticipants{Data2: &PrivacyRule{
			PredicateName: Predicate_privacyValueDisallowChatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_privacyValueDisallowChatParticipants
		return &TLPrivacyValueDisallowChatParticipants{Data2: data2}
	}
}

func (m *TLPrivacyValueDisallowChatParticipants) To_PrivacyRule() *PrivacyRule {
	m.Data2.PredicateName = Predicate_privacyValueDisallowChatParticipants
	return m.Data2
}

func (m *TLPrivacyValueDisallowChatParticipants) SetChats(v []int64) { m.Data2.Chats = v }
func (m *TLPrivacyValueDisallowChatParticipants) GetChats() []int64  { return m.Data2.Chats }

func (m *TLPrivacyValueDisallowChatParticipants) GetPredicateName() string {
	return Predicate_privacyValueDisallowChatParticipants
}

func (m *TLPrivacyValueDisallowChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x41c87565: func() []byte {
			x.UInt(0x41c87565)

			x.VectorLong(m.GetChats())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_privacyValueDisallowChatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_privacyValueDisallowChatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPrivacyValueDisallowChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPrivacyValueDisallowChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x41c87565: func() error {

			m.SetChats(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPrivacyValueDisallowChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StickerSet <--
//  + TL_StickerSet
//

func (m *StickerSet) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stickerSet:
		t := m.To_StickerSet()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *StickerSet) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd7df217a:
		m2 := MakeTLStickerSet(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StickerSet) DebugString() string {
	switch m.PredicateName {
	case Predicate_stickerSet:
		t := m.To_StickerSet()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StickerSet
func (m *StickerSet) To_StickerSet() *TLStickerSet {
	m.PredicateName = Predicate_stickerSet
	return &TLStickerSet{
		Data2: m,
	}
}

// MakeTLStickerSet
func MakeTLStickerSet(data2 *StickerSet) *TLStickerSet {
	if data2 == nil {
		return &TLStickerSet{Data2: &StickerSet{
			PredicateName: Predicate_stickerSet,
		}}
	} else {
		data2.PredicateName = Predicate_stickerSet
		return &TLStickerSet{Data2: data2}
	}
}

func (m *TLStickerSet) To_StickerSet() *StickerSet {
	m.Data2.PredicateName = Predicate_stickerSet
	return m.Data2
}

//// flags
func (m *TLStickerSet) SetArchived(v bool) { m.Data2.Archived = v }
func (m *TLStickerSet) GetArchived() bool  { return m.Data2.Archived }

func (m *TLStickerSet) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLStickerSet) GetOfficial() bool  { return m.Data2.Official }

func (m *TLStickerSet) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLStickerSet) GetMasks() bool  { return m.Data2.Masks }

func (m *TLStickerSet) SetAnimated(v bool) { m.Data2.Animated = v }
func (m *TLStickerSet) GetAnimated() bool  { return m.Data2.Animated }

func (m *TLStickerSet) SetVideos(v bool) { m.Data2.Videos = v }
func (m *TLStickerSet) GetVideos() bool  { return m.Data2.Videos }

func (m *TLStickerSet) SetInstalledDate(v *types.Int32Value) { m.Data2.InstalledDate = v }
func (m *TLStickerSet) GetInstalledDate() *types.Int32Value  { return m.Data2.InstalledDate }

func (m *TLStickerSet) SetId(v int64) { m.Data2.Id = v }
func (m *TLStickerSet) GetId() int64  { return m.Data2.Id }

func (m *TLStickerSet) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLStickerSet) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLStickerSet) SetTitle(v string) { m.Data2.Title = v }
func (m *TLStickerSet) GetTitle() string  { return m.Data2.Title }

func (m *TLStickerSet) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLStickerSet) GetShortName() string  { return m.Data2.ShortName }

func (m *TLStickerSet) SetThumbs(v []*PhotoSize) { m.Data2.Thumbs = v }
func (m *TLStickerSet) GetThumbs() []*PhotoSize  { return m.Data2.Thumbs }

func (m *TLStickerSet) SetThumbDcId(v *types.Int32Value) { m.Data2.ThumbDcId = v }
func (m *TLStickerSet) GetThumbDcId() *types.Int32Value  { return m.Data2.ThumbDcId }

func (m *TLStickerSet) SetThumbVersion(v *types.Int32Value) { m.Data2.ThumbVersion = v }
func (m *TLStickerSet) GetThumbVersion() *types.Int32Value  { return m.Data2.ThumbVersion }

func (m *TLStickerSet) SetCount(v int32) { m.Data2.Count = v }
func (m *TLStickerSet) GetCount() int32  { return m.Data2.Count }

func (m *TLStickerSet) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLStickerSet) GetHash() int32  { return m.Data2.Hash }

func (m *TLStickerSet) GetPredicateName() string {
	return Predicate_stickerSet
}

func (m *TLStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd7df217a: func() []byte {
			x.UInt(0xd7df217a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetArchived() == true {
					flags |= 1 << 1
				}
				if m.GetOfficial() == true {
					flags |= 1 << 2
				}
				if m.GetMasks() == true {
					flags |= 1 << 3
				}
				if m.GetAnimated() == true {
					flags |= 1 << 5
				}
				if m.GetVideos() == true {
					flags |= 1 << 6
				}
				if m.GetInstalledDate() != nil {
					flags |= 1 << 0
				}

				if m.GetThumbs() != nil {
					flags |= 1 << 4
				}
				if m.GetThumbDcId() != nil {
					flags |= 1 << 4
				}
				if m.GetThumbVersion() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetInstalledDate() != nil {
				x.Int(m.GetInstalledDate().Value)
			}

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.String(m.GetTitle())
			x.String(m.GetShortName())
			if m.GetThumbs() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetThumbs())))
				for _, v := range m.GetThumbs() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetThumbDcId() != nil {
				x.Int(m.GetThumbDcId().Value)
			}

			if m.GetThumbVersion() != nil {
				x.Int(m.GetThumbVersion().Value)
			}

			x.Int(m.GetCount())
			x.Int(m.GetHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stickerSet, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stickerSet, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickerSet) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd7df217a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetArchived(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetOfficial(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetMasks(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetAnimated(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetVideos(true)
			}
			if (flags & (1 << 0)) != 0 {
				m.SetInstalledDate(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetTitle(dBuf.String())
			m.SetShortName(dBuf.String())
			if (flags & (1 << 4)) != 0 {
				c11 := dBuf.Int()
				if c11 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 11, c11)
					return dBuf.GetError()
				}
				l11 := dBuf.Int()
				v11 := make([]*PhotoSize, l11)
				for i := int32(0); i < l11; i++ {
					v11[i] = &PhotoSize{}
					v11[i].Decode(dBuf)
				}
				m.SetThumbs(v11)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetThumbDcId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetThumbVersion(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetCount(dBuf.Int())
			m.SetHash(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ExportedMessageLink <--
//  + TL_ExportedMessageLink
//

func (m *ExportedMessageLink) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_exportedMessageLink:
		t := m.To_ExportedMessageLink()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ExportedMessageLink) CalcByteSize(layer int32) int {
	return 0
}

func (m *ExportedMessageLink) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5dab1af4:
		m2 := MakeTLExportedMessageLink(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ExportedMessageLink) DebugString() string {
	switch m.PredicateName {
	case Predicate_exportedMessageLink:
		t := m.To_ExportedMessageLink()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ExportedMessageLink
func (m *ExportedMessageLink) To_ExportedMessageLink() *TLExportedMessageLink {
	m.PredicateName = Predicate_exportedMessageLink
	return &TLExportedMessageLink{
		Data2: m,
	}
}

// MakeTLExportedMessageLink
func MakeTLExportedMessageLink(data2 *ExportedMessageLink) *TLExportedMessageLink {
	if data2 == nil {
		return &TLExportedMessageLink{Data2: &ExportedMessageLink{
			PredicateName: Predicate_exportedMessageLink,
		}}
	} else {
		data2.PredicateName = Predicate_exportedMessageLink
		return &TLExportedMessageLink{Data2: data2}
	}
}

func (m *TLExportedMessageLink) To_ExportedMessageLink() *ExportedMessageLink {
	m.Data2.PredicateName = Predicate_exportedMessageLink
	return m.Data2
}

func (m *TLExportedMessageLink) SetLink(v string) { m.Data2.Link = v }
func (m *TLExportedMessageLink) GetLink() string  { return m.Data2.Link }

func (m *TLExportedMessageLink) SetHtml(v string) { m.Data2.Html = v }
func (m *TLExportedMessageLink) GetHtml() string  { return m.Data2.Html }

func (m *TLExportedMessageLink) GetPredicateName() string {
	return Predicate_exportedMessageLink
}

func (m *TLExportedMessageLink) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5dab1af4: func() []byte {
			x.UInt(0x5dab1af4)

			x.String(m.GetLink())
			x.String(m.GetHtml())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_exportedMessageLink, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_exportedMessageLink, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLExportedMessageLink) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLExportedMessageLink) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5dab1af4: func() error {
			m.SetLink(dBuf.String())
			m.SetHtml(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLExportedMessageLink) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentResult <--
//  + TL_PaymentsPaymentResult
//  + TL_PaymentsPaymentVerificationNeeded
//

func (m *Payments_PaymentResult) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_paymentResult:
		t := m.To_PaymentsPaymentResult()
		xBuf = t.Encode(layer)
	case Predicate_payments_paymentVerificationNeeded:
		t := m.To_PaymentsPaymentVerificationNeeded()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_PaymentResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_PaymentResult) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4e5f810d:
		m2 := MakeTLPaymentsPaymentResult(m)
		m2.Decode(dBuf)
	case 0xd8411139:
		m2 := MakeTLPaymentsPaymentVerificationNeeded(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_PaymentResult) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_paymentResult:
		t := m.To_PaymentsPaymentResult()
		return t.DebugString()
	case Predicate_payments_paymentVerificationNeeded:
		t := m.To_PaymentsPaymentVerificationNeeded()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsPaymentResult
func (m *Payments_PaymentResult) To_PaymentsPaymentResult() *TLPaymentsPaymentResult {
	m.PredicateName = Predicate_payments_paymentResult
	return &TLPaymentsPaymentResult{
		Data2: m,
	}
}

// To_PaymentsPaymentVerificationNeeded
func (m *Payments_PaymentResult) To_PaymentsPaymentVerificationNeeded() *TLPaymentsPaymentVerificationNeeded {
	m.PredicateName = Predicate_payments_paymentVerificationNeeded
	return &TLPaymentsPaymentVerificationNeeded{
		Data2: m,
	}
}

// MakeTLPaymentsPaymentResult
func MakeTLPaymentsPaymentResult(data2 *Payments_PaymentResult) *TLPaymentsPaymentResult {
	if data2 == nil {
		return &TLPaymentsPaymentResult{Data2: &Payments_PaymentResult{
			PredicateName: Predicate_payments_paymentResult,
		}}
	} else {
		data2.PredicateName = Predicate_payments_paymentResult
		return &TLPaymentsPaymentResult{Data2: data2}
	}
}

func (m *TLPaymentsPaymentResult) To_Payments_PaymentResult() *Payments_PaymentResult {
	m.Data2.PredicateName = Predicate_payments_paymentResult
	return m.Data2
}

func (m *TLPaymentsPaymentResult) SetUpdates(v *Updates) { m.Data2.Updates = v }
func (m *TLPaymentsPaymentResult) GetUpdates() *Updates  { return m.Data2.Updates }

func (m *TLPaymentsPaymentResult) GetPredicateName() string {
	return Predicate_payments_paymentResult
}

func (m *TLPaymentsPaymentResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4e5f810d: func() []byte {
			x.UInt(0x4e5f810d)

			x.Bytes(m.GetUpdates().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_paymentResult, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_paymentResult, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsPaymentResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsPaymentResult) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4e5f810d: func() error {

			m0 := &Updates{}
			m0.Decode(dBuf)
			m.SetUpdates(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsPaymentResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLPaymentsPaymentVerificationNeeded
func MakeTLPaymentsPaymentVerificationNeeded(data2 *Payments_PaymentResult) *TLPaymentsPaymentVerificationNeeded {
	if data2 == nil {
		return &TLPaymentsPaymentVerificationNeeded{Data2: &Payments_PaymentResult{
			PredicateName: Predicate_payments_paymentVerificationNeeded,
		}}
	} else {
		data2.PredicateName = Predicate_payments_paymentVerificationNeeded
		return &TLPaymentsPaymentVerificationNeeded{Data2: data2}
	}
}

func (m *TLPaymentsPaymentVerificationNeeded) To_Payments_PaymentResult() *Payments_PaymentResult {
	m.Data2.PredicateName = Predicate_payments_paymentVerificationNeeded
	return m.Data2
}

func (m *TLPaymentsPaymentVerificationNeeded) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentVerificationNeeded) GetUrl() string  { return m.Data2.Url }

func (m *TLPaymentsPaymentVerificationNeeded) GetPredicateName() string {
	return Predicate_payments_paymentVerificationNeeded
}

func (m *TLPaymentsPaymentVerificationNeeded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd8411139: func() []byte {
			x.UInt(0xd8411139)

			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_paymentVerificationNeeded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_paymentVerificationNeeded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsPaymentVerificationNeeded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsPaymentVerificationNeeded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd8411139: func() error {
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsPaymentVerificationNeeded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageMedia <--
//  + TL_MessageMediaEmpty
//  + TL_MessageMediaPhoto
//  + TL_MessageMediaGeo
//  + TL_MessageMediaContact
//  + TL_MessageMediaUnsupported
//  + TL_MessageMediaDocument
//  + TL_MessageMediaWebPage
//  + TL_MessageMediaVenue
//  + TL_MessageMediaGame
//  + TL_MessageMediaInvoice
//  + TL_MessageMediaGeoLive
//  + TL_MessageMediaPoll
//  + TL_MessageMediaDice
//  + TL_MessageMediaBizDataRaw
//

func (m *MessageMedia) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	line100 := false
LINE100:

	switch predicateName {
	case Predicate_messageMediaEmpty:
		t := m.To_MessageMediaEmpty()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaPhoto:
		t := m.To_MessageMediaPhoto()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaGeo:
		t := m.To_MessageMediaGeo()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaContact:
		t := m.To_MessageMediaContact()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaUnsupported:
		t := m.To_MessageMediaUnsupported()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaDocument:
		t := m.To_MessageMediaDocument()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaWebPage:
		t := m.To_MessageMediaWebPage()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaVenue:
		t := m.To_MessageMediaVenue()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaGame:
		t := m.To_MessageMediaGame()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaInvoice:
		t := m.To_MessageMediaInvoice()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaGeoLive:
		t := m.To_MessageMediaGeoLive()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaPoll:
		t := m.To_MessageMediaPoll()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaDice:
		t := m.To_MessageMediaDice()
		xBuf = t.Encode(layer)
	case Predicate_messageMediaBizDataRaw:
		t := m.To_MessageMediaBizDataRaw()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	if line100 {
		return xBuf
	}

	if len(xBuf) == 0 {
		predicateName = Predicate_messageMediaUnsupported
		line100 = true
		goto LINE100
	}

	return xBuf
}

func (m *MessageMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageMedia) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3ded6320:
		m2 := MakeTLMessageMediaEmpty(m)
		m2.Decode(dBuf)
	case 0x695150d7:
		m2 := MakeTLMessageMediaPhoto(m)
		m2.Decode(dBuf)
	case 0x56e0d474:
		m2 := MakeTLMessageMediaGeo(m)
		m2.Decode(dBuf)
	case 0x70322949:
		m2 := MakeTLMessageMediaContact(m)
		m2.Decode(dBuf)
	case 0x9f84f49e:
		m2 := MakeTLMessageMediaUnsupported(m)
		m2.Decode(dBuf)
	case 0x9cb070d7:
		m2 := MakeTLMessageMediaDocument(m)
		m2.Decode(dBuf)
	case 0xa32dd600:
		m2 := MakeTLMessageMediaWebPage(m)
		m2.Decode(dBuf)
	case 0x2ec0533f:
		m2 := MakeTLMessageMediaVenue(m)
		m2.Decode(dBuf)
	case 0xfdb19008:
		m2 := MakeTLMessageMediaGame(m)
		m2.Decode(dBuf)
	case 0x84551347:
		m2 := MakeTLMessageMediaInvoice(m)
		m2.Decode(dBuf)
	case 0xb940c666:
		m2 := MakeTLMessageMediaGeoLive(m)
		m2.Decode(dBuf)
	case 0x4bd6e798:
		m2 := MakeTLMessageMediaPoll(m)
		m2.Decode(dBuf)
	case 0x3f7ee58b:
		m2 := MakeTLMessageMediaDice(m)
		m2.Decode(dBuf)
	case 0x7ea0792a:
		m2 := MakeTLMessageMediaBizDataRaw(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageMedia) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageMediaEmpty:
		t := m.To_MessageMediaEmpty()
		return t.DebugString()
	case Predicate_messageMediaPhoto:
		t := m.To_MessageMediaPhoto()
		return t.DebugString()
	case Predicate_messageMediaGeo:
		t := m.To_MessageMediaGeo()
		return t.DebugString()
	case Predicate_messageMediaContact:
		t := m.To_MessageMediaContact()
		return t.DebugString()
	case Predicate_messageMediaUnsupported:
		t := m.To_MessageMediaUnsupported()
		return t.DebugString()
	case Predicate_messageMediaDocument:
		t := m.To_MessageMediaDocument()
		return t.DebugString()
	case Predicate_messageMediaWebPage:
		t := m.To_MessageMediaWebPage()
		return t.DebugString()
	case Predicate_messageMediaVenue:
		t := m.To_MessageMediaVenue()
		return t.DebugString()
	case Predicate_messageMediaGame:
		t := m.To_MessageMediaGame()
		return t.DebugString()
	case Predicate_messageMediaInvoice:
		t := m.To_MessageMediaInvoice()
		return t.DebugString()
	case Predicate_messageMediaGeoLive:
		t := m.To_MessageMediaGeoLive()
		return t.DebugString()
	case Predicate_messageMediaPoll:
		t := m.To_MessageMediaPoll()
		return t.DebugString()
	case Predicate_messageMediaDice:
		t := m.To_MessageMediaDice()
		return t.DebugString()
	case Predicate_messageMediaBizDataRaw:
		t := m.To_MessageMediaBizDataRaw()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageMediaEmpty
func (m *MessageMedia) To_MessageMediaEmpty() *TLMessageMediaEmpty {
	m.PredicateName = Predicate_messageMediaEmpty
	return &TLMessageMediaEmpty{
		Data2: m,
	}
}

// To_MessageMediaPhoto
func (m *MessageMedia) To_MessageMediaPhoto() *TLMessageMediaPhoto {
	m.PredicateName = Predicate_messageMediaPhoto
	return &TLMessageMediaPhoto{
		Data2: m,
	}
}

// To_MessageMediaGeo
func (m *MessageMedia) To_MessageMediaGeo() *TLMessageMediaGeo {
	m.PredicateName = Predicate_messageMediaGeo
	return &TLMessageMediaGeo{
		Data2: m,
	}
}

// To_MessageMediaContact
func (m *MessageMedia) To_MessageMediaContact() *TLMessageMediaContact {
	m.PredicateName = Predicate_messageMediaContact
	return &TLMessageMediaContact{
		Data2: m,
	}
}

// To_MessageMediaUnsupported
func (m *MessageMedia) To_MessageMediaUnsupported() *TLMessageMediaUnsupported {
	m.PredicateName = Predicate_messageMediaUnsupported
	return &TLMessageMediaUnsupported{
		Data2: m,
	}
}

// To_MessageMediaDocument
func (m *MessageMedia) To_MessageMediaDocument() *TLMessageMediaDocument {
	m.PredicateName = Predicate_messageMediaDocument
	return &TLMessageMediaDocument{
		Data2: m,
	}
}

// To_MessageMediaWebPage
func (m *MessageMedia) To_MessageMediaWebPage() *TLMessageMediaWebPage {
	m.PredicateName = Predicate_messageMediaWebPage
	return &TLMessageMediaWebPage{
		Data2: m,
	}
}

// To_MessageMediaVenue
func (m *MessageMedia) To_MessageMediaVenue() *TLMessageMediaVenue {
	m.PredicateName = Predicate_messageMediaVenue
	return &TLMessageMediaVenue{
		Data2: m,
	}
}

// To_MessageMediaGame
func (m *MessageMedia) To_MessageMediaGame() *TLMessageMediaGame {
	m.PredicateName = Predicate_messageMediaGame
	return &TLMessageMediaGame{
		Data2: m,
	}
}

// To_MessageMediaInvoice
func (m *MessageMedia) To_MessageMediaInvoice() *TLMessageMediaInvoice {
	m.PredicateName = Predicate_messageMediaInvoice
	return &TLMessageMediaInvoice{
		Data2: m,
	}
}

// To_MessageMediaGeoLive
func (m *MessageMedia) To_MessageMediaGeoLive() *TLMessageMediaGeoLive {
	m.PredicateName = Predicate_messageMediaGeoLive
	return &TLMessageMediaGeoLive{
		Data2: m,
	}
}

// To_MessageMediaPoll
func (m *MessageMedia) To_MessageMediaPoll() *TLMessageMediaPoll {
	m.PredicateName = Predicate_messageMediaPoll
	return &TLMessageMediaPoll{
		Data2: m,
	}
}

// To_MessageMediaDice
func (m *MessageMedia) To_MessageMediaDice() *TLMessageMediaDice {
	m.PredicateName = Predicate_messageMediaDice
	return &TLMessageMediaDice{
		Data2: m,
	}
}

// To_MessageMediaBizDataRaw
func (m *MessageMedia) To_MessageMediaBizDataRaw() *TLMessageMediaBizDataRaw {
	m.PredicateName = Predicate_messageMediaBizDataRaw
	return &TLMessageMediaBizDataRaw{
		Data2: m,
	}
}

// MakeTLMessageMediaEmpty
func MakeTLMessageMediaEmpty(data2 *MessageMedia) *TLMessageMediaEmpty {
	if data2 == nil {
		return &TLMessageMediaEmpty{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaEmpty
		return &TLMessageMediaEmpty{Data2: data2}
	}
}

func (m *TLMessageMediaEmpty) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaEmpty
	return m.Data2
}

func (m *TLMessageMediaEmpty) GetPredicateName() string {
	return Predicate_messageMediaEmpty
}

func (m *TLMessageMediaEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3ded6320: func() []byte {
			x.UInt(0x3ded6320)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3ded6320: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaPhoto
func MakeTLMessageMediaPhoto(data2 *MessageMedia) *TLMessageMediaPhoto {
	if data2 == nil {
		return &TLMessageMediaPhoto{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaPhoto
		return &TLMessageMediaPhoto{Data2: data2}
	}
}

func (m *TLMessageMediaPhoto) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaPhoto
	return m.Data2
}

//// flags
func (m *TLMessageMediaPhoto) SetPhoto_FLAGPHOTO(v *Photo) { m.Data2.Photo_FLAGPHOTO = v }
func (m *TLMessageMediaPhoto) GetPhoto_FLAGPHOTO() *Photo  { return m.Data2.Photo_FLAGPHOTO }

func (m *TLMessageMediaPhoto) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaPhoto) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLMessageMediaPhoto) GetPredicateName() string {
	return Predicate_messageMediaPhoto
}

func (m *TLMessageMediaPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x695150d7: func() []byte {
			x.UInt(0x695150d7)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhoto_FLAGPHOTO() != nil {
					flags |= 1 << 0
				}
				if m.GetTtlSeconds() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetPhoto_FLAGPHOTO() != nil {
				x.Bytes(m.GetPhoto_FLAGPHOTO().Encode(layer))
			}

			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x695150d7: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &Photo{}
				m1.Decode(dBuf)
				m.SetPhoto_FLAGPHOTO(m1)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaGeo
func MakeTLMessageMediaGeo(data2 *MessageMedia) *TLMessageMediaGeo {
	if data2 == nil {
		return &TLMessageMediaGeo{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaGeo,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaGeo
		return &TLMessageMediaGeo{Data2: data2}
	}
}

func (m *TLMessageMediaGeo) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaGeo
	return m.Data2
}

func (m *TLMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeo) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLMessageMediaGeo) GetPredicateName() string {
	return Predicate_messageMediaGeo
}

func (m *TLMessageMediaGeo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56e0d474: func() []byte {
			x.UInt(0x56e0d474)

			x.Bytes(m.GetGeo().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaGeo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaGeo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaGeo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaGeo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56e0d474: func() error {

			m3 := &GeoPoint{}
			m3.Decode(dBuf)
			m.SetGeo(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaGeo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaContact
func MakeTLMessageMediaContact(data2 *MessageMedia) *TLMessageMediaContact {
	if data2 == nil {
		return &TLMessageMediaContact{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaContact,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaContact
		return &TLMessageMediaContact{Data2: data2}
	}
}

func (m *TLMessageMediaContact) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaContact
	return m.Data2
}

func (m *TLMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLMessageMediaContact) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageMediaContact) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageMediaContact) GetPredicateName() string {
	return Predicate_messageMediaContact
}

func (m *TLMessageMediaContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x70322949: func() []byte {
			x.UInt(0x70322949)

			x.String(m.GetPhoneNumber())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.String(m.GetVcard())
			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x70322949: func() error {
			m.SetPhoneNumber(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetVcard(dBuf.String())
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaUnsupported
func MakeTLMessageMediaUnsupported(data2 *MessageMedia) *TLMessageMediaUnsupported {
	if data2 == nil {
		return &TLMessageMediaUnsupported{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaUnsupported,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaUnsupported
		return &TLMessageMediaUnsupported{Data2: data2}
	}
}

func (m *TLMessageMediaUnsupported) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaUnsupported
	return m.Data2
}

func (m *TLMessageMediaUnsupported) GetPredicateName() string {
	return Predicate_messageMediaUnsupported
}

func (m *TLMessageMediaUnsupported) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9f84f49e: func() []byte {
			x.UInt(0x9f84f49e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaUnsupported, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaUnsupported, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaUnsupported) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaUnsupported) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9f84f49e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaUnsupported) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaDocument
func MakeTLMessageMediaDocument(data2 *MessageMedia) *TLMessageMediaDocument {
	if data2 == nil {
		return &TLMessageMediaDocument{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaDocument,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaDocument
		return &TLMessageMediaDocument{Data2: data2}
	}
}

func (m *TLMessageMediaDocument) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaDocument
	return m.Data2
}

//// flags
func (m *TLMessageMediaDocument) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLMessageMediaDocument) GetDocument() *Document  { return m.Data2.Document }

func (m *TLMessageMediaDocument) SetTtlSeconds(v *types.Int32Value) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaDocument) GetTtlSeconds() *types.Int32Value  { return m.Data2.TtlSeconds }

func (m *TLMessageMediaDocument) GetPredicateName() string {
	return Predicate_messageMediaDocument
}

func (m *TLMessageMediaDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9cb070d7: func() []byte {
			x.UInt(0x9cb070d7)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDocument() != nil {
					flags |= 1 << 0
				}
				if m.GetTtlSeconds() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetTtlSeconds() != nil {
				x.Int(m.GetTtlSeconds().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9cb070d7: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m9 := &Document{}
				m9.Decode(dBuf)
				m.SetDocument(m9)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTtlSeconds(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaWebPage
func MakeTLMessageMediaWebPage(data2 *MessageMedia) *TLMessageMediaWebPage {
	if data2 == nil {
		return &TLMessageMediaWebPage{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaWebPage,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaWebPage
		return &TLMessageMediaWebPage{Data2: data2}
	}
}

func (m *TLMessageMediaWebPage) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaWebPage
	return m.Data2
}

func (m *TLMessageMediaWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLMessageMediaWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func (m *TLMessageMediaWebPage) GetPredicateName() string {
	return Predicate_messageMediaWebPage
}

func (m *TLMessageMediaWebPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa32dd600: func() []byte {
			x.UInt(0xa32dd600)

			x.Bytes(m.GetWebpage().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaWebPage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaWebPage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaWebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaWebPage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa32dd600: func() error {

			m10 := &WebPage{}
			m10.Decode(dBuf)
			m.SetWebpage(m10)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaWebPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaVenue
func MakeTLMessageMediaVenue(data2 *MessageMedia) *TLMessageMediaVenue {
	if data2 == nil {
		return &TLMessageMediaVenue{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaVenue,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaVenue
		return &TLMessageMediaVenue{Data2: data2}
	}
}

func (m *TLMessageMediaVenue) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaVenue
	return m.Data2
}

func (m *TLMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaVenue) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLMessageMediaVenue) GetPredicateName() string {
	return Predicate_messageMediaVenue
}

func (m *TLMessageMediaVenue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2ec0533f: func() []byte {
			x.UInt(0x2ec0533f)

			x.Bytes(m.GetGeo().Encode(layer))
			x.String(m.GetTitle())
			x.String(m.GetAddress())
			x.String(m.GetProvider())
			x.String(m.GetVenueId())
			x.String(m.GetVenueType())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaVenue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaVenue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaVenue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaVenue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2ec0533f: func() error {

			m3 := &GeoPoint{}
			m3.Decode(dBuf)
			m.SetGeo(m3)

			m.SetTitle(dBuf.String())
			m.SetAddress(dBuf.String())
			m.SetProvider(dBuf.String())
			m.SetVenueId(dBuf.String())
			m.SetVenueType(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaVenue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaGame
func MakeTLMessageMediaGame(data2 *MessageMedia) *TLMessageMediaGame {
	if data2 == nil {
		return &TLMessageMediaGame{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaGame,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaGame
		return &TLMessageMediaGame{Data2: data2}
	}
}

func (m *TLMessageMediaGame) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaGame
	return m.Data2
}

func (m *TLMessageMediaGame) SetGame(v *Game) { m.Data2.Game = v }
func (m *TLMessageMediaGame) GetGame() *Game  { return m.Data2.Game }

func (m *TLMessageMediaGame) GetPredicateName() string {
	return Predicate_messageMediaGame
}

func (m *TLMessageMediaGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfdb19008: func() []byte {
			x.UInt(0xfdb19008)

			x.Bytes(m.GetGame().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaGame, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaGame, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfdb19008: func() error {

			m16 := &Game{}
			m16.Decode(dBuf)
			m.SetGame(m16)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaInvoice
func MakeTLMessageMediaInvoice(data2 *MessageMedia) *TLMessageMediaInvoice {
	if data2 == nil {
		return &TLMessageMediaInvoice{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaInvoice,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaInvoice
		return &TLMessageMediaInvoice{Data2: data2}
	}
}

func (m *TLMessageMediaInvoice) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaInvoice
	return m.Data2
}

//// flags
func (m *TLMessageMediaInvoice) SetShippingAddressRequested(v bool) {
	m.Data2.ShippingAddressRequested = v
}
func (m *TLMessageMediaInvoice) GetShippingAddressRequested() bool {
	return m.Data2.ShippingAddressRequested
}

func (m *TLMessageMediaInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLMessageMediaInvoice) GetTest() bool  { return m.Data2.Test }

func (m *TLMessageMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLMessageMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLMessageMediaInvoice) SetPhoto_FLAGWEBDOCUMENT(v *WebDocument) {
	m.Data2.Photo_FLAGWEBDOCUMENT = v
}
func (m *TLMessageMediaInvoice) GetPhoto_FLAGWEBDOCUMENT() *WebDocument {
	return m.Data2.Photo_FLAGWEBDOCUMENT
}

func (m *TLMessageMediaInvoice) SetReceiptMsgId(v *types.Int32Value) { m.Data2.ReceiptMsgId = v }
func (m *TLMessageMediaInvoice) GetReceiptMsgId() *types.Int32Value  { return m.Data2.ReceiptMsgId }

func (m *TLMessageMediaInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageMediaInvoice) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageMediaInvoice) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageMediaInvoice) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLMessageMediaInvoice) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLMessageMediaInvoice) GetStartParam() string  { return m.Data2.StartParam }

func (m *TLMessageMediaInvoice) GetPredicateName() string {
	return Predicate_messageMediaInvoice
}

func (m *TLMessageMediaInvoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x84551347: func() []byte {
			x.UInt(0x84551347)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetShippingAddressRequested() == true {
					flags |= 1 << 1
				}
				if m.GetTest() == true {
					flags |= 1 << 3
				}

				if m.GetPhoto_FLAGWEBDOCUMENT() != nil {
					flags |= 1 << 0
				}
				if m.GetReceiptMsgId() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			if m.GetPhoto_FLAGWEBDOCUMENT() != nil {
				x.Bytes(m.GetPhoto_FLAGWEBDOCUMENT().Encode(layer))
			}

			if m.GetReceiptMsgId() != nil {
				x.Int(m.GetReceiptMsgId().Value)
			}

			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			x.String(m.GetStartParam())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaInvoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaInvoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaInvoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaInvoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x84551347: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetShippingAddressRequested(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetTest(true)
			}
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m1 := &WebDocument{}
				m1.Decode(dBuf)
				m.SetPhoto_FLAGWEBDOCUMENT(m1)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetReceiptMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			m.SetStartParam(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaInvoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaGeoLive
func MakeTLMessageMediaGeoLive(data2 *MessageMedia) *TLMessageMediaGeoLive {
	if data2 == nil {
		return &TLMessageMediaGeoLive{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaGeoLive,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaGeoLive
		return &TLMessageMediaGeoLive{Data2: data2}
	}
}

func (m *TLMessageMediaGeoLive) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaGeoLive
	return m.Data2
}

//// flags
func (m *TLMessageMediaGeoLive) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeoLive) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLMessageMediaGeoLive) SetHeading(v *types.Int32Value) { m.Data2.Heading = v }
func (m *TLMessageMediaGeoLive) GetHeading() *types.Int32Value  { return m.Data2.Heading }

func (m *TLMessageMediaGeoLive) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLMessageMediaGeoLive) GetPeriod() int32  { return m.Data2.Period }

func (m *TLMessageMediaGeoLive) SetProximityNotificationRadius(v *types.Int32Value) {
	m.Data2.ProximityNotificationRadius = v
}
func (m *TLMessageMediaGeoLive) GetProximityNotificationRadius() *types.Int32Value {
	return m.Data2.ProximityNotificationRadius
}

func (m *TLMessageMediaGeoLive) GetPredicateName() string {
	return Predicate_messageMediaGeoLive
}

func (m *TLMessageMediaGeoLive) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb940c666: func() []byte {
			x.UInt(0xb940c666)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHeading() != nil {
					flags |= 1 << 0
				}

				if m.GetProximityNotificationRadius() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeo().Encode(layer))
			if m.GetHeading() != nil {
				x.Int(m.GetHeading().Value)
			}

			x.Int(m.GetPeriod())
			if m.GetProximityNotificationRadius() != nil {
				x.Int(m.GetProximityNotificationRadius().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaGeoLive, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaGeoLive, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaGeoLive) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaGeoLive) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb940c666: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m3 := &GeoPoint{}
			m3.Decode(dBuf)
			m.SetGeo(m3)

			if (flags & (1 << 0)) != 0 {
				m.SetHeading(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetPeriod(dBuf.Int())
			if (flags & (1 << 1)) != 0 {
				m.SetProximityNotificationRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaGeoLive) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaPoll
func MakeTLMessageMediaPoll(data2 *MessageMedia) *TLMessageMediaPoll {
	if data2 == nil {
		return &TLMessageMediaPoll{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaPoll,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaPoll
		return &TLMessageMediaPoll{Data2: data2}
	}
}

func (m *TLMessageMediaPoll) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaPoll
	return m.Data2
}

func (m *TLMessageMediaPoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLMessageMediaPoll) GetPoll() *Poll  { return m.Data2.Poll }

func (m *TLMessageMediaPoll) SetResults(v *PollResults) { m.Data2.Results = v }
func (m *TLMessageMediaPoll) GetResults() *PollResults  { return m.Data2.Results }

func (m *TLMessageMediaPoll) GetPredicateName() string {
	return Predicate_messageMediaPoll
}

func (m *TLMessageMediaPoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4bd6e798: func() []byte {
			x.UInt(0x4bd6e798)

			x.Bytes(m.GetPoll().Encode(layer))
			x.Bytes(m.GetResults().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaPoll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaPoll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaPoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaPoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4bd6e798: func() error {

			m27 := &Poll{}
			m27.Decode(dBuf)
			m.SetPoll(m27)

			m28 := &PollResults{}
			m28.Decode(dBuf)
			m.SetResults(m28)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaPoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaDice
func MakeTLMessageMediaDice(data2 *MessageMedia) *TLMessageMediaDice {
	if data2 == nil {
		return &TLMessageMediaDice{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaDice,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaDice
		return &TLMessageMediaDice{Data2: data2}
	}
}

func (m *TLMessageMediaDice) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaDice
	return m.Data2
}

func (m *TLMessageMediaDice) SetValue(v int32) { m.Data2.Value = v }
func (m *TLMessageMediaDice) GetValue() int32  { return m.Data2.Value }

func (m *TLMessageMediaDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLMessageMediaDice) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLMessageMediaDice) GetPredicateName() string {
	return Predicate_messageMediaDice
}

func (m *TLMessageMediaDice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3f7ee58b: func() []byte {
			x.UInt(0x3f7ee58b)

			x.Int(m.GetValue())
			x.String(m.GetEmoticon())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaDice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaDice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaDice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaDice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3f7ee58b: func() error {
			m.SetValue(dBuf.Int())
			m.SetEmoticon(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaDice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageMediaBizDataRaw
func MakeTLMessageMediaBizDataRaw(data2 *MessageMedia) *TLMessageMediaBizDataRaw {
	if data2 == nil {
		return &TLMessageMediaBizDataRaw{Data2: &MessageMedia{
			PredicateName: Predicate_messageMediaBizDataRaw,
		}}
	} else {
		data2.PredicateName = Predicate_messageMediaBizDataRaw
		return &TLMessageMediaBizDataRaw{Data2: data2}
	}
}

func (m *TLMessageMediaBizDataRaw) To_MessageMedia() *MessageMedia {
	m.Data2.PredicateName = Predicate_messageMediaBizDataRaw
	return m.Data2
}

func (m *TLMessageMediaBizDataRaw) SetBizData(v *BizDataRaw) { m.Data2.BizData = v }
func (m *TLMessageMediaBizDataRaw) GetBizData() *BizDataRaw  { return m.Data2.BizData }

func (m *TLMessageMediaBizDataRaw) GetPredicateName() string {
	return Predicate_messageMediaBizDataRaw
}

func (m *TLMessageMediaBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7ea0792a: func() []byte {
			x.UInt(0x7ea0792a)

			x.Bytes(m.GetBizData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageMediaBizDataRaw, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageMediaBizDataRaw, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageMediaBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageMediaBizDataRaw) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7ea0792a: func() error {

			m31 := &BizDataRaw{}
			m31.Decode(dBuf)
			m.SetBizData(m31)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageMediaBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_InviteText <--
//  + TL_HelpInviteText
//

func (m *Help_InviteText) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_inviteText:
		t := m.To_HelpInviteText()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_InviteText) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_InviteText) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x18cb9f78:
		m2 := MakeTLHelpInviteText(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_InviteText) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_inviteText:
		t := m.To_HelpInviteText()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpInviteText
func (m *Help_InviteText) To_HelpInviteText() *TLHelpInviteText {
	m.PredicateName = Predicate_help_inviteText
	return &TLHelpInviteText{
		Data2: m,
	}
}

// MakeTLHelpInviteText
func MakeTLHelpInviteText(data2 *Help_InviteText) *TLHelpInviteText {
	if data2 == nil {
		return &TLHelpInviteText{Data2: &Help_InviteText{
			PredicateName: Predicate_help_inviteText,
		}}
	} else {
		data2.PredicateName = Predicate_help_inviteText
		return &TLHelpInviteText{Data2: data2}
	}
}

func (m *TLHelpInviteText) To_Help_InviteText() *Help_InviteText {
	m.Data2.PredicateName = Predicate_help_inviteText
	return m.Data2
}

func (m *TLHelpInviteText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpInviteText) GetMessage() string  { return m.Data2.Message }

func (m *TLHelpInviteText) GetPredicateName() string {
	return Predicate_help_inviteText
}

func (m *TLHelpInviteText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x18cb9f78: func() []byte {
			x.UInt(0x18cb9f78)

			x.String(m.GetMessage())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_inviteText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_inviteText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpInviteText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpInviteText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x18cb9f78: func() error {
			m.SetMessage(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpInviteText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureValue <--
//  + TL_SecureValue
//

func (m *SecureValue) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureValue:
		t := m.To_SecureValue()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureValue) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x187fa0ca:
		m2 := MakeTLSecureValue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureValue) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureValue:
		t := m.To_SecureValue()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureValue
func (m *SecureValue) To_SecureValue() *TLSecureValue {
	m.PredicateName = Predicate_secureValue
	return &TLSecureValue{
		Data2: m,
	}
}

// MakeTLSecureValue
func MakeTLSecureValue(data2 *SecureValue) *TLSecureValue {
	if data2 == nil {
		return &TLSecureValue{Data2: &SecureValue{
			PredicateName: Predicate_secureValue,
		}}
	} else {
		data2.PredicateName = Predicate_secureValue
		return &TLSecureValue{Data2: data2}
	}
}

func (m *TLSecureValue) To_SecureValue() *SecureValue {
	m.Data2.PredicateName = Predicate_secureValue
	return m.Data2
}

//// flags
func (m *TLSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValue) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLSecureValue) GetData() *SecureData  { return m.Data2.Data }

func (m *TLSecureValue) SetFrontSide(v *SecureFile) { m.Data2.FrontSide = v }
func (m *TLSecureValue) GetFrontSide() *SecureFile  { return m.Data2.FrontSide }

func (m *TLSecureValue) SetReverseSide(v *SecureFile) { m.Data2.ReverseSide = v }
func (m *TLSecureValue) GetReverseSide() *SecureFile  { return m.Data2.ReverseSide }

func (m *TLSecureValue) SetSelfie(v *SecureFile) { m.Data2.Selfie = v }
func (m *TLSecureValue) GetSelfie() *SecureFile  { return m.Data2.Selfie }

func (m *TLSecureValue) SetTranslation(v []*SecureFile) { m.Data2.Translation = v }
func (m *TLSecureValue) GetTranslation() []*SecureFile  { return m.Data2.Translation }

func (m *TLSecureValue) SetFiles(v []*SecureFile) { m.Data2.Files = v }
func (m *TLSecureValue) GetFiles() []*SecureFile  { return m.Data2.Files }

func (m *TLSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLSecureValue) GetPlainData() *SecurePlainData  { return m.Data2.PlainData }

func (m *TLSecureValue) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValue) GetHash() []byte  { return m.Data2.Hash }

func (m *TLSecureValue) GetPredicateName() string {
	return Predicate_secureValue
}

func (m *TLSecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x187fa0ca: func() []byte {
			x.UInt(0x187fa0ca)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetData() != nil {
					flags |= 1 << 0
				}
				if m.GetFrontSide() != nil {
					flags |= 1 << 1
				}
				if m.GetReverseSide() != nil {
					flags |= 1 << 2
				}
				if m.GetSelfie() != nil {
					flags |= 1 << 3
				}
				if m.GetTranslation() != nil {
					flags |= 1 << 6
				}
				if m.GetFiles() != nil {
					flags |= 1 << 4
				}
				if m.GetPlainData() != nil {
					flags |= 1 << 5
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetType().Encode(layer))
			if m.GetData() != nil {
				x.Bytes(m.GetData().Encode(layer))
			}

			if m.GetFrontSide() != nil {
				x.Bytes(m.GetFrontSide().Encode(layer))
			}

			if m.GetReverseSide() != nil {
				x.Bytes(m.GetReverseSide().Encode(layer))
			}

			if m.GetSelfie() != nil {
				x.Bytes(m.GetSelfie().Encode(layer))
			}

			if m.GetTranslation() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetTranslation())))
				for _, v := range m.GetTranslation() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetFiles() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetFiles())))
				for _, v := range m.GetFiles() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetPlainData() != nil {
				x.Bytes(m.GetPlainData().Encode(layer))
			}

			x.StringBytes(m.GetHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureValue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureValue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureValue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x187fa0ca: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m1 := &SecureValueType{}
			m1.Decode(dBuf)
			m.SetType(m1)

			if (flags & (1 << 0)) != 0 {
				m2 := &SecureData{}
				m2.Decode(dBuf)
				m.SetData(m2)
			}
			if (flags & (1 << 1)) != 0 {
				m3 := &SecureFile{}
				m3.Decode(dBuf)
				m.SetFrontSide(m3)
			}
			if (flags & (1 << 2)) != 0 {
				m4 := &SecureFile{}
				m4.Decode(dBuf)
				m.SetReverseSide(m4)
			}
			if (flags & (1 << 3)) != 0 {
				m5 := &SecureFile{}
				m5.Decode(dBuf)
				m.SetSelfie(m5)
			}
			if (flags & (1 << 6)) != 0 {
				c6 := dBuf.Int()
				if c6 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
					return dBuf.GetError()
				}
				l6 := dBuf.Int()
				v6 := make([]*SecureFile, l6)
				for i := int32(0); i < l6; i++ {
					v6[i] = &SecureFile{}
					v6[i].Decode(dBuf)
				}
				m.SetTranslation(v6)
			}
			if (flags & (1 << 4)) != 0 {
				c7 := dBuf.Int()
				if c7 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
					return dBuf.GetError()
				}
				l7 := dBuf.Int()
				v7 := make([]*SecureFile, l7)
				for i := int32(0); i < l7; i++ {
					v7[i] = &SecureFile{}
					v7[i].Decode(dBuf)
				}
				m.SetFiles(v7)
			}
			if (flags & (1 << 5)) != 0 {
				m8 := &SecurePlainData{}
				m8.Decode(dBuf)
				m.SetPlainData(m8)
			}
			m.SetHash(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_Takeout <--
//  + TL_AccountTakeout
//

func (m *Account_Takeout) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_takeout:
		t := m.To_AccountTakeout()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_Takeout) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_Takeout) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4dba4501:
		m2 := MakeTLAccountTakeout(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_Takeout) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_takeout:
		t := m.To_AccountTakeout()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountTakeout
func (m *Account_Takeout) To_AccountTakeout() *TLAccountTakeout {
	m.PredicateName = Predicate_account_takeout
	return &TLAccountTakeout{
		Data2: m,
	}
}

// MakeTLAccountTakeout
func MakeTLAccountTakeout(data2 *Account_Takeout) *TLAccountTakeout {
	if data2 == nil {
		return &TLAccountTakeout{Data2: &Account_Takeout{
			PredicateName: Predicate_account_takeout,
		}}
	} else {
		data2.PredicateName = Predicate_account_takeout
		return &TLAccountTakeout{Data2: data2}
	}
}

func (m *TLAccountTakeout) To_Account_Takeout() *Account_Takeout {
	m.Data2.PredicateName = Predicate_account_takeout
	return m.Data2
}

func (m *TLAccountTakeout) SetId(v int64) { m.Data2.Id = v }
func (m *TLAccountTakeout) GetId() int64  { return m.Data2.Id }

func (m *TLAccountTakeout) GetPredicateName() string {
	return Predicate_account_takeout
}

func (m *TLAccountTakeout) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4dba4501: func() []byte {
			x.UInt(0x4dba4501)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_takeout, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_takeout, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountTakeout) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountTakeout) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4dba4501: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountTakeout) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureRequiredType <--
//  + TL_SecureRequiredType
//  + TL_SecureRequiredTypeOneOf
//

func (m *SecureRequiredType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureRequiredType:
		t := m.To_SecureRequiredType()
		xBuf = t.Encode(layer)
	case Predicate_secureRequiredTypeOneOf:
		t := m.To_SecureRequiredTypeOneOf()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureRequiredType) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureRequiredType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x829d99da:
		m2 := MakeTLSecureRequiredType(m)
		m2.Decode(dBuf)
	case 0x27477b4:
		m2 := MakeTLSecureRequiredTypeOneOf(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureRequiredType) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureRequiredType:
		t := m.To_SecureRequiredType()
		return t.DebugString()
	case Predicate_secureRequiredTypeOneOf:
		t := m.To_SecureRequiredTypeOneOf()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureRequiredType
func (m *SecureRequiredType) To_SecureRequiredType() *TLSecureRequiredType {
	m.PredicateName = Predicate_secureRequiredType
	return &TLSecureRequiredType{
		Data2: m,
	}
}

// To_SecureRequiredTypeOneOf
func (m *SecureRequiredType) To_SecureRequiredTypeOneOf() *TLSecureRequiredTypeOneOf {
	m.PredicateName = Predicate_secureRequiredTypeOneOf
	return &TLSecureRequiredTypeOneOf{
		Data2: m,
	}
}

// MakeTLSecureRequiredType
func MakeTLSecureRequiredType(data2 *SecureRequiredType) *TLSecureRequiredType {
	if data2 == nil {
		return &TLSecureRequiredType{Data2: &SecureRequiredType{
			PredicateName: Predicate_secureRequiredType,
		}}
	} else {
		data2.PredicateName = Predicate_secureRequiredType
		return &TLSecureRequiredType{Data2: data2}
	}
}

func (m *TLSecureRequiredType) To_SecureRequiredType() *SecureRequiredType {
	m.Data2.PredicateName = Predicate_secureRequiredType
	return m.Data2
}

//// flags
func (m *TLSecureRequiredType) SetNativeNames(v bool) { m.Data2.NativeNames = v }
func (m *TLSecureRequiredType) GetNativeNames() bool  { return m.Data2.NativeNames }

func (m *TLSecureRequiredType) SetSelfieRequired(v bool) { m.Data2.SelfieRequired = v }
func (m *TLSecureRequiredType) GetSelfieRequired() bool  { return m.Data2.SelfieRequired }

func (m *TLSecureRequiredType) SetTranslationRequired(v bool) { m.Data2.TranslationRequired = v }
func (m *TLSecureRequiredType) GetTranslationRequired() bool  { return m.Data2.TranslationRequired }

func (m *TLSecureRequiredType) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureRequiredType) GetType() *SecureValueType  { return m.Data2.Type }

func (m *TLSecureRequiredType) GetPredicateName() string {
	return Predicate_secureRequiredType
}

func (m *TLSecureRequiredType) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x829d99da: func() []byte {
			x.UInt(0x829d99da)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNativeNames() == true {
					flags |= 1 << 0
				}
				if m.GetSelfieRequired() == true {
					flags |= 1 << 1
				}
				if m.GetTranslationRequired() == true {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetType().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureRequiredType, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureRequiredType, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureRequiredType) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureRequiredType) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x829d99da: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetNativeNames(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSelfieRequired(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTranslationRequired(true)
			}

			m4 := &SecureValueType{}
			m4.Decode(dBuf)
			m.SetType(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureRequiredType) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLSecureRequiredTypeOneOf
func MakeTLSecureRequiredTypeOneOf(data2 *SecureRequiredType) *TLSecureRequiredTypeOneOf {
	if data2 == nil {
		return &TLSecureRequiredTypeOneOf{Data2: &SecureRequiredType{
			PredicateName: Predicate_secureRequiredTypeOneOf,
		}}
	} else {
		data2.PredicateName = Predicate_secureRequiredTypeOneOf
		return &TLSecureRequiredTypeOneOf{Data2: data2}
	}
}

func (m *TLSecureRequiredTypeOneOf) To_SecureRequiredType() *SecureRequiredType {
	m.Data2.PredicateName = Predicate_secureRequiredTypeOneOf
	return m.Data2
}

func (m *TLSecureRequiredTypeOneOf) SetTypes(v []*SecureRequiredType) { m.Data2.Types = v }
func (m *TLSecureRequiredTypeOneOf) GetTypes() []*SecureRequiredType  { return m.Data2.Types }

func (m *TLSecureRequiredTypeOneOf) GetPredicateName() string {
	return Predicate_secureRequiredTypeOneOf
}

func (m *TLSecureRequiredTypeOneOf) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x27477b4: func() []byte {
			x.UInt(0x27477b4)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTypes())))
			for _, v := range m.GetTypes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureRequiredTypeOneOf, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureRequiredTypeOneOf, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureRequiredTypeOneOf) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureRequiredTypeOneOf) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x27477b4: func() error {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*SecureRequiredType, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &SecureRequiredType{}
				v5[i].Decode(dBuf)
			}
			m.SetTypes(v5)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureRequiredTypeOneOf) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_MessageReactionsList <--
//  + TL_MessagesMessageReactionsList
//

func (m *Messages_MessageReactionsList) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_messageReactionsList:
		t := m.To_MessagesMessageReactionsList()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_MessageReactionsList) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_MessageReactionsList) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x31bd492d:
		m2 := MakeTLMessagesMessageReactionsList(m)
		m2.Decode(dBuf)
	case 0xa366923c:
		m2 := MakeTLMessagesMessageReactionsList(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_MessageReactionsList) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_messageReactionsList:
		t := m.To_MessagesMessageReactionsList()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesMessageReactionsList
func (m *Messages_MessageReactionsList) To_MessagesMessageReactionsList() *TLMessagesMessageReactionsList {
	m.PredicateName = Predicate_messages_messageReactionsList
	return &TLMessagesMessageReactionsList{
		Data2: m,
	}
}

// MakeTLMessagesMessageReactionsList
func MakeTLMessagesMessageReactionsList(data2 *Messages_MessageReactionsList) *TLMessagesMessageReactionsList {
	if data2 == nil {
		return &TLMessagesMessageReactionsList{Data2: &Messages_MessageReactionsList{
			PredicateName: Predicate_messages_messageReactionsList,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messageReactionsList
		return &TLMessagesMessageReactionsList{Data2: data2}
	}
}

func (m *TLMessagesMessageReactionsList) To_Messages_MessageReactionsList() *Messages_MessageReactionsList {
	m.Data2.PredicateName = Predicate_messages_messageReactionsList
	return m.Data2
}

//// flags
func (m *TLMessagesMessageReactionsList) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessageReactionsList) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesMessageReactionsList) SetReactions_VECTORMESSAGEPEERREACTION(v []*MessagePeerReaction) {
	m.Data2.Reactions_VECTORMESSAGEPEERREACTION = v
}
func (m *TLMessagesMessageReactionsList) GetReactions_VECTORMESSAGEPEERREACTION() []*MessagePeerReaction {
	return m.Data2.Reactions_VECTORMESSAGEPEERREACTION
}

func (m *TLMessagesMessageReactionsList) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessageReactionsList) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessageReactionsList) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessageReactionsList) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesMessageReactionsList) SetNextOffset(v *types.StringValue) { m.Data2.NextOffset = v }
func (m *TLMessagesMessageReactionsList) GetNextOffset() *types.StringValue {
	return m.Data2.NextOffset
}

func (m *TLMessagesMessageReactionsList) SetReactions_VECTORMESSAGEUSERREACTION(v []*MessageUserReaction) {
	m.Data2.Reactions_VECTORMESSAGEUSERREACTION = v
}
func (m *TLMessagesMessageReactionsList) GetReactions_VECTORMESSAGEUSERREACTION() []*MessageUserReaction {
	return m.Data2.Reactions_VECTORMESSAGEUSERREACTION
}

func (m *TLMessagesMessageReactionsList) GetPredicateName() string {
	return Predicate_messages_messageReactionsList
}

func (m *TLMessagesMessageReactionsList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x31bd492d: func() []byte {
			x.UInt(0x31bd492d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNextOffset() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetReactions_VECTORMESSAGEPEERREACTION())))
			for _, v := range m.GetReactions_VECTORMESSAGEPEERREACTION() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetNextOffset() != nil {
				x.String(m.GetNextOffset().Value)
			}

			return x.GetBuf()
		},
		0xa366923c: func() []byte {
			x.UInt(0xa366923c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNextOffset() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetReactions_VECTORMESSAGEUSERREACTION())))
			for _, v := range m.GetReactions_VECTORMESSAGEUSERREACTION() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetNextOffset() != nil {
				x.String(m.GetNextOffset().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messageReactionsList, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messageReactionsList, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessageReactionsList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessageReactionsList) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x31bd492d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*MessagePeerReaction, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &MessagePeerReaction{}
				v2[i].Decode(dBuf)
			}
			m.SetReactions_VECTORMESSAGEPEERREACTION(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*Chat, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &Chat{}
				v3[i].Decode(dBuf)
			}
			m.SetChats(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*User, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &User{}
				v4[i].Decode(dBuf)
			}
			m.SetUsers(v4)

			if (flags & (1 << 0)) != 0 {
				m.SetNextOffset(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
		0xa366923c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*MessageUserReaction, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &MessageUserReaction{}
				v2[i].Decode(dBuf)
			}
			m.SetReactions_VECTORMESSAGEUSERREACTION(v2)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*User, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &User{}
				v4[i].Decode(dBuf)
			}
			m.SetUsers(v4)

			if (flags & (1 << 0)) != 0 {
				m.SetNextOffset(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessageReactionsList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_FeaturedStickers <--
//  + TL_MessagesFeaturedStickersNotModified
//  + TL_MessagesFeaturedStickers
//

func (m *Messages_FeaturedStickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_featuredStickersNotModified:
		t := m.To_MessagesFeaturedStickersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_featuredStickers:
		t := m.To_MessagesFeaturedStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_FeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_FeaturedStickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc6dc0c66:
		m2 := MakeTLMessagesFeaturedStickersNotModified(m)
		m2.Decode(dBuf)
	case 0x84c02310:
		m2 := MakeTLMessagesFeaturedStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_FeaturedStickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_featuredStickersNotModified:
		t := m.To_MessagesFeaturedStickersNotModified()
		return t.DebugString()
	case Predicate_messages_featuredStickers:
		t := m.To_MessagesFeaturedStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesFeaturedStickersNotModified
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickersNotModified() *TLMessagesFeaturedStickersNotModified {
	m.PredicateName = Predicate_messages_featuredStickersNotModified
	return &TLMessagesFeaturedStickersNotModified{
		Data2: m,
	}
}

// To_MessagesFeaturedStickers
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickers() *TLMessagesFeaturedStickers {
	m.PredicateName = Predicate_messages_featuredStickers
	return &TLMessagesFeaturedStickers{
		Data2: m,
	}
}

// MakeTLMessagesFeaturedStickersNotModified
func MakeTLMessagesFeaturedStickersNotModified(data2 *Messages_FeaturedStickers) *TLMessagesFeaturedStickersNotModified {
	if data2 == nil {
		return &TLMessagesFeaturedStickersNotModified{Data2: &Messages_FeaturedStickers{
			PredicateName: Predicate_messages_featuredStickersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_featuredStickersNotModified
		return &TLMessagesFeaturedStickersNotModified{Data2: data2}
	}
}

func (m *TLMessagesFeaturedStickersNotModified) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
	m.Data2.PredicateName = Predicate_messages_featuredStickersNotModified
	return m.Data2
}

func (m *TLMessagesFeaturedStickersNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesFeaturedStickersNotModified) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesFeaturedStickersNotModified) GetPredicateName() string {
	return Predicate_messages_featuredStickersNotModified
}

func (m *TLMessagesFeaturedStickersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc6dc0c66: func() []byte {
			x.UInt(0xc6dc0c66)

			x.Int(m.GetCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_featuredStickersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_featuredStickersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFeaturedStickersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFeaturedStickersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc6dc0c66: func() error {
			m.SetCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFeaturedStickersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesFeaturedStickers
func MakeTLMessagesFeaturedStickers(data2 *Messages_FeaturedStickers) *TLMessagesFeaturedStickers {
	if data2 == nil {
		return &TLMessagesFeaturedStickers{Data2: &Messages_FeaturedStickers{
			PredicateName: Predicate_messages_featuredStickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_featuredStickers
		return &TLMessagesFeaturedStickers{Data2: data2}
	}
}

func (m *TLMessagesFeaturedStickers) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
	m.Data2.PredicateName = Predicate_messages_featuredStickers
	return m.Data2
}

func (m *TLMessagesFeaturedStickers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesFeaturedStickers) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesFeaturedStickers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesFeaturedStickers) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesFeaturedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFeaturedStickers) GetSets() []*StickerSetCovered  { return m.Data2.Sets }

func (m *TLMessagesFeaturedStickers) SetUnread(v []int64) { m.Data2.Unread = v }
func (m *TLMessagesFeaturedStickers) GetUnread() []int64  { return m.Data2.Unread }

func (m *TLMessagesFeaturedStickers) GetPredicateName() string {
	return Predicate_messages_featuredStickers
}

func (m *TLMessagesFeaturedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x84c02310: func() []byte {
			x.UInt(0x84c02310)

			x.Long(m.GetHash())
			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSets())))
			for _, v := range m.GetSets() {
				x.Bytes((*v).Encode(layer))
			}

			x.VectorLong(m.GetUnread())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_featuredStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_featuredStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesFeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFeaturedStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x84c02310: func() error {
			m.SetHash(dBuf.Long())
			m.SetCount(dBuf.Int())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*StickerSetCovered, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &StickerSetCovered{}
				v2[i].Decode(dBuf)
			}
			m.SetSets(v2)

			m.SetUnread(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesFeaturedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GroupCall <--
//  + TL_GroupCallDiscarded
//  + TL_GroupCall
//

func (m *GroupCall) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_groupCallDiscarded:
		t := m.To_GroupCallDiscarded()
		xBuf = t.Encode(layer)
	case Predicate_groupCall:
		t := m.To_GroupCall()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *GroupCall) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7780bcb4:
		m2 := MakeTLGroupCallDiscarded(m)
		m2.Decode(dBuf)
	case 0xd597650c:
		m2 := MakeTLGroupCall(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GroupCall) DebugString() string {
	switch m.PredicateName {
	case Predicate_groupCallDiscarded:
		t := m.To_GroupCallDiscarded()
		return t.DebugString()
	case Predicate_groupCall:
		t := m.To_GroupCall()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GroupCallDiscarded
func (m *GroupCall) To_GroupCallDiscarded() *TLGroupCallDiscarded {
	m.PredicateName = Predicate_groupCallDiscarded
	return &TLGroupCallDiscarded{
		Data2: m,
	}
}

// To_GroupCall
func (m *GroupCall) To_GroupCall() *TLGroupCall {
	m.PredicateName = Predicate_groupCall
	return &TLGroupCall{
		Data2: m,
	}
}

// MakeTLGroupCallDiscarded
func MakeTLGroupCallDiscarded(data2 *GroupCall) *TLGroupCallDiscarded {
	if data2 == nil {
		return &TLGroupCallDiscarded{Data2: &GroupCall{
			PredicateName: Predicate_groupCallDiscarded,
		}}
	} else {
		data2.PredicateName = Predicate_groupCallDiscarded
		return &TLGroupCallDiscarded{Data2: data2}
	}
}

func (m *TLGroupCallDiscarded) To_GroupCall() *GroupCall {
	m.Data2.PredicateName = Predicate_groupCallDiscarded
	return m.Data2
}

func (m *TLGroupCallDiscarded) SetId(v int64) { m.Data2.Id = v }
func (m *TLGroupCallDiscarded) GetId() int64  { return m.Data2.Id }

func (m *TLGroupCallDiscarded) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGroupCallDiscarded) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLGroupCallDiscarded) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLGroupCallDiscarded) GetDuration() int32  { return m.Data2.Duration }

func (m *TLGroupCallDiscarded) GetPredicateName() string {
	return Predicate_groupCallDiscarded
}

func (m *TLGroupCallDiscarded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7780bcb4: func() []byte {
			x.UInt(0x7780bcb4)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDuration())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCallDiscarded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCallDiscarded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCallDiscarded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCallDiscarded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7780bcb4: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetDuration(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCallDiscarded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLGroupCall
func MakeTLGroupCall(data2 *GroupCall) *TLGroupCall {
	if data2 == nil {
		return &TLGroupCall{Data2: &GroupCall{
			PredicateName: Predicate_groupCall,
		}}
	} else {
		data2.PredicateName = Predicate_groupCall
		return &TLGroupCall{Data2: data2}
	}
}

func (m *TLGroupCall) To_GroupCall() *GroupCall {
	m.Data2.PredicateName = Predicate_groupCall
	return m.Data2
}

//// flags
func (m *TLGroupCall) SetJoinMuted(v bool) { m.Data2.JoinMuted = v }
func (m *TLGroupCall) GetJoinMuted() bool  { return m.Data2.JoinMuted }

func (m *TLGroupCall) SetCanChangeJoinMuted(v bool) { m.Data2.CanChangeJoinMuted = v }
func (m *TLGroupCall) GetCanChangeJoinMuted() bool  { return m.Data2.CanChangeJoinMuted }

func (m *TLGroupCall) SetJoinDateAsc(v bool) { m.Data2.JoinDateAsc = v }
func (m *TLGroupCall) GetJoinDateAsc() bool  { return m.Data2.JoinDateAsc }

func (m *TLGroupCall) SetScheduleStartSubscribed(v bool) { m.Data2.ScheduleStartSubscribed = v }
func (m *TLGroupCall) GetScheduleStartSubscribed() bool  { return m.Data2.ScheduleStartSubscribed }

func (m *TLGroupCall) SetCanStartVideo(v bool) { m.Data2.CanStartVideo = v }
func (m *TLGroupCall) GetCanStartVideo() bool  { return m.Data2.CanStartVideo }

func (m *TLGroupCall) SetRecordVideoActive(v bool) { m.Data2.RecordVideoActive = v }
func (m *TLGroupCall) GetRecordVideoActive() bool  { return m.Data2.RecordVideoActive }

func (m *TLGroupCall) SetRtmpStream(v bool) { m.Data2.RtmpStream = v }
func (m *TLGroupCall) GetRtmpStream() bool  { return m.Data2.RtmpStream }

func (m *TLGroupCall) SetListenersHidden(v bool) { m.Data2.ListenersHidden = v }
func (m *TLGroupCall) GetListenersHidden() bool  { return m.Data2.ListenersHidden }

func (m *TLGroupCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLGroupCall) GetId() int64  { return m.Data2.Id }

func (m *TLGroupCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGroupCall) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLGroupCall) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLGroupCall) GetParticipantsCount() int32  { return m.Data2.ParticipantsCount }

func (m *TLGroupCall) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLGroupCall) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLGroupCall) SetStreamDcId(v *types.Int32Value) { m.Data2.StreamDcId = v }
func (m *TLGroupCall) GetStreamDcId() *types.Int32Value  { return m.Data2.StreamDcId }

func (m *TLGroupCall) SetRecordStartDate(v *types.Int32Value) { m.Data2.RecordStartDate = v }
func (m *TLGroupCall) GetRecordStartDate() *types.Int32Value  { return m.Data2.RecordStartDate }

func (m *TLGroupCall) SetScheduleDate(v *types.Int32Value) { m.Data2.ScheduleDate = v }
func (m *TLGroupCall) GetScheduleDate() *types.Int32Value  { return m.Data2.ScheduleDate }

func (m *TLGroupCall) SetUnmutedVideoCount(v *types.Int32Value) { m.Data2.UnmutedVideoCount = v }
func (m *TLGroupCall) GetUnmutedVideoCount() *types.Int32Value  { return m.Data2.UnmutedVideoCount }

func (m *TLGroupCall) SetUnmutedVideoLimit(v int32) { m.Data2.UnmutedVideoLimit = v }
func (m *TLGroupCall) GetUnmutedVideoLimit() int32  { return m.Data2.UnmutedVideoLimit }

func (m *TLGroupCall) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLGroupCall) GetVersion() int32  { return m.Data2.Version }

func (m *TLGroupCall) GetPredicateName() string {
	return Predicate_groupCall
}

func (m *TLGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd597650c: func() []byte {
			x.UInt(0xd597650c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetJoinMuted() == true {
					flags |= 1 << 1
				}
				if m.GetCanChangeJoinMuted() == true {
					flags |= 1 << 2
				}
				if m.GetJoinDateAsc() == true {
					flags |= 1 << 6
				}
				if m.GetScheduleStartSubscribed() == true {
					flags |= 1 << 8
				}
				if m.GetCanStartVideo() == true {
					flags |= 1 << 9
				}
				if m.GetRecordVideoActive() == true {
					flags |= 1 << 11
				}
				if m.GetRtmpStream() == true {
					flags |= 1 << 12
				}
				if m.GetListenersHidden() == true {
					flags |= 1 << 13
				}

				if m.GetTitle() != nil {
					flags |= 1 << 3
				}
				if m.GetStreamDcId() != nil {
					flags |= 1 << 4
				}
				if m.GetRecordStartDate() != nil {
					flags |= 1 << 5
				}
				if m.GetScheduleDate() != nil {
					flags |= 1 << 7
				}
				if m.GetUnmutedVideoCount() != nil {
					flags |= 1 << 10
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetParticipantsCount())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetStreamDcId() != nil {
				x.Int(m.GetStreamDcId().Value)
			}

			if m.GetRecordStartDate() != nil {
				x.Int(m.GetRecordStartDate().Value)
			}

			if m.GetScheduleDate() != nil {
				x.Int(m.GetScheduleDate().Value)
			}

			if m.GetUnmutedVideoCount() != nil {
				x.Int(m.GetUnmutedVideoCount().Value)
			}

			x.Int(m.GetUnmutedVideoLimit())
			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd597650c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetJoinMuted(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetCanChangeJoinMuted(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetJoinDateAsc(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetScheduleStartSubscribed(true)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetCanStartVideo(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetRecordVideoActive(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetRtmpStream(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetListenersHidden(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetParticipantsCount(dBuf.Int())
			if (flags & (1 << 3)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetStreamDcId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetRecordStartDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 7)) != 0 {
				m.SetScheduleDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 10)) != 0 {
				m.SetUnmutedVideoCount(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetUnmutedVideoLimit(dBuf.Int())
			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PeerUtil <--
//  + TL_PeerUtil
//

func (m *PeerUtil) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerUtil:
		t := m.To_PeerUtil()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PeerUtil) CalcByteSize(layer int32) int {
	return 0
}

func (m *PeerUtil) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x23ef2ba5:
		m2 := MakeTLPeerUtil(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PeerUtil) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerUtil:
		t := m.To_PeerUtil()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerUtil
func (m *PeerUtil) To_PeerUtil() *TLPeerUtil {
	m.PredicateName = Predicate_peerUtil
	return &TLPeerUtil{
		Data2: m,
	}
}

// MakeTLPeerUtil
func MakeTLPeerUtil(data2 *PeerUtil) *TLPeerUtil {
	if data2 == nil {
		return &TLPeerUtil{Data2: &PeerUtil{
			PredicateName: Predicate_peerUtil,
		}}
	} else {
		data2.PredicateName = Predicate_peerUtil
		return &TLPeerUtil{Data2: data2}
	}
}

func (m *TLPeerUtil) To_PeerUtil() *PeerUtil {
	m.Data2.PredicateName = Predicate_peerUtil
	return m.Data2
}

func (m *TLPeerUtil) SetSelfId(v int64) { m.Data2.SelfId = v }
func (m *TLPeerUtil) GetSelfId() int64  { return m.Data2.SelfId }

func (m *TLPeerUtil) SetPeerType(v int32) { m.Data2.PeerType = v }
func (m *TLPeerUtil) GetPeerType() int32  { return m.Data2.PeerType }

func (m *TLPeerUtil) SetPeerId(v int64) { m.Data2.PeerId = v }
func (m *TLPeerUtil) GetPeerId() int64  { return m.Data2.PeerId }

func (m *TLPeerUtil) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPeerUtil) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLPeerUtil) GetPredicateName() string {
	return Predicate_peerUtil
}

func (m *TLPeerUtil) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x23ef2ba5: func() []byte {
			x.UInt(0x23ef2ba5)

			x.Long(m.GetSelfId())
			x.Int(m.GetPeerType())
			x.Long(m.GetPeerId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerUtil, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerUtil, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerUtil) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerUtil) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x23ef2ba5: func() error {
			m.SetSelfId(dBuf.Long())
			m.SetPeerType(dBuf.Int())
			m.SetPeerId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerUtil) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_PeerSettings <--
//  + TL_MessagesPeerSettings
//

func (m *Messages_PeerSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_peerSettings:
		t := m.To_MessagesPeerSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_PeerSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_PeerSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6880b94d:
		m2 := MakeTLMessagesPeerSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_PeerSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_peerSettings:
		t := m.To_MessagesPeerSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesPeerSettings
func (m *Messages_PeerSettings) To_MessagesPeerSettings() *TLMessagesPeerSettings {
	m.PredicateName = Predicate_messages_peerSettings
	return &TLMessagesPeerSettings{
		Data2: m,
	}
}

// MakeTLMessagesPeerSettings
func MakeTLMessagesPeerSettings(data2 *Messages_PeerSettings) *TLMessagesPeerSettings {
	if data2 == nil {
		return &TLMessagesPeerSettings{Data2: &Messages_PeerSettings{
			PredicateName: Predicate_messages_peerSettings,
		}}
	} else {
		data2.PredicateName = Predicate_messages_peerSettings
		return &TLMessagesPeerSettings{Data2: data2}
	}
}

func (m *TLMessagesPeerSettings) To_Messages_PeerSettings() *Messages_PeerSettings {
	m.Data2.PredicateName = Predicate_messages_peerSettings
	return m.Data2
}

func (m *TLMessagesPeerSettings) SetSettings(v *PeerSettings) { m.Data2.Settings = v }
func (m *TLMessagesPeerSettings) GetSettings() *PeerSettings  { return m.Data2.Settings }

func (m *TLMessagesPeerSettings) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesPeerSettings) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesPeerSettings) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesPeerSettings) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesPeerSettings) GetPredicateName() string {
	return Predicate_messages_peerSettings
}

func (m *TLMessagesPeerSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6880b94d: func() []byte {
			x.UInt(0x6880b94d)

			x.Bytes(m.GetSettings().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_peerSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_peerSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesPeerSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesPeerSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6880b94d: func() error {

			m0 := &PeerSettings{}
			m0.Decode(dBuf)
			m.SetSettings(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesPeerSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Auth_ExportedAuthorization <--
//  + TL_AuthExportedAuthorization
//

func (m *Auth_ExportedAuthorization) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_auth_exportedAuthorization:
		t := m.To_AuthExportedAuthorization()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Auth_ExportedAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *Auth_ExportedAuthorization) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb434e2b8:
		m2 := MakeTLAuthExportedAuthorization(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Auth_ExportedAuthorization) DebugString() string {
	switch m.PredicateName {
	case Predicate_auth_exportedAuthorization:
		t := m.To_AuthExportedAuthorization()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AuthExportedAuthorization
func (m *Auth_ExportedAuthorization) To_AuthExportedAuthorization() *TLAuthExportedAuthorization {
	m.PredicateName = Predicate_auth_exportedAuthorization
	return &TLAuthExportedAuthorization{
		Data2: m,
	}
}

// MakeTLAuthExportedAuthorization
func MakeTLAuthExportedAuthorization(data2 *Auth_ExportedAuthorization) *TLAuthExportedAuthorization {
	if data2 == nil {
		return &TLAuthExportedAuthorization{Data2: &Auth_ExportedAuthorization{
			PredicateName: Predicate_auth_exportedAuthorization,
		}}
	} else {
		data2.PredicateName = Predicate_auth_exportedAuthorization
		return &TLAuthExportedAuthorization{Data2: data2}
	}
}

func (m *TLAuthExportedAuthorization) To_Auth_ExportedAuthorization() *Auth_ExportedAuthorization {
	m.Data2.PredicateName = Predicate_auth_exportedAuthorization
	return m.Data2
}

func (m *TLAuthExportedAuthorization) SetId(v int64) { m.Data2.Id = v }
func (m *TLAuthExportedAuthorization) GetId() int64  { return m.Data2.Id }

func (m *TLAuthExportedAuthorization) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLAuthExportedAuthorization) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLAuthExportedAuthorization) GetPredicateName() string {
	return Predicate_auth_exportedAuthorization
}

func (m *TLAuthExportedAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb434e2b8: func() []byte {
			x.UInt(0xb434e2b8)

			x.Long(m.GetId())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_auth_exportedAuthorization, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_auth_exportedAuthorization, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAuthExportedAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthExportedAuthorization) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb434e2b8: func() error {
			m.SetId(dBuf.Long())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAuthExportedAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_SentEncryptedMessage <--
//  + TL_MessagesSentEncryptedMessage
//  + TL_MessagesSentEncryptedFile
//

func (m *Messages_SentEncryptedMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_sentEncryptedMessage:
		t := m.To_MessagesSentEncryptedMessage()
		xBuf = t.Encode(layer)
	case Predicate_messages_sentEncryptedFile:
		t := m.To_MessagesSentEncryptedFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_SentEncryptedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_SentEncryptedMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x560f8935:
		m2 := MakeTLMessagesSentEncryptedMessage(m)
		m2.Decode(dBuf)
	case 0x9493ff32:
		m2 := MakeTLMessagesSentEncryptedFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_SentEncryptedMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_sentEncryptedMessage:
		t := m.To_MessagesSentEncryptedMessage()
		return t.DebugString()
	case Predicate_messages_sentEncryptedFile:
		t := m.To_MessagesSentEncryptedFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesSentEncryptedMessage
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedMessage() *TLMessagesSentEncryptedMessage {
	m.PredicateName = Predicate_messages_sentEncryptedMessage
	return &TLMessagesSentEncryptedMessage{
		Data2: m,
	}
}

// To_MessagesSentEncryptedFile
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedFile() *TLMessagesSentEncryptedFile {
	m.PredicateName = Predicate_messages_sentEncryptedFile
	return &TLMessagesSentEncryptedFile{
		Data2: m,
	}
}

// MakeTLMessagesSentEncryptedMessage
func MakeTLMessagesSentEncryptedMessage(data2 *Messages_SentEncryptedMessage) *TLMessagesSentEncryptedMessage {
	if data2 == nil {
		return &TLMessagesSentEncryptedMessage{Data2: &Messages_SentEncryptedMessage{
			PredicateName: Predicate_messages_sentEncryptedMessage,
		}}
	} else {
		data2.PredicateName = Predicate_messages_sentEncryptedMessage
		return &TLMessagesSentEncryptedMessage{Data2: data2}
	}
}

func (m *TLMessagesSentEncryptedMessage) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
	m.Data2.PredicateName = Predicate_messages_sentEncryptedMessage
	return m.Data2
}

func (m *TLMessagesSentEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLMessagesSentEncryptedMessage) GetPredicateName() string {
	return Predicate_messages_sentEncryptedMessage
}

func (m *TLMessagesSentEncryptedMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x560f8935: func() []byte {
			x.UInt(0x560f8935)

			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_sentEncryptedMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_sentEncryptedMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSentEncryptedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSentEncryptedMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x560f8935: func() error {
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSentEncryptedMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesSentEncryptedFile
func MakeTLMessagesSentEncryptedFile(data2 *Messages_SentEncryptedMessage) *TLMessagesSentEncryptedFile {
	if data2 == nil {
		return &TLMessagesSentEncryptedFile{Data2: &Messages_SentEncryptedMessage{
			PredicateName: Predicate_messages_sentEncryptedFile,
		}}
	} else {
		data2.PredicateName = Predicate_messages_sentEncryptedFile
		return &TLMessagesSentEncryptedFile{Data2: data2}
	}
}

func (m *TLMessagesSentEncryptedFile) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
	m.Data2.PredicateName = Predicate_messages_sentEncryptedFile
	return m.Data2
}

func (m *TLMessagesSentEncryptedFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedFile) GetDate() int32  { return m.Data2.Date }

func (m *TLMessagesSentEncryptedFile) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLMessagesSentEncryptedFile) GetFile() *EncryptedFile  { return m.Data2.File }

func (m *TLMessagesSentEncryptedFile) GetPredicateName() string {
	return Predicate_messages_sentEncryptedFile
}

func (m *TLMessagesSentEncryptedFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9493ff32: func() []byte {
			x.UInt(0x9493ff32)

			x.Int(m.GetDate())
			x.Bytes(m.GetFile().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_sentEncryptedFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_sentEncryptedFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesSentEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSentEncryptedFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9493ff32: func() error {
			m.SetDate(dBuf.Int())

			m1 := &EncryptedFile{}
			m1.Decode(dBuf)
			m.SetFile(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesSentEncryptedFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelParticipantsFilter <--
//  + TL_ChannelParticipantsRecent
//  + TL_ChannelParticipantsAdmins
//  + TL_ChannelParticipantsKicked
//  + TL_ChannelParticipantsBots
//  + TL_ChannelParticipantsBanned
//  + TL_ChannelParticipantsSearch
//  + TL_ChannelParticipantsContacts
//  + TL_ChannelParticipantsMentions
//

func (m *ChannelParticipantsFilter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelParticipantsRecent:
		t := m.To_ChannelParticipantsRecent()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsAdmins:
		t := m.To_ChannelParticipantsAdmins()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsKicked:
		t := m.To_ChannelParticipantsKicked()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsBots:
		t := m.To_ChannelParticipantsBots()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsBanned:
		t := m.To_ChannelParticipantsBanned()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsSearch:
		t := m.To_ChannelParticipantsSearch()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsContacts:
		t := m.To_ChannelParticipantsContacts()
		xBuf = t.Encode(layer)
	case Predicate_channelParticipantsMentions:
		t := m.To_ChannelParticipantsMentions()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelParticipantsFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelParticipantsFilter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xde3f3c79:
		m2 := MakeTLChannelParticipantsRecent(m)
		m2.Decode(dBuf)
	case 0xb4608969:
		m2 := MakeTLChannelParticipantsAdmins(m)
		m2.Decode(dBuf)
	case 0xa3b54985:
		m2 := MakeTLChannelParticipantsKicked(m)
		m2.Decode(dBuf)
	case 0xb0d1865b:
		m2 := MakeTLChannelParticipantsBots(m)
		m2.Decode(dBuf)
	case 0x1427a5e1:
		m2 := MakeTLChannelParticipantsBanned(m)
		m2.Decode(dBuf)
	case 0x656ac4b:
		m2 := MakeTLChannelParticipantsSearch(m)
		m2.Decode(dBuf)
	case 0xbb6ae88d:
		m2 := MakeTLChannelParticipantsContacts(m)
		m2.Decode(dBuf)
	case 0xe04b5ceb:
		m2 := MakeTLChannelParticipantsMentions(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelParticipantsFilter) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelParticipantsRecent:
		t := m.To_ChannelParticipantsRecent()
		return t.DebugString()
	case Predicate_channelParticipantsAdmins:
		t := m.To_ChannelParticipantsAdmins()
		return t.DebugString()
	case Predicate_channelParticipantsKicked:
		t := m.To_ChannelParticipantsKicked()
		return t.DebugString()
	case Predicate_channelParticipantsBots:
		t := m.To_ChannelParticipantsBots()
		return t.DebugString()
	case Predicate_channelParticipantsBanned:
		t := m.To_ChannelParticipantsBanned()
		return t.DebugString()
	case Predicate_channelParticipantsSearch:
		t := m.To_ChannelParticipantsSearch()
		return t.DebugString()
	case Predicate_channelParticipantsContacts:
		t := m.To_ChannelParticipantsContacts()
		return t.DebugString()
	case Predicate_channelParticipantsMentions:
		t := m.To_ChannelParticipantsMentions()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelParticipantsRecent
func (m *ChannelParticipantsFilter) To_ChannelParticipantsRecent() *TLChannelParticipantsRecent {
	m.PredicateName = Predicate_channelParticipantsRecent
	return &TLChannelParticipantsRecent{
		Data2: m,
	}
}

// To_ChannelParticipantsAdmins
func (m *ChannelParticipantsFilter) To_ChannelParticipantsAdmins() *TLChannelParticipantsAdmins {
	m.PredicateName = Predicate_channelParticipantsAdmins
	return &TLChannelParticipantsAdmins{
		Data2: m,
	}
}

// To_ChannelParticipantsKicked
func (m *ChannelParticipantsFilter) To_ChannelParticipantsKicked() *TLChannelParticipantsKicked {
	m.PredicateName = Predicate_channelParticipantsKicked
	return &TLChannelParticipantsKicked{
		Data2: m,
	}
}

// To_ChannelParticipantsBots
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBots() *TLChannelParticipantsBots {
	m.PredicateName = Predicate_channelParticipantsBots
	return &TLChannelParticipantsBots{
		Data2: m,
	}
}

// To_ChannelParticipantsBanned
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBanned() *TLChannelParticipantsBanned {
	m.PredicateName = Predicate_channelParticipantsBanned
	return &TLChannelParticipantsBanned{
		Data2: m,
	}
}

// To_ChannelParticipantsSearch
func (m *ChannelParticipantsFilter) To_ChannelParticipantsSearch() *TLChannelParticipantsSearch {
	m.PredicateName = Predicate_channelParticipantsSearch
	return &TLChannelParticipantsSearch{
		Data2: m,
	}
}

// To_ChannelParticipantsContacts
func (m *ChannelParticipantsFilter) To_ChannelParticipantsContacts() *TLChannelParticipantsContacts {
	m.PredicateName = Predicate_channelParticipantsContacts
	return &TLChannelParticipantsContacts{
		Data2: m,
	}
}

// To_ChannelParticipantsMentions
func (m *ChannelParticipantsFilter) To_ChannelParticipantsMentions() *TLChannelParticipantsMentions {
	m.PredicateName = Predicate_channelParticipantsMentions
	return &TLChannelParticipantsMentions{
		Data2: m,
	}
}

// MakeTLChannelParticipantsRecent
func MakeTLChannelParticipantsRecent(data2 *ChannelParticipantsFilter) *TLChannelParticipantsRecent {
	if data2 == nil {
		return &TLChannelParticipantsRecent{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsRecent,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsRecent
		return &TLChannelParticipantsRecent{Data2: data2}
	}
}

func (m *TLChannelParticipantsRecent) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsRecent
	return m.Data2
}

func (m *TLChannelParticipantsRecent) GetPredicateName() string {
	return Predicate_channelParticipantsRecent
}

func (m *TLChannelParticipantsRecent) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xde3f3c79: func() []byte {
			x.UInt(0xde3f3c79)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsRecent, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsRecent, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsRecent) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsRecent) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xde3f3c79: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsRecent) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsAdmins
func MakeTLChannelParticipantsAdmins(data2 *ChannelParticipantsFilter) *TLChannelParticipantsAdmins {
	if data2 == nil {
		return &TLChannelParticipantsAdmins{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsAdmins,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsAdmins
		return &TLChannelParticipantsAdmins{Data2: data2}
	}
}

func (m *TLChannelParticipantsAdmins) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsAdmins
	return m.Data2
}

func (m *TLChannelParticipantsAdmins) GetPredicateName() string {
	return Predicate_channelParticipantsAdmins
}

func (m *TLChannelParticipantsAdmins) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb4608969: func() []byte {
			x.UInt(0xb4608969)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsAdmins, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsAdmins, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsAdmins) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsAdmins) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb4608969: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsAdmins) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsKicked
func MakeTLChannelParticipantsKicked(data2 *ChannelParticipantsFilter) *TLChannelParticipantsKicked {
	if data2 == nil {
		return &TLChannelParticipantsKicked{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsKicked,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsKicked
		return &TLChannelParticipantsKicked{Data2: data2}
	}
}

func (m *TLChannelParticipantsKicked) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsKicked
	return m.Data2
}

func (m *TLChannelParticipantsKicked) SetQ_STRING(v string) { m.Data2.Q_STRING = v }
func (m *TLChannelParticipantsKicked) GetQ_STRING() string  { return m.Data2.Q_STRING }

func (m *TLChannelParticipantsKicked) GetPredicateName() string {
	return Predicate_channelParticipantsKicked
}

func (m *TLChannelParticipantsKicked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa3b54985: func() []byte {
			x.UInt(0xa3b54985)

			x.String(m.GetQ_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsKicked, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsKicked, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsKicked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsKicked) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa3b54985: func() error {
			m.SetQ_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsKicked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsBots
func MakeTLChannelParticipantsBots(data2 *ChannelParticipantsFilter) *TLChannelParticipantsBots {
	if data2 == nil {
		return &TLChannelParticipantsBots{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsBots,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsBots
		return &TLChannelParticipantsBots{Data2: data2}
	}
}

func (m *TLChannelParticipantsBots) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsBots
	return m.Data2
}

func (m *TLChannelParticipantsBots) GetPredicateName() string {
	return Predicate_channelParticipantsBots
}

func (m *TLChannelParticipantsBots) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb0d1865b: func() []byte {
			x.UInt(0xb0d1865b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsBots, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsBots, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsBots) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsBots) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb0d1865b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsBots) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsBanned
func MakeTLChannelParticipantsBanned(data2 *ChannelParticipantsFilter) *TLChannelParticipantsBanned {
	if data2 == nil {
		return &TLChannelParticipantsBanned{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsBanned,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsBanned
		return &TLChannelParticipantsBanned{Data2: data2}
	}
}

func (m *TLChannelParticipantsBanned) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsBanned
	return m.Data2
}

func (m *TLChannelParticipantsBanned) SetQ_STRING(v string) { m.Data2.Q_STRING = v }
func (m *TLChannelParticipantsBanned) GetQ_STRING() string  { return m.Data2.Q_STRING }

func (m *TLChannelParticipantsBanned) GetPredicateName() string {
	return Predicate_channelParticipantsBanned
}

func (m *TLChannelParticipantsBanned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1427a5e1: func() []byte {
			x.UInt(0x1427a5e1)

			x.String(m.GetQ_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsBanned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsBanned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsBanned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsBanned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1427a5e1: func() error {
			m.SetQ_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsBanned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsSearch
func MakeTLChannelParticipantsSearch(data2 *ChannelParticipantsFilter) *TLChannelParticipantsSearch {
	if data2 == nil {
		return &TLChannelParticipantsSearch{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsSearch,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsSearch
		return &TLChannelParticipantsSearch{Data2: data2}
	}
}

func (m *TLChannelParticipantsSearch) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsSearch
	return m.Data2
}

func (m *TLChannelParticipantsSearch) SetQ_STRING(v string) { m.Data2.Q_STRING = v }
func (m *TLChannelParticipantsSearch) GetQ_STRING() string  { return m.Data2.Q_STRING }

func (m *TLChannelParticipantsSearch) GetPredicateName() string {
	return Predicate_channelParticipantsSearch
}

func (m *TLChannelParticipantsSearch) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x656ac4b: func() []byte {
			x.UInt(0x656ac4b)

			x.String(m.GetQ_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsSearch, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsSearch, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsSearch) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsSearch) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x656ac4b: func() error {
			m.SetQ_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsSearch) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsContacts
func MakeTLChannelParticipantsContacts(data2 *ChannelParticipantsFilter) *TLChannelParticipantsContacts {
	if data2 == nil {
		return &TLChannelParticipantsContacts{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsContacts,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsContacts
		return &TLChannelParticipantsContacts{Data2: data2}
	}
}

func (m *TLChannelParticipantsContacts) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsContacts
	return m.Data2
}

func (m *TLChannelParticipantsContacts) SetQ_STRING(v string) { m.Data2.Q_STRING = v }
func (m *TLChannelParticipantsContacts) GetQ_STRING() string  { return m.Data2.Q_STRING }

func (m *TLChannelParticipantsContacts) GetPredicateName() string {
	return Predicate_channelParticipantsContacts
}

func (m *TLChannelParticipantsContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbb6ae88d: func() []byte {
			x.UInt(0xbb6ae88d)

			x.String(m.GetQ_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbb6ae88d: func() error {
			m.SetQ_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelParticipantsMentions
func MakeTLChannelParticipantsMentions(data2 *ChannelParticipantsFilter) *TLChannelParticipantsMentions {
	if data2 == nil {
		return &TLChannelParticipantsMentions{Data2: &ChannelParticipantsFilter{
			PredicateName: Predicate_channelParticipantsMentions,
		}}
	} else {
		data2.PredicateName = Predicate_channelParticipantsMentions
		return &TLChannelParticipantsMentions{Data2: data2}
	}
}

func (m *TLChannelParticipantsMentions) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
	m.Data2.PredicateName = Predicate_channelParticipantsMentions
	return m.Data2
}

//// flags
func (m *TLChannelParticipantsMentions) SetQ_FLAGSTRING(v *types.StringValue) {
	m.Data2.Q_FLAGSTRING = v
}
func (m *TLChannelParticipantsMentions) GetQ_FLAGSTRING() *types.StringValue {
	return m.Data2.Q_FLAGSTRING
}

func (m *TLChannelParticipantsMentions) SetTopMsgId(v *types.Int32Value) { m.Data2.TopMsgId = v }
func (m *TLChannelParticipantsMentions) GetTopMsgId() *types.Int32Value  { return m.Data2.TopMsgId }

func (m *TLChannelParticipantsMentions) GetPredicateName() string {
	return Predicate_channelParticipantsMentions
}

func (m *TLChannelParticipantsMentions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe04b5ceb: func() []byte {
			x.UInt(0xe04b5ceb)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetQ_FLAGSTRING() != nil {
					flags |= 1 << 0
				}
				if m.GetTopMsgId() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetQ_FLAGSTRING() != nil {
				x.String(m.GetQ_FLAGSTRING().Value)
			}

			if m.GetTopMsgId() != nil {
				x.Int(m.GetTopMsgId().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelParticipantsMentions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelParticipantsMentions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelParticipantsMentions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelParticipantsMentions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe04b5ceb: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetQ_FLAGSTRING(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetTopMsgId(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelParticipantsMentions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_ValidatedRequestedInfo <--
//  + TL_PaymentsValidatedRequestedInfo
//

func (m *Payments_ValidatedRequestedInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_validatedRequestedInfo:
		t := m.To_PaymentsValidatedRequestedInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_ValidatedRequestedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_ValidatedRequestedInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd1451883:
		m2 := MakeTLPaymentsValidatedRequestedInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_ValidatedRequestedInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_validatedRequestedInfo:
		t := m.To_PaymentsValidatedRequestedInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsValidatedRequestedInfo
func (m *Payments_ValidatedRequestedInfo) To_PaymentsValidatedRequestedInfo() *TLPaymentsValidatedRequestedInfo {
	m.PredicateName = Predicate_payments_validatedRequestedInfo
	return &TLPaymentsValidatedRequestedInfo{
		Data2: m,
	}
}

// MakeTLPaymentsValidatedRequestedInfo
func MakeTLPaymentsValidatedRequestedInfo(data2 *Payments_ValidatedRequestedInfo) *TLPaymentsValidatedRequestedInfo {
	if data2 == nil {
		return &TLPaymentsValidatedRequestedInfo{Data2: &Payments_ValidatedRequestedInfo{
			PredicateName: Predicate_payments_validatedRequestedInfo,
		}}
	} else {
		data2.PredicateName = Predicate_payments_validatedRequestedInfo
		return &TLPaymentsValidatedRequestedInfo{Data2: data2}
	}
}

func (m *TLPaymentsValidatedRequestedInfo) To_Payments_ValidatedRequestedInfo() *Payments_ValidatedRequestedInfo {
	m.Data2.PredicateName = Predicate_payments_validatedRequestedInfo
	return m.Data2
}

//// flags
func (m *TLPaymentsValidatedRequestedInfo) SetId(v *types.StringValue) { m.Data2.Id = v }
func (m *TLPaymentsValidatedRequestedInfo) GetId() *types.StringValue  { return m.Data2.Id }

func (m *TLPaymentsValidatedRequestedInfo) SetShippingOptions(v []*ShippingOption) {
	m.Data2.ShippingOptions = v
}
func (m *TLPaymentsValidatedRequestedInfo) GetShippingOptions() []*ShippingOption {
	return m.Data2.ShippingOptions
}

func (m *TLPaymentsValidatedRequestedInfo) GetPredicateName() string {
	return Predicate_payments_validatedRequestedInfo
}

func (m *TLPaymentsValidatedRequestedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd1451883: func() []byte {
			x.UInt(0xd1451883)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetId() != nil {
					flags |= 1 << 0
				}
				if m.GetShippingOptions() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetId() != nil {
				x.String(m.GetId().Value)
			}

			if m.GetShippingOptions() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetShippingOptions())))
				for _, v := range m.GetShippingOptions() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_validatedRequestedInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_validatedRequestedInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsValidatedRequestedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsValidatedRequestedInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd1451883: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetId(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*ShippingOption, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &ShippingOption{}
					v2[i].Decode(dBuf)
				}
				m.SetShippingOptions(v2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsValidatedRequestedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Theme <--
//  + TL_Theme
//

func (m *Theme) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_theme:
		t := m.To_Theme()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Theme) CalcByteSize(layer int32) int {
	return 0
}

func (m *Theme) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa00e67d6:
		m2 := MakeTLTheme(m)
		m2.Decode(dBuf)
	case 0xe802b8dc:
		m2 := MakeTLTheme(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Theme) DebugString() string {
	switch m.PredicateName {
	case Predicate_theme:
		t := m.To_Theme()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Theme
func (m *Theme) To_Theme() *TLTheme {
	m.PredicateName = Predicate_theme
	return &TLTheme{
		Data2: m,
	}
}

// MakeTLTheme
func MakeTLTheme(data2 *Theme) *TLTheme {
	if data2 == nil {
		return &TLTheme{Data2: &Theme{
			PredicateName: Predicate_theme,
		}}
	} else {
		data2.PredicateName = Predicate_theme
		return &TLTheme{Data2: data2}
	}
}

func (m *TLTheme) To_Theme() *Theme {
	m.Data2.PredicateName = Predicate_theme
	return m.Data2
}

//// flags
func (m *TLTheme) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLTheme) GetCreator() bool  { return m.Data2.Creator }

func (m *TLTheme) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLTheme) GetDefault() bool  { return m.Data2.Default }

func (m *TLTheme) SetForChat(v bool) { m.Data2.ForChat = v }
func (m *TLTheme) GetForChat() bool  { return m.Data2.ForChat }

func (m *TLTheme) SetId(v int64) { m.Data2.Id = v }
func (m *TLTheme) GetId() int64  { return m.Data2.Id }

func (m *TLTheme) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLTheme) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLTheme) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLTheme) GetSlug() string  { return m.Data2.Slug }

func (m *TLTheme) SetTitle(v string) { m.Data2.Title = v }
func (m *TLTheme) GetTitle() string  { return m.Data2.Title }

func (m *TLTheme) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLTheme) GetDocument() *Document  { return m.Data2.Document }

func (m *TLTheme) SetSettings_FLAGVECTORTHEMESETTINGS(v []*ThemeSettings) {
	m.Data2.Settings_FLAGVECTORTHEMESETTINGS = v
}
func (m *TLTheme) GetSettings_FLAGVECTORTHEMESETTINGS() []*ThemeSettings {
	return m.Data2.Settings_FLAGVECTORTHEMESETTINGS
}

func (m *TLTheme) SetEmoticon(v *types.StringValue) { m.Data2.Emoticon = v }
func (m *TLTheme) GetEmoticon() *types.StringValue  { return m.Data2.Emoticon }

func (m *TLTheme) SetInstallsCount(v *types.Int32Value) { m.Data2.InstallsCount = v }
func (m *TLTheme) GetInstallsCount() *types.Int32Value  { return m.Data2.InstallsCount }

func (m *TLTheme) SetSettings_FLAGTHEMESETTINGS(v *ThemeSettings) {
	m.Data2.Settings_FLAGTHEMESETTINGS = v
}
func (m *TLTheme) GetSettings_FLAGTHEMESETTINGS() *ThemeSettings {
	return m.Data2.Settings_FLAGTHEMESETTINGS
}

func (m *TLTheme) GetPredicateName() string {
	return Predicate_theme
}

func (m *TLTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa00e67d6: func() []byte {
			x.UInt(0xa00e67d6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCreator() == true {
					flags |= 1 << 0
				}
				if m.GetDefault() == true {
					flags |= 1 << 1
				}
				if m.GetForChat() == true {
					flags |= 1 << 5
				}

				if m.GetDocument() != nil {
					flags |= 1 << 2
				}
				if m.GetSettings_FLAGVECTORTHEMESETTINGS() != nil {
					flags |= 1 << 3
				}
				if m.GetEmoticon() != nil {
					flags |= 1 << 6
				}
				if m.GetInstallsCount() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.String(m.GetSlug())
			x.String(m.GetTitle())
			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetSettings_FLAGVECTORTHEMESETTINGS() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetSettings_FLAGVECTORTHEMESETTINGS())))
				for _, v := range m.GetSettings_FLAGVECTORTHEMESETTINGS() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetEmoticon() != nil {
				x.String(m.GetEmoticon().Value)
			}

			if m.GetInstallsCount() != nil {
				x.Int(m.GetInstallsCount().Value)
			}

			return x.GetBuf()
		},
		0xe802b8dc: func() []byte {
			x.UInt(0xe802b8dc)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCreator() == true {
					flags |= 1 << 0
				}
				if m.GetDefault() == true {
					flags |= 1 << 1
				}
				if m.GetForChat() == true {
					flags |= 1 << 5
				}

				if m.GetDocument() != nil {
					flags |= 1 << 2
				}
				if m.GetSettings_FLAGTHEMESETTINGS() != nil {
					flags |= 1 << 3
				}
				if m.GetInstallsCount() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.String(m.GetSlug())
			x.String(m.GetTitle())
			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetSettings_FLAGTHEMESETTINGS() != nil {
				x.Bytes(m.GetSettings_FLAGTHEMESETTINGS().Encode(layer))
			}

			if m.GetInstallsCount() != nil {
				x.Int(m.GetInstallsCount().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_theme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_theme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa00e67d6: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCreator(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetDefault(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetForChat(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetSlug(dBuf.String())
			m.SetTitle(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m8 := &Document{}
				m8.Decode(dBuf)
				m.SetDocument(m8)
			}
			if (flags & (1 << 3)) != 0 {
				c9 := dBuf.Int()
				if c9 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
					return dBuf.GetError()
				}
				l9 := dBuf.Int()
				v9 := make([]*ThemeSettings, l9)
				for i := int32(0); i < l9; i++ {
					v9[i] = &ThemeSettings{}
					v9[i].Decode(dBuf)
				}
				m.SetSettings_FLAGVECTORTHEMESETTINGS(v9)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetEmoticon(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				m.SetInstallsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
		0xe802b8dc: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCreator(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetDefault(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetForChat(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetSlug(dBuf.String())
			m.SetTitle(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m8 := &Document{}
				m8.Decode(dBuf)
				m.SetDocument(m8)
			}
			if (flags & (1 << 3)) != 0 {
				m9 := &ThemeSettings{}
				m9.Decode(dBuf)
				m.SetSettings_FLAGTHEMESETTINGS(m9)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetInstallsCount(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_JoinAsPeers <--
//  + TL_PhoneJoinAsPeers
//

func (m *Phone_JoinAsPeers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_joinAsPeers:
		t := m.To_PhoneJoinAsPeers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_JoinAsPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_JoinAsPeers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xafe5623f:
		m2 := MakeTLPhoneJoinAsPeers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_JoinAsPeers) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_joinAsPeers:
		t := m.To_PhoneJoinAsPeers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneJoinAsPeers
func (m *Phone_JoinAsPeers) To_PhoneJoinAsPeers() *TLPhoneJoinAsPeers {
	m.PredicateName = Predicate_phone_joinAsPeers
	return &TLPhoneJoinAsPeers{
		Data2: m,
	}
}

// MakeTLPhoneJoinAsPeers
func MakeTLPhoneJoinAsPeers(data2 *Phone_JoinAsPeers) *TLPhoneJoinAsPeers {
	if data2 == nil {
		return &TLPhoneJoinAsPeers{Data2: &Phone_JoinAsPeers{
			PredicateName: Predicate_phone_joinAsPeers,
		}}
	} else {
		data2.PredicateName = Predicate_phone_joinAsPeers
		return &TLPhoneJoinAsPeers{Data2: data2}
	}
}

func (m *TLPhoneJoinAsPeers) To_Phone_JoinAsPeers() *Phone_JoinAsPeers {
	m.Data2.PredicateName = Predicate_phone_joinAsPeers
	return m.Data2
}

func (m *TLPhoneJoinAsPeers) SetPeers(v []*Peer) { m.Data2.Peers = v }
func (m *TLPhoneJoinAsPeers) GetPeers() []*Peer  { return m.Data2.Peers }

func (m *TLPhoneJoinAsPeers) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLPhoneJoinAsPeers) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLPhoneJoinAsPeers) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhoneJoinAsPeers) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhoneJoinAsPeers) GetPredicateName() string {
	return Predicate_phone_joinAsPeers
}

func (m *TLPhoneJoinAsPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xafe5623f: func() []byte {
			x.UInt(0xafe5623f)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPeers())))
			for _, v := range m.GetPeers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_joinAsPeers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_joinAsPeers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneJoinAsPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneJoinAsPeers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xafe5623f: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Peer, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Peer{}
				v0[i].Decode(dBuf)
			}
			m.SetPeers(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneJoinAsPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Update <--
//  + TL_UpdateNewMessage
//  + TL_UpdateMessageID
//  + TL_UpdateDeleteMessages
//  + TL_UpdateUserTyping
//  + TL_UpdateChatUserTyping
//  + TL_UpdateChatParticipants
//  + TL_UpdateUserStatus
//  + TL_UpdateUserName
//  + TL_UpdateUserPhoto
//  + TL_UpdateNewEncryptedMessage
//  + TL_UpdateEncryptedChatTyping
//  + TL_UpdateEncryption
//  + TL_UpdateEncryptedMessagesRead
//  + TL_UpdateChatParticipantAdd
//  + TL_UpdateChatParticipantDelete
//  + TL_UpdateDcOptions
//  + TL_UpdateNotifySettings
//  + TL_UpdateServiceNotification
//  + TL_UpdatePrivacy
//  + TL_UpdateUserPhone
//  + TL_UpdateReadHistoryInbox
//  + TL_UpdateReadHistoryOutbox
//  + TL_UpdateWebPage
//  + TL_UpdateReadMessagesContents
//  + TL_UpdateChannelTooLong
//  + TL_UpdateChannel
//  + TL_UpdateNewChannelMessage
//  + TL_UpdateReadChannelInbox
//  + TL_UpdateDeleteChannelMessages
//  + TL_UpdateChannelMessageViews
//  + TL_UpdateChatParticipantAdmin
//  + TL_UpdateNewStickerSet
//  + TL_UpdateStickerSetsOrder
//  + TL_UpdateStickerSets
//  + TL_UpdateSavedGifs
//  + TL_UpdateBotInlineQuery
//  + TL_UpdateBotInlineSend
//  + TL_UpdateEditChannelMessage
//  + TL_UpdateBotCallbackQuery
//  + TL_UpdateEditMessage
//  + TL_UpdateInlineBotCallbackQuery
//  + TL_UpdateReadChannelOutbox
//  + TL_UpdateDraftMessage
//  + TL_UpdateReadFeaturedStickers
//  + TL_UpdateRecentStickers
//  + TL_UpdateConfig
//  + TL_UpdatePtsChanged
//  + TL_UpdateChannelWebPage
//  + TL_UpdateDialogPinned
//  + TL_UpdatePinnedDialogs
//  + TL_UpdateBotWebhookJSON
//  + TL_UpdateBotWebhookJSONQuery
//  + TL_UpdateBotShippingQuery
//  + TL_UpdateBotPrecheckoutQuery
//  + TL_UpdatePhoneCall
//  + TL_UpdateLangPackTooLong
//  + TL_UpdateLangPack
//  + TL_UpdateFavedStickers
//  + TL_UpdateChannelReadMessagesContents
//  + TL_UpdateContactsReset
//  + TL_UpdateChannelAvailableMessages
//  + TL_UpdateDialogUnreadMark
//  + TL_UpdateMessagePoll
//  + TL_UpdateChatDefaultBannedRights
//  + TL_UpdateFolderPeers
//  + TL_UpdatePeerSettings
//  + TL_UpdatePeerLocated
//  + TL_UpdateNewScheduledMessage
//  + TL_UpdateDeleteScheduledMessages
//  + TL_UpdateTheme
//  + TL_UpdateGeoLiveViewed
//  + TL_UpdateLoginToken
//  + TL_UpdateMessagePollVote
//  + TL_UpdateDialogFilter
//  + TL_UpdateDialogFilterOrder
//  + TL_UpdateDialogFilters
//  + TL_UpdatePhoneCallSignalingData
//  + TL_UpdateChannelMessageForwards
//  + TL_UpdateReadChannelDiscussionInbox
//  + TL_UpdateReadChannelDiscussionOutbox
//  + TL_UpdatePeerBlocked
//  + TL_UpdateChannelUserTyping
//  + TL_UpdatePinnedMessages
//  + TL_UpdatePinnedChannelMessages
//  + TL_UpdateChat
//  + TL_UpdateGroupCallParticipants
//  + TL_UpdateGroupCall
//  + TL_UpdatePeerHistoryTTL
//  + TL_UpdateChatParticipant
//  + TL_UpdateChannelParticipant
//  + TL_UpdateBotStopped
//  + TL_UpdateGroupCallConnection
//  + TL_UpdateBotCommands
//  + TL_UpdatePendingJoinRequests
//  + TL_UpdateBotChatInviteRequester
//  + TL_UpdateMessageReactions
//  + TL_UpdateBizDataRaw
//

func (m *Update) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updateNewMessage:
		t := m.To_UpdateNewMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateMessageID:
		t := m.To_UpdateMessageID()
		xBuf = t.Encode(layer)
	case Predicate_updateDeleteMessages:
		t := m.To_UpdateDeleteMessages()
		xBuf = t.Encode(layer)
	case Predicate_updateUserTyping:
		t := m.To_UpdateUserTyping()
		xBuf = t.Encode(layer)
	case Predicate_updateChatUserTyping:
		t := m.To_UpdateChatUserTyping()
		xBuf = t.Encode(layer)
	case Predicate_updateChatParticipants:
		t := m.To_UpdateChatParticipants()
		xBuf = t.Encode(layer)
	case Predicate_updateUserStatus:
		t := m.To_UpdateUserStatus()
		xBuf = t.Encode(layer)
	case Predicate_updateUserName:
		t := m.To_UpdateUserName()
		xBuf = t.Encode(layer)
	case Predicate_updateUserPhoto:
		t := m.To_UpdateUserPhoto()
		xBuf = t.Encode(layer)
	case Predicate_updateNewEncryptedMessage:
		t := m.To_UpdateNewEncryptedMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateEncryptedChatTyping:
		t := m.To_UpdateEncryptedChatTyping()
		xBuf = t.Encode(layer)
	case Predicate_updateEncryption:
		t := m.To_UpdateEncryption()
		xBuf = t.Encode(layer)
	case Predicate_updateEncryptedMessagesRead:
		t := m.To_UpdateEncryptedMessagesRead()
		xBuf = t.Encode(layer)
	case Predicate_updateChatParticipantAdd:
		t := m.To_UpdateChatParticipantAdd()
		xBuf = t.Encode(layer)
	case Predicate_updateChatParticipantDelete:
		t := m.To_UpdateChatParticipantDelete()
		xBuf = t.Encode(layer)
	case Predicate_updateDcOptions:
		t := m.To_UpdateDcOptions()
		xBuf = t.Encode(layer)
	case Predicate_updateNotifySettings:
		t := m.To_UpdateNotifySettings()
		xBuf = t.Encode(layer)
	case Predicate_updateServiceNotification:
		t := m.To_UpdateServiceNotification()
		xBuf = t.Encode(layer)
	case Predicate_updatePrivacy:
		t := m.To_UpdatePrivacy()
		xBuf = t.Encode(layer)
	case Predicate_updateUserPhone:
		t := m.To_UpdateUserPhone()
		xBuf = t.Encode(layer)
	case Predicate_updateReadHistoryInbox:
		t := m.To_UpdateReadHistoryInbox()
		xBuf = t.Encode(layer)
	case Predicate_updateReadHistoryOutbox:
		t := m.To_UpdateReadHistoryOutbox()
		xBuf = t.Encode(layer)
	case Predicate_updateWebPage:
		t := m.To_UpdateWebPage()
		xBuf = t.Encode(layer)
	case Predicate_updateReadMessagesContents:
		t := m.To_UpdateReadMessagesContents()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelTooLong:
		t := m.To_UpdateChannelTooLong()
		xBuf = t.Encode(layer)
	case Predicate_updateChannel:
		t := m.To_UpdateChannel()
		xBuf = t.Encode(layer)
	case Predicate_updateNewChannelMessage:
		t := m.To_UpdateNewChannelMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateReadChannelInbox:
		t := m.To_UpdateReadChannelInbox()
		xBuf = t.Encode(layer)
	case Predicate_updateDeleteChannelMessages:
		t := m.To_UpdateDeleteChannelMessages()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelMessageViews:
		t := m.To_UpdateChannelMessageViews()
		xBuf = t.Encode(layer)
	case Predicate_updateChatParticipantAdmin:
		t := m.To_UpdateChatParticipantAdmin()
		xBuf = t.Encode(layer)
	case Predicate_updateNewStickerSet:
		t := m.To_UpdateNewStickerSet()
		xBuf = t.Encode(layer)
	case Predicate_updateStickerSetsOrder:
		t := m.To_UpdateStickerSetsOrder()
		xBuf = t.Encode(layer)
	case Predicate_updateStickerSets:
		t := m.To_UpdateStickerSets()
		xBuf = t.Encode(layer)
	case Predicate_updateSavedGifs:
		t := m.To_UpdateSavedGifs()
		xBuf = t.Encode(layer)
	case Predicate_updateBotInlineQuery:
		t := m.To_UpdateBotInlineQuery()
		xBuf = t.Encode(layer)
	case Predicate_updateBotInlineSend:
		t := m.To_UpdateBotInlineSend()
		xBuf = t.Encode(layer)
	case Predicate_updateEditChannelMessage:
		t := m.To_UpdateEditChannelMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateBotCallbackQuery:
		t := m.To_UpdateBotCallbackQuery()
		xBuf = t.Encode(layer)
	case Predicate_updateEditMessage:
		t := m.To_UpdateEditMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateInlineBotCallbackQuery:
		t := m.To_UpdateInlineBotCallbackQuery()
		xBuf = t.Encode(layer)
	case Predicate_updateReadChannelOutbox:
		t := m.To_UpdateReadChannelOutbox()
		xBuf = t.Encode(layer)
	case Predicate_updateDraftMessage:
		t := m.To_UpdateDraftMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateReadFeaturedStickers:
		t := m.To_UpdateReadFeaturedStickers()
		xBuf = t.Encode(layer)
	case Predicate_updateRecentStickers:
		t := m.To_UpdateRecentStickers()
		xBuf = t.Encode(layer)
	case Predicate_updateConfig:
		t := m.To_UpdateConfig()
		xBuf = t.Encode(layer)
	case Predicate_updatePtsChanged:
		t := m.To_UpdatePtsChanged()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelWebPage:
		t := m.To_UpdateChannelWebPage()
		xBuf = t.Encode(layer)
	case Predicate_updateDialogPinned:
		t := m.To_UpdateDialogPinned()
		xBuf = t.Encode(layer)
	case Predicate_updatePinnedDialogs:
		t := m.To_UpdatePinnedDialogs()
		xBuf = t.Encode(layer)
	case Predicate_updateBotWebhookJSON:
		t := m.To_UpdateBotWebhookJSON()
		xBuf = t.Encode(layer)
	case Predicate_updateBotWebhookJSONQuery:
		t := m.To_UpdateBotWebhookJSONQuery()
		xBuf = t.Encode(layer)
	case Predicate_updateBotShippingQuery:
		t := m.To_UpdateBotShippingQuery()
		xBuf = t.Encode(layer)
	case Predicate_updateBotPrecheckoutQuery:
		t := m.To_UpdateBotPrecheckoutQuery()
		xBuf = t.Encode(layer)
	case Predicate_updatePhoneCall:
		t := m.To_UpdatePhoneCall()
		xBuf = t.Encode(layer)
	case Predicate_updateLangPackTooLong:
		t := m.To_UpdateLangPackTooLong()
		xBuf = t.Encode(layer)
	case Predicate_updateLangPack:
		t := m.To_UpdateLangPack()
		xBuf = t.Encode(layer)
	case Predicate_updateFavedStickers:
		t := m.To_UpdateFavedStickers()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelReadMessagesContents:
		t := m.To_UpdateChannelReadMessagesContents()
		xBuf = t.Encode(layer)
	case Predicate_updateContactsReset:
		t := m.To_UpdateContactsReset()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelAvailableMessages:
		t := m.To_UpdateChannelAvailableMessages()
		xBuf = t.Encode(layer)
	case Predicate_updateDialogUnreadMark:
		t := m.To_UpdateDialogUnreadMark()
		xBuf = t.Encode(layer)
	case Predicate_updateMessagePoll:
		t := m.To_UpdateMessagePoll()
		xBuf = t.Encode(layer)
	case Predicate_updateChatDefaultBannedRights:
		t := m.To_UpdateChatDefaultBannedRights()
		xBuf = t.Encode(layer)
	case Predicate_updateFolderPeers:
		t := m.To_UpdateFolderPeers()
		xBuf = t.Encode(layer)
	case Predicate_updatePeerSettings:
		t := m.To_UpdatePeerSettings()
		xBuf = t.Encode(layer)
	case Predicate_updatePeerLocated:
		t := m.To_UpdatePeerLocated()
		xBuf = t.Encode(layer)
	case Predicate_updateNewScheduledMessage:
		t := m.To_UpdateNewScheduledMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateDeleteScheduledMessages:
		t := m.To_UpdateDeleteScheduledMessages()
		xBuf = t.Encode(layer)
	case Predicate_updateTheme:
		t := m.To_UpdateTheme()
		xBuf = t.Encode(layer)
	case Predicate_updateGeoLiveViewed:
		t := m.To_UpdateGeoLiveViewed()
		xBuf = t.Encode(layer)
	case Predicate_updateLoginToken:
		t := m.To_UpdateLoginToken()
		xBuf = t.Encode(layer)
	case Predicate_updateMessagePollVote:
		t := m.To_UpdateMessagePollVote()
		xBuf = t.Encode(layer)
	case Predicate_updateDialogFilter:
		t := m.To_UpdateDialogFilter()
		xBuf = t.Encode(layer)
	case Predicate_updateDialogFilterOrder:
		t := m.To_UpdateDialogFilterOrder()
		xBuf = t.Encode(layer)
	case Predicate_updateDialogFilters:
		t := m.To_UpdateDialogFilters()
		xBuf = t.Encode(layer)
	case Predicate_updatePhoneCallSignalingData:
		t := m.To_UpdatePhoneCallSignalingData()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelMessageForwards:
		t := m.To_UpdateChannelMessageForwards()
		xBuf = t.Encode(layer)
	case Predicate_updateReadChannelDiscussionInbox:
		t := m.To_UpdateReadChannelDiscussionInbox()
		xBuf = t.Encode(layer)
	case Predicate_updateReadChannelDiscussionOutbox:
		t := m.To_UpdateReadChannelDiscussionOutbox()
		xBuf = t.Encode(layer)
	case Predicate_updatePeerBlocked:
		t := m.To_UpdatePeerBlocked()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelUserTyping:
		t := m.To_UpdateChannelUserTyping()
		xBuf = t.Encode(layer)
	case Predicate_updatePinnedMessages:
		t := m.To_UpdatePinnedMessages()
		xBuf = t.Encode(layer)
	case Predicate_updatePinnedChannelMessages:
		t := m.To_UpdatePinnedChannelMessages()
		xBuf = t.Encode(layer)
	case Predicate_updateChat:
		t := m.To_UpdateChat()
		xBuf = t.Encode(layer)
	case Predicate_updateGroupCallParticipants:
		t := m.To_UpdateGroupCallParticipants()
		xBuf = t.Encode(layer)
	case Predicate_updateGroupCall:
		t := m.To_UpdateGroupCall()
		xBuf = t.Encode(layer)
	case Predicate_updatePeerHistoryTTL:
		t := m.To_UpdatePeerHistoryTTL()
		xBuf = t.Encode(layer)
	case Predicate_updateChatParticipant:
		t := m.To_UpdateChatParticipant()
		xBuf = t.Encode(layer)
	case Predicate_updateChannelParticipant:
		t := m.To_UpdateChannelParticipant()
		xBuf = t.Encode(layer)
	case Predicate_updateBotStopped:
		t := m.To_UpdateBotStopped()
		xBuf = t.Encode(layer)
	case Predicate_updateGroupCallConnection:
		t := m.To_UpdateGroupCallConnection()
		xBuf = t.Encode(layer)
	case Predicate_updateBotCommands:
		t := m.To_UpdateBotCommands()
		xBuf = t.Encode(layer)
	case Predicate_updatePendingJoinRequests:
		t := m.To_UpdatePendingJoinRequests()
		xBuf = t.Encode(layer)
	case Predicate_updateBotChatInviteRequester:
		t := m.To_UpdateBotChatInviteRequester()
		xBuf = t.Encode(layer)
	case Predicate_updateMessageReactions:
		t := m.To_UpdateMessageReactions()
		xBuf = t.Encode(layer)
	case Predicate_updateBizDataRaw:
		t := m.To_UpdateBizDataRaw()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Update) CalcByteSize(layer int32) int {
	return 0
}

func (m *Update) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1f2b0afd:
		m2 := MakeTLUpdateNewMessage(m)
		m2.Decode(dBuf)
	case 0x4e90bfd6:
		m2 := MakeTLUpdateMessageID(m)
		m2.Decode(dBuf)
	case 0xa20db0e5:
		m2 := MakeTLUpdateDeleteMessages(m)
		m2.Decode(dBuf)
	case 0xc01e857f:
		m2 := MakeTLUpdateUserTyping(m)
		m2.Decode(dBuf)
	case 0x83487af0:
		m2 := MakeTLUpdateChatUserTyping(m)
		m2.Decode(dBuf)
	case 0x7761198:
		m2 := MakeTLUpdateChatParticipants(m)
		m2.Decode(dBuf)
	case 0xe5bdf8de:
		m2 := MakeTLUpdateUserStatus(m)
		m2.Decode(dBuf)
	case 0xc3f202e0:
		m2 := MakeTLUpdateUserName(m)
		m2.Decode(dBuf)
	case 0xf227868c:
		m2 := MakeTLUpdateUserPhoto(m)
		m2.Decode(dBuf)
	case 0x12bcbd9a:
		m2 := MakeTLUpdateNewEncryptedMessage(m)
		m2.Decode(dBuf)
	case 0x1710f156:
		m2 := MakeTLUpdateEncryptedChatTyping(m)
		m2.Decode(dBuf)
	case 0xb4a2e88d:
		m2 := MakeTLUpdateEncryption(m)
		m2.Decode(dBuf)
	case 0x38fe25b7:
		m2 := MakeTLUpdateEncryptedMessagesRead(m)
		m2.Decode(dBuf)
	case 0x3dda5451:
		m2 := MakeTLUpdateChatParticipantAdd(m)
		m2.Decode(dBuf)
	case 0xe32f3d77:
		m2 := MakeTLUpdateChatParticipantDelete(m)
		m2.Decode(dBuf)
	case 0x8e5e9873:
		m2 := MakeTLUpdateDcOptions(m)
		m2.Decode(dBuf)
	case 0xbec268ef:
		m2 := MakeTLUpdateNotifySettings(m)
		m2.Decode(dBuf)
	case 0xebe46819:
		m2 := MakeTLUpdateServiceNotification(m)
		m2.Decode(dBuf)
	case 0xee3b272a:
		m2 := MakeTLUpdatePrivacy(m)
		m2.Decode(dBuf)
	case 0x5492a13:
		m2 := MakeTLUpdateUserPhone(m)
		m2.Decode(dBuf)
	case 0x9c974fdf:
		m2 := MakeTLUpdateReadHistoryInbox(m)
		m2.Decode(dBuf)
	case 0x2f2f21bf:
		m2 := MakeTLUpdateReadHistoryOutbox(m)
		m2.Decode(dBuf)
	case 0x7f891213:
		m2 := MakeTLUpdateWebPage(m)
		m2.Decode(dBuf)
	case 0x68c13933:
		m2 := MakeTLUpdateReadMessagesContents(m)
		m2.Decode(dBuf)
	case 0x108d941f:
		m2 := MakeTLUpdateChannelTooLong(m)
		m2.Decode(dBuf)
	case 0x635b4c09:
		m2 := MakeTLUpdateChannel(m)
		m2.Decode(dBuf)
	case 0x62ba04d9:
		m2 := MakeTLUpdateNewChannelMessage(m)
		m2.Decode(dBuf)
	case 0x922e6e10:
		m2 := MakeTLUpdateReadChannelInbox(m)
		m2.Decode(dBuf)
	case 0xc32d5b12:
		m2 := MakeTLUpdateDeleteChannelMessages(m)
		m2.Decode(dBuf)
	case 0xf226ac08:
		m2 := MakeTLUpdateChannelMessageViews(m)
		m2.Decode(dBuf)
	case 0xd7ca61a2:
		m2 := MakeTLUpdateChatParticipantAdmin(m)
		m2.Decode(dBuf)
	case 0x688a30aa:
		m2 := MakeTLUpdateNewStickerSet(m)
		m2.Decode(dBuf)
	case 0xbb2d201:
		m2 := MakeTLUpdateStickerSetsOrder(m)
		m2.Decode(dBuf)
	case 0x43ae3dec:
		m2 := MakeTLUpdateStickerSets(m)
		m2.Decode(dBuf)
	case 0x9375341e:
		m2 := MakeTLUpdateSavedGifs(m)
		m2.Decode(dBuf)
	case 0x496f379c:
		m2 := MakeTLUpdateBotInlineQuery(m)
		m2.Decode(dBuf)
	case 0x12f12a07:
		m2 := MakeTLUpdateBotInlineSend(m)
		m2.Decode(dBuf)
	case 0x1b3f4df7:
		m2 := MakeTLUpdateEditChannelMessage(m)
		m2.Decode(dBuf)
	case 0xb9cfc48d:
		m2 := MakeTLUpdateBotCallbackQuery(m)
		m2.Decode(dBuf)
	case 0xe40370a3:
		m2 := MakeTLUpdateEditMessage(m)
		m2.Decode(dBuf)
	case 0x691e9052:
		m2 := MakeTLUpdateInlineBotCallbackQuery(m)
		m2.Decode(dBuf)
	case 0xb75f99a9:
		m2 := MakeTLUpdateReadChannelOutbox(m)
		m2.Decode(dBuf)
	case 0xee2bb969:
		m2 := MakeTLUpdateDraftMessage(m)
		m2.Decode(dBuf)
	case 0x571d2742:
		m2 := MakeTLUpdateReadFeaturedStickers(m)
		m2.Decode(dBuf)
	case 0x9a422c20:
		m2 := MakeTLUpdateRecentStickers(m)
		m2.Decode(dBuf)
	case 0xa229dd06:
		m2 := MakeTLUpdateConfig(m)
		m2.Decode(dBuf)
	case 0x3354678f:
		m2 := MakeTLUpdatePtsChanged(m)
		m2.Decode(dBuf)
	case 0x2f2ba99f:
		m2 := MakeTLUpdateChannelWebPage(m)
		m2.Decode(dBuf)
	case 0x6e6fe51c:
		m2 := MakeTLUpdateDialogPinned(m)
		m2.Decode(dBuf)
	case 0xfa0f3ca2:
		m2 := MakeTLUpdatePinnedDialogs(m)
		m2.Decode(dBuf)
	case 0x8317c0c3:
		m2 := MakeTLUpdateBotWebhookJSON(m)
		m2.Decode(dBuf)
	case 0x9b9240a6:
		m2 := MakeTLUpdateBotWebhookJSONQuery(m)
		m2.Decode(dBuf)
	case 0xb5aefd7d:
		m2 := MakeTLUpdateBotShippingQuery(m)
		m2.Decode(dBuf)
	case 0x8caa9a96:
		m2 := MakeTLUpdateBotPrecheckoutQuery(m)
		m2.Decode(dBuf)
	case 0xab0f6b1e:
		m2 := MakeTLUpdatePhoneCall(m)
		m2.Decode(dBuf)
	case 0x46560264:
		m2 := MakeTLUpdateLangPackTooLong(m)
		m2.Decode(dBuf)
	case 0x56022f4d:
		m2 := MakeTLUpdateLangPack(m)
		m2.Decode(dBuf)
	case 0xe511996d:
		m2 := MakeTLUpdateFavedStickers(m)
		m2.Decode(dBuf)
	case 0x44bdd535:
		m2 := MakeTLUpdateChannelReadMessagesContents(m)
		m2.Decode(dBuf)
	case 0x7084a7be:
		m2 := MakeTLUpdateContactsReset(m)
		m2.Decode(dBuf)
	case 0xb23fc698:
		m2 := MakeTLUpdateChannelAvailableMessages(m)
		m2.Decode(dBuf)
	case 0xe16459c3:
		m2 := MakeTLUpdateDialogUnreadMark(m)
		m2.Decode(dBuf)
	case 0xaca1657b:
		m2 := MakeTLUpdateMessagePoll(m)
		m2.Decode(dBuf)
	case 0x54c01850:
		m2 := MakeTLUpdateChatDefaultBannedRights(m)
		m2.Decode(dBuf)
	case 0x19360dc0:
		m2 := MakeTLUpdateFolderPeers(m)
		m2.Decode(dBuf)
	case 0x6a7e7366:
		m2 := MakeTLUpdatePeerSettings(m)
		m2.Decode(dBuf)
	case 0xb4afcfb0:
		m2 := MakeTLUpdatePeerLocated(m)
		m2.Decode(dBuf)
	case 0x39a51dfb:
		m2 := MakeTLUpdateNewScheduledMessage(m)
		m2.Decode(dBuf)
	case 0x90866cee:
		m2 := MakeTLUpdateDeleteScheduledMessages(m)
		m2.Decode(dBuf)
	case 0x8216fba3:
		m2 := MakeTLUpdateTheme(m)
		m2.Decode(dBuf)
	case 0x871fb939:
		m2 := MakeTLUpdateGeoLiveViewed(m)
		m2.Decode(dBuf)
	case 0x564fe691:
		m2 := MakeTLUpdateLoginToken(m)
		m2.Decode(dBuf)
	case 0x106395c9:
		m2 := MakeTLUpdateMessagePollVote(m)
		m2.Decode(dBuf)
	case 0x26ffde7d:
		m2 := MakeTLUpdateDialogFilter(m)
		m2.Decode(dBuf)
	case 0xa5d72105:
		m2 := MakeTLUpdateDialogFilterOrder(m)
		m2.Decode(dBuf)
	case 0x3504914f:
		m2 := MakeTLUpdateDialogFilters(m)
		m2.Decode(dBuf)
	case 0x2661bf09:
		m2 := MakeTLUpdatePhoneCallSignalingData(m)
		m2.Decode(dBuf)
	case 0xd29a27f4:
		m2 := MakeTLUpdateChannelMessageForwards(m)
		m2.Decode(dBuf)
	case 0xd6b19546:
		m2 := MakeTLUpdateReadChannelDiscussionInbox(m)
		m2.Decode(dBuf)
	case 0x695c9e7c:
		m2 := MakeTLUpdateReadChannelDiscussionOutbox(m)
		m2.Decode(dBuf)
	case 0x246a4b22:
		m2 := MakeTLUpdatePeerBlocked(m)
		m2.Decode(dBuf)
	case 0x8c88c923:
		m2 := MakeTLUpdateChannelUserTyping(m)
		m2.Decode(dBuf)
	case 0xed85eab5:
		m2 := MakeTLUpdatePinnedMessages(m)
		m2.Decode(dBuf)
	case 0x5bb98608:
		m2 := MakeTLUpdatePinnedChannelMessages(m)
		m2.Decode(dBuf)
	case 0xf89a6a4e:
		m2 := MakeTLUpdateChat(m)
		m2.Decode(dBuf)
	case 0xf2ebdb4e:
		m2 := MakeTLUpdateGroupCallParticipants(m)
		m2.Decode(dBuf)
	case 0x14b24500:
		m2 := MakeTLUpdateGroupCall(m)
		m2.Decode(dBuf)
	case 0xbb9bb9a5:
		m2 := MakeTLUpdatePeerHistoryTTL(m)
		m2.Decode(dBuf)
	case 0xd087663a:
		m2 := MakeTLUpdateChatParticipant(m)
		m2.Decode(dBuf)
	case 0x985d3abb:
		m2 := MakeTLUpdateChannelParticipant(m)
		m2.Decode(dBuf)
	case 0xc4870a49:
		m2 := MakeTLUpdateBotStopped(m)
		m2.Decode(dBuf)
	case 0xb783982:
		m2 := MakeTLUpdateGroupCallConnection(m)
		m2.Decode(dBuf)
	case 0x4d712f2e:
		m2 := MakeTLUpdateBotCommands(m)
		m2.Decode(dBuf)
	case 0x7063c3db:
		m2 := MakeTLUpdatePendingJoinRequests(m)
		m2.Decode(dBuf)
	case 0x11dfa986:
		m2 := MakeTLUpdateBotChatInviteRequester(m)
		m2.Decode(dBuf)
	case 0x154798c3:
		m2 := MakeTLUpdateMessageReactions(m)
		m2.Decode(dBuf)
	case 0x83ce7a0e:
		m2 := MakeTLUpdateBizDataRaw(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Update) DebugString() string {
	switch m.PredicateName {
	case Predicate_updateNewMessage:
		t := m.To_UpdateNewMessage()
		return t.DebugString()
	case Predicate_updateMessageID:
		t := m.To_UpdateMessageID()
		return t.DebugString()
	case Predicate_updateDeleteMessages:
		t := m.To_UpdateDeleteMessages()
		return t.DebugString()
	case Predicate_updateUserTyping:
		t := m.To_UpdateUserTyping()
		return t.DebugString()
	case Predicate_updateChatUserTyping:
		t := m.To_UpdateChatUserTyping()
		return t.DebugString()
	case Predicate_updateChatParticipants:
		t := m.To_UpdateChatParticipants()
		return t.DebugString()
	case Predicate_updateUserStatus:
		t := m.To_UpdateUserStatus()
		return t.DebugString()
	case Predicate_updateUserName:
		t := m.To_UpdateUserName()
		return t.DebugString()
	case Predicate_updateUserPhoto:
		t := m.To_UpdateUserPhoto()
		return t.DebugString()
	case Predicate_updateNewEncryptedMessage:
		t := m.To_UpdateNewEncryptedMessage()
		return t.DebugString()
	case Predicate_updateEncryptedChatTyping:
		t := m.To_UpdateEncryptedChatTyping()
		return t.DebugString()
	case Predicate_updateEncryption:
		t := m.To_UpdateEncryption()
		return t.DebugString()
	case Predicate_updateEncryptedMessagesRead:
		t := m.To_UpdateEncryptedMessagesRead()
		return t.DebugString()
	case Predicate_updateChatParticipantAdd:
		t := m.To_UpdateChatParticipantAdd()
		return t.DebugString()
	case Predicate_updateChatParticipantDelete:
		t := m.To_UpdateChatParticipantDelete()
		return t.DebugString()
	case Predicate_updateDcOptions:
		t := m.To_UpdateDcOptions()
		return t.DebugString()
	case Predicate_updateNotifySettings:
		t := m.To_UpdateNotifySettings()
		return t.DebugString()
	case Predicate_updateServiceNotification:
		t := m.To_UpdateServiceNotification()
		return t.DebugString()
	case Predicate_updatePrivacy:
		t := m.To_UpdatePrivacy()
		return t.DebugString()
	case Predicate_updateUserPhone:
		t := m.To_UpdateUserPhone()
		return t.DebugString()
	case Predicate_updateReadHistoryInbox:
		t := m.To_UpdateReadHistoryInbox()
		return t.DebugString()
	case Predicate_updateReadHistoryOutbox:
		t := m.To_UpdateReadHistoryOutbox()
		return t.DebugString()
	case Predicate_updateWebPage:
		t := m.To_UpdateWebPage()
		return t.DebugString()
	case Predicate_updateReadMessagesContents:
		t := m.To_UpdateReadMessagesContents()
		return t.DebugString()
	case Predicate_updateChannelTooLong:
		t := m.To_UpdateChannelTooLong()
		return t.DebugString()
	case Predicate_updateChannel:
		t := m.To_UpdateChannel()
		return t.DebugString()
	case Predicate_updateNewChannelMessage:
		t := m.To_UpdateNewChannelMessage()
		return t.DebugString()
	case Predicate_updateReadChannelInbox:
		t := m.To_UpdateReadChannelInbox()
		return t.DebugString()
	case Predicate_updateDeleteChannelMessages:
		t := m.To_UpdateDeleteChannelMessages()
		return t.DebugString()
	case Predicate_updateChannelMessageViews:
		t := m.To_UpdateChannelMessageViews()
		return t.DebugString()
	case Predicate_updateChatParticipantAdmin:
		t := m.To_UpdateChatParticipantAdmin()
		return t.DebugString()
	case Predicate_updateNewStickerSet:
		t := m.To_UpdateNewStickerSet()
		return t.DebugString()
	case Predicate_updateStickerSetsOrder:
		t := m.To_UpdateStickerSetsOrder()
		return t.DebugString()
	case Predicate_updateStickerSets:
		t := m.To_UpdateStickerSets()
		return t.DebugString()
	case Predicate_updateSavedGifs:
		t := m.To_UpdateSavedGifs()
		return t.DebugString()
	case Predicate_updateBotInlineQuery:
		t := m.To_UpdateBotInlineQuery()
		return t.DebugString()
	case Predicate_updateBotInlineSend:
		t := m.To_UpdateBotInlineSend()
		return t.DebugString()
	case Predicate_updateEditChannelMessage:
		t := m.To_UpdateEditChannelMessage()
		return t.DebugString()
	case Predicate_updateBotCallbackQuery:
		t := m.To_UpdateBotCallbackQuery()
		return t.DebugString()
	case Predicate_updateEditMessage:
		t := m.To_UpdateEditMessage()
		return t.DebugString()
	case Predicate_updateInlineBotCallbackQuery:
		t := m.To_UpdateInlineBotCallbackQuery()
		return t.DebugString()
	case Predicate_updateReadChannelOutbox:
		t := m.To_UpdateReadChannelOutbox()
		return t.DebugString()
	case Predicate_updateDraftMessage:
		t := m.To_UpdateDraftMessage()
		return t.DebugString()
	case Predicate_updateReadFeaturedStickers:
		t := m.To_UpdateReadFeaturedStickers()
		return t.DebugString()
	case Predicate_updateRecentStickers:
		t := m.To_UpdateRecentStickers()
		return t.DebugString()
	case Predicate_updateConfig:
		t := m.To_UpdateConfig()
		return t.DebugString()
	case Predicate_updatePtsChanged:
		t := m.To_UpdatePtsChanged()
		return t.DebugString()
	case Predicate_updateChannelWebPage:
		t := m.To_UpdateChannelWebPage()
		return t.DebugString()
	case Predicate_updateDialogPinned:
		t := m.To_UpdateDialogPinned()
		return t.DebugString()
	case Predicate_updatePinnedDialogs:
		t := m.To_UpdatePinnedDialogs()
		return t.DebugString()
	case Predicate_updateBotWebhookJSON:
		t := m.To_UpdateBotWebhookJSON()
		return t.DebugString()
	case Predicate_updateBotWebhookJSONQuery:
		t := m.To_UpdateBotWebhookJSONQuery()
		return t.DebugString()
	case Predicate_updateBotShippingQuery:
		t := m.To_UpdateBotShippingQuery()
		return t.DebugString()
	case Predicate_updateBotPrecheckoutQuery:
		t := m.To_UpdateBotPrecheckoutQuery()
		return t.DebugString()
	case Predicate_updatePhoneCall:
		t := m.To_UpdatePhoneCall()
		return t.DebugString()
	case Predicate_updateLangPackTooLong:
		t := m.To_UpdateLangPackTooLong()
		return t.DebugString()
	case Predicate_updateLangPack:
		t := m.To_UpdateLangPack()
		return t.DebugString()
	case Predicate_updateFavedStickers:
		t := m.To_UpdateFavedStickers()
		return t.DebugString()
	case Predicate_updateChannelReadMessagesContents:
		t := m.To_UpdateChannelReadMessagesContents()
		return t.DebugString()
	case Predicate_updateContactsReset:
		t := m.To_UpdateContactsReset()
		return t.DebugString()
	case Predicate_updateChannelAvailableMessages:
		t := m.To_UpdateChannelAvailableMessages()
		return t.DebugString()
	case Predicate_updateDialogUnreadMark:
		t := m.To_UpdateDialogUnreadMark()
		return t.DebugString()
	case Predicate_updateMessagePoll:
		t := m.To_UpdateMessagePoll()
		return t.DebugString()
	case Predicate_updateChatDefaultBannedRights:
		t := m.To_UpdateChatDefaultBannedRights()
		return t.DebugString()
	case Predicate_updateFolderPeers:
		t := m.To_UpdateFolderPeers()
		return t.DebugString()
	case Predicate_updatePeerSettings:
		t := m.To_UpdatePeerSettings()
		return t.DebugString()
	case Predicate_updatePeerLocated:
		t := m.To_UpdatePeerLocated()
		return t.DebugString()
	case Predicate_updateNewScheduledMessage:
		t := m.To_UpdateNewScheduledMessage()
		return t.DebugString()
	case Predicate_updateDeleteScheduledMessages:
		t := m.To_UpdateDeleteScheduledMessages()
		return t.DebugString()
	case Predicate_updateTheme:
		t := m.To_UpdateTheme()
		return t.DebugString()
	case Predicate_updateGeoLiveViewed:
		t := m.To_UpdateGeoLiveViewed()
		return t.DebugString()
	case Predicate_updateLoginToken:
		t := m.To_UpdateLoginToken()
		return t.DebugString()
	case Predicate_updateMessagePollVote:
		t := m.To_UpdateMessagePollVote()
		return t.DebugString()
	case Predicate_updateDialogFilter:
		t := m.To_UpdateDialogFilter()
		return t.DebugString()
	case Predicate_updateDialogFilterOrder:
		t := m.To_UpdateDialogFilterOrder()
		return t.DebugString()
	case Predicate_updateDialogFilters:
		t := m.To_UpdateDialogFilters()
		return t.DebugString()
	case Predicate_updatePhoneCallSignalingData:
		t := m.To_UpdatePhoneCallSignalingData()
		return t.DebugString()
	case Predicate_updateChannelMessageForwards:
		t := m.To_UpdateChannelMessageForwards()
		return t.DebugString()
	case Predicate_updateReadChannelDiscussionInbox:
		t := m.To_UpdateReadChannelDiscussionInbox()
		return t.DebugString()
	case Predicate_updateReadChannelDiscussionOutbox:
		t := m.To_UpdateReadChannelDiscussionOutbox()
		return t.DebugString()
	case Predicate_updatePeerBlocked:
		t := m.To_UpdatePeerBlocked()
		return t.DebugString()
	case Predicate_updateChannelUserTyping:
		t := m.To_UpdateChannelUserTyping()
		return t.DebugString()
	case Predicate_updatePinnedMessages:
		t := m.To_UpdatePinnedMessages()
		return t.DebugString()
	case Predicate_updatePinnedChannelMessages:
		t := m.To_UpdatePinnedChannelMessages()
		return t.DebugString()
	case Predicate_updateChat:
		t := m.To_UpdateChat()
		return t.DebugString()
	case Predicate_updateGroupCallParticipants:
		t := m.To_UpdateGroupCallParticipants()
		return t.DebugString()
	case Predicate_updateGroupCall:
		t := m.To_UpdateGroupCall()
		return t.DebugString()
	case Predicate_updatePeerHistoryTTL:
		t := m.To_UpdatePeerHistoryTTL()
		return t.DebugString()
	case Predicate_updateChatParticipant:
		t := m.To_UpdateChatParticipant()
		return t.DebugString()
	case Predicate_updateChannelParticipant:
		t := m.To_UpdateChannelParticipant()
		return t.DebugString()
	case Predicate_updateBotStopped:
		t := m.To_UpdateBotStopped()
		return t.DebugString()
	case Predicate_updateGroupCallConnection:
		t := m.To_UpdateGroupCallConnection()
		return t.DebugString()
	case Predicate_updateBotCommands:
		t := m.To_UpdateBotCommands()
		return t.DebugString()
	case Predicate_updatePendingJoinRequests:
		t := m.To_UpdatePendingJoinRequests()
		return t.DebugString()
	case Predicate_updateBotChatInviteRequester:
		t := m.To_UpdateBotChatInviteRequester()
		return t.DebugString()
	case Predicate_updateMessageReactions:
		t := m.To_UpdateMessageReactions()
		return t.DebugString()
	case Predicate_updateBizDataRaw:
		t := m.To_UpdateBizDataRaw()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdateNewMessage
func (m *Update) To_UpdateNewMessage() *TLUpdateNewMessage {
	m.PredicateName = Predicate_updateNewMessage
	return &TLUpdateNewMessage{
		Data2: m,
	}
}

// To_UpdateMessageID
func (m *Update) To_UpdateMessageID() *TLUpdateMessageID {
	m.PredicateName = Predicate_updateMessageID
	return &TLUpdateMessageID{
		Data2: m,
	}
}

// To_UpdateDeleteMessages
func (m *Update) To_UpdateDeleteMessages() *TLUpdateDeleteMessages {
	m.PredicateName = Predicate_updateDeleteMessages
	return &TLUpdateDeleteMessages{
		Data2: m,
	}
}

// To_UpdateUserTyping
func (m *Update) To_UpdateUserTyping() *TLUpdateUserTyping {
	m.PredicateName = Predicate_updateUserTyping
	return &TLUpdateUserTyping{
		Data2: m,
	}
}

// To_UpdateChatUserTyping
func (m *Update) To_UpdateChatUserTyping() *TLUpdateChatUserTyping {
	m.PredicateName = Predicate_updateChatUserTyping
	return &TLUpdateChatUserTyping{
		Data2: m,
	}
}

// To_UpdateChatParticipants
func (m *Update) To_UpdateChatParticipants() *TLUpdateChatParticipants {
	m.PredicateName = Predicate_updateChatParticipants
	return &TLUpdateChatParticipants{
		Data2: m,
	}
}

// To_UpdateUserStatus
func (m *Update) To_UpdateUserStatus() *TLUpdateUserStatus {
	m.PredicateName = Predicate_updateUserStatus
	return &TLUpdateUserStatus{
		Data2: m,
	}
}

// To_UpdateUserName
func (m *Update) To_UpdateUserName() *TLUpdateUserName {
	m.PredicateName = Predicate_updateUserName
	return &TLUpdateUserName{
		Data2: m,
	}
}

// To_UpdateUserPhoto
func (m *Update) To_UpdateUserPhoto() *TLUpdateUserPhoto {
	m.PredicateName = Predicate_updateUserPhoto
	return &TLUpdateUserPhoto{
		Data2: m,
	}
}

// To_UpdateNewEncryptedMessage
func (m *Update) To_UpdateNewEncryptedMessage() *TLUpdateNewEncryptedMessage {
	m.PredicateName = Predicate_updateNewEncryptedMessage
	return &TLUpdateNewEncryptedMessage{
		Data2: m,
	}
}

// To_UpdateEncryptedChatTyping
func (m *Update) To_UpdateEncryptedChatTyping() *TLUpdateEncryptedChatTyping {
	m.PredicateName = Predicate_updateEncryptedChatTyping
	return &TLUpdateEncryptedChatTyping{
		Data2: m,
	}
}

// To_UpdateEncryption
func (m *Update) To_UpdateEncryption() *TLUpdateEncryption {
	m.PredicateName = Predicate_updateEncryption
	return &TLUpdateEncryption{
		Data2: m,
	}
}

// To_UpdateEncryptedMessagesRead
func (m *Update) To_UpdateEncryptedMessagesRead() *TLUpdateEncryptedMessagesRead {
	m.PredicateName = Predicate_updateEncryptedMessagesRead
	return &TLUpdateEncryptedMessagesRead{
		Data2: m,
	}
}

// To_UpdateChatParticipantAdd
func (m *Update) To_UpdateChatParticipantAdd() *TLUpdateChatParticipantAdd {
	m.PredicateName = Predicate_updateChatParticipantAdd
	return &TLUpdateChatParticipantAdd{
		Data2: m,
	}
}

// To_UpdateChatParticipantDelete
func (m *Update) To_UpdateChatParticipantDelete() *TLUpdateChatParticipantDelete {
	m.PredicateName = Predicate_updateChatParticipantDelete
	return &TLUpdateChatParticipantDelete{
		Data2: m,
	}
}

// To_UpdateDcOptions
func (m *Update) To_UpdateDcOptions() *TLUpdateDcOptions {
	m.PredicateName = Predicate_updateDcOptions
	return &TLUpdateDcOptions{
		Data2: m,
	}
}

// To_UpdateNotifySettings
func (m *Update) To_UpdateNotifySettings() *TLUpdateNotifySettings {
	m.PredicateName = Predicate_updateNotifySettings
	return &TLUpdateNotifySettings{
		Data2: m,
	}
}

// To_UpdateServiceNotification
func (m *Update) To_UpdateServiceNotification() *TLUpdateServiceNotification {
	m.PredicateName = Predicate_updateServiceNotification
	return &TLUpdateServiceNotification{
		Data2: m,
	}
}

// To_UpdatePrivacy
func (m *Update) To_UpdatePrivacy() *TLUpdatePrivacy {
	m.PredicateName = Predicate_updatePrivacy
	return &TLUpdatePrivacy{
		Data2: m,
	}
}

// To_UpdateUserPhone
func (m *Update) To_UpdateUserPhone() *TLUpdateUserPhone {
	m.PredicateName = Predicate_updateUserPhone
	return &TLUpdateUserPhone{
		Data2: m,
	}
}

// To_UpdateReadHistoryInbox
func (m *Update) To_UpdateReadHistoryInbox() *TLUpdateReadHistoryInbox {
	m.PredicateName = Predicate_updateReadHistoryInbox
	return &TLUpdateReadHistoryInbox{
		Data2: m,
	}
}

// To_UpdateReadHistoryOutbox
func (m *Update) To_UpdateReadHistoryOutbox() *TLUpdateReadHistoryOutbox {
	m.PredicateName = Predicate_updateReadHistoryOutbox
	return &TLUpdateReadHistoryOutbox{
		Data2: m,
	}
}

// To_UpdateWebPage
func (m *Update) To_UpdateWebPage() *TLUpdateWebPage {
	m.PredicateName = Predicate_updateWebPage
	return &TLUpdateWebPage{
		Data2: m,
	}
}

// To_UpdateReadMessagesContents
func (m *Update) To_UpdateReadMessagesContents() *TLUpdateReadMessagesContents {
	m.PredicateName = Predicate_updateReadMessagesContents
	return &TLUpdateReadMessagesContents{
		Data2: m,
	}
}

// To_UpdateChannelTooLong
func (m *Update) To_UpdateChannelTooLong() *TLUpdateChannelTooLong {
	m.PredicateName = Predicate_updateChannelTooLong
	return &TLUpdateChannelTooLong{
		Data2: m,
	}
}

// To_UpdateChannel
func (m *Update) To_UpdateChannel() *TLUpdateChannel {
	m.PredicateName = Predicate_updateChannel
	return &TLUpdateChannel{
		Data2: m,
	}
}

// To_UpdateNewChannelMessage
func (m *Update) To_UpdateNewChannelMessage() *TLUpdateNewChannelMessage {
	m.PredicateName = Predicate_updateNewChannelMessage
	return &TLUpdateNewChannelMessage{
		Data2: m,
	}
}

// To_UpdateReadChannelInbox
func (m *Update) To_UpdateReadChannelInbox() *TLUpdateReadChannelInbox {
	m.PredicateName = Predicate_updateReadChannelInbox
	return &TLUpdateReadChannelInbox{
		Data2: m,
	}
}

// To_UpdateDeleteChannelMessages
func (m *Update) To_UpdateDeleteChannelMessages() *TLUpdateDeleteChannelMessages {
	m.PredicateName = Predicate_updateDeleteChannelMessages
	return &TLUpdateDeleteChannelMessages{
		Data2: m,
	}
}

// To_UpdateChannelMessageViews
func (m *Update) To_UpdateChannelMessageViews() *TLUpdateChannelMessageViews {
	m.PredicateName = Predicate_updateChannelMessageViews
	return &TLUpdateChannelMessageViews{
		Data2: m,
	}
}

// To_UpdateChatParticipantAdmin
func (m *Update) To_UpdateChatParticipantAdmin() *TLUpdateChatParticipantAdmin {
	m.PredicateName = Predicate_updateChatParticipantAdmin
	return &TLUpdateChatParticipantAdmin{
		Data2: m,
	}
}

// To_UpdateNewStickerSet
func (m *Update) To_UpdateNewStickerSet() *TLUpdateNewStickerSet {
	m.PredicateName = Predicate_updateNewStickerSet
	return &TLUpdateNewStickerSet{
		Data2: m,
	}
}

// To_UpdateStickerSetsOrder
func (m *Update) To_UpdateStickerSetsOrder() *TLUpdateStickerSetsOrder {
	m.PredicateName = Predicate_updateStickerSetsOrder
	return &TLUpdateStickerSetsOrder{
		Data2: m,
	}
}

// To_UpdateStickerSets
func (m *Update) To_UpdateStickerSets() *TLUpdateStickerSets {
	m.PredicateName = Predicate_updateStickerSets
	return &TLUpdateStickerSets{
		Data2: m,
	}
}

// To_UpdateSavedGifs
func (m *Update) To_UpdateSavedGifs() *TLUpdateSavedGifs {
	m.PredicateName = Predicate_updateSavedGifs
	return &TLUpdateSavedGifs{
		Data2: m,
	}
}

// To_UpdateBotInlineQuery
func (m *Update) To_UpdateBotInlineQuery() *TLUpdateBotInlineQuery {
	m.PredicateName = Predicate_updateBotInlineQuery
	return &TLUpdateBotInlineQuery{
		Data2: m,
	}
}

// To_UpdateBotInlineSend
func (m *Update) To_UpdateBotInlineSend() *TLUpdateBotInlineSend {
	m.PredicateName = Predicate_updateBotInlineSend
	return &TLUpdateBotInlineSend{
		Data2: m,
	}
}

// To_UpdateEditChannelMessage
func (m *Update) To_UpdateEditChannelMessage() *TLUpdateEditChannelMessage {
	m.PredicateName = Predicate_updateEditChannelMessage
	return &TLUpdateEditChannelMessage{
		Data2: m,
	}
}

// To_UpdateBotCallbackQuery
func (m *Update) To_UpdateBotCallbackQuery() *TLUpdateBotCallbackQuery {
	m.PredicateName = Predicate_updateBotCallbackQuery
	return &TLUpdateBotCallbackQuery{
		Data2: m,
	}
}

// To_UpdateEditMessage
func (m *Update) To_UpdateEditMessage() *TLUpdateEditMessage {
	m.PredicateName = Predicate_updateEditMessage
	return &TLUpdateEditMessage{
		Data2: m,
	}
}

// To_UpdateInlineBotCallbackQuery
func (m *Update) To_UpdateInlineBotCallbackQuery() *TLUpdateInlineBotCallbackQuery {
	m.PredicateName = Predicate_updateInlineBotCallbackQuery
	return &TLUpdateInlineBotCallbackQuery{
		Data2: m,
	}
}

// To_UpdateReadChannelOutbox
func (m *Update) To_UpdateReadChannelOutbox() *TLUpdateReadChannelOutbox {
	m.PredicateName = Predicate_updateReadChannelOutbox
	return &TLUpdateReadChannelOutbox{
		Data2: m,
	}
}

// To_UpdateDraftMessage
func (m *Update) To_UpdateDraftMessage() *TLUpdateDraftMessage {
	m.PredicateName = Predicate_updateDraftMessage
	return &TLUpdateDraftMessage{
		Data2: m,
	}
}

// To_UpdateReadFeaturedStickers
func (m *Update) To_UpdateReadFeaturedStickers() *TLUpdateReadFeaturedStickers {
	m.PredicateName = Predicate_updateReadFeaturedStickers
	return &TLUpdateReadFeaturedStickers{
		Data2: m,
	}
}

// To_UpdateRecentStickers
func (m *Update) To_UpdateRecentStickers() *TLUpdateRecentStickers {
	m.PredicateName = Predicate_updateRecentStickers
	return &TLUpdateRecentStickers{
		Data2: m,
	}
}

// To_UpdateConfig
func (m *Update) To_UpdateConfig() *TLUpdateConfig {
	m.PredicateName = Predicate_updateConfig
	return &TLUpdateConfig{
		Data2: m,
	}
}

// To_UpdatePtsChanged
func (m *Update) To_UpdatePtsChanged() *TLUpdatePtsChanged {
	m.PredicateName = Predicate_updatePtsChanged
	return &TLUpdatePtsChanged{
		Data2: m,
	}
}

// To_UpdateChannelWebPage
func (m *Update) To_UpdateChannelWebPage() *TLUpdateChannelWebPage {
	m.PredicateName = Predicate_updateChannelWebPage
	return &TLUpdateChannelWebPage{
		Data2: m,
	}
}

// To_UpdateDialogPinned
func (m *Update) To_UpdateDialogPinned() *TLUpdateDialogPinned {
	m.PredicateName = Predicate_updateDialogPinned
	return &TLUpdateDialogPinned{
		Data2: m,
	}
}

// To_UpdatePinnedDialogs
func (m *Update) To_UpdatePinnedDialogs() *TLUpdatePinnedDialogs {
	m.PredicateName = Predicate_updatePinnedDialogs
	return &TLUpdatePinnedDialogs{
		Data2: m,
	}
}

// To_UpdateBotWebhookJSON
func (m *Update) To_UpdateBotWebhookJSON() *TLUpdateBotWebhookJSON {
	m.PredicateName = Predicate_updateBotWebhookJSON
	return &TLUpdateBotWebhookJSON{
		Data2: m,
	}
}

// To_UpdateBotWebhookJSONQuery
func (m *Update) To_UpdateBotWebhookJSONQuery() *TLUpdateBotWebhookJSONQuery {
	m.PredicateName = Predicate_updateBotWebhookJSONQuery
	return &TLUpdateBotWebhookJSONQuery{
		Data2: m,
	}
}

// To_UpdateBotShippingQuery
func (m *Update) To_UpdateBotShippingQuery() *TLUpdateBotShippingQuery {
	m.PredicateName = Predicate_updateBotShippingQuery
	return &TLUpdateBotShippingQuery{
		Data2: m,
	}
}

// To_UpdateBotPrecheckoutQuery
func (m *Update) To_UpdateBotPrecheckoutQuery() *TLUpdateBotPrecheckoutQuery {
	m.PredicateName = Predicate_updateBotPrecheckoutQuery
	return &TLUpdateBotPrecheckoutQuery{
		Data2: m,
	}
}

// To_UpdatePhoneCall
func (m *Update) To_UpdatePhoneCall() *TLUpdatePhoneCall {
	m.PredicateName = Predicate_updatePhoneCall
	return &TLUpdatePhoneCall{
		Data2: m,
	}
}

// To_UpdateLangPackTooLong
func (m *Update) To_UpdateLangPackTooLong() *TLUpdateLangPackTooLong {
	m.PredicateName = Predicate_updateLangPackTooLong
	return &TLUpdateLangPackTooLong{
		Data2: m,
	}
}

// To_UpdateLangPack
func (m *Update) To_UpdateLangPack() *TLUpdateLangPack {
	m.PredicateName = Predicate_updateLangPack
	return &TLUpdateLangPack{
		Data2: m,
	}
}

// To_UpdateFavedStickers
func (m *Update) To_UpdateFavedStickers() *TLUpdateFavedStickers {
	m.PredicateName = Predicate_updateFavedStickers
	return &TLUpdateFavedStickers{
		Data2: m,
	}
}

// To_UpdateChannelReadMessagesContents
func (m *Update) To_UpdateChannelReadMessagesContents() *TLUpdateChannelReadMessagesContents {
	m.PredicateName = Predicate_updateChannelReadMessagesContents
	return &TLUpdateChannelReadMessagesContents{
		Data2: m,
	}
}

// To_UpdateContactsReset
func (m *Update) To_UpdateContactsReset() *TLUpdateContactsReset {
	m.PredicateName = Predicate_updateContactsReset
	return &TLUpdateContactsReset{
		Data2: m,
	}
}

// To_UpdateChannelAvailableMessages
func (m *Update) To_UpdateChannelAvailableMessages() *TLUpdateChannelAvailableMessages {
	m.PredicateName = Predicate_updateChannelAvailableMessages
	return &TLUpdateChannelAvailableMessages{
		Data2: m,
	}
}

// To_UpdateDialogUnreadMark
func (m *Update) To_UpdateDialogUnreadMark() *TLUpdateDialogUnreadMark {
	m.PredicateName = Predicate_updateDialogUnreadMark
	return &TLUpdateDialogUnreadMark{
		Data2: m,
	}
}

// To_UpdateMessagePoll
func (m *Update) To_UpdateMessagePoll() *TLUpdateMessagePoll {
	m.PredicateName = Predicate_updateMessagePoll
	return &TLUpdateMessagePoll{
		Data2: m,
	}
}

// To_UpdateChatDefaultBannedRights
func (m *Update) To_UpdateChatDefaultBannedRights() *TLUpdateChatDefaultBannedRights {
	m.PredicateName = Predicate_updateChatDefaultBannedRights
	return &TLUpdateChatDefaultBannedRights{
		Data2: m,
	}
}

// To_UpdateFolderPeers
func (m *Update) To_UpdateFolderPeers() *TLUpdateFolderPeers {
	m.PredicateName = Predicate_updateFolderPeers
	return &TLUpdateFolderPeers{
		Data2: m,
	}
}

// To_UpdatePeerSettings
func (m *Update) To_UpdatePeerSettings() *TLUpdatePeerSettings {
	m.PredicateName = Predicate_updatePeerSettings
	return &TLUpdatePeerSettings{
		Data2: m,
	}
}

// To_UpdatePeerLocated
func (m *Update) To_UpdatePeerLocated() *TLUpdatePeerLocated {
	m.PredicateName = Predicate_updatePeerLocated
	return &TLUpdatePeerLocated{
		Data2: m,
	}
}

// To_UpdateNewScheduledMessage
func (m *Update) To_UpdateNewScheduledMessage() *TLUpdateNewScheduledMessage {
	m.PredicateName = Predicate_updateNewScheduledMessage
	return &TLUpdateNewScheduledMessage{
		Data2: m,
	}
}

// To_UpdateDeleteScheduledMessages
func (m *Update) To_UpdateDeleteScheduledMessages() *TLUpdateDeleteScheduledMessages {
	m.PredicateName = Predicate_updateDeleteScheduledMessages
	return &TLUpdateDeleteScheduledMessages{
		Data2: m,
	}
}

// To_UpdateTheme
func (m *Update) To_UpdateTheme() *TLUpdateTheme {
	m.PredicateName = Predicate_updateTheme
	return &TLUpdateTheme{
		Data2: m,
	}
}

// To_UpdateGeoLiveViewed
func (m *Update) To_UpdateGeoLiveViewed() *TLUpdateGeoLiveViewed {
	m.PredicateName = Predicate_updateGeoLiveViewed
	return &TLUpdateGeoLiveViewed{
		Data2: m,
	}
}

// To_UpdateLoginToken
func (m *Update) To_UpdateLoginToken() *TLUpdateLoginToken {
	m.PredicateName = Predicate_updateLoginToken
	return &TLUpdateLoginToken{
		Data2: m,
	}
}

// To_UpdateMessagePollVote
func (m *Update) To_UpdateMessagePollVote() *TLUpdateMessagePollVote {
	m.PredicateName = Predicate_updateMessagePollVote
	return &TLUpdateMessagePollVote{
		Data2: m,
	}
}

// To_UpdateDialogFilter
func (m *Update) To_UpdateDialogFilter() *TLUpdateDialogFilter {
	m.PredicateName = Predicate_updateDialogFilter
	return &TLUpdateDialogFilter{
		Data2: m,
	}
}

// To_UpdateDialogFilterOrder
func (m *Update) To_UpdateDialogFilterOrder() *TLUpdateDialogFilterOrder {
	m.PredicateName = Predicate_updateDialogFilterOrder
	return &TLUpdateDialogFilterOrder{
		Data2: m,
	}
}

// To_UpdateDialogFilters
func (m *Update) To_UpdateDialogFilters() *TLUpdateDialogFilters {
	m.PredicateName = Predicate_updateDialogFilters
	return &TLUpdateDialogFilters{
		Data2: m,
	}
}

// To_UpdatePhoneCallSignalingData
func (m *Update) To_UpdatePhoneCallSignalingData() *TLUpdatePhoneCallSignalingData {
	m.PredicateName = Predicate_updatePhoneCallSignalingData
	return &TLUpdatePhoneCallSignalingData{
		Data2: m,
	}
}

// To_UpdateChannelMessageForwards
func (m *Update) To_UpdateChannelMessageForwards() *TLUpdateChannelMessageForwards {
	m.PredicateName = Predicate_updateChannelMessageForwards
	return &TLUpdateChannelMessageForwards{
		Data2: m,
	}
}

// To_UpdateReadChannelDiscussionInbox
func (m *Update) To_UpdateReadChannelDiscussionInbox() *TLUpdateReadChannelDiscussionInbox {
	m.PredicateName = Predicate_updateReadChannelDiscussionInbox
	return &TLUpdateReadChannelDiscussionInbox{
		Data2: m,
	}
}

// To_UpdateReadChannelDiscussionOutbox
func (m *Update) To_UpdateReadChannelDiscussionOutbox() *TLUpdateReadChannelDiscussionOutbox {
	m.PredicateName = Predicate_updateReadChannelDiscussionOutbox
	return &TLUpdateReadChannelDiscussionOutbox{
		Data2: m,
	}
}

// To_UpdatePeerBlocked
func (m *Update) To_UpdatePeerBlocked() *TLUpdatePeerBlocked {
	m.PredicateName = Predicate_updatePeerBlocked
	return &TLUpdatePeerBlocked{
		Data2: m,
	}
}

// To_UpdateChannelUserTyping
func (m *Update) To_UpdateChannelUserTyping() *TLUpdateChannelUserTyping {
	m.PredicateName = Predicate_updateChannelUserTyping
	return &TLUpdateChannelUserTyping{
		Data2: m,
	}
}

// To_UpdatePinnedMessages
func (m *Update) To_UpdatePinnedMessages() *TLUpdatePinnedMessages {
	m.PredicateName = Predicate_updatePinnedMessages
	return &TLUpdatePinnedMessages{
		Data2: m,
	}
}

// To_UpdatePinnedChannelMessages
func (m *Update) To_UpdatePinnedChannelMessages() *TLUpdatePinnedChannelMessages {
	m.PredicateName = Predicate_updatePinnedChannelMessages
	return &TLUpdatePinnedChannelMessages{
		Data2: m,
	}
}

// To_UpdateChat
func (m *Update) To_UpdateChat() *TLUpdateChat {
	m.PredicateName = Predicate_updateChat
	return &TLUpdateChat{
		Data2: m,
	}
}

// To_UpdateGroupCallParticipants
func (m *Update) To_UpdateGroupCallParticipants() *TLUpdateGroupCallParticipants {
	m.PredicateName = Predicate_updateGroupCallParticipants
	return &TLUpdateGroupCallParticipants{
		Data2: m,
	}
}

// To_UpdateGroupCall
func (m *Update) To_UpdateGroupCall() *TLUpdateGroupCall {
	m.PredicateName = Predicate_updateGroupCall
	return &TLUpdateGroupCall{
		Data2: m,
	}
}

// To_UpdatePeerHistoryTTL
func (m *Update) To_UpdatePeerHistoryTTL() *TLUpdatePeerHistoryTTL {
	m.PredicateName = Predicate_updatePeerHistoryTTL
	return &TLUpdatePeerHistoryTTL{
		Data2: m,
	}
}

// To_UpdateChatParticipant
func (m *Update) To_UpdateChatParticipant() *TLUpdateChatParticipant {
	m.PredicateName = Predicate_updateChatParticipant
	return &TLUpdateChatParticipant{
		Data2: m,
	}
}

// To_UpdateChannelParticipant
func (m *Update) To_UpdateChannelParticipant() *TLUpdateChannelParticipant {
	m.PredicateName = Predicate_updateChannelParticipant
	return &TLUpdateChannelParticipant{
		Data2: m,
	}
}

// To_UpdateBotStopped
func (m *Update) To_UpdateBotStopped() *TLUpdateBotStopped {
	m.PredicateName = Predicate_updateBotStopped
	return &TLUpdateBotStopped{
		Data2: m,
	}
}

// To_UpdateGroupCallConnection
func (m *Update) To_UpdateGroupCallConnection() *TLUpdateGroupCallConnection {
	m.PredicateName = Predicate_updateGroupCallConnection
	return &TLUpdateGroupCallConnection{
		Data2: m,
	}
}

// To_UpdateBotCommands
func (m *Update) To_UpdateBotCommands() *TLUpdateBotCommands {
	m.PredicateName = Predicate_updateBotCommands
	return &TLUpdateBotCommands{
		Data2: m,
	}
}

// To_UpdatePendingJoinRequests
func (m *Update) To_UpdatePendingJoinRequests() *TLUpdatePendingJoinRequests {
	m.PredicateName = Predicate_updatePendingJoinRequests
	return &TLUpdatePendingJoinRequests{
		Data2: m,
	}
}

// To_UpdateBotChatInviteRequester
func (m *Update) To_UpdateBotChatInviteRequester() *TLUpdateBotChatInviteRequester {
	m.PredicateName = Predicate_updateBotChatInviteRequester
	return &TLUpdateBotChatInviteRequester{
		Data2: m,
	}
}

// To_UpdateMessageReactions
func (m *Update) To_UpdateMessageReactions() *TLUpdateMessageReactions {
	m.PredicateName = Predicate_updateMessageReactions
	return &TLUpdateMessageReactions{
		Data2: m,
	}
}

// To_UpdateBizDataRaw
func (m *Update) To_UpdateBizDataRaw() *TLUpdateBizDataRaw {
	m.PredicateName = Predicate_updateBizDataRaw
	return &TLUpdateBizDataRaw{
		Data2: m,
	}
}

// MakeTLUpdateNewMessage
func MakeTLUpdateNewMessage(data2 *Update) *TLUpdateNewMessage {
	if data2 == nil {
		return &TLUpdateNewMessage{Data2: &Update{
			PredicateName: Predicate_updateNewMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateNewMessage
		return &TLUpdateNewMessage{Data2: data2}
	}
}

func (m *TLUpdateNewMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNewMessage
	return m.Data2
}

func (m *TLUpdateNewMessage) SetMessage_MESSAGE(v *Message) { m.Data2.Message_MESSAGE = v }
func (m *TLUpdateNewMessage) GetMessage_MESSAGE() *Message  { return m.Data2.Message_MESSAGE }

func (m *TLUpdateNewMessage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateNewMessage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateNewMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateNewMessage) GetPredicateName() string {
	return Predicate_updateNewMessage
}

func (m *TLUpdateNewMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1f2b0afd: func() []byte {
			x.UInt(0x1f2b0afd)

			x.Bytes(m.GetMessage_MESSAGE().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNewMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNewMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNewMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNewMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1f2b0afd: func() error {

			m0 := &Message{}
			m0.Decode(dBuf)
			m.SetMessage_MESSAGE(m0)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNewMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateMessageID
func MakeTLUpdateMessageID(data2 *Update) *TLUpdateMessageID {
	if data2 == nil {
		return &TLUpdateMessageID{Data2: &Update{
			PredicateName: Predicate_updateMessageID,
		}}
	} else {
		data2.PredicateName = Predicate_updateMessageID
		return &TLUpdateMessageID{Data2: data2}
	}
}

func (m *TLUpdateMessageID) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateMessageID
	return m.Data2
}

func (m *TLUpdateMessageID) SetId_INT32(v int32) { m.Data2.Id_INT32 = v }
func (m *TLUpdateMessageID) GetId_INT32() int32  { return m.Data2.Id_INT32 }

func (m *TLUpdateMessageID) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLUpdateMessageID) GetRandomId() int64  { return m.Data2.RandomId }

func (m *TLUpdateMessageID) GetPredicateName() string {
	return Predicate_updateMessageID
}

func (m *TLUpdateMessageID) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4e90bfd6: func() []byte {
			x.UInt(0x4e90bfd6)

			x.Int(m.GetId_INT32())
			x.Long(m.GetRandomId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateMessageID, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateMessageID, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateMessageID) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateMessageID) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4e90bfd6: func() error {
			m.SetId_INT32(dBuf.Int())
			m.SetRandomId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateMessageID) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDeleteMessages
func MakeTLUpdateDeleteMessages(data2 *Update) *TLUpdateDeleteMessages {
	if data2 == nil {
		return &TLUpdateDeleteMessages{Data2: &Update{
			PredicateName: Predicate_updateDeleteMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updateDeleteMessages
		return &TLUpdateDeleteMessages{Data2: data2}
	}
}

func (m *TLUpdateDeleteMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDeleteMessages
	return m.Data2
}

func (m *TLUpdateDeleteMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateDeleteMessages) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateDeleteMessages) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateDeleteMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateDeleteMessages) GetPredicateName() string {
	return Predicate_updateDeleteMessages
}

func (m *TLUpdateDeleteMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa20db0e5: func() []byte {
			x.UInt(0xa20db0e5)

			x.VectorInt(m.GetMessages())

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDeleteMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDeleteMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDeleteMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDeleteMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa20db0e5: func() error {

			m.SetMessages(dBuf.VectorInt())

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDeleteMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateUserTyping
func MakeTLUpdateUserTyping(data2 *Update) *TLUpdateUserTyping {
	if data2 == nil {
		return &TLUpdateUserTyping{Data2: &Update{
			PredicateName: Predicate_updateUserTyping,
		}}
	} else {
		data2.PredicateName = Predicate_updateUserTyping
		return &TLUpdateUserTyping{Data2: data2}
	}
}

func (m *TLUpdateUserTyping) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateUserTyping
	return m.Data2
}

func (m *TLUpdateUserTyping) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateUserTyping) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateUserTyping) GetAction() *SendMessageAction  { return m.Data2.Action }

func (m *TLUpdateUserTyping) GetPredicateName() string {
	return Predicate_updateUserTyping
}

func (m *TLUpdateUserTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc01e857f: func() []byte {
			x.UInt(0xc01e857f)

			x.Long(m.GetUserId())
			x.Bytes(m.GetAction().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateUserTyping, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateUserTyping, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateUserTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateUserTyping) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc01e857f: func() error {
			m.SetUserId(dBuf.Long())

			m7 := &SendMessageAction{}
			m7.Decode(dBuf)
			m.SetAction(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateUserTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatUserTyping
func MakeTLUpdateChatUserTyping(data2 *Update) *TLUpdateChatUserTyping {
	if data2 == nil {
		return &TLUpdateChatUserTyping{Data2: &Update{
			PredicateName: Predicate_updateChatUserTyping,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatUserTyping
		return &TLUpdateChatUserTyping{Data2: data2}
	}
}

func (m *TLUpdateChatUserTyping) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatUserTyping
	return m.Data2
}

func (m *TLUpdateChatUserTyping) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChatUserTyping) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChatUserTyping) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLUpdateChatUserTyping) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLUpdateChatUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateChatUserTyping) GetAction() *SendMessageAction  { return m.Data2.Action }

func (m *TLUpdateChatUserTyping) GetPredicateName() string {
	return Predicate_updateChatUserTyping
}

func (m *TLUpdateChatUserTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x83487af0: func() []byte {
			x.UInt(0x83487af0)

			x.Long(m.GetChatId_INT64())
			x.Bytes(m.GetFromId().Encode(layer))
			x.Bytes(m.GetAction().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatUserTyping, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatUserTyping, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatUserTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatUserTyping) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x83487af0: func() error {
			m.SetChatId_INT64(dBuf.Long())

			m9 := &Peer{}
			m9.Decode(dBuf)
			m.SetFromId(m9)

			m7 := &SendMessageAction{}
			m7.Decode(dBuf)
			m.SetAction(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatUserTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatParticipants
func MakeTLUpdateChatParticipants(data2 *Update) *TLUpdateChatParticipants {
	if data2 == nil {
		return &TLUpdateChatParticipants{Data2: &Update{
			PredicateName: Predicate_updateChatParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatParticipants
		return &TLUpdateChatParticipants{Data2: data2}
	}
}

func (m *TLUpdateChatParticipants) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatParticipants
	return m.Data2
}

func (m *TLUpdateChatParticipants) SetParticipants_CHATPARTICIPANTS(v *ChatParticipants) {
	m.Data2.Participants_CHATPARTICIPANTS = v
}
func (m *TLUpdateChatParticipants) GetParticipants_CHATPARTICIPANTS() *ChatParticipants {
	return m.Data2.Participants_CHATPARTICIPANTS
}

func (m *TLUpdateChatParticipants) GetPredicateName() string {
	return Predicate_updateChatParticipants
}

func (m *TLUpdateChatParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7761198: func() []byte {
			x.UInt(0x7761198)

			x.Bytes(m.GetParticipants_CHATPARTICIPANTS().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7761198: func() error {

			m10 := &ChatParticipants{}
			m10.Decode(dBuf)
			m.SetParticipants_CHATPARTICIPANTS(m10)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateUserStatus
func MakeTLUpdateUserStatus(data2 *Update) *TLUpdateUserStatus {
	if data2 == nil {
		return &TLUpdateUserStatus{Data2: &Update{
			PredicateName: Predicate_updateUserStatus,
		}}
	} else {
		data2.PredicateName = Predicate_updateUserStatus
		return &TLUpdateUserStatus{Data2: data2}
	}
}

func (m *TLUpdateUserStatus) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateUserStatus
	return m.Data2
}

func (m *TLUpdateUserStatus) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateUserStatus) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateUserStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUpdateUserStatus) GetStatus() *UserStatus  { return m.Data2.Status }

func (m *TLUpdateUserStatus) GetPredicateName() string {
	return Predicate_updateUserStatus
}

func (m *TLUpdateUserStatus) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe5bdf8de: func() []byte {
			x.UInt(0xe5bdf8de)

			x.Long(m.GetUserId())
			x.Bytes(m.GetStatus().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateUserStatus, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateUserStatus, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateUserStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateUserStatus) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe5bdf8de: func() error {
			m.SetUserId(dBuf.Long())

			m11 := &UserStatus{}
			m11.Decode(dBuf)
			m.SetStatus(m11)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateUserStatus) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateUserName
func MakeTLUpdateUserName(data2 *Update) *TLUpdateUserName {
	if data2 == nil {
		return &TLUpdateUserName{Data2: &Update{
			PredicateName: Predicate_updateUserName,
		}}
	} else {
		data2.PredicateName = Predicate_updateUserName
		return &TLUpdateUserName{Data2: data2}
	}
}

func (m *TLUpdateUserName) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateUserName
	return m.Data2
}

func (m *TLUpdateUserName) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateUserName) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateUserName) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUpdateUserName) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLUpdateUserName) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUpdateUserName) GetLastName() string  { return m.Data2.LastName }

func (m *TLUpdateUserName) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUpdateUserName) GetUsername() string  { return m.Data2.Username }

func (m *TLUpdateUserName) GetPredicateName() string {
	return Predicate_updateUserName
}

func (m *TLUpdateUserName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc3f202e0: func() []byte {
			x.UInt(0xc3f202e0)

			x.Long(m.GetUserId())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.String(m.GetUsername())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateUserName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateUserName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateUserName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateUserName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc3f202e0: func() error {
			m.SetUserId(dBuf.Long())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetUsername(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateUserName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateUserPhoto
func MakeTLUpdateUserPhoto(data2 *Update) *TLUpdateUserPhoto {
	if data2 == nil {
		return &TLUpdateUserPhoto{Data2: &Update{
			PredicateName: Predicate_updateUserPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_updateUserPhoto
		return &TLUpdateUserPhoto{Data2: data2}
	}
}

func (m *TLUpdateUserPhoto) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateUserPhoto
	return m.Data2
}

func (m *TLUpdateUserPhoto) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateUserPhoto) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateUserPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateUserPhoto) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateUserPhoto) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUpdateUserPhoto) GetPhoto() *UserProfilePhoto  { return m.Data2.Photo }

func (m *TLUpdateUserPhoto) SetPrevious(v *Bool) { m.Data2.Previous = v }
func (m *TLUpdateUserPhoto) GetPrevious() *Bool  { return m.Data2.Previous }

func (m *TLUpdateUserPhoto) GetPredicateName() string {
	return Predicate_updateUserPhoto
}

func (m *TLUpdateUserPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf227868c: func() []byte {
			x.UInt(0xf227868c)

			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			x.Bytes(m.GetPhoto().Encode(layer))
			x.Bytes(m.GetPrevious().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateUserPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateUserPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateUserPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateUserPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf227868c: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())

			m16 := &UserProfilePhoto{}
			m16.Decode(dBuf)
			m.SetPhoto(m16)

			m17 := &Bool{}
			m17.Decode(dBuf)
			m.SetPrevious(m17)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateUserPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateNewEncryptedMessage
func MakeTLUpdateNewEncryptedMessage(data2 *Update) *TLUpdateNewEncryptedMessage {
	if data2 == nil {
		return &TLUpdateNewEncryptedMessage{Data2: &Update{
			PredicateName: Predicate_updateNewEncryptedMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateNewEncryptedMessage
		return &TLUpdateNewEncryptedMessage{Data2: data2}
	}
}

func (m *TLUpdateNewEncryptedMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNewEncryptedMessage
	return m.Data2
}

func (m *TLUpdateNewEncryptedMessage) SetMessage_ENCRYPTEDMESSAGE(v *EncryptedMessage) {
	m.Data2.Message_ENCRYPTEDMESSAGE = v
}
func (m *TLUpdateNewEncryptedMessage) GetMessage_ENCRYPTEDMESSAGE() *EncryptedMessage {
	return m.Data2.Message_ENCRYPTEDMESSAGE
}

func (m *TLUpdateNewEncryptedMessage) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateNewEncryptedMessage) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateNewEncryptedMessage) GetPredicateName() string {
	return Predicate_updateNewEncryptedMessage
}

func (m *TLUpdateNewEncryptedMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x12bcbd9a: func() []byte {
			x.UInt(0x12bcbd9a)

			x.Bytes(m.GetMessage_ENCRYPTEDMESSAGE().Encode(layer))
			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNewEncryptedMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNewEncryptedMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNewEncryptedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNewEncryptedMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x12bcbd9a: func() error {

			m0 := &EncryptedMessage{}
			m0.Decode(dBuf)
			m.SetMessage_ENCRYPTEDMESSAGE(m0)

			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNewEncryptedMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateEncryptedChatTyping
func MakeTLUpdateEncryptedChatTyping(data2 *Update) *TLUpdateEncryptedChatTyping {
	if data2 == nil {
		return &TLUpdateEncryptedChatTyping{Data2: &Update{
			PredicateName: Predicate_updateEncryptedChatTyping,
		}}
	} else {
		data2.PredicateName = Predicate_updateEncryptedChatTyping
		return &TLUpdateEncryptedChatTyping{Data2: data2}
	}
}

func (m *TLUpdateEncryptedChatTyping) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateEncryptedChatTyping
	return m.Data2
}

func (m *TLUpdateEncryptedChatTyping) SetChatId_INT32(v int32) { m.Data2.ChatId_INT32 = v }
func (m *TLUpdateEncryptedChatTyping) GetChatId_INT32() int32  { return m.Data2.ChatId_INT32 }

func (m *TLUpdateEncryptedChatTyping) GetPredicateName() string {
	return Predicate_updateEncryptedChatTyping
}

func (m *TLUpdateEncryptedChatTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1710f156: func() []byte {
			x.UInt(0x1710f156)

			x.Int(m.GetChatId_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateEncryptedChatTyping, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateEncryptedChatTyping, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateEncryptedChatTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateEncryptedChatTyping) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1710f156: func() error {
			m.SetChatId_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateEncryptedChatTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateEncryption
func MakeTLUpdateEncryption(data2 *Update) *TLUpdateEncryption {
	if data2 == nil {
		return &TLUpdateEncryption{Data2: &Update{
			PredicateName: Predicate_updateEncryption,
		}}
	} else {
		data2.PredicateName = Predicate_updateEncryption
		return &TLUpdateEncryption{Data2: data2}
	}
}

func (m *TLUpdateEncryption) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateEncryption
	return m.Data2
}

func (m *TLUpdateEncryption) SetChat(v *EncryptedChat) { m.Data2.Chat = v }
func (m *TLUpdateEncryption) GetChat() *EncryptedChat  { return m.Data2.Chat }

func (m *TLUpdateEncryption) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryption) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateEncryption) GetPredicateName() string {
	return Predicate_updateEncryption
}

func (m *TLUpdateEncryption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb4a2e88d: func() []byte {
			x.UInt(0xb4a2e88d)

			x.Bytes(m.GetChat().Encode(layer))
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateEncryption, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateEncryption, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateEncryption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateEncryption) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb4a2e88d: func() error {

			m19 := &EncryptedChat{}
			m19.Decode(dBuf)
			m.SetChat(m19)

			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateEncryption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateEncryptedMessagesRead
func MakeTLUpdateEncryptedMessagesRead(data2 *Update) *TLUpdateEncryptedMessagesRead {
	if data2 == nil {
		return &TLUpdateEncryptedMessagesRead{Data2: &Update{
			PredicateName: Predicate_updateEncryptedMessagesRead,
		}}
	} else {
		data2.PredicateName = Predicate_updateEncryptedMessagesRead
		return &TLUpdateEncryptedMessagesRead{Data2: data2}
	}
}

func (m *TLUpdateEncryptedMessagesRead) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateEncryptedMessagesRead
	return m.Data2
}

func (m *TLUpdateEncryptedMessagesRead) SetChatId_INT32(v int32) { m.Data2.ChatId_INT32 = v }
func (m *TLUpdateEncryptedMessagesRead) GetChatId_INT32() int32  { return m.Data2.ChatId_INT32 }

func (m *TLUpdateEncryptedMessagesRead) SetMaxDate(v int32) { m.Data2.MaxDate = v }
func (m *TLUpdateEncryptedMessagesRead) GetMaxDate() int32  { return m.Data2.MaxDate }

func (m *TLUpdateEncryptedMessagesRead) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryptedMessagesRead) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateEncryptedMessagesRead) GetPredicateName() string {
	return Predicate_updateEncryptedMessagesRead
}

func (m *TLUpdateEncryptedMessagesRead) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x38fe25b7: func() []byte {
			x.UInt(0x38fe25b7)

			x.Int(m.GetChatId_INT32())
			x.Int(m.GetMaxDate())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateEncryptedMessagesRead, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateEncryptedMessagesRead, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateEncryptedMessagesRead) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateEncryptedMessagesRead) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x38fe25b7: func() error {
			m.SetChatId_INT32(dBuf.Int())
			m.SetMaxDate(dBuf.Int())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateEncryptedMessagesRead) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatParticipantAdd
func MakeTLUpdateChatParticipantAdd(data2 *Update) *TLUpdateChatParticipantAdd {
	if data2 == nil {
		return &TLUpdateChatParticipantAdd{Data2: &Update{
			PredicateName: Predicate_updateChatParticipantAdd,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatParticipantAdd
		return &TLUpdateChatParticipantAdd{Data2: data2}
	}
}

func (m *TLUpdateChatParticipantAdd) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatParticipantAdd
	return m.Data2
}

func (m *TLUpdateChatParticipantAdd) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChatParticipantAdd) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChatParticipantAdd) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdd) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdd) SetInviterId(v int64) { m.Data2.InviterId = v }
func (m *TLUpdateChatParticipantAdd) GetInviterId() int64  { return m.Data2.InviterId }

func (m *TLUpdateChatParticipantAdd) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChatParticipantAdd) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateChatParticipantAdd) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdd) GetVersion() int32  { return m.Data2.Version }

func (m *TLUpdateChatParticipantAdd) GetPredicateName() string {
	return Predicate_updateChatParticipantAdd
}

func (m *TLUpdateChatParticipantAdd) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3dda5451: func() []byte {
			x.UInt(0x3dda5451)

			x.Long(m.GetChatId_INT64())
			x.Long(m.GetUserId())
			x.Long(m.GetInviterId())
			x.Int(m.GetDate())
			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatParticipantAdd, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatParticipantAdd, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatParticipantAdd) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatParticipantAdd) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3dda5451: func() error {
			m.SetChatId_INT64(dBuf.Long())
			m.SetUserId(dBuf.Long())
			m.SetInviterId(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatParticipantAdd) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatParticipantDelete
func MakeTLUpdateChatParticipantDelete(data2 *Update) *TLUpdateChatParticipantDelete {
	if data2 == nil {
		return &TLUpdateChatParticipantDelete{Data2: &Update{
			PredicateName: Predicate_updateChatParticipantDelete,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatParticipantDelete
		return &TLUpdateChatParticipantDelete{Data2: data2}
	}
}

func (m *TLUpdateChatParticipantDelete) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatParticipantDelete
	return m.Data2
}

func (m *TLUpdateChatParticipantDelete) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChatParticipantDelete) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChatParticipantDelete) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantDelete) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantDelete) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantDelete) GetVersion() int32  { return m.Data2.Version }

func (m *TLUpdateChatParticipantDelete) GetPredicateName() string {
	return Predicate_updateChatParticipantDelete
}

func (m *TLUpdateChatParticipantDelete) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe32f3d77: func() []byte {
			x.UInt(0xe32f3d77)

			x.Long(m.GetChatId_INT64())
			x.Long(m.GetUserId())
			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatParticipantDelete, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatParticipantDelete, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatParticipantDelete) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatParticipantDelete) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe32f3d77: func() error {
			m.SetChatId_INT64(dBuf.Long())
			m.SetUserId(dBuf.Long())
			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatParticipantDelete) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDcOptions
func MakeTLUpdateDcOptions(data2 *Update) *TLUpdateDcOptions {
	if data2 == nil {
		return &TLUpdateDcOptions{Data2: &Update{
			PredicateName: Predicate_updateDcOptions,
		}}
	} else {
		data2.PredicateName = Predicate_updateDcOptions
		return &TLUpdateDcOptions{Data2: data2}
	}
}

func (m *TLUpdateDcOptions) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDcOptions
	return m.Data2
}

func (m *TLUpdateDcOptions) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLUpdateDcOptions) GetDcOptions() []*DcOption  { return m.Data2.DcOptions }

func (m *TLUpdateDcOptions) GetPredicateName() string {
	return Predicate_updateDcOptions
}

func (m *TLUpdateDcOptions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8e5e9873: func() []byte {
			x.UInt(0x8e5e9873)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDcOptions())))
			for _, v := range m.GetDcOptions() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDcOptions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDcOptions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDcOptions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDcOptions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8e5e9873: func() error {
			c23 := dBuf.Int()
			if c23 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 23, c23)
				return dBuf.GetError()
			}
			l23 := dBuf.Int()
			v23 := make([]*DcOption, l23)
			for i := int32(0); i < l23; i++ {
				v23[i] = &DcOption{}
				v23[i].Decode(dBuf)
			}
			m.SetDcOptions(v23)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDcOptions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateNotifySettings
func MakeTLUpdateNotifySettings(data2 *Update) *TLUpdateNotifySettings {
	if data2 == nil {
		return &TLUpdateNotifySettings{Data2: &Update{
			PredicateName: Predicate_updateNotifySettings,
		}}
	} else {
		data2.PredicateName = Predicate_updateNotifySettings
		return &TLUpdateNotifySettings{Data2: data2}
	}
}

func (m *TLUpdateNotifySettings) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNotifySettings
	return m.Data2
}

func (m *TLUpdateNotifySettings) SetPeer_NOTIFYPEER(v *NotifyPeer) { m.Data2.Peer_NOTIFYPEER = v }
func (m *TLUpdateNotifySettings) GetPeer_NOTIFYPEER() *NotifyPeer  { return m.Data2.Peer_NOTIFYPEER }

func (m *TLUpdateNotifySettings) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUpdateNotifySettings) GetNotifySettings() *PeerNotifySettings {
	return m.Data2.NotifySettings
}

func (m *TLUpdateNotifySettings) GetPredicateName() string {
	return Predicate_updateNotifySettings
}

func (m *TLUpdateNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbec268ef: func() []byte {
			x.UInt(0xbec268ef)

			x.Bytes(m.GetPeer_NOTIFYPEER().Encode(layer))
			x.Bytes(m.GetNotifySettings().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNotifySettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNotifySettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNotifySettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbec268ef: func() error {

			m24 := &NotifyPeer{}
			m24.Decode(dBuf)
			m.SetPeer_NOTIFYPEER(m24)

			m25 := &PeerNotifySettings{}
			m25.Decode(dBuf)
			m.SetNotifySettings(m25)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateServiceNotification
func MakeTLUpdateServiceNotification(data2 *Update) *TLUpdateServiceNotification {
	if data2 == nil {
		return &TLUpdateServiceNotification{Data2: &Update{
			PredicateName: Predicate_updateServiceNotification,
		}}
	} else {
		data2.PredicateName = Predicate_updateServiceNotification
		return &TLUpdateServiceNotification{Data2: data2}
	}
}

func (m *TLUpdateServiceNotification) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateServiceNotification
	return m.Data2
}

//// flags
func (m *TLUpdateServiceNotification) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLUpdateServiceNotification) GetPopup() bool  { return m.Data2.Popup }

func (m *TLUpdateServiceNotification) SetInboxDate(v *types.Int32Value) { m.Data2.InboxDate = v }
func (m *TLUpdateServiceNotification) GetInboxDate() *types.Int32Value  { return m.Data2.InboxDate }

func (m *TLUpdateServiceNotification) SetType(v string) { m.Data2.Type = v }
func (m *TLUpdateServiceNotification) GetType() string  { return m.Data2.Type }

func (m *TLUpdateServiceNotification) SetMessage_STRING(v string) { m.Data2.Message_STRING = v }
func (m *TLUpdateServiceNotification) GetMessage_STRING() string  { return m.Data2.Message_STRING }

func (m *TLUpdateServiceNotification) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateServiceNotification) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLUpdateServiceNotification) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateServiceNotification) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLUpdateServiceNotification) GetPredicateName() string {
	return Predicate_updateServiceNotification
}

func (m *TLUpdateServiceNotification) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xebe46819: func() []byte {
			x.UInt(0xebe46819)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPopup() == true {
					flags |= 1 << 0
				}
				if m.GetInboxDate() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetInboxDate() != nil {
				x.Int(m.GetInboxDate().Value)
			}

			x.String(m.GetType())
			x.String(m.GetMessage_STRING())
			x.Bytes(m.GetMedia().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateServiceNotification, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateServiceNotification, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateServiceNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateServiceNotification) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xebe46819: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPopup(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetInboxDate(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetType(dBuf.String())
			m.SetMessage_STRING(dBuf.String())

			m30 := &MessageMedia{}
			m30.Decode(dBuf)
			m.SetMedia(m30)

			c31 := dBuf.Int()
			if c31 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 31, c31)
				return dBuf.GetError()
			}
			l31 := dBuf.Int()
			v31 := make([]*MessageEntity, l31)
			for i := int32(0); i < l31; i++ {
				v31[i] = &MessageEntity{}
				v31[i].Decode(dBuf)
			}
			m.SetEntities(v31)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateServiceNotification) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePrivacy
func MakeTLUpdatePrivacy(data2 *Update) *TLUpdatePrivacy {
	if data2 == nil {
		return &TLUpdatePrivacy{Data2: &Update{
			PredicateName: Predicate_updatePrivacy,
		}}
	} else {
		data2.PredicateName = Predicate_updatePrivacy
		return &TLUpdatePrivacy{Data2: data2}
	}
}

func (m *TLUpdatePrivacy) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePrivacy
	return m.Data2
}

func (m *TLUpdatePrivacy) SetKey(v *PrivacyKey) { m.Data2.Key = v }
func (m *TLUpdatePrivacy) GetKey() *PrivacyKey  { return m.Data2.Key }

func (m *TLUpdatePrivacy) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLUpdatePrivacy) GetRules() []*PrivacyRule  { return m.Data2.Rules }

func (m *TLUpdatePrivacy) GetPredicateName() string {
	return Predicate_updatePrivacy
}

func (m *TLUpdatePrivacy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xee3b272a: func() []byte {
			x.UInt(0xee3b272a)

			x.Bytes(m.GetKey().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetRules())))
			for _, v := range m.GetRules() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePrivacy, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePrivacy, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePrivacy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePrivacy) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xee3b272a: func() error {

			m32 := &PrivacyKey{}
			m32.Decode(dBuf)
			m.SetKey(m32)

			c33 := dBuf.Int()
			if c33 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 33, c33)
				return dBuf.GetError()
			}
			l33 := dBuf.Int()
			v33 := make([]*PrivacyRule, l33)
			for i := int32(0); i < l33; i++ {
				v33[i] = &PrivacyRule{}
				v33[i].Decode(dBuf)
			}
			m.SetRules(v33)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePrivacy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateUserPhone
func MakeTLUpdateUserPhone(data2 *Update) *TLUpdateUserPhone {
	if data2 == nil {
		return &TLUpdateUserPhone{Data2: &Update{
			PredicateName: Predicate_updateUserPhone,
		}}
	} else {
		data2.PredicateName = Predicate_updateUserPhone
		return &TLUpdateUserPhone{Data2: data2}
	}
}

func (m *TLUpdateUserPhone) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateUserPhone
	return m.Data2
}

func (m *TLUpdateUserPhone) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateUserPhone) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateUserPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUpdateUserPhone) GetPhone() string  { return m.Data2.Phone }

func (m *TLUpdateUserPhone) GetPredicateName() string {
	return Predicate_updateUserPhone
}

func (m *TLUpdateUserPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5492a13: func() []byte {
			x.UInt(0x5492a13)

			x.Long(m.GetUserId())
			x.String(m.GetPhone())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateUserPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateUserPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateUserPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateUserPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5492a13: func() error {
			m.SetUserId(dBuf.Long())
			m.SetPhone(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateUserPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadHistoryInbox
func MakeTLUpdateReadHistoryInbox(data2 *Update) *TLUpdateReadHistoryInbox {
	if data2 == nil {
		return &TLUpdateReadHistoryInbox{Data2: &Update{
			PredicateName: Predicate_updateReadHistoryInbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadHistoryInbox
		return &TLUpdateReadHistoryInbox{Data2: data2}
	}
}

func (m *TLUpdateReadHistoryInbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadHistoryInbox
	return m.Data2
}

//// flags
func (m *TLUpdateReadHistoryInbox) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLUpdateReadHistoryInbox) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLUpdateReadHistoryInbox) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateReadHistoryInbox) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateReadHistoryInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryInbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryInbox) SetStillUnreadCount(v int32) { m.Data2.StillUnreadCount = v }
func (m *TLUpdateReadHistoryInbox) GetStillUnreadCount() int32  { return m.Data2.StillUnreadCount }

func (m *TLUpdateReadHistoryInbox) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateReadHistoryInbox) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateReadHistoryInbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryInbox) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateReadHistoryInbox) GetPredicateName() string {
	return Predicate_updateReadHistoryInbox
}

func (m *TLUpdateReadHistoryInbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9c974fdf: func() []byte {
			x.UInt(0x9c974fdf)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFolderId() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetMaxId())
			x.Int(m.GetStillUnreadCount())
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadHistoryInbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadHistoryInbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadHistoryInbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadHistoryInbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9c974fdf: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMaxId(dBuf.Int())
			m.SetStillUnreadCount(dBuf.Int())
			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadHistoryInbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadHistoryOutbox
func MakeTLUpdateReadHistoryOutbox(data2 *Update) *TLUpdateReadHistoryOutbox {
	if data2 == nil {
		return &TLUpdateReadHistoryOutbox{Data2: &Update{
			PredicateName: Predicate_updateReadHistoryOutbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadHistoryOutbox
		return &TLUpdateReadHistoryOutbox{Data2: data2}
	}
}

func (m *TLUpdateReadHistoryOutbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadHistoryOutbox
	return m.Data2
}

func (m *TLUpdateReadHistoryOutbox) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateReadHistoryOutbox) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateReadHistoryOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryOutbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryOutbox) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateReadHistoryOutbox) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateReadHistoryOutbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryOutbox) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateReadHistoryOutbox) GetPredicateName() string {
	return Predicate_updateReadHistoryOutbox
}

func (m *TLUpdateReadHistoryOutbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2f2f21bf: func() []byte {
			x.UInt(0x2f2f21bf)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetMaxId())
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadHistoryOutbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadHistoryOutbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadHistoryOutbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadHistoryOutbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2f2f21bf: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMaxId(dBuf.Int())
			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadHistoryOutbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateWebPage
func MakeTLUpdateWebPage(data2 *Update) *TLUpdateWebPage {
	if data2 == nil {
		return &TLUpdateWebPage{Data2: &Update{
			PredicateName: Predicate_updateWebPage,
		}}
	} else {
		data2.PredicateName = Predicate_updateWebPage
		return &TLUpdateWebPage{Data2: data2}
	}
}

func (m *TLUpdateWebPage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateWebPage
	return m.Data2
}

func (m *TLUpdateWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func (m *TLUpdateWebPage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateWebPage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateWebPage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateWebPage) GetPredicateName() string {
	return Predicate_updateWebPage
}

func (m *TLUpdateWebPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7f891213: func() []byte {
			x.UInt(0x7f891213)

			x.Bytes(m.GetWebpage().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateWebPage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateWebPage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateWebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateWebPage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7f891213: func() error {

			m38 := &WebPage{}
			m38.Decode(dBuf)
			m.SetWebpage(m38)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateWebPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadMessagesContents
func MakeTLUpdateReadMessagesContents(data2 *Update) *TLUpdateReadMessagesContents {
	if data2 == nil {
		return &TLUpdateReadMessagesContents{Data2: &Update{
			PredicateName: Predicate_updateReadMessagesContents,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadMessagesContents
		return &TLUpdateReadMessagesContents{Data2: data2}
	}
}

func (m *TLUpdateReadMessagesContents) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadMessagesContents
	return m.Data2
}

func (m *TLUpdateReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateReadMessagesContents) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateReadMessagesContents) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateReadMessagesContents) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateReadMessagesContents) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadMessagesContents) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateReadMessagesContents) GetPredicateName() string {
	return Predicate_updateReadMessagesContents
}

func (m *TLUpdateReadMessagesContents) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x68c13933: func() []byte {
			x.UInt(0x68c13933)

			x.VectorInt(m.GetMessages())

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadMessagesContents, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadMessagesContents, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadMessagesContents) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadMessagesContents) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x68c13933: func() error {

			m.SetMessages(dBuf.VectorInt())

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadMessagesContents) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelTooLong
func MakeTLUpdateChannelTooLong(data2 *Update) *TLUpdateChannelTooLong {
	if data2 == nil {
		return &TLUpdateChannelTooLong{Data2: &Update{
			PredicateName: Predicate_updateChannelTooLong,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelTooLong
		return &TLUpdateChannelTooLong{Data2: data2}
	}
}

func (m *TLUpdateChannelTooLong) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelTooLong
	return m.Data2
}

//// flags
func (m *TLUpdateChannelTooLong) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelTooLong) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelTooLong) SetPts_FLAGINT32(v *types.Int32Value) { m.Data2.Pts_FLAGINT32 = v }
func (m *TLUpdateChannelTooLong) GetPts_FLAGINT32() *types.Int32Value  { return m.Data2.Pts_FLAGINT32 }

func (m *TLUpdateChannelTooLong) GetPredicateName() string {
	return Predicate_updateChannelTooLong
}

func (m *TLUpdateChannelTooLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x108d941f: func() []byte {
			x.UInt(0x108d941f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPts_FLAGINT32() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChannelId())
			if m.GetPts_FLAGINT32() != nil {
				x.Int(m.GetPts_FLAGINT32().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelTooLong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelTooLong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelTooLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelTooLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x108d941f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChannelId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetPts_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelTooLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannel
func MakeTLUpdateChannel(data2 *Update) *TLUpdateChannel {
	if data2 == nil {
		return &TLUpdateChannel{Data2: &Update{
			PredicateName: Predicate_updateChannel,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannel
		return &TLUpdateChannel{Data2: data2}
	}
}

func (m *TLUpdateChannel) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannel
	return m.Data2
}

func (m *TLUpdateChannel) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannel) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannel) GetPredicateName() string {
	return Predicate_updateChannel
}

func (m *TLUpdateChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x635b4c09: func() []byte {
			x.UInt(0x635b4c09)

			x.Long(m.GetChannelId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x635b4c09: func() error {
			m.SetChannelId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateNewChannelMessage
func MakeTLUpdateNewChannelMessage(data2 *Update) *TLUpdateNewChannelMessage {
	if data2 == nil {
		return &TLUpdateNewChannelMessage{Data2: &Update{
			PredicateName: Predicate_updateNewChannelMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateNewChannelMessage
		return &TLUpdateNewChannelMessage{Data2: data2}
	}
}

func (m *TLUpdateNewChannelMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNewChannelMessage
	return m.Data2
}

func (m *TLUpdateNewChannelMessage) SetMessage_MESSAGE(v *Message) { m.Data2.Message_MESSAGE = v }
func (m *TLUpdateNewChannelMessage) GetMessage_MESSAGE() *Message  { return m.Data2.Message_MESSAGE }

func (m *TLUpdateNewChannelMessage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateNewChannelMessage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateNewChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewChannelMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateNewChannelMessage) GetPredicateName() string {
	return Predicate_updateNewChannelMessage
}

func (m *TLUpdateNewChannelMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x62ba04d9: func() []byte {
			x.UInt(0x62ba04d9)

			x.Bytes(m.GetMessage_MESSAGE().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNewChannelMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNewChannelMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNewChannelMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNewChannelMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x62ba04d9: func() error {

			m0 := &Message{}
			m0.Decode(dBuf)
			m.SetMessage_MESSAGE(m0)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNewChannelMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadChannelInbox
func MakeTLUpdateReadChannelInbox(data2 *Update) *TLUpdateReadChannelInbox {
	if data2 == nil {
		return &TLUpdateReadChannelInbox{Data2: &Update{
			PredicateName: Predicate_updateReadChannelInbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadChannelInbox
		return &TLUpdateReadChannelInbox{Data2: data2}
	}
}

func (m *TLUpdateReadChannelInbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadChannelInbox
	return m.Data2
}

//// flags
func (m *TLUpdateReadChannelInbox) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLUpdateReadChannelInbox) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLUpdateReadChannelInbox) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelInbox) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelInbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadChannelInbox) SetStillUnreadCount(v int32) { m.Data2.StillUnreadCount = v }
func (m *TLUpdateReadChannelInbox) GetStillUnreadCount() int32  { return m.Data2.StillUnreadCount }

func (m *TLUpdateReadChannelInbox) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateReadChannelInbox) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateReadChannelInbox) GetPredicateName() string {
	return Predicate_updateReadChannelInbox
}

func (m *TLUpdateReadChannelInbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x922e6e10: func() []byte {
			x.UInt(0x922e6e10)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFolderId() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			x.Long(m.GetChannelId())
			x.Int(m.GetMaxId())
			x.Int(m.GetStillUnreadCount())
			x.Int(m.GetPts_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadChannelInbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadChannelInbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadChannelInbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadChannelInbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x922e6e10: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetChannelId(dBuf.Long())
			m.SetMaxId(dBuf.Int())
			m.SetStillUnreadCount(dBuf.Int())
			m.SetPts_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadChannelInbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDeleteChannelMessages
func MakeTLUpdateDeleteChannelMessages(data2 *Update) *TLUpdateDeleteChannelMessages {
	if data2 == nil {
		return &TLUpdateDeleteChannelMessages{Data2: &Update{
			PredicateName: Predicate_updateDeleteChannelMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updateDeleteChannelMessages
		return &TLUpdateDeleteChannelMessages{Data2: data2}
	}
}

func (m *TLUpdateDeleteChannelMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDeleteChannelMessages
	return m.Data2
}

func (m *TLUpdateDeleteChannelMessages) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateDeleteChannelMessages) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateDeleteChannelMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteChannelMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateDeleteChannelMessages) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateDeleteChannelMessages) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateDeleteChannelMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteChannelMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateDeleteChannelMessages) GetPredicateName() string {
	return Predicate_updateDeleteChannelMessages
}

func (m *TLUpdateDeleteChannelMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc32d5b12: func() []byte {
			x.UInt(0xc32d5b12)

			x.Long(m.GetChannelId())

			x.VectorInt(m.GetMessages())

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDeleteChannelMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDeleteChannelMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDeleteChannelMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDeleteChannelMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc32d5b12: func() error {
			m.SetChannelId(dBuf.Long())

			m.SetMessages(dBuf.VectorInt())

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDeleteChannelMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelMessageViews
func MakeTLUpdateChannelMessageViews(data2 *Update) *TLUpdateChannelMessageViews {
	if data2 == nil {
		return &TLUpdateChannelMessageViews{Data2: &Update{
			PredicateName: Predicate_updateChannelMessageViews,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelMessageViews
		return &TLUpdateChannelMessageViews{Data2: data2}
	}
}

func (m *TLUpdateChannelMessageViews) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelMessageViews
	return m.Data2
}

func (m *TLUpdateChannelMessageViews) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelMessageViews) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelMessageViews) SetId_INT32(v int32) { m.Data2.Id_INT32 = v }
func (m *TLUpdateChannelMessageViews) GetId_INT32() int32  { return m.Data2.Id_INT32 }

func (m *TLUpdateChannelMessageViews) SetViews(v int32) { m.Data2.Views = v }
func (m *TLUpdateChannelMessageViews) GetViews() int32  { return m.Data2.Views }

func (m *TLUpdateChannelMessageViews) GetPredicateName() string {
	return Predicate_updateChannelMessageViews
}

func (m *TLUpdateChannelMessageViews) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf226ac08: func() []byte {
			x.UInt(0xf226ac08)

			x.Long(m.GetChannelId())
			x.Int(m.GetId_INT32())
			x.Int(m.GetViews())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelMessageViews, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelMessageViews, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelMessageViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelMessageViews) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf226ac08: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetId_INT32(dBuf.Int())
			m.SetViews(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelMessageViews) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatParticipantAdmin
func MakeTLUpdateChatParticipantAdmin(data2 *Update) *TLUpdateChatParticipantAdmin {
	if data2 == nil {
		return &TLUpdateChatParticipantAdmin{Data2: &Update{
			PredicateName: Predicate_updateChatParticipantAdmin,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatParticipantAdmin
		return &TLUpdateChatParticipantAdmin{Data2: data2}
	}
}

func (m *TLUpdateChatParticipantAdmin) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatParticipantAdmin
	return m.Data2
}

func (m *TLUpdateChatParticipantAdmin) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChatParticipantAdmin) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChatParticipantAdmin) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdmin) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdmin) SetIsAdmin(v *Bool) { m.Data2.IsAdmin = v }
func (m *TLUpdateChatParticipantAdmin) GetIsAdmin() *Bool  { return m.Data2.IsAdmin }

func (m *TLUpdateChatParticipantAdmin) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdmin) GetVersion() int32  { return m.Data2.Version }

func (m *TLUpdateChatParticipantAdmin) GetPredicateName() string {
	return Predicate_updateChatParticipantAdmin
}

func (m *TLUpdateChatParticipantAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd7ca61a2: func() []byte {
			x.UInt(0xd7ca61a2)

			x.Long(m.GetChatId_INT64())
			x.Long(m.GetUserId())
			x.Bytes(m.GetIsAdmin().Encode(layer))
			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatParticipantAdmin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatParticipantAdmin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatParticipantAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatParticipantAdmin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd7ca61a2: func() error {
			m.SetChatId_INT64(dBuf.Long())
			m.SetUserId(dBuf.Long())

			m41 := &Bool{}
			m41.Decode(dBuf)
			m.SetIsAdmin(m41)

			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatParticipantAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateNewStickerSet
func MakeTLUpdateNewStickerSet(data2 *Update) *TLUpdateNewStickerSet {
	if data2 == nil {
		return &TLUpdateNewStickerSet{Data2: &Update{
			PredicateName: Predicate_updateNewStickerSet,
		}}
	} else {
		data2.PredicateName = Predicate_updateNewStickerSet
		return &TLUpdateNewStickerSet{Data2: data2}
	}
}

func (m *TLUpdateNewStickerSet) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNewStickerSet
	return m.Data2
}

func (m *TLUpdateNewStickerSet) SetStickerset(v *Messages_StickerSet) { m.Data2.Stickerset = v }
func (m *TLUpdateNewStickerSet) GetStickerset() *Messages_StickerSet  { return m.Data2.Stickerset }

func (m *TLUpdateNewStickerSet) GetPredicateName() string {
	return Predicate_updateNewStickerSet
}

func (m *TLUpdateNewStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x688a30aa: func() []byte {
			x.UInt(0x688a30aa)

			x.Bytes(m.GetStickerset().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNewStickerSet, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNewStickerSet, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNewStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNewStickerSet) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x688a30aa: func() error {

			m42 := &Messages_StickerSet{}
			m42.Decode(dBuf)
			m.SetStickerset(m42)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNewStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateStickerSetsOrder
func MakeTLUpdateStickerSetsOrder(data2 *Update) *TLUpdateStickerSetsOrder {
	if data2 == nil {
		return &TLUpdateStickerSetsOrder{Data2: &Update{
			PredicateName: Predicate_updateStickerSetsOrder,
		}}
	} else {
		data2.PredicateName = Predicate_updateStickerSetsOrder
		return &TLUpdateStickerSetsOrder{Data2: data2}
	}
}

func (m *TLUpdateStickerSetsOrder) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateStickerSetsOrder
	return m.Data2
}

//// flags
func (m *TLUpdateStickerSetsOrder) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLUpdateStickerSetsOrder) GetMasks() bool  { return m.Data2.Masks }

func (m *TLUpdateStickerSetsOrder) SetOrder_VECTORINT64(v []int64) { m.Data2.Order_VECTORINT64 = v }
func (m *TLUpdateStickerSetsOrder) GetOrder_VECTORINT64() []int64  { return m.Data2.Order_VECTORINT64 }

func (m *TLUpdateStickerSetsOrder) GetPredicateName() string {
	return Predicate_updateStickerSetsOrder
}

func (m *TLUpdateStickerSetsOrder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbb2d201: func() []byte {
			x.UInt(0xbb2d201)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMasks() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)

			x.VectorLong(m.GetOrder_VECTORINT64())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateStickerSetsOrder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateStickerSetsOrder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateStickerSetsOrder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateStickerSetsOrder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbb2d201: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMasks(true)
			}

			m.SetOrder_VECTORINT64(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateStickerSetsOrder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateStickerSets
func MakeTLUpdateStickerSets(data2 *Update) *TLUpdateStickerSets {
	if data2 == nil {
		return &TLUpdateStickerSets{Data2: &Update{
			PredicateName: Predicate_updateStickerSets,
		}}
	} else {
		data2.PredicateName = Predicate_updateStickerSets
		return &TLUpdateStickerSets{Data2: data2}
	}
}

func (m *TLUpdateStickerSets) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateStickerSets
	return m.Data2
}

func (m *TLUpdateStickerSets) GetPredicateName() string {
	return Predicate_updateStickerSets
}

func (m *TLUpdateStickerSets) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x43ae3dec: func() []byte {
			x.UInt(0x43ae3dec)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateStickerSets, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateStickerSets, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateStickerSets) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x43ae3dec: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateStickerSets) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateSavedGifs
func MakeTLUpdateSavedGifs(data2 *Update) *TLUpdateSavedGifs {
	if data2 == nil {
		return &TLUpdateSavedGifs{Data2: &Update{
			PredicateName: Predicate_updateSavedGifs,
		}}
	} else {
		data2.PredicateName = Predicate_updateSavedGifs
		return &TLUpdateSavedGifs{Data2: data2}
	}
}

func (m *TLUpdateSavedGifs) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateSavedGifs
	return m.Data2
}

func (m *TLUpdateSavedGifs) GetPredicateName() string {
	return Predicate_updateSavedGifs
}

func (m *TLUpdateSavedGifs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9375341e: func() []byte {
			x.UInt(0x9375341e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateSavedGifs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateSavedGifs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateSavedGifs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateSavedGifs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9375341e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateSavedGifs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotInlineQuery
func MakeTLUpdateBotInlineQuery(data2 *Update) *TLUpdateBotInlineQuery {
	if data2 == nil {
		return &TLUpdateBotInlineQuery{Data2: &Update{
			PredicateName: Predicate_updateBotInlineQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotInlineQuery
		return &TLUpdateBotInlineQuery{Data2: data2}
	}
}

func (m *TLUpdateBotInlineQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotInlineQuery
	return m.Data2
}

//// flags
func (m *TLUpdateBotInlineQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotInlineQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotInlineQuery) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineQuery) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotInlineQuery) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineQuery) GetQuery() string  { return m.Data2.Query }

func (m *TLUpdateBotInlineQuery) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineQuery) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLUpdateBotInlineQuery) SetPeerType(v *InlineQueryPeerType) { m.Data2.PeerType = v }
func (m *TLUpdateBotInlineQuery) GetPeerType() *InlineQueryPeerType  { return m.Data2.PeerType }

func (m *TLUpdateBotInlineQuery) SetOffset(v string) { m.Data2.Offset = v }
func (m *TLUpdateBotInlineQuery) GetOffset() string  { return m.Data2.Offset }

func (m *TLUpdateBotInlineQuery) GetPredicateName() string {
	return Predicate_updateBotInlineQuery
}

func (m *TLUpdateBotInlineQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x496f379c: func() []byte {
			x.UInt(0x496f379c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetGeo() != nil {
					flags |= 1 << 0
				}
				if m.GetPeerType() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetQueryId())
			x.Long(m.GetUserId())
			x.String(m.GetQuery())
			if m.GetGeo() != nil {
				x.Bytes(m.GetGeo().Encode(layer))
			}

			if m.GetPeerType() != nil {
				x.Bytes(m.GetPeerType().Encode(layer))
			}

			x.String(m.GetOffset())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotInlineQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotInlineQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotInlineQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotInlineQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x496f379c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetQueryId(dBuf.Long())
			m.SetUserId(dBuf.Long())
			m.SetQuery(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m47 := &GeoPoint{}
				m47.Decode(dBuf)
				m.SetGeo(m47)
			}
			if (flags & (1 << 1)) != 0 {
				m48 := &InlineQueryPeerType{}
				m48.Decode(dBuf)
				m.SetPeerType(m48)
			}
			m.SetOffset(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotInlineQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotInlineSend
func MakeTLUpdateBotInlineSend(data2 *Update) *TLUpdateBotInlineSend {
	if data2 == nil {
		return &TLUpdateBotInlineSend{Data2: &Update{
			PredicateName: Predicate_updateBotInlineSend,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotInlineSend
		return &TLUpdateBotInlineSend{Data2: data2}
	}
}

func (m *TLUpdateBotInlineSend) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotInlineSend
	return m.Data2
}

//// flags
func (m *TLUpdateBotInlineSend) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineSend) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotInlineSend) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineSend) GetQuery() string  { return m.Data2.Query }

func (m *TLUpdateBotInlineSend) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineSend) GetGeo() *GeoPoint  { return m.Data2.Geo }

func (m *TLUpdateBotInlineSend) SetId_STRING(v string) { m.Data2.Id_STRING = v }
func (m *TLUpdateBotInlineSend) GetId_STRING() string  { return m.Data2.Id_STRING }

func (m *TLUpdateBotInlineSend) SetMsgId_FLAGINPUTBOTINLINEMESSAGEID(v *InputBotInlineMessageID) {
	m.Data2.MsgId_FLAGINPUTBOTINLINEMESSAGEID = v
}
func (m *TLUpdateBotInlineSend) GetMsgId_FLAGINPUTBOTINLINEMESSAGEID() *InputBotInlineMessageID {
	return m.Data2.MsgId_FLAGINPUTBOTINLINEMESSAGEID
}

func (m *TLUpdateBotInlineSend) GetPredicateName() string {
	return Predicate_updateBotInlineSend
}

func (m *TLUpdateBotInlineSend) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x12f12a07: func() []byte {
			x.UInt(0x12f12a07)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetGeo() != nil {
					flags |= 1 << 0
				}

				if m.GetMsgId_FLAGINPUTBOTINLINEMESSAGEID() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetUserId())
			x.String(m.GetQuery())
			if m.GetGeo() != nil {
				x.Bytes(m.GetGeo().Encode(layer))
			}

			x.String(m.GetId_STRING())
			if m.GetMsgId_FLAGINPUTBOTINLINEMESSAGEID() != nil {
				x.Bytes(m.GetMsgId_FLAGINPUTBOTINLINEMESSAGEID().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotInlineSend, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotInlineSend, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotInlineSend) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotInlineSend) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x12f12a07: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetUserId(dBuf.Long())
			m.SetQuery(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m47 := &GeoPoint{}
				m47.Decode(dBuf)
				m.SetGeo(m47)
			}
			m.SetId_STRING(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				m50 := &InputBotInlineMessageID{}
				m50.Decode(dBuf)
				m.SetMsgId_FLAGINPUTBOTINLINEMESSAGEID(m50)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotInlineSend) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateEditChannelMessage
func MakeTLUpdateEditChannelMessage(data2 *Update) *TLUpdateEditChannelMessage {
	if data2 == nil {
		return &TLUpdateEditChannelMessage{Data2: &Update{
			PredicateName: Predicate_updateEditChannelMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateEditChannelMessage
		return &TLUpdateEditChannelMessage{Data2: data2}
	}
}

func (m *TLUpdateEditChannelMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateEditChannelMessage
	return m.Data2
}

func (m *TLUpdateEditChannelMessage) SetMessage_MESSAGE(v *Message) { m.Data2.Message_MESSAGE = v }
func (m *TLUpdateEditChannelMessage) GetMessage_MESSAGE() *Message  { return m.Data2.Message_MESSAGE }

func (m *TLUpdateEditChannelMessage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateEditChannelMessage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateEditChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditChannelMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateEditChannelMessage) GetPredicateName() string {
	return Predicate_updateEditChannelMessage
}

func (m *TLUpdateEditChannelMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b3f4df7: func() []byte {
			x.UInt(0x1b3f4df7)

			x.Bytes(m.GetMessage_MESSAGE().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateEditChannelMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateEditChannelMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateEditChannelMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateEditChannelMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b3f4df7: func() error {

			m0 := &Message{}
			m0.Decode(dBuf)
			m.SetMessage_MESSAGE(m0)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateEditChannelMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotCallbackQuery
func MakeTLUpdateBotCallbackQuery(data2 *Update) *TLUpdateBotCallbackQuery {
	if data2 == nil {
		return &TLUpdateBotCallbackQuery{Data2: &Update{
			PredicateName: Predicate_updateBotCallbackQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotCallbackQuery
		return &TLUpdateBotCallbackQuery{Data2: data2}
	}
}

func (m *TLUpdateBotCallbackQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotCallbackQuery
	return m.Data2
}

//// flags
func (m *TLUpdateBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotCallbackQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotCallbackQuery) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotCallbackQuery) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotCallbackQuery) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateBotCallbackQuery) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateBotCallbackQuery) SetMsgId_INT32(v int32) { m.Data2.MsgId_INT32 = v }
func (m *TLUpdateBotCallbackQuery) GetMsgId_INT32() int32  { return m.Data2.MsgId_INT32 }

func (m *TLUpdateBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateBotCallbackQuery) GetChatInstance() int64  { return m.Data2.ChatInstance }

func (m *TLUpdateBotCallbackQuery) SetData_FLAGBYTES(v []byte) { m.Data2.Data_FLAGBYTES = v }
func (m *TLUpdateBotCallbackQuery) GetData_FLAGBYTES() []byte  { return m.Data2.Data_FLAGBYTES }

func (m *TLUpdateBotCallbackQuery) SetGameShortName(v *types.StringValue) { m.Data2.GameShortName = v }
func (m *TLUpdateBotCallbackQuery) GetGameShortName() *types.StringValue {
	return m.Data2.GameShortName
}

func (m *TLUpdateBotCallbackQuery) GetPredicateName() string {
	return Predicate_updateBotCallbackQuery
}

func (m *TLUpdateBotCallbackQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb9cfc48d: func() []byte {
			x.UInt(0xb9cfc48d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetData_FLAGBYTES() != nil {
					flags |= 1 << 0
				}
				if m.GetGameShortName() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetQueryId())
			x.Long(m.GetUserId())
			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetMsgId_INT32())
			x.Long(m.GetChatInstance())
			if m.GetData_FLAGBYTES() != nil {
				x.StringBytes(m.GetData_FLAGBYTES())
			}

			if m.GetGameShortName() != nil {
				x.String(m.GetGameShortName().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotCallbackQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotCallbackQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotCallbackQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotCallbackQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb9cfc48d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetQueryId(dBuf.Long())
			m.SetUserId(dBuf.Long())

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMsgId_INT32(dBuf.Int())
			m.SetChatInstance(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetData_FLAGBYTES(dBuf.StringBytes())
			}

			if (flags & (1 << 1)) != 0 {
				m.SetGameShortName(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotCallbackQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateEditMessage
func MakeTLUpdateEditMessage(data2 *Update) *TLUpdateEditMessage {
	if data2 == nil {
		return &TLUpdateEditMessage{Data2: &Update{
			PredicateName: Predicate_updateEditMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateEditMessage
		return &TLUpdateEditMessage{Data2: data2}
	}
}

func (m *TLUpdateEditMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateEditMessage
	return m.Data2
}

func (m *TLUpdateEditMessage) SetMessage_MESSAGE(v *Message) { m.Data2.Message_MESSAGE = v }
func (m *TLUpdateEditMessage) GetMessage_MESSAGE() *Message  { return m.Data2.Message_MESSAGE }

func (m *TLUpdateEditMessage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateEditMessage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateEditMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateEditMessage) GetPredicateName() string {
	return Predicate_updateEditMessage
}

func (m *TLUpdateEditMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe40370a3: func() []byte {
			x.UInt(0xe40370a3)

			x.Bytes(m.GetMessage_MESSAGE().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateEditMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateEditMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateEditMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateEditMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe40370a3: func() error {

			m0 := &Message{}
			m0.Decode(dBuf)
			m.SetMessage_MESSAGE(m0)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateEditMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateInlineBotCallbackQuery
func MakeTLUpdateInlineBotCallbackQuery(data2 *Update) *TLUpdateInlineBotCallbackQuery {
	if data2 == nil {
		return &TLUpdateInlineBotCallbackQuery{Data2: &Update{
			PredicateName: Predicate_updateInlineBotCallbackQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateInlineBotCallbackQuery
		return &TLUpdateInlineBotCallbackQuery{Data2: data2}
	}
}

func (m *TLUpdateInlineBotCallbackQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateInlineBotCallbackQuery
	return m.Data2
}

//// flags
func (m *TLUpdateInlineBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateInlineBotCallbackQuery) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateInlineBotCallbackQuery) SetMsgId_FLAGINPUTBOTINLINEMESSAGEID(v *InputBotInlineMessageID) {
	m.Data2.MsgId_FLAGINPUTBOTINLINEMESSAGEID = v
}
func (m *TLUpdateInlineBotCallbackQuery) GetMsgId_FLAGINPUTBOTINLINEMESSAGEID() *InputBotInlineMessageID {
	return m.Data2.MsgId_FLAGINPUTBOTINLINEMESSAGEID
}

func (m *TLUpdateInlineBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateInlineBotCallbackQuery) GetChatInstance() int64  { return m.Data2.ChatInstance }

func (m *TLUpdateInlineBotCallbackQuery) SetData_FLAGBYTES(v []byte) { m.Data2.Data_FLAGBYTES = v }
func (m *TLUpdateInlineBotCallbackQuery) GetData_FLAGBYTES() []byte  { return m.Data2.Data_FLAGBYTES }

func (m *TLUpdateInlineBotCallbackQuery) SetGameShortName(v *types.StringValue) {
	m.Data2.GameShortName = v
}
func (m *TLUpdateInlineBotCallbackQuery) GetGameShortName() *types.StringValue {
	return m.Data2.GameShortName
}

func (m *TLUpdateInlineBotCallbackQuery) GetPredicateName() string {
	return Predicate_updateInlineBotCallbackQuery
}

func (m *TLUpdateInlineBotCallbackQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x691e9052: func() []byte {
			x.UInt(0x691e9052)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetData_FLAGBYTES() != nil {
					flags |= 1 << 0
				}
				if m.GetGameShortName() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetQueryId())
			x.Long(m.GetUserId())
			x.Bytes(m.GetMsgId_FLAGINPUTBOTINLINEMESSAGEID().Encode(layer))
			x.Long(m.GetChatInstance())
			if m.GetData_FLAGBYTES() != nil {
				x.StringBytes(m.GetData_FLAGBYTES())
			}

			if m.GetGameShortName() != nil {
				x.String(m.GetGameShortName().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateInlineBotCallbackQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateInlineBotCallbackQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateInlineBotCallbackQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateInlineBotCallbackQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x691e9052: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetQueryId(dBuf.Long())
			m.SetUserId(dBuf.Long())

			m50 := &InputBotInlineMessageID{}
			m50.Decode(dBuf)
			m.SetMsgId_FLAGINPUTBOTINLINEMESSAGEID(m50)

			m.SetChatInstance(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetData_FLAGBYTES(dBuf.StringBytes())
			}

			if (flags & (1 << 1)) != 0 {
				m.SetGameShortName(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateInlineBotCallbackQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadChannelOutbox
func MakeTLUpdateReadChannelOutbox(data2 *Update) *TLUpdateReadChannelOutbox {
	if data2 == nil {
		return &TLUpdateReadChannelOutbox{Data2: &Update{
			PredicateName: Predicate_updateReadChannelOutbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadChannelOutbox
		return &TLUpdateReadChannelOutbox{Data2: data2}
	}
}

func (m *TLUpdateReadChannelOutbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadChannelOutbox
	return m.Data2
}

func (m *TLUpdateReadChannelOutbox) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelOutbox) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelOutbox) GetMaxId() int32  { return m.Data2.MaxId }

func (m *TLUpdateReadChannelOutbox) GetPredicateName() string {
	return Predicate_updateReadChannelOutbox
}

func (m *TLUpdateReadChannelOutbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb75f99a9: func() []byte {
			x.UInt(0xb75f99a9)

			x.Long(m.GetChannelId())
			x.Int(m.GetMaxId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadChannelOutbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadChannelOutbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadChannelOutbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadChannelOutbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb75f99a9: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetMaxId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadChannelOutbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDraftMessage
func MakeTLUpdateDraftMessage(data2 *Update) *TLUpdateDraftMessage {
	if data2 == nil {
		return &TLUpdateDraftMessage{Data2: &Update{
			PredicateName: Predicate_updateDraftMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateDraftMessage
		return &TLUpdateDraftMessage{Data2: data2}
	}
}

func (m *TLUpdateDraftMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDraftMessage
	return m.Data2
}

func (m *TLUpdateDraftMessage) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateDraftMessage) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateDraftMessage) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLUpdateDraftMessage) GetDraft() *DraftMessage  { return m.Data2.Draft }

func (m *TLUpdateDraftMessage) GetPredicateName() string {
	return Predicate_updateDraftMessage
}

func (m *TLUpdateDraftMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xee2bb969: func() []byte {
			x.UInt(0xee2bb969)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Bytes(m.GetDraft().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDraftMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDraftMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDraftMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDraftMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xee2bb969: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m54 := &DraftMessage{}
			m54.Decode(dBuf)
			m.SetDraft(m54)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDraftMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadFeaturedStickers
func MakeTLUpdateReadFeaturedStickers(data2 *Update) *TLUpdateReadFeaturedStickers {
	if data2 == nil {
		return &TLUpdateReadFeaturedStickers{Data2: &Update{
			PredicateName: Predicate_updateReadFeaturedStickers,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadFeaturedStickers
		return &TLUpdateReadFeaturedStickers{Data2: data2}
	}
}

func (m *TLUpdateReadFeaturedStickers) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadFeaturedStickers
	return m.Data2
}

func (m *TLUpdateReadFeaturedStickers) GetPredicateName() string {
	return Predicate_updateReadFeaturedStickers
}

func (m *TLUpdateReadFeaturedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x571d2742: func() []byte {
			x.UInt(0x571d2742)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadFeaturedStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadFeaturedStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadFeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadFeaturedStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x571d2742: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadFeaturedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateRecentStickers
func MakeTLUpdateRecentStickers(data2 *Update) *TLUpdateRecentStickers {
	if data2 == nil {
		return &TLUpdateRecentStickers{Data2: &Update{
			PredicateName: Predicate_updateRecentStickers,
		}}
	} else {
		data2.PredicateName = Predicate_updateRecentStickers
		return &TLUpdateRecentStickers{Data2: data2}
	}
}

func (m *TLUpdateRecentStickers) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateRecentStickers
	return m.Data2
}

func (m *TLUpdateRecentStickers) GetPredicateName() string {
	return Predicate_updateRecentStickers
}

func (m *TLUpdateRecentStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9a422c20: func() []byte {
			x.UInt(0x9a422c20)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateRecentStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateRecentStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateRecentStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateRecentStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9a422c20: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateRecentStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateConfig
func MakeTLUpdateConfig(data2 *Update) *TLUpdateConfig {
	if data2 == nil {
		return &TLUpdateConfig{Data2: &Update{
			PredicateName: Predicate_updateConfig,
		}}
	} else {
		data2.PredicateName = Predicate_updateConfig
		return &TLUpdateConfig{Data2: data2}
	}
}

func (m *TLUpdateConfig) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateConfig
	return m.Data2
}

func (m *TLUpdateConfig) GetPredicateName() string {
	return Predicate_updateConfig
}

func (m *TLUpdateConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa229dd06: func() []byte {
			x.UInt(0xa229dd06)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateConfig, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateConfig, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateConfig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa229dd06: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePtsChanged
func MakeTLUpdatePtsChanged(data2 *Update) *TLUpdatePtsChanged {
	if data2 == nil {
		return &TLUpdatePtsChanged{Data2: &Update{
			PredicateName: Predicate_updatePtsChanged,
		}}
	} else {
		data2.PredicateName = Predicate_updatePtsChanged
		return &TLUpdatePtsChanged{Data2: data2}
	}
}

func (m *TLUpdatePtsChanged) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePtsChanged
	return m.Data2
}

func (m *TLUpdatePtsChanged) GetPredicateName() string {
	return Predicate_updatePtsChanged
}

func (m *TLUpdatePtsChanged) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3354678f: func() []byte {
			x.UInt(0x3354678f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePtsChanged, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePtsChanged, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePtsChanged) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePtsChanged) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3354678f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePtsChanged) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelWebPage
func MakeTLUpdateChannelWebPage(data2 *Update) *TLUpdateChannelWebPage {
	if data2 == nil {
		return &TLUpdateChannelWebPage{Data2: &Update{
			PredicateName: Predicate_updateChannelWebPage,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelWebPage
		return &TLUpdateChannelWebPage{Data2: data2}
	}
}

func (m *TLUpdateChannelWebPage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelWebPage
	return m.Data2
}

func (m *TLUpdateChannelWebPage) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelWebPage) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateChannelWebPage) GetWebpage() *WebPage  { return m.Data2.Webpage }

func (m *TLUpdateChannelWebPage) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateChannelWebPage) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateChannelWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateChannelWebPage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateChannelWebPage) GetPredicateName() string {
	return Predicate_updateChannelWebPage
}

func (m *TLUpdateChannelWebPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2f2ba99f: func() []byte {
			x.UInt(0x2f2ba99f)

			x.Long(m.GetChannelId())
			x.Bytes(m.GetWebpage().Encode(layer))
			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelWebPage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelWebPage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelWebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelWebPage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2f2ba99f: func() error {
			m.SetChannelId(dBuf.Long())

			m38 := &WebPage{}
			m38.Decode(dBuf)
			m.SetWebpage(m38)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelWebPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDialogPinned
func MakeTLUpdateDialogPinned(data2 *Update) *TLUpdateDialogPinned {
	if data2 == nil {
		return &TLUpdateDialogPinned{Data2: &Update{
			PredicateName: Predicate_updateDialogPinned,
		}}
	} else {
		data2.PredicateName = Predicate_updateDialogPinned
		return &TLUpdateDialogPinned{Data2: data2}
	}
}

func (m *TLUpdateDialogPinned) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDialogPinned
	return m.Data2
}

//// flags
func (m *TLUpdateDialogPinned) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdateDialogPinned) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLUpdateDialogPinned) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLUpdateDialogPinned) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLUpdateDialogPinned) SetPeer_DIALOGPEER(v *DialogPeer) { m.Data2.Peer_DIALOGPEER = v }
func (m *TLUpdateDialogPinned) GetPeer_DIALOGPEER() *DialogPeer  { return m.Data2.Peer_DIALOGPEER }

func (m *TLUpdateDialogPinned) GetPredicateName() string {
	return Predicate_updateDialogPinned
}

func (m *TLUpdateDialogPinned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6e6fe51c: func() []byte {
			x.UInt(0x6e6fe51c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 0
				}
				if m.GetFolderId() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			x.Bytes(m.GetPeer_DIALOGPEER().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDialogPinned, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDialogPinned, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDialogPinned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDialogPinned) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6e6fe51c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPinned(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			m24 := &DialogPeer{}
			m24.Decode(dBuf)
			m.SetPeer_DIALOGPEER(m24)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDialogPinned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePinnedDialogs
func MakeTLUpdatePinnedDialogs(data2 *Update) *TLUpdatePinnedDialogs {
	if data2 == nil {
		return &TLUpdatePinnedDialogs{Data2: &Update{
			PredicateName: Predicate_updatePinnedDialogs,
		}}
	} else {
		data2.PredicateName = Predicate_updatePinnedDialogs
		return &TLUpdatePinnedDialogs{Data2: data2}
	}
}

func (m *TLUpdatePinnedDialogs) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePinnedDialogs
	return m.Data2
}

//// flags
func (m *TLUpdatePinnedDialogs) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLUpdatePinnedDialogs) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLUpdatePinnedDialogs) SetOrder_FLAGVECTORDIALOGPEER(v []*DialogPeer) {
	m.Data2.Order_FLAGVECTORDIALOGPEER = v
}
func (m *TLUpdatePinnedDialogs) GetOrder_FLAGVECTORDIALOGPEER() []*DialogPeer {
	return m.Data2.Order_FLAGVECTORDIALOGPEER
}

func (m *TLUpdatePinnedDialogs) GetPredicateName() string {
	return Predicate_updatePinnedDialogs
}

func (m *TLUpdatePinnedDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfa0f3ca2: func() []byte {
			x.UInt(0xfa0f3ca2)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFolderId() != nil {
					flags |= 1 << 1
				}
				if m.GetOrder_FLAGVECTORDIALOGPEER() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			if m.GetOrder_FLAGVECTORDIALOGPEER() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetOrder_FLAGVECTORDIALOGPEER())))
				for _, v := range m.GetOrder_FLAGVECTORDIALOGPEER() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePinnedDialogs, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePinnedDialogs, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePinnedDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePinnedDialogs) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfa0f3ca2: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 0)) != 0 {
				c44 := dBuf.Int()
				if c44 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 44, c44)
					return dBuf.GetError()
				}
				l44 := dBuf.Int()
				v44 := make([]*DialogPeer, l44)
				for i := int32(0); i < l44; i++ {
					v44[i] = &DialogPeer{}
					v44[i].Decode(dBuf)
				}
				m.SetOrder_FLAGVECTORDIALOGPEER(v44)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePinnedDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotWebhookJSON
func MakeTLUpdateBotWebhookJSON(data2 *Update) *TLUpdateBotWebhookJSON {
	if data2 == nil {
		return &TLUpdateBotWebhookJSON{Data2: &Update{
			PredicateName: Predicate_updateBotWebhookJSON,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotWebhookJSON
		return &TLUpdateBotWebhookJSON{Data2: data2}
	}
}

func (m *TLUpdateBotWebhookJSON) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotWebhookJSON
	return m.Data2
}

func (m *TLUpdateBotWebhookJSON) SetData_DATAJSON(v *DataJSON) { m.Data2.Data_DATAJSON = v }
func (m *TLUpdateBotWebhookJSON) GetData_DATAJSON() *DataJSON  { return m.Data2.Data_DATAJSON }

func (m *TLUpdateBotWebhookJSON) GetPredicateName() string {
	return Predicate_updateBotWebhookJSON
}

func (m *TLUpdateBotWebhookJSON) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8317c0c3: func() []byte {
			x.UInt(0x8317c0c3)

			x.Bytes(m.GetData_DATAJSON().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotWebhookJSON, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotWebhookJSON, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotWebhookJSON) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotWebhookJSON) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8317c0c3: func() error {

			m52 := &DataJSON{}
			m52.Decode(dBuf)
			m.SetData_DATAJSON(m52)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotWebhookJSON) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotWebhookJSONQuery
func MakeTLUpdateBotWebhookJSONQuery(data2 *Update) *TLUpdateBotWebhookJSONQuery {
	if data2 == nil {
		return &TLUpdateBotWebhookJSONQuery{Data2: &Update{
			PredicateName: Predicate_updateBotWebhookJSONQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotWebhookJSONQuery
		return &TLUpdateBotWebhookJSONQuery{Data2: data2}
	}
}

func (m *TLUpdateBotWebhookJSONQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotWebhookJSONQuery
	return m.Data2
}

func (m *TLUpdateBotWebhookJSONQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotWebhookJSONQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotWebhookJSONQuery) SetData_DATAJSON(v *DataJSON) { m.Data2.Data_DATAJSON = v }
func (m *TLUpdateBotWebhookJSONQuery) GetData_DATAJSON() *DataJSON  { return m.Data2.Data_DATAJSON }

func (m *TLUpdateBotWebhookJSONQuery) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdateBotWebhookJSONQuery) GetTimeout() int32  { return m.Data2.Timeout }

func (m *TLUpdateBotWebhookJSONQuery) GetPredicateName() string {
	return Predicate_updateBotWebhookJSONQuery
}

func (m *TLUpdateBotWebhookJSONQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9b9240a6: func() []byte {
			x.UInt(0x9b9240a6)

			x.Long(m.GetQueryId())
			x.Bytes(m.GetData_DATAJSON().Encode(layer))
			x.Int(m.GetTimeout())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotWebhookJSONQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotWebhookJSONQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotWebhookJSONQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotWebhookJSONQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9b9240a6: func() error {
			m.SetQueryId(dBuf.Long())

			m52 := &DataJSON{}
			m52.Decode(dBuf)
			m.SetData_DATAJSON(m52)

			m.SetTimeout(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotWebhookJSONQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotShippingQuery
func MakeTLUpdateBotShippingQuery(data2 *Update) *TLUpdateBotShippingQuery {
	if data2 == nil {
		return &TLUpdateBotShippingQuery{Data2: &Update{
			PredicateName: Predicate_updateBotShippingQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotShippingQuery
		return &TLUpdateBotShippingQuery{Data2: data2}
	}
}

func (m *TLUpdateBotShippingQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotShippingQuery
	return m.Data2
}

func (m *TLUpdateBotShippingQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotShippingQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotShippingQuery) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotShippingQuery) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotShippingQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotShippingQuery) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLUpdateBotShippingQuery) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLUpdateBotShippingQuery) GetShippingAddress() *PostAddress  { return m.Data2.ShippingAddress }

func (m *TLUpdateBotShippingQuery) GetPredicateName() string {
	return Predicate_updateBotShippingQuery
}

func (m *TLUpdateBotShippingQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb5aefd7d: func() []byte {
			x.UInt(0xb5aefd7d)

			x.Long(m.GetQueryId())
			x.Long(m.GetUserId())
			x.StringBytes(m.GetPayload())
			x.Bytes(m.GetShippingAddress().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotShippingQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotShippingQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotShippingQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotShippingQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb5aefd7d: func() error {
			m.SetQueryId(dBuf.Long())
			m.SetUserId(dBuf.Long())
			m.SetPayload(dBuf.StringBytes())

			m58 := &PostAddress{}
			m58.Decode(dBuf)
			m.SetShippingAddress(m58)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotShippingQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotPrecheckoutQuery
func MakeTLUpdateBotPrecheckoutQuery(data2 *Update) *TLUpdateBotPrecheckoutQuery {
	if data2 == nil {
		return &TLUpdateBotPrecheckoutQuery{Data2: &Update{
			PredicateName: Predicate_updateBotPrecheckoutQuery,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotPrecheckoutQuery
		return &TLUpdateBotPrecheckoutQuery{Data2: data2}
	}
}

func (m *TLUpdateBotPrecheckoutQuery) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotPrecheckoutQuery
	return m.Data2
}

//// flags
func (m *TLUpdateBotPrecheckoutQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetQueryId() int64  { return m.Data2.QueryId }

func (m *TLUpdateBotPrecheckoutQuery) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotPrecheckoutQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotPrecheckoutQuery) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLUpdateBotPrecheckoutQuery) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLUpdateBotPrecheckoutQuery) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLUpdateBotPrecheckoutQuery) SetShippingOptionId(v *types.StringValue) {
	m.Data2.ShippingOptionId = v
}
func (m *TLUpdateBotPrecheckoutQuery) GetShippingOptionId() *types.StringValue {
	return m.Data2.ShippingOptionId
}

func (m *TLUpdateBotPrecheckoutQuery) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLUpdateBotPrecheckoutQuery) GetCurrency() string  { return m.Data2.Currency }

func (m *TLUpdateBotPrecheckoutQuery) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLUpdateBotPrecheckoutQuery) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLUpdateBotPrecheckoutQuery) GetPredicateName() string {
	return Predicate_updateBotPrecheckoutQuery
}

func (m *TLUpdateBotPrecheckoutQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8caa9a96: func() []byte {
			x.UInt(0x8caa9a96)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInfo() != nil {
					flags |= 1 << 0
				}
				if m.GetShippingOptionId() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetQueryId())
			x.Long(m.GetUserId())
			x.StringBytes(m.GetPayload())
			if m.GetInfo() != nil {
				x.Bytes(m.GetInfo().Encode(layer))
			}

			if m.GetShippingOptionId() != nil {
				x.String(m.GetShippingOptionId().Value)
			}

			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotPrecheckoutQuery, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotPrecheckoutQuery, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotPrecheckoutQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotPrecheckoutQuery) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8caa9a96: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetQueryId(dBuf.Long())
			m.SetUserId(dBuf.Long())
			m.SetPayload(dBuf.StringBytes())
			if (flags & (1 << 0)) != 0 {
				m59 := &PaymentRequestedInfo{}
				m59.Decode(dBuf)
				m.SetInfo(m59)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetShippingOptionId(&types.StringValue{Value: dBuf.String()})
			}

			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotPrecheckoutQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePhoneCall
func MakeTLUpdatePhoneCall(data2 *Update) *TLUpdatePhoneCall {
	if data2 == nil {
		return &TLUpdatePhoneCall{Data2: &Update{
			PredicateName: Predicate_updatePhoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_updatePhoneCall
		return &TLUpdatePhoneCall{Data2: data2}
	}
}

func (m *TLUpdatePhoneCall) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePhoneCall
	return m.Data2
}

func (m *TLUpdatePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLUpdatePhoneCall) GetPhoneCall() *PhoneCall  { return m.Data2.PhoneCall }

func (m *TLUpdatePhoneCall) GetPredicateName() string {
	return Predicate_updatePhoneCall
}

func (m *TLUpdatePhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xab0f6b1e: func() []byte {
			x.UInt(0xab0f6b1e)

			x.Bytes(m.GetPhoneCall().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePhoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePhoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xab0f6b1e: func() error {

			m63 := &PhoneCall{}
			m63.Decode(dBuf)
			m.SetPhoneCall(m63)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateLangPackTooLong
func MakeTLUpdateLangPackTooLong(data2 *Update) *TLUpdateLangPackTooLong {
	if data2 == nil {
		return &TLUpdateLangPackTooLong{Data2: &Update{
			PredicateName: Predicate_updateLangPackTooLong,
		}}
	} else {
		data2.PredicateName = Predicate_updateLangPackTooLong
		return &TLUpdateLangPackTooLong{Data2: data2}
	}
}

func (m *TLUpdateLangPackTooLong) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateLangPackTooLong
	return m.Data2
}

func (m *TLUpdateLangPackTooLong) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLUpdateLangPackTooLong) GetLangCode() string  { return m.Data2.LangCode }

func (m *TLUpdateLangPackTooLong) GetPredicateName() string {
	return Predicate_updateLangPackTooLong
}

func (m *TLUpdateLangPackTooLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x46560264: func() []byte {
			x.UInt(0x46560264)

			x.String(m.GetLangCode())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateLangPackTooLong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateLangPackTooLong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateLangPackTooLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateLangPackTooLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x46560264: func() error {
			m.SetLangCode(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateLangPackTooLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateLangPack
func MakeTLUpdateLangPack(data2 *Update) *TLUpdateLangPack {
	if data2 == nil {
		return &TLUpdateLangPack{Data2: &Update{
			PredicateName: Predicate_updateLangPack,
		}}
	} else {
		data2.PredicateName = Predicate_updateLangPack
		return &TLUpdateLangPack{Data2: data2}
	}
}

func (m *TLUpdateLangPack) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateLangPack
	return m.Data2
}

func (m *TLUpdateLangPack) SetDifference(v *LangPackDifference) { m.Data2.Difference = v }
func (m *TLUpdateLangPack) GetDifference() *LangPackDifference  { return m.Data2.Difference }

func (m *TLUpdateLangPack) GetPredicateName() string {
	return Predicate_updateLangPack
}

func (m *TLUpdateLangPack) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x56022f4d: func() []byte {
			x.UInt(0x56022f4d)

			x.Bytes(m.GetDifference().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateLangPack, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateLangPack, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateLangPack) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateLangPack) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x56022f4d: func() error {

			m65 := &LangPackDifference{}
			m65.Decode(dBuf)
			m.SetDifference(m65)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateLangPack) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateFavedStickers
func MakeTLUpdateFavedStickers(data2 *Update) *TLUpdateFavedStickers {
	if data2 == nil {
		return &TLUpdateFavedStickers{Data2: &Update{
			PredicateName: Predicate_updateFavedStickers,
		}}
	} else {
		data2.PredicateName = Predicate_updateFavedStickers
		return &TLUpdateFavedStickers{Data2: data2}
	}
}

func (m *TLUpdateFavedStickers) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateFavedStickers
	return m.Data2
}

func (m *TLUpdateFavedStickers) GetPredicateName() string {
	return Predicate_updateFavedStickers
}

func (m *TLUpdateFavedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe511996d: func() []byte {
			x.UInt(0xe511996d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateFavedStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateFavedStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateFavedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateFavedStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe511996d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateFavedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelReadMessagesContents
func MakeTLUpdateChannelReadMessagesContents(data2 *Update) *TLUpdateChannelReadMessagesContents {
	if data2 == nil {
		return &TLUpdateChannelReadMessagesContents{Data2: &Update{
			PredicateName: Predicate_updateChannelReadMessagesContents,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelReadMessagesContents
		return &TLUpdateChannelReadMessagesContents{Data2: data2}
	}
}

func (m *TLUpdateChannelReadMessagesContents) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelReadMessagesContents
	return m.Data2
}

func (m *TLUpdateChannelReadMessagesContents) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelReadMessagesContents) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateChannelReadMessagesContents) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateChannelReadMessagesContents) GetPredicateName() string {
	return Predicate_updateChannelReadMessagesContents
}

func (m *TLUpdateChannelReadMessagesContents) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x44bdd535: func() []byte {
			x.UInt(0x44bdd535)

			x.Long(m.GetChannelId())

			x.VectorInt(m.GetMessages())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelReadMessagesContents, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelReadMessagesContents, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelReadMessagesContents) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelReadMessagesContents) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x44bdd535: func() error {
			m.SetChannelId(dBuf.Long())

			m.SetMessages(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelReadMessagesContents) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateContactsReset
func MakeTLUpdateContactsReset(data2 *Update) *TLUpdateContactsReset {
	if data2 == nil {
		return &TLUpdateContactsReset{Data2: &Update{
			PredicateName: Predicate_updateContactsReset,
		}}
	} else {
		data2.PredicateName = Predicate_updateContactsReset
		return &TLUpdateContactsReset{Data2: data2}
	}
}

func (m *TLUpdateContactsReset) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateContactsReset
	return m.Data2
}

func (m *TLUpdateContactsReset) GetPredicateName() string {
	return Predicate_updateContactsReset
}

func (m *TLUpdateContactsReset) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7084a7be: func() []byte {
			x.UInt(0x7084a7be)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateContactsReset, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateContactsReset, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateContactsReset) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateContactsReset) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7084a7be: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateContactsReset) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelAvailableMessages
func MakeTLUpdateChannelAvailableMessages(data2 *Update) *TLUpdateChannelAvailableMessages {
	if data2 == nil {
		return &TLUpdateChannelAvailableMessages{Data2: &Update{
			PredicateName: Predicate_updateChannelAvailableMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelAvailableMessages
		return &TLUpdateChannelAvailableMessages{Data2: data2}
	}
}

func (m *TLUpdateChannelAvailableMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelAvailableMessages
	return m.Data2
}

func (m *TLUpdateChannelAvailableMessages) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelAvailableMessages) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelAvailableMessages) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLUpdateChannelAvailableMessages) GetAvailableMinId() int32  { return m.Data2.AvailableMinId }

func (m *TLUpdateChannelAvailableMessages) GetPredicateName() string {
	return Predicate_updateChannelAvailableMessages
}

func (m *TLUpdateChannelAvailableMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb23fc698: func() []byte {
			x.UInt(0xb23fc698)

			x.Long(m.GetChannelId())
			x.Int(m.GetAvailableMinId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelAvailableMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelAvailableMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelAvailableMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelAvailableMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb23fc698: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetAvailableMinId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelAvailableMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDialogUnreadMark
func MakeTLUpdateDialogUnreadMark(data2 *Update) *TLUpdateDialogUnreadMark {
	if data2 == nil {
		return &TLUpdateDialogUnreadMark{Data2: &Update{
			PredicateName: Predicate_updateDialogUnreadMark,
		}}
	} else {
		data2.PredicateName = Predicate_updateDialogUnreadMark
		return &TLUpdateDialogUnreadMark{Data2: data2}
	}
}

func (m *TLUpdateDialogUnreadMark) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDialogUnreadMark
	return m.Data2
}

//// flags
func (m *TLUpdateDialogUnreadMark) SetUnread(v bool) { m.Data2.Unread = v }
func (m *TLUpdateDialogUnreadMark) GetUnread() bool  { return m.Data2.Unread }

func (m *TLUpdateDialogUnreadMark) SetPeer_DIALOGPEER(v *DialogPeer) { m.Data2.Peer_DIALOGPEER = v }
func (m *TLUpdateDialogUnreadMark) GetPeer_DIALOGPEER() *DialogPeer  { return m.Data2.Peer_DIALOGPEER }

func (m *TLUpdateDialogUnreadMark) GetPredicateName() string {
	return Predicate_updateDialogUnreadMark
}

func (m *TLUpdateDialogUnreadMark) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe16459c3: func() []byte {
			x.UInt(0xe16459c3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetUnread() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer_DIALOGPEER().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDialogUnreadMark, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDialogUnreadMark, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDialogUnreadMark) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDialogUnreadMark) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe16459c3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetUnread(true)
			}

			m24 := &DialogPeer{}
			m24.Decode(dBuf)
			m.SetPeer_DIALOGPEER(m24)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDialogUnreadMark) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateMessagePoll
func MakeTLUpdateMessagePoll(data2 *Update) *TLUpdateMessagePoll {
	if data2 == nil {
		return &TLUpdateMessagePoll{Data2: &Update{
			PredicateName: Predicate_updateMessagePoll,
		}}
	} else {
		data2.PredicateName = Predicate_updateMessagePoll
		return &TLUpdateMessagePoll{Data2: data2}
	}
}

func (m *TLUpdateMessagePoll) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateMessagePoll
	return m.Data2
}

//// flags
func (m *TLUpdateMessagePoll) SetPollId(v int64) { m.Data2.PollId = v }
func (m *TLUpdateMessagePoll) GetPollId() int64  { return m.Data2.PollId }

func (m *TLUpdateMessagePoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLUpdateMessagePoll) GetPoll() *Poll  { return m.Data2.Poll }

func (m *TLUpdateMessagePoll) SetResults(v *PollResults) { m.Data2.Results = v }
func (m *TLUpdateMessagePoll) GetResults() *PollResults  { return m.Data2.Results }

func (m *TLUpdateMessagePoll) GetPredicateName() string {
	return Predicate_updateMessagePoll
}

func (m *TLUpdateMessagePoll) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaca1657b: func() []byte {
			x.UInt(0xaca1657b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPoll() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetPollId())
			if m.GetPoll() != nil {
				x.Bytes(m.GetPoll().Encode(layer))
			}

			x.Bytes(m.GetResults().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateMessagePoll, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateMessagePoll, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateMessagePoll) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateMessagePoll) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaca1657b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetPollId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m69 := &Poll{}
				m69.Decode(dBuf)
				m.SetPoll(m69)
			}

			m70 := &PollResults{}
			m70.Decode(dBuf)
			m.SetResults(m70)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateMessagePoll) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatDefaultBannedRights
func MakeTLUpdateChatDefaultBannedRights(data2 *Update) *TLUpdateChatDefaultBannedRights {
	if data2 == nil {
		return &TLUpdateChatDefaultBannedRights{Data2: &Update{
			PredicateName: Predicate_updateChatDefaultBannedRights,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatDefaultBannedRights
		return &TLUpdateChatDefaultBannedRights{Data2: data2}
	}
}

func (m *TLUpdateChatDefaultBannedRights) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatDefaultBannedRights
	return m.Data2
}

func (m *TLUpdateChatDefaultBannedRights) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateChatDefaultBannedRights) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateChatDefaultBannedRights) SetDefaultBannedRights(v *ChatBannedRights) {
	m.Data2.DefaultBannedRights = v
}
func (m *TLUpdateChatDefaultBannedRights) GetDefaultBannedRights() *ChatBannedRights {
	return m.Data2.DefaultBannedRights
}

func (m *TLUpdateChatDefaultBannedRights) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatDefaultBannedRights) GetVersion() int32  { return m.Data2.Version }

func (m *TLUpdateChatDefaultBannedRights) GetPredicateName() string {
	return Predicate_updateChatDefaultBannedRights
}

func (m *TLUpdateChatDefaultBannedRights) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x54c01850: func() []byte {
			x.UInt(0x54c01850)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Bytes(m.GetDefaultBannedRights().Encode(layer))
			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatDefaultBannedRights, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatDefaultBannedRights, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatDefaultBannedRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatDefaultBannedRights) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x54c01850: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m71 := &ChatBannedRights{}
			m71.Decode(dBuf)
			m.SetDefaultBannedRights(m71)

			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatDefaultBannedRights) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateFolderPeers
func MakeTLUpdateFolderPeers(data2 *Update) *TLUpdateFolderPeers {
	if data2 == nil {
		return &TLUpdateFolderPeers{Data2: &Update{
			PredicateName: Predicate_updateFolderPeers,
		}}
	} else {
		data2.PredicateName = Predicate_updateFolderPeers
		return &TLUpdateFolderPeers{Data2: data2}
	}
}

func (m *TLUpdateFolderPeers) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateFolderPeers
	return m.Data2
}

func (m *TLUpdateFolderPeers) SetFolderPeers(v []*FolderPeer) { m.Data2.FolderPeers = v }
func (m *TLUpdateFolderPeers) GetFolderPeers() []*FolderPeer  { return m.Data2.FolderPeers }

func (m *TLUpdateFolderPeers) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdateFolderPeers) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdateFolderPeers) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateFolderPeers) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateFolderPeers) GetPredicateName() string {
	return Predicate_updateFolderPeers
}

func (m *TLUpdateFolderPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x19360dc0: func() []byte {
			x.UInt(0x19360dc0)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetFolderPeers())))
			for _, v := range m.GetFolderPeers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateFolderPeers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateFolderPeers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateFolderPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateFolderPeers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x19360dc0: func() error {
			c72 := dBuf.Int()
			if c72 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 72, c72)
				return dBuf.GetError()
			}
			l72 := dBuf.Int()
			v72 := make([]*FolderPeer, l72)
			for i := int32(0); i < l72; i++ {
				v72[i] = &FolderPeer{}
				v72[i].Decode(dBuf)
			}
			m.SetFolderPeers(v72)

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateFolderPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePeerSettings
func MakeTLUpdatePeerSettings(data2 *Update) *TLUpdatePeerSettings {
	if data2 == nil {
		return &TLUpdatePeerSettings{Data2: &Update{
			PredicateName: Predicate_updatePeerSettings,
		}}
	} else {
		data2.PredicateName = Predicate_updatePeerSettings
		return &TLUpdatePeerSettings{Data2: data2}
	}
}

func (m *TLUpdatePeerSettings) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePeerSettings
	return m.Data2
}

func (m *TLUpdatePeerSettings) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdatePeerSettings) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdatePeerSettings) SetSettings(v *PeerSettings) { m.Data2.Settings = v }
func (m *TLUpdatePeerSettings) GetSettings() *PeerSettings  { return m.Data2.Settings }

func (m *TLUpdatePeerSettings) GetPredicateName() string {
	return Predicate_updatePeerSettings
}

func (m *TLUpdatePeerSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6a7e7366: func() []byte {
			x.UInt(0x6a7e7366)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Bytes(m.GetSettings().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePeerSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePeerSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePeerSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePeerSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6a7e7366: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m73 := &PeerSettings{}
			m73.Decode(dBuf)
			m.SetSettings(m73)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePeerSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePeerLocated
func MakeTLUpdatePeerLocated(data2 *Update) *TLUpdatePeerLocated {
	if data2 == nil {
		return &TLUpdatePeerLocated{Data2: &Update{
			PredicateName: Predicate_updatePeerLocated,
		}}
	} else {
		data2.PredicateName = Predicate_updatePeerLocated
		return &TLUpdatePeerLocated{Data2: data2}
	}
}

func (m *TLUpdatePeerLocated) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePeerLocated
	return m.Data2
}

func (m *TLUpdatePeerLocated) SetPeers(v []*PeerLocated) { m.Data2.Peers = v }
func (m *TLUpdatePeerLocated) GetPeers() []*PeerLocated  { return m.Data2.Peers }

func (m *TLUpdatePeerLocated) GetPredicateName() string {
	return Predicate_updatePeerLocated
}

func (m *TLUpdatePeerLocated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb4afcfb0: func() []byte {
			x.UInt(0xb4afcfb0)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPeers())))
			for _, v := range m.GetPeers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePeerLocated, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePeerLocated, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePeerLocated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePeerLocated) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb4afcfb0: func() error {
			c74 := dBuf.Int()
			if c74 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 74, c74)
				return dBuf.GetError()
			}
			l74 := dBuf.Int()
			v74 := make([]*PeerLocated, l74)
			for i := int32(0); i < l74; i++ {
				v74[i] = &PeerLocated{}
				v74[i].Decode(dBuf)
			}
			m.SetPeers(v74)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePeerLocated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateNewScheduledMessage
func MakeTLUpdateNewScheduledMessage(data2 *Update) *TLUpdateNewScheduledMessage {
	if data2 == nil {
		return &TLUpdateNewScheduledMessage{Data2: &Update{
			PredicateName: Predicate_updateNewScheduledMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateNewScheduledMessage
		return &TLUpdateNewScheduledMessage{Data2: data2}
	}
}

func (m *TLUpdateNewScheduledMessage) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateNewScheduledMessage
	return m.Data2
}

func (m *TLUpdateNewScheduledMessage) SetMessage_MESSAGE(v *Message) { m.Data2.Message_MESSAGE = v }
func (m *TLUpdateNewScheduledMessage) GetMessage_MESSAGE() *Message  { return m.Data2.Message_MESSAGE }

func (m *TLUpdateNewScheduledMessage) GetPredicateName() string {
	return Predicate_updateNewScheduledMessage
}

func (m *TLUpdateNewScheduledMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x39a51dfb: func() []byte {
			x.UInt(0x39a51dfb)

			x.Bytes(m.GetMessage_MESSAGE().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateNewScheduledMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateNewScheduledMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateNewScheduledMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateNewScheduledMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x39a51dfb: func() error {

			m0 := &Message{}
			m0.Decode(dBuf)
			m.SetMessage_MESSAGE(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateNewScheduledMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDeleteScheduledMessages
func MakeTLUpdateDeleteScheduledMessages(data2 *Update) *TLUpdateDeleteScheduledMessages {
	if data2 == nil {
		return &TLUpdateDeleteScheduledMessages{Data2: &Update{
			PredicateName: Predicate_updateDeleteScheduledMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updateDeleteScheduledMessages
		return &TLUpdateDeleteScheduledMessages{Data2: data2}
	}
}

func (m *TLUpdateDeleteScheduledMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDeleteScheduledMessages
	return m.Data2
}

func (m *TLUpdateDeleteScheduledMessages) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateDeleteScheduledMessages) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateDeleteScheduledMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteScheduledMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdateDeleteScheduledMessages) GetPredicateName() string {
	return Predicate_updateDeleteScheduledMessages
}

func (m *TLUpdateDeleteScheduledMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x90866cee: func() []byte {
			x.UInt(0x90866cee)

			x.Bytes(m.GetPeer_PEER().Encode(layer))

			x.VectorInt(m.GetMessages())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDeleteScheduledMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDeleteScheduledMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDeleteScheduledMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDeleteScheduledMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x90866cee: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMessages(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDeleteScheduledMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateTheme
func MakeTLUpdateTheme(data2 *Update) *TLUpdateTheme {
	if data2 == nil {
		return &TLUpdateTheme{Data2: &Update{
			PredicateName: Predicate_updateTheme,
		}}
	} else {
		data2.PredicateName = Predicate_updateTheme
		return &TLUpdateTheme{Data2: data2}
	}
}

func (m *TLUpdateTheme) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateTheme
	return m.Data2
}

func (m *TLUpdateTheme) SetTheme(v *Theme) { m.Data2.Theme = v }
func (m *TLUpdateTheme) GetTheme() *Theme  { return m.Data2.Theme }

func (m *TLUpdateTheme) GetPredicateName() string {
	return Predicate_updateTheme
}

func (m *TLUpdateTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8216fba3: func() []byte {
			x.UInt(0x8216fba3)

			x.Bytes(m.GetTheme().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateTheme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateTheme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8216fba3: func() error {

			m75 := &Theme{}
			m75.Decode(dBuf)
			m.SetTheme(m75)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateGeoLiveViewed
func MakeTLUpdateGeoLiveViewed(data2 *Update) *TLUpdateGeoLiveViewed {
	if data2 == nil {
		return &TLUpdateGeoLiveViewed{Data2: &Update{
			PredicateName: Predicate_updateGeoLiveViewed,
		}}
	} else {
		data2.PredicateName = Predicate_updateGeoLiveViewed
		return &TLUpdateGeoLiveViewed{Data2: data2}
	}
}

func (m *TLUpdateGeoLiveViewed) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateGeoLiveViewed
	return m.Data2
}

func (m *TLUpdateGeoLiveViewed) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateGeoLiveViewed) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateGeoLiveViewed) SetMsgId_INT32(v int32) { m.Data2.MsgId_INT32 = v }
func (m *TLUpdateGeoLiveViewed) GetMsgId_INT32() int32  { return m.Data2.MsgId_INT32 }

func (m *TLUpdateGeoLiveViewed) GetPredicateName() string {
	return Predicate_updateGeoLiveViewed
}

func (m *TLUpdateGeoLiveViewed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x871fb939: func() []byte {
			x.UInt(0x871fb939)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetMsgId_INT32())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateGeoLiveViewed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateGeoLiveViewed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateGeoLiveViewed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateGeoLiveViewed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x871fb939: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMsgId_INT32(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateGeoLiveViewed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateLoginToken
func MakeTLUpdateLoginToken(data2 *Update) *TLUpdateLoginToken {
	if data2 == nil {
		return &TLUpdateLoginToken{Data2: &Update{
			PredicateName: Predicate_updateLoginToken,
		}}
	} else {
		data2.PredicateName = Predicate_updateLoginToken
		return &TLUpdateLoginToken{Data2: data2}
	}
}

func (m *TLUpdateLoginToken) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateLoginToken
	return m.Data2
}

func (m *TLUpdateLoginToken) GetPredicateName() string {
	return Predicate_updateLoginToken
}

func (m *TLUpdateLoginToken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x564fe691: func() []byte {
			x.UInt(0x564fe691)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateLoginToken, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateLoginToken, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateLoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateLoginToken) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x564fe691: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateLoginToken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateMessagePollVote
func MakeTLUpdateMessagePollVote(data2 *Update) *TLUpdateMessagePollVote {
	if data2 == nil {
		return &TLUpdateMessagePollVote{Data2: &Update{
			PredicateName: Predicate_updateMessagePollVote,
		}}
	} else {
		data2.PredicateName = Predicate_updateMessagePollVote
		return &TLUpdateMessagePollVote{Data2: data2}
	}
}

func (m *TLUpdateMessagePollVote) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateMessagePollVote
	return m.Data2
}

func (m *TLUpdateMessagePollVote) SetPollId(v int64) { m.Data2.PollId = v }
func (m *TLUpdateMessagePollVote) GetPollId() int64  { return m.Data2.PollId }

func (m *TLUpdateMessagePollVote) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateMessagePollVote) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateMessagePollVote) SetOptions(v [][]byte) { m.Data2.Options = v }
func (m *TLUpdateMessagePollVote) GetOptions() [][]byte  { return m.Data2.Options }

func (m *TLUpdateMessagePollVote) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateMessagePollVote) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateMessagePollVote) GetPredicateName() string {
	return Predicate_updateMessagePollVote
}

func (m *TLUpdateMessagePollVote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x106395c9: func() []byte {
			x.UInt(0x106395c9)

			x.Long(m.GetPollId())
			x.Long(m.GetUserId())

			x.VectorBytes(m.GetOptions())

			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateMessagePollVote, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateMessagePollVote, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateMessagePollVote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateMessagePollVote) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x106395c9: func() error {
			m.SetPollId(dBuf.Long())
			m.SetUserId(dBuf.Long())

			m.SetOptions(dBuf.VectorBytes())

			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateMessagePollVote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDialogFilter
func MakeTLUpdateDialogFilter(data2 *Update) *TLUpdateDialogFilter {
	if data2 == nil {
		return &TLUpdateDialogFilter{Data2: &Update{
			PredicateName: Predicate_updateDialogFilter,
		}}
	} else {
		data2.PredicateName = Predicate_updateDialogFilter
		return &TLUpdateDialogFilter{Data2: data2}
	}
}

func (m *TLUpdateDialogFilter) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDialogFilter
	return m.Data2
}

//// flags
func (m *TLUpdateDialogFilter) SetId_INT32(v int32) { m.Data2.Id_INT32 = v }
func (m *TLUpdateDialogFilter) GetId_INT32() int32  { return m.Data2.Id_INT32 }

func (m *TLUpdateDialogFilter) SetFilter(v *DialogFilter) { m.Data2.Filter = v }
func (m *TLUpdateDialogFilter) GetFilter() *DialogFilter  { return m.Data2.Filter }

func (m *TLUpdateDialogFilter) GetPredicateName() string {
	return Predicate_updateDialogFilter
}

func (m *TLUpdateDialogFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x26ffde7d: func() []byte {
			x.UInt(0x26ffde7d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFilter() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId_INT32())
			if m.GetFilter() != nil {
				x.Bytes(m.GetFilter().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDialogFilter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDialogFilter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDialogFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDialogFilter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x26ffde7d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId_INT32(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m77 := &DialogFilter{}
				m77.Decode(dBuf)
				m.SetFilter(m77)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDialogFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDialogFilterOrder
func MakeTLUpdateDialogFilterOrder(data2 *Update) *TLUpdateDialogFilterOrder {
	if data2 == nil {
		return &TLUpdateDialogFilterOrder{Data2: &Update{
			PredicateName: Predicate_updateDialogFilterOrder,
		}}
	} else {
		data2.PredicateName = Predicate_updateDialogFilterOrder
		return &TLUpdateDialogFilterOrder{Data2: data2}
	}
}

func (m *TLUpdateDialogFilterOrder) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDialogFilterOrder
	return m.Data2
}

func (m *TLUpdateDialogFilterOrder) SetOrder_VECTORINT32(v []int32) { m.Data2.Order_VECTORINT32 = v }
func (m *TLUpdateDialogFilterOrder) GetOrder_VECTORINT32() []int32  { return m.Data2.Order_VECTORINT32 }

func (m *TLUpdateDialogFilterOrder) GetPredicateName() string {
	return Predicate_updateDialogFilterOrder
}

func (m *TLUpdateDialogFilterOrder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa5d72105: func() []byte {
			x.UInt(0xa5d72105)

			x.VectorInt(m.GetOrder_VECTORINT32())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDialogFilterOrder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDialogFilterOrder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDialogFilterOrder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDialogFilterOrder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa5d72105: func() error {

			m.SetOrder_VECTORINT32(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDialogFilterOrder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateDialogFilters
func MakeTLUpdateDialogFilters(data2 *Update) *TLUpdateDialogFilters {
	if data2 == nil {
		return &TLUpdateDialogFilters{Data2: &Update{
			PredicateName: Predicate_updateDialogFilters,
		}}
	} else {
		data2.PredicateName = Predicate_updateDialogFilters
		return &TLUpdateDialogFilters{Data2: data2}
	}
}

func (m *TLUpdateDialogFilters) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateDialogFilters
	return m.Data2
}

func (m *TLUpdateDialogFilters) GetPredicateName() string {
	return Predicate_updateDialogFilters
}

func (m *TLUpdateDialogFilters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3504914f: func() []byte {
			x.UInt(0x3504914f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateDialogFilters, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateDialogFilters, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateDialogFilters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateDialogFilters) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3504914f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateDialogFilters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePhoneCallSignalingData
func MakeTLUpdatePhoneCallSignalingData(data2 *Update) *TLUpdatePhoneCallSignalingData {
	if data2 == nil {
		return &TLUpdatePhoneCallSignalingData{Data2: &Update{
			PredicateName: Predicate_updatePhoneCallSignalingData,
		}}
	} else {
		data2.PredicateName = Predicate_updatePhoneCallSignalingData
		return &TLUpdatePhoneCallSignalingData{Data2: data2}
	}
}

func (m *TLUpdatePhoneCallSignalingData) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePhoneCallSignalingData
	return m.Data2
}

func (m *TLUpdatePhoneCallSignalingData) SetPhoneCallId(v int64) { m.Data2.PhoneCallId = v }
func (m *TLUpdatePhoneCallSignalingData) GetPhoneCallId() int64  { return m.Data2.PhoneCallId }

func (m *TLUpdatePhoneCallSignalingData) SetData_FLAGBYTES(v []byte) { m.Data2.Data_FLAGBYTES = v }
func (m *TLUpdatePhoneCallSignalingData) GetData_FLAGBYTES() []byte  { return m.Data2.Data_FLAGBYTES }

func (m *TLUpdatePhoneCallSignalingData) GetPredicateName() string {
	return Predicate_updatePhoneCallSignalingData
}

func (m *TLUpdatePhoneCallSignalingData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2661bf09: func() []byte {
			x.UInt(0x2661bf09)

			x.Long(m.GetPhoneCallId())
			x.StringBytes(m.GetData_FLAGBYTES())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePhoneCallSignalingData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePhoneCallSignalingData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePhoneCallSignalingData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePhoneCallSignalingData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2661bf09: func() error {
			m.SetPhoneCallId(dBuf.Long())
			m.SetData_FLAGBYTES(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePhoneCallSignalingData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelMessageForwards
func MakeTLUpdateChannelMessageForwards(data2 *Update) *TLUpdateChannelMessageForwards {
	if data2 == nil {
		return &TLUpdateChannelMessageForwards{Data2: &Update{
			PredicateName: Predicate_updateChannelMessageForwards,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelMessageForwards
		return &TLUpdateChannelMessageForwards{Data2: data2}
	}
}

func (m *TLUpdateChannelMessageForwards) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelMessageForwards
	return m.Data2
}

func (m *TLUpdateChannelMessageForwards) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelMessageForwards) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelMessageForwards) SetId_INT32(v int32) { m.Data2.Id_INT32 = v }
func (m *TLUpdateChannelMessageForwards) GetId_INT32() int32  { return m.Data2.Id_INT32 }

func (m *TLUpdateChannelMessageForwards) SetForwards(v int32) { m.Data2.Forwards = v }
func (m *TLUpdateChannelMessageForwards) GetForwards() int32  { return m.Data2.Forwards }

func (m *TLUpdateChannelMessageForwards) GetPredicateName() string {
	return Predicate_updateChannelMessageForwards
}

func (m *TLUpdateChannelMessageForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd29a27f4: func() []byte {
			x.UInt(0xd29a27f4)

			x.Long(m.GetChannelId())
			x.Int(m.GetId_INT32())
			x.Int(m.GetForwards())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelMessageForwards, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelMessageForwards, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelMessageForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelMessageForwards) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd29a27f4: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetId_INT32(dBuf.Int())
			m.SetForwards(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelMessageForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadChannelDiscussionInbox
func MakeTLUpdateReadChannelDiscussionInbox(data2 *Update) *TLUpdateReadChannelDiscussionInbox {
	if data2 == nil {
		return &TLUpdateReadChannelDiscussionInbox{Data2: &Update{
			PredicateName: Predicate_updateReadChannelDiscussionInbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadChannelDiscussionInbox
		return &TLUpdateReadChannelDiscussionInbox{Data2: data2}
	}
}

func (m *TLUpdateReadChannelDiscussionInbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadChannelDiscussionInbox
	return m.Data2
}

//// flags
func (m *TLUpdateReadChannelDiscussionInbox) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelDiscussionInbox) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelDiscussionInbox) SetTopMsgId_INT32(v int32) { m.Data2.TopMsgId_INT32 = v }
func (m *TLUpdateReadChannelDiscussionInbox) GetTopMsgId_INT32() int32  { return m.Data2.TopMsgId_INT32 }

func (m *TLUpdateReadChannelDiscussionInbox) SetReadMaxId(v int32) { m.Data2.ReadMaxId = v }
func (m *TLUpdateReadChannelDiscussionInbox) GetReadMaxId() int32  { return m.Data2.ReadMaxId }

func (m *TLUpdateReadChannelDiscussionInbox) SetBroadcastId(v *types.Int64Value) {
	m.Data2.BroadcastId = v
}
func (m *TLUpdateReadChannelDiscussionInbox) GetBroadcastId() *types.Int64Value {
	return m.Data2.BroadcastId
}

func (m *TLUpdateReadChannelDiscussionInbox) SetBroadcastPost(v *types.Int32Value) {
	m.Data2.BroadcastPost = v
}
func (m *TLUpdateReadChannelDiscussionInbox) GetBroadcastPost() *types.Int32Value {
	return m.Data2.BroadcastPost
}

func (m *TLUpdateReadChannelDiscussionInbox) GetPredicateName() string {
	return Predicate_updateReadChannelDiscussionInbox
}

func (m *TLUpdateReadChannelDiscussionInbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd6b19546: func() []byte {
			x.UInt(0xd6b19546)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBroadcastId() != nil {
					flags |= 1 << 0
				}
				if m.GetBroadcastPost() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChannelId())
			x.Int(m.GetTopMsgId_INT32())
			x.Int(m.GetReadMaxId())
			if m.GetBroadcastId() != nil {
				x.Long(m.GetBroadcastId().Value)
			}

			if m.GetBroadcastPost() != nil {
				x.Int(m.GetBroadcastPost().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadChannelDiscussionInbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadChannelDiscussionInbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadChannelDiscussionInbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadChannelDiscussionInbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd6b19546: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChannelId(dBuf.Long())
			m.SetTopMsgId_INT32(dBuf.Int())
			m.SetReadMaxId(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetBroadcastId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 0)) != 0 {
				m.SetBroadcastPost(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadChannelDiscussionInbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateReadChannelDiscussionOutbox
func MakeTLUpdateReadChannelDiscussionOutbox(data2 *Update) *TLUpdateReadChannelDiscussionOutbox {
	if data2 == nil {
		return &TLUpdateReadChannelDiscussionOutbox{Data2: &Update{
			PredicateName: Predicate_updateReadChannelDiscussionOutbox,
		}}
	} else {
		data2.PredicateName = Predicate_updateReadChannelDiscussionOutbox
		return &TLUpdateReadChannelDiscussionOutbox{Data2: data2}
	}
}

func (m *TLUpdateReadChannelDiscussionOutbox) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateReadChannelDiscussionOutbox
	return m.Data2
}

func (m *TLUpdateReadChannelDiscussionOutbox) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelDiscussionOutbox) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelDiscussionOutbox) SetTopMsgId_INT32(v int32) { m.Data2.TopMsgId_INT32 = v }
func (m *TLUpdateReadChannelDiscussionOutbox) GetTopMsgId_INT32() int32 {
	return m.Data2.TopMsgId_INT32
}

func (m *TLUpdateReadChannelDiscussionOutbox) SetReadMaxId(v int32) { m.Data2.ReadMaxId = v }
func (m *TLUpdateReadChannelDiscussionOutbox) GetReadMaxId() int32  { return m.Data2.ReadMaxId }

func (m *TLUpdateReadChannelDiscussionOutbox) GetPredicateName() string {
	return Predicate_updateReadChannelDiscussionOutbox
}

func (m *TLUpdateReadChannelDiscussionOutbox) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x695c9e7c: func() []byte {
			x.UInt(0x695c9e7c)

			x.Long(m.GetChannelId())
			x.Int(m.GetTopMsgId_INT32())
			x.Int(m.GetReadMaxId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateReadChannelDiscussionOutbox, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateReadChannelDiscussionOutbox, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateReadChannelDiscussionOutbox) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateReadChannelDiscussionOutbox) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x695c9e7c: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetTopMsgId_INT32(dBuf.Int())
			m.SetReadMaxId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateReadChannelDiscussionOutbox) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePeerBlocked
func MakeTLUpdatePeerBlocked(data2 *Update) *TLUpdatePeerBlocked {
	if data2 == nil {
		return &TLUpdatePeerBlocked{Data2: &Update{
			PredicateName: Predicate_updatePeerBlocked,
		}}
	} else {
		data2.PredicateName = Predicate_updatePeerBlocked
		return &TLUpdatePeerBlocked{Data2: data2}
	}
}

func (m *TLUpdatePeerBlocked) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePeerBlocked
	return m.Data2
}

func (m *TLUpdatePeerBlocked) SetPeerId(v *Peer) { m.Data2.PeerId = v }
func (m *TLUpdatePeerBlocked) GetPeerId() *Peer  { return m.Data2.PeerId }

func (m *TLUpdatePeerBlocked) SetBlocked(v *Bool) { m.Data2.Blocked = v }
func (m *TLUpdatePeerBlocked) GetBlocked() *Bool  { return m.Data2.Blocked }

func (m *TLUpdatePeerBlocked) GetPredicateName() string {
	return Predicate_updatePeerBlocked
}

func (m *TLUpdatePeerBlocked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x246a4b22: func() []byte {
			x.UInt(0x246a4b22)

			x.Bytes(m.GetPeerId().Encode(layer))
			x.Bytes(m.GetBlocked().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePeerBlocked, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePeerBlocked, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePeerBlocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePeerBlocked) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x246a4b22: func() error {

			m84 := &Peer{}
			m84.Decode(dBuf)
			m.SetPeerId(m84)

			m85 := &Bool{}
			m85.Decode(dBuf)
			m.SetBlocked(m85)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePeerBlocked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelUserTyping
func MakeTLUpdateChannelUserTyping(data2 *Update) *TLUpdateChannelUserTyping {
	if data2 == nil {
		return &TLUpdateChannelUserTyping{Data2: &Update{
			PredicateName: Predicate_updateChannelUserTyping,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelUserTyping
		return &TLUpdateChannelUserTyping{Data2: data2}
	}
}

func (m *TLUpdateChannelUserTyping) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelUserTyping
	return m.Data2
}

//// flags
func (m *TLUpdateChannelUserTyping) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelUserTyping) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelUserTyping) SetTopMsgId_FLAGINT32(v *types.Int32Value) {
	m.Data2.TopMsgId_FLAGINT32 = v
}
func (m *TLUpdateChannelUserTyping) GetTopMsgId_FLAGINT32() *types.Int32Value {
	return m.Data2.TopMsgId_FLAGINT32
}

func (m *TLUpdateChannelUserTyping) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLUpdateChannelUserTyping) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLUpdateChannelUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateChannelUserTyping) GetAction() *SendMessageAction  { return m.Data2.Action }

func (m *TLUpdateChannelUserTyping) GetPredicateName() string {
	return Predicate_updateChannelUserTyping
}

func (m *TLUpdateChannelUserTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c88c923: func() []byte {
			x.UInt(0x8c88c923)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTopMsgId_FLAGINT32() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChannelId())
			if m.GetTopMsgId_FLAGINT32() != nil {
				x.Int(m.GetTopMsgId_FLAGINT32().Value)
			}

			x.Bytes(m.GetFromId().Encode(layer))
			x.Bytes(m.GetAction().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelUserTyping, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelUserTyping, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelUserTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelUserTyping) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c88c923: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChannelId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m.SetTopMsgId_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			m9 := &Peer{}
			m9.Decode(dBuf)
			m.SetFromId(m9)

			m7 := &SendMessageAction{}
			m7.Decode(dBuf)
			m.SetAction(m7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelUserTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePinnedMessages
func MakeTLUpdatePinnedMessages(data2 *Update) *TLUpdatePinnedMessages {
	if data2 == nil {
		return &TLUpdatePinnedMessages{Data2: &Update{
			PredicateName: Predicate_updatePinnedMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updatePinnedMessages
		return &TLUpdatePinnedMessages{Data2: data2}
	}
}

func (m *TLUpdatePinnedMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePinnedMessages
	return m.Data2
}

//// flags
func (m *TLUpdatePinnedMessages) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdatePinnedMessages) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLUpdatePinnedMessages) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdatePinnedMessages) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdatePinnedMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdatePinnedMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdatePinnedMessages) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdatePinnedMessages) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdatePinnedMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdatePinnedMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdatePinnedMessages) GetPredicateName() string {
	return Predicate_updatePinnedMessages
}

func (m *TLUpdatePinnedMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed85eab5: func() []byte {
			x.UInt(0xed85eab5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer_PEER().Encode(layer))

			x.VectorInt(m.GetMessages())

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePinnedMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePinnedMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePinnedMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePinnedMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed85eab5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPinned(true)
			}

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMessages(dBuf.VectorInt())

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePinnedMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePinnedChannelMessages
func MakeTLUpdatePinnedChannelMessages(data2 *Update) *TLUpdatePinnedChannelMessages {
	if data2 == nil {
		return &TLUpdatePinnedChannelMessages{Data2: &Update{
			PredicateName: Predicate_updatePinnedChannelMessages,
		}}
	} else {
		data2.PredicateName = Predicate_updatePinnedChannelMessages
		return &TLUpdatePinnedChannelMessages{Data2: data2}
	}
}

func (m *TLUpdatePinnedChannelMessages) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePinnedChannelMessages
	return m.Data2
}

//// flags
func (m *TLUpdatePinnedChannelMessages) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdatePinnedChannelMessages) GetPinned() bool  { return m.Data2.Pinned }

func (m *TLUpdatePinnedChannelMessages) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdatePinnedChannelMessages) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdatePinnedChannelMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdatePinnedChannelMessages) GetMessages() []int32  { return m.Data2.Messages }

func (m *TLUpdatePinnedChannelMessages) SetPts_INT32(v int32) { m.Data2.Pts_INT32 = v }
func (m *TLUpdatePinnedChannelMessages) GetPts_INT32() int32  { return m.Data2.Pts_INT32 }

func (m *TLUpdatePinnedChannelMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdatePinnedChannelMessages) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdatePinnedChannelMessages) GetPredicateName() string {
	return Predicate_updatePinnedChannelMessages
}

func (m *TLUpdatePinnedChannelMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5bb98608: func() []byte {
			x.UInt(0x5bb98608)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPinned() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChannelId())

			x.VectorInt(m.GetMessages())

			x.Int(m.GetPts_INT32())
			x.Int(m.GetPtsCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePinnedChannelMessages, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePinnedChannelMessages, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePinnedChannelMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePinnedChannelMessages) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5bb98608: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPinned(true)
			}
			m.SetChannelId(dBuf.Long())

			m.SetMessages(dBuf.VectorInt())

			m.SetPts_INT32(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePinnedChannelMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChat
func MakeTLUpdateChat(data2 *Update) *TLUpdateChat {
	if data2 == nil {
		return &TLUpdateChat{Data2: &Update{
			PredicateName: Predicate_updateChat,
		}}
	} else {
		data2.PredicateName = Predicate_updateChat
		return &TLUpdateChat{Data2: data2}
	}
}

func (m *TLUpdateChat) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChat
	return m.Data2
}

func (m *TLUpdateChat) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChat) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChat) GetPredicateName() string {
	return Predicate_updateChat
}

func (m *TLUpdateChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf89a6a4e: func() []byte {
			x.UInt(0xf89a6a4e)

			x.Long(m.GetChatId_INT64())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf89a6a4e: func() error {
			m.SetChatId_INT64(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateGroupCallParticipants
func MakeTLUpdateGroupCallParticipants(data2 *Update) *TLUpdateGroupCallParticipants {
	if data2 == nil {
		return &TLUpdateGroupCallParticipants{Data2: &Update{
			PredicateName: Predicate_updateGroupCallParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_updateGroupCallParticipants
		return &TLUpdateGroupCallParticipants{Data2: data2}
	}
}

func (m *TLUpdateGroupCallParticipants) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateGroupCallParticipants
	return m.Data2
}

func (m *TLUpdateGroupCallParticipants) SetCall_INPUTGROUPCALL(v *InputGroupCall) {
	m.Data2.Call_INPUTGROUPCALL = v
}
func (m *TLUpdateGroupCallParticipants) GetCall_INPUTGROUPCALL() *InputGroupCall {
	return m.Data2.Call_INPUTGROUPCALL
}

func (m *TLUpdateGroupCallParticipants) SetParticipants_VECTORGROUPCALLPARTICIPANT(v []*GroupCallParticipant) {
	m.Data2.Participants_VECTORGROUPCALLPARTICIPANT = v
}
func (m *TLUpdateGroupCallParticipants) GetParticipants_VECTORGROUPCALLPARTICIPANT() []*GroupCallParticipant {
	return m.Data2.Participants_VECTORGROUPCALLPARTICIPANT
}

func (m *TLUpdateGroupCallParticipants) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateGroupCallParticipants) GetVersion() int32  { return m.Data2.Version }

func (m *TLUpdateGroupCallParticipants) GetPredicateName() string {
	return Predicate_updateGroupCallParticipants
}

func (m *TLUpdateGroupCallParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf2ebdb4e: func() []byte {
			x.UInt(0xf2ebdb4e)

			x.Bytes(m.GetCall_INPUTGROUPCALL().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetParticipants_VECTORGROUPCALLPARTICIPANT())))
			for _, v := range m.GetParticipants_VECTORGROUPCALLPARTICIPANT() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateGroupCallParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateGroupCallParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateGroupCallParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateGroupCallParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf2ebdb4e: func() error {

			m86 := &InputGroupCall{}
			m86.Decode(dBuf)
			m.SetCall_INPUTGROUPCALL(m86)

			c10 := dBuf.Int()
			if c10 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 10, c10)
				return dBuf.GetError()
			}
			l10 := dBuf.Int()
			v10 := make([]*GroupCallParticipant, l10)
			for i := int32(0); i < l10; i++ {
				v10[i] = &GroupCallParticipant{}
				v10[i].Decode(dBuf)
			}
			m.SetParticipants_VECTORGROUPCALLPARTICIPANT(v10)

			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateGroupCallParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateGroupCall
func MakeTLUpdateGroupCall(data2 *Update) *TLUpdateGroupCall {
	if data2 == nil {
		return &TLUpdateGroupCall{Data2: &Update{
			PredicateName: Predicate_updateGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_updateGroupCall
		return &TLUpdateGroupCall{Data2: data2}
	}
}

func (m *TLUpdateGroupCall) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateGroupCall
	return m.Data2
}

func (m *TLUpdateGroupCall) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateGroupCall) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateGroupCall) SetCall_GROUPCALL(v *GroupCall) { m.Data2.Call_GROUPCALL = v }
func (m *TLUpdateGroupCall) GetCall_GROUPCALL() *GroupCall  { return m.Data2.Call_GROUPCALL }

func (m *TLUpdateGroupCall) GetPredicateName() string {
	return Predicate_updateGroupCall
}

func (m *TLUpdateGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x14b24500: func() []byte {
			x.UInt(0x14b24500)

			x.Long(m.GetChatId_INT64())
			x.Bytes(m.GetCall_GROUPCALL().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x14b24500: func() error {
			m.SetChatId_INT64(dBuf.Long())

			m86 := &GroupCall{}
			m86.Decode(dBuf)
			m.SetCall_GROUPCALL(m86)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePeerHistoryTTL
func MakeTLUpdatePeerHistoryTTL(data2 *Update) *TLUpdatePeerHistoryTTL {
	if data2 == nil {
		return &TLUpdatePeerHistoryTTL{Data2: &Update{
			PredicateName: Predicate_updatePeerHistoryTTL,
		}}
	} else {
		data2.PredicateName = Predicate_updatePeerHistoryTTL
		return &TLUpdatePeerHistoryTTL{Data2: data2}
	}
}

func (m *TLUpdatePeerHistoryTTL) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePeerHistoryTTL
	return m.Data2
}

//// flags
func (m *TLUpdatePeerHistoryTTL) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdatePeerHistoryTTL) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdatePeerHistoryTTL) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLUpdatePeerHistoryTTL) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLUpdatePeerHistoryTTL) GetPredicateName() string {
	return Predicate_updatePeerHistoryTTL
}

func (m *TLUpdatePeerHistoryTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbb9bb9a5: func() []byte {
			x.UInt(0xbb9bb9a5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetTtlPeriod() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetPeer_PEER().Encode(layer))
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePeerHistoryTTL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePeerHistoryTTL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePeerHistoryTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePeerHistoryTTL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbb9bb9a5: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			if (flags & (1 << 0)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePeerHistoryTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChatParticipant
func MakeTLUpdateChatParticipant(data2 *Update) *TLUpdateChatParticipant {
	if data2 == nil {
		return &TLUpdateChatParticipant{Data2: &Update{
			PredicateName: Predicate_updateChatParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_updateChatParticipant
		return &TLUpdateChatParticipant{Data2: data2}
	}
}

func (m *TLUpdateChatParticipant) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChatParticipant
	return m.Data2
}

//// flags
func (m *TLUpdateChatParticipant) SetChatId_INT64(v int64) { m.Data2.ChatId_INT64 = v }
func (m *TLUpdateChatParticipant) GetChatId_INT64() int64  { return m.Data2.ChatId_INT64 }

func (m *TLUpdateChatParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChatParticipant) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateChatParticipant) SetActorId(v int64) { m.Data2.ActorId = v }
func (m *TLUpdateChatParticipant) GetActorId() int64  { return m.Data2.ActorId }

func (m *TLUpdateChatParticipant) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipant) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateChatParticipant) SetPrevParticipant_FLAGCHATPARTICIPANT(v *ChatParticipant) {
	m.Data2.PrevParticipant_FLAGCHATPARTICIPANT = v
}
func (m *TLUpdateChatParticipant) GetPrevParticipant_FLAGCHATPARTICIPANT() *ChatParticipant {
	return m.Data2.PrevParticipant_FLAGCHATPARTICIPANT
}

func (m *TLUpdateChatParticipant) SetNewParticipant_FLAGCHATPARTICIPANT(v *ChatParticipant) {
	m.Data2.NewParticipant_FLAGCHATPARTICIPANT = v
}
func (m *TLUpdateChatParticipant) GetNewParticipant_FLAGCHATPARTICIPANT() *ChatParticipant {
	return m.Data2.NewParticipant_FLAGCHATPARTICIPANT
}

func (m *TLUpdateChatParticipant) SetInvite(v *ExportedChatInvite) { m.Data2.Invite = v }
func (m *TLUpdateChatParticipant) GetInvite() *ExportedChatInvite  { return m.Data2.Invite }

func (m *TLUpdateChatParticipant) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateChatParticipant) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateChatParticipant) GetPredicateName() string {
	return Predicate_updateChatParticipant
}

func (m *TLUpdateChatParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd087663a: func() []byte {
			x.UInt(0xd087663a)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPrevParticipant_FLAGCHATPARTICIPANT() != nil {
					flags |= 1 << 0
				}
				if m.GetNewParticipant_FLAGCHATPARTICIPANT() != nil {
					flags |= 1 << 1
				}
				if m.GetInvite() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChatId_INT64())
			x.Int(m.GetDate())
			x.Long(m.GetActorId())
			x.Long(m.GetUserId())
			if m.GetPrevParticipant_FLAGCHATPARTICIPANT() != nil {
				x.Bytes(m.GetPrevParticipant_FLAGCHATPARTICIPANT().Encode(layer))
			}

			if m.GetNewParticipant_FLAGCHATPARTICIPANT() != nil {
				x.Bytes(m.GetNewParticipant_FLAGCHATPARTICIPANT().Encode(layer))
			}

			if m.GetInvite() != nil {
				x.Bytes(m.GetInvite().Encode(layer))
			}

			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChatParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChatParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChatParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChatParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd087663a: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChatId_INT64(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetActorId(dBuf.Long())
			m.SetUserId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m89 := &ChatParticipant{}
				m89.Decode(dBuf)
				m.SetPrevParticipant_FLAGCHATPARTICIPANT(m89)
			}
			if (flags & (1 << 1)) != 0 {
				m90 := &ChatParticipant{}
				m90.Decode(dBuf)
				m.SetNewParticipant_FLAGCHATPARTICIPANT(m90)
			}
			if (flags & (1 << 2)) != 0 {
				m91 := &ExportedChatInvite{}
				m91.Decode(dBuf)
				m.SetInvite(m91)
			}
			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChatParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateChannelParticipant
func MakeTLUpdateChannelParticipant(data2 *Update) *TLUpdateChannelParticipant {
	if data2 == nil {
		return &TLUpdateChannelParticipant{Data2: &Update{
			PredicateName: Predicate_updateChannelParticipant,
		}}
	} else {
		data2.PredicateName = Predicate_updateChannelParticipant
		return &TLUpdateChannelParticipant{Data2: data2}
	}
}

func (m *TLUpdateChannelParticipant) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateChannelParticipant
	return m.Data2
}

//// flags
func (m *TLUpdateChannelParticipant) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelParticipant) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLUpdateChannelParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChannelParticipant) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateChannelParticipant) SetActorId(v int64) { m.Data2.ActorId = v }
func (m *TLUpdateChannelParticipant) GetActorId() int64  { return m.Data2.ActorId }

func (m *TLUpdateChannelParticipant) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateChannelParticipant) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateChannelParticipant) SetPrevParticipant_FLAGCHANNELPARTICIPANT(v *ChannelParticipant) {
	m.Data2.PrevParticipant_FLAGCHANNELPARTICIPANT = v
}
func (m *TLUpdateChannelParticipant) GetPrevParticipant_FLAGCHANNELPARTICIPANT() *ChannelParticipant {
	return m.Data2.PrevParticipant_FLAGCHANNELPARTICIPANT
}

func (m *TLUpdateChannelParticipant) SetNewParticipant_FLAGCHANNELPARTICIPANT(v *ChannelParticipant) {
	m.Data2.NewParticipant_FLAGCHANNELPARTICIPANT = v
}
func (m *TLUpdateChannelParticipant) GetNewParticipant_FLAGCHANNELPARTICIPANT() *ChannelParticipant {
	return m.Data2.NewParticipant_FLAGCHANNELPARTICIPANT
}

func (m *TLUpdateChannelParticipant) SetInvite(v *ExportedChatInvite) { m.Data2.Invite = v }
func (m *TLUpdateChannelParticipant) GetInvite() *ExportedChatInvite  { return m.Data2.Invite }

func (m *TLUpdateChannelParticipant) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateChannelParticipant) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateChannelParticipant) GetPredicateName() string {
	return Predicate_updateChannelParticipant
}

func (m *TLUpdateChannelParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x985d3abb: func() []byte {
			x.UInt(0x985d3abb)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPrevParticipant_FLAGCHANNELPARTICIPANT() != nil {
					flags |= 1 << 0
				}
				if m.GetNewParticipant_FLAGCHANNELPARTICIPANT() != nil {
					flags |= 1 << 1
				}
				if m.GetInvite() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetChannelId())
			x.Int(m.GetDate())
			x.Long(m.GetActorId())
			x.Long(m.GetUserId())
			if m.GetPrevParticipant_FLAGCHANNELPARTICIPANT() != nil {
				x.Bytes(m.GetPrevParticipant_FLAGCHANNELPARTICIPANT().Encode(layer))
			}

			if m.GetNewParticipant_FLAGCHANNELPARTICIPANT() != nil {
				x.Bytes(m.GetNewParticipant_FLAGCHANNELPARTICIPANT().Encode(layer))
			}

			if m.GetInvite() != nil {
				x.Bytes(m.GetInvite().Encode(layer))
			}

			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateChannelParticipant, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateChannelParticipant, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateChannelParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateChannelParticipant) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x985d3abb: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetChannelId(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetActorId(dBuf.Long())
			m.SetUserId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m89 := &ChannelParticipant{}
				m89.Decode(dBuf)
				m.SetPrevParticipant_FLAGCHANNELPARTICIPANT(m89)
			}
			if (flags & (1 << 1)) != 0 {
				m90 := &ChannelParticipant{}
				m90.Decode(dBuf)
				m.SetNewParticipant_FLAGCHANNELPARTICIPANT(m90)
			}
			if (flags & (1 << 2)) != 0 {
				m91 := &ExportedChatInvite{}
				m91.Decode(dBuf)
				m.SetInvite(m91)
			}
			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateChannelParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotStopped
func MakeTLUpdateBotStopped(data2 *Update) *TLUpdateBotStopped {
	if data2 == nil {
		return &TLUpdateBotStopped{Data2: &Update{
			PredicateName: Predicate_updateBotStopped,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotStopped
		return &TLUpdateBotStopped{Data2: data2}
	}
}

func (m *TLUpdateBotStopped) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotStopped
	return m.Data2
}

func (m *TLUpdateBotStopped) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotStopped) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotStopped) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateBotStopped) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateBotStopped) SetStopped(v *Bool) { m.Data2.Stopped = v }
func (m *TLUpdateBotStopped) GetStopped() *Bool  { return m.Data2.Stopped }

func (m *TLUpdateBotStopped) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateBotStopped) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateBotStopped) GetPredicateName() string {
	return Predicate_updateBotStopped
}

func (m *TLUpdateBotStopped) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc4870a49: func() []byte {
			x.UInt(0xc4870a49)

			x.Long(m.GetUserId())
			x.Int(m.GetDate())
			x.Bytes(m.GetStopped().Encode(layer))
			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotStopped, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotStopped, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotStopped) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotStopped) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc4870a49: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDate(dBuf.Int())

			m92 := &Bool{}
			m92.Decode(dBuf)
			m.SetStopped(m92)

			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotStopped) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateGroupCallConnection
func MakeTLUpdateGroupCallConnection(data2 *Update) *TLUpdateGroupCallConnection {
	if data2 == nil {
		return &TLUpdateGroupCallConnection{Data2: &Update{
			PredicateName: Predicate_updateGroupCallConnection,
		}}
	} else {
		data2.PredicateName = Predicate_updateGroupCallConnection
		return &TLUpdateGroupCallConnection{Data2: data2}
	}
}

func (m *TLUpdateGroupCallConnection) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateGroupCallConnection
	return m.Data2
}

//// flags
func (m *TLUpdateGroupCallConnection) SetPresentation(v bool) { m.Data2.Presentation = v }
func (m *TLUpdateGroupCallConnection) GetPresentation() bool  { return m.Data2.Presentation }

func (m *TLUpdateGroupCallConnection) SetParams(v *DataJSON) { m.Data2.Params = v }
func (m *TLUpdateGroupCallConnection) GetParams() *DataJSON  { return m.Data2.Params }

func (m *TLUpdateGroupCallConnection) GetPredicateName() string {
	return Predicate_updateGroupCallConnection
}

func (m *TLUpdateGroupCallConnection) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb783982: func() []byte {
			x.UInt(0xb783982)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPresentation() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetParams().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateGroupCallConnection, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateGroupCallConnection, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateGroupCallConnection) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateGroupCallConnection) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb783982: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPresentation(true)
			}

			m94 := &DataJSON{}
			m94.Decode(dBuf)
			m.SetParams(m94)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateGroupCallConnection) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotCommands
func MakeTLUpdateBotCommands(data2 *Update) *TLUpdateBotCommands {
	if data2 == nil {
		return &TLUpdateBotCommands{Data2: &Update{
			PredicateName: Predicate_updateBotCommands,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotCommands
		return &TLUpdateBotCommands{Data2: data2}
	}
}

func (m *TLUpdateBotCommands) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotCommands
	return m.Data2
}

func (m *TLUpdateBotCommands) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateBotCommands) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateBotCommands) SetBotId(v int64) { m.Data2.BotId = v }
func (m *TLUpdateBotCommands) GetBotId() int64  { return m.Data2.BotId }

func (m *TLUpdateBotCommands) SetCommands(v []*BotCommand) { m.Data2.Commands = v }
func (m *TLUpdateBotCommands) GetCommands() []*BotCommand  { return m.Data2.Commands }

func (m *TLUpdateBotCommands) GetPredicateName() string {
	return Predicate_updateBotCommands
}

func (m *TLUpdateBotCommands) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4d712f2e: func() []byte {
			x.UInt(0x4d712f2e)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Long(m.GetBotId())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCommands())))
			for _, v := range m.GetCommands() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotCommands, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotCommands, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotCommands) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotCommands) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4d712f2e: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetBotId(dBuf.Long())
			c96 := dBuf.Int()
			if c96 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 96, c96)
				return dBuf.GetError()
			}
			l96 := dBuf.Int()
			v96 := make([]*BotCommand, l96)
			for i := int32(0); i < l96; i++ {
				v96[i] = &BotCommand{}
				v96[i].Decode(dBuf)
			}
			m.SetCommands(v96)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotCommands) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatePendingJoinRequests
func MakeTLUpdatePendingJoinRequests(data2 *Update) *TLUpdatePendingJoinRequests {
	if data2 == nil {
		return &TLUpdatePendingJoinRequests{Data2: &Update{
			PredicateName: Predicate_updatePendingJoinRequests,
		}}
	} else {
		data2.PredicateName = Predicate_updatePendingJoinRequests
		return &TLUpdatePendingJoinRequests{Data2: data2}
	}
}

func (m *TLUpdatePendingJoinRequests) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updatePendingJoinRequests
	return m.Data2
}

func (m *TLUpdatePendingJoinRequests) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdatePendingJoinRequests) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdatePendingJoinRequests) SetRequestsPending(v int32) { m.Data2.RequestsPending = v }
func (m *TLUpdatePendingJoinRequests) GetRequestsPending() int32  { return m.Data2.RequestsPending }

func (m *TLUpdatePendingJoinRequests) SetRecentRequesters(v []int64) { m.Data2.RecentRequesters = v }
func (m *TLUpdatePendingJoinRequests) GetRecentRequesters() []int64  { return m.Data2.RecentRequesters }

func (m *TLUpdatePendingJoinRequests) GetPredicateName() string {
	return Predicate_updatePendingJoinRequests
}

func (m *TLUpdatePendingJoinRequests) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7063c3db: func() []byte {
			x.UInt(0x7063c3db)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetRequestsPending())

			x.VectorLong(m.GetRecentRequesters())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatePendingJoinRequests, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatePendingJoinRequests, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatePendingJoinRequests) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatePendingJoinRequests) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7063c3db: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetRequestsPending(dBuf.Int())

			m.SetRecentRequesters(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatePendingJoinRequests) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBotChatInviteRequester
func MakeTLUpdateBotChatInviteRequester(data2 *Update) *TLUpdateBotChatInviteRequester {
	if data2 == nil {
		return &TLUpdateBotChatInviteRequester{Data2: &Update{
			PredicateName: Predicate_updateBotChatInviteRequester,
		}}
	} else {
		data2.PredicateName = Predicate_updateBotChatInviteRequester
		return &TLUpdateBotChatInviteRequester{Data2: data2}
	}
}

func (m *TLUpdateBotChatInviteRequester) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBotChatInviteRequester
	return m.Data2
}

func (m *TLUpdateBotChatInviteRequester) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateBotChatInviteRequester) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateBotChatInviteRequester) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateBotChatInviteRequester) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateBotChatInviteRequester) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateBotChatInviteRequester) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateBotChatInviteRequester) SetAbout(v string) { m.Data2.About = v }
func (m *TLUpdateBotChatInviteRequester) GetAbout() string  { return m.Data2.About }

func (m *TLUpdateBotChatInviteRequester) SetInvite(v *ExportedChatInvite) { m.Data2.Invite = v }
func (m *TLUpdateBotChatInviteRequester) GetInvite() *ExportedChatInvite  { return m.Data2.Invite }

func (m *TLUpdateBotChatInviteRequester) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateBotChatInviteRequester) GetQts() int32  { return m.Data2.Qts }

func (m *TLUpdateBotChatInviteRequester) GetPredicateName() string {
	return Predicate_updateBotChatInviteRequester
}

func (m *TLUpdateBotChatInviteRequester) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x11dfa986: func() []byte {
			x.UInt(0x11dfa986)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetDate())
			x.Long(m.GetUserId())
			x.String(m.GetAbout())
			x.Bytes(m.GetInvite().Encode(layer))
			x.Int(m.GetQts())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBotChatInviteRequester, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBotChatInviteRequester, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBotChatInviteRequester) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBotChatInviteRequester) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x11dfa986: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetDate(dBuf.Int())
			m.SetUserId(dBuf.Long())
			m.SetAbout(dBuf.String())

			m91 := &ExportedChatInvite{}
			m91.Decode(dBuf)
			m.SetInvite(m91)

			m.SetQts(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBotChatInviteRequester) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateMessageReactions
func MakeTLUpdateMessageReactions(data2 *Update) *TLUpdateMessageReactions {
	if data2 == nil {
		return &TLUpdateMessageReactions{Data2: &Update{
			PredicateName: Predicate_updateMessageReactions,
		}}
	} else {
		data2.PredicateName = Predicate_updateMessageReactions
		return &TLUpdateMessageReactions{Data2: data2}
	}
}

func (m *TLUpdateMessageReactions) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateMessageReactions
	return m.Data2
}

func (m *TLUpdateMessageReactions) SetPeer_PEER(v *Peer) { m.Data2.Peer_PEER = v }
func (m *TLUpdateMessageReactions) GetPeer_PEER() *Peer  { return m.Data2.Peer_PEER }

func (m *TLUpdateMessageReactions) SetMsgId_INT32(v int32) { m.Data2.MsgId_INT32 = v }
func (m *TLUpdateMessageReactions) GetMsgId_INT32() int32  { return m.Data2.MsgId_INT32 }

func (m *TLUpdateMessageReactions) SetReactions(v *MessageReactions) { m.Data2.Reactions = v }
func (m *TLUpdateMessageReactions) GetReactions() *MessageReactions  { return m.Data2.Reactions }

func (m *TLUpdateMessageReactions) GetPredicateName() string {
	return Predicate_updateMessageReactions
}

func (m *TLUpdateMessageReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x154798c3: func() []byte {
			x.UInt(0x154798c3)

			x.Bytes(m.GetPeer_PEER().Encode(layer))
			x.Int(m.GetMsgId_INT32())
			x.Bytes(m.GetReactions().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateMessageReactions, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateMessageReactions, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateMessageReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateMessageReactions) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x154798c3: func() error {

			m24 := &Peer{}
			m24.Decode(dBuf)
			m.SetPeer_PEER(m24)

			m.SetMsgId_INT32(dBuf.Int())

			m100 := &MessageReactions{}
			m100.Decode(dBuf)
			m.SetReactions(m100)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateMessageReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateBizDataRaw
func MakeTLUpdateBizDataRaw(data2 *Update) *TLUpdateBizDataRaw {
	if data2 == nil {
		return &TLUpdateBizDataRaw{Data2: &Update{
			PredicateName: Predicate_updateBizDataRaw,
		}}
	} else {
		data2.PredicateName = Predicate_updateBizDataRaw
		return &TLUpdateBizDataRaw{Data2: data2}
	}
}

func (m *TLUpdateBizDataRaw) To_Update() *Update {
	m.Data2.PredicateName = Predicate_updateBizDataRaw
	return m.Data2
}

func (m *TLUpdateBizDataRaw) SetBizData(v *BizDataRaw) { m.Data2.BizData = v }
func (m *TLUpdateBizDataRaw) GetBizData() *BizDataRaw  { return m.Data2.BizData }

func (m *TLUpdateBizDataRaw) GetPredicateName() string {
	return Predicate_updateBizDataRaw
}

func (m *TLUpdateBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x83ce7a0e: func() []byte {
			x.UInt(0x83ce7a0e)

			x.Bytes(m.GetBizData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateBizDataRaw, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateBizDataRaw, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateBizDataRaw) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x83ce7a0e: func() error {

			m101 := &BizDataRaw{}
			m101.Decode(dBuf)
			m.SetBizData(m101)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DcOption <--
//  + TL_DcOption
//

func (m *DcOption) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dcOption:
		t := m.To_DcOption()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DcOption) CalcByteSize(layer int32) int {
	return 0
}

func (m *DcOption) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x18b7a10d:
		m2 := MakeTLDcOption(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DcOption) DebugString() string {
	switch m.PredicateName {
	case Predicate_dcOption:
		t := m.To_DcOption()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DcOption
func (m *DcOption) To_DcOption() *TLDcOption {
	m.PredicateName = Predicate_dcOption
	return &TLDcOption{
		Data2: m,
	}
}

// MakeTLDcOption
func MakeTLDcOption(data2 *DcOption) *TLDcOption {
	if data2 == nil {
		return &TLDcOption{Data2: &DcOption{
			PredicateName: Predicate_dcOption,
		}}
	} else {
		data2.PredicateName = Predicate_dcOption
		return &TLDcOption{Data2: data2}
	}
}

func (m *TLDcOption) To_DcOption() *DcOption {
	m.Data2.PredicateName = Predicate_dcOption
	return m.Data2
}

//// flags
func (m *TLDcOption) SetIpv6(v bool) { m.Data2.Ipv6 = v }
func (m *TLDcOption) GetIpv6() bool  { return m.Data2.Ipv6 }

func (m *TLDcOption) SetMediaOnly(v bool) { m.Data2.MediaOnly = v }
func (m *TLDcOption) GetMediaOnly() bool  { return m.Data2.MediaOnly }

func (m *TLDcOption) SetTcpoOnly(v bool) { m.Data2.TcpoOnly = v }
func (m *TLDcOption) GetTcpoOnly() bool  { return m.Data2.TcpoOnly }

func (m *TLDcOption) SetCdn(v bool) { m.Data2.Cdn = v }
func (m *TLDcOption) GetCdn() bool  { return m.Data2.Cdn }

func (m *TLDcOption) SetStatic(v bool) { m.Data2.Static = v }
func (m *TLDcOption) GetStatic() bool  { return m.Data2.Static }

func (m *TLDcOption) SetId(v int32) { m.Data2.Id = v }
func (m *TLDcOption) GetId() int32  { return m.Data2.Id }

func (m *TLDcOption) SetIpAddress(v string) { m.Data2.IpAddress = v }
func (m *TLDcOption) GetIpAddress() string  { return m.Data2.IpAddress }

func (m *TLDcOption) SetPort(v int32) { m.Data2.Port = v }
func (m *TLDcOption) GetPort() int32  { return m.Data2.Port }

func (m *TLDcOption) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLDcOption) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLDcOption) GetPredicateName() string {
	return Predicate_dcOption
}

func (m *TLDcOption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x18b7a10d: func() []byte {
			x.UInt(0x18b7a10d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetIpv6() == true {
					flags |= 1 << 0
				}
				if m.GetMediaOnly() == true {
					flags |= 1 << 1
				}
				if m.GetTcpoOnly() == true {
					flags |= 1 << 2
				}
				if m.GetCdn() == true {
					flags |= 1 << 3
				}
				if m.GetStatic() == true {
					flags |= 1 << 4
				}

				if m.GetSecret() != nil {
					flags |= 1 << 10
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.String(m.GetIpAddress())
			x.Int(m.GetPort())
			if m.GetSecret() != nil {
				x.StringBytes(m.GetSecret())
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dcOption, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dcOption, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDcOption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDcOption) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x18b7a10d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetIpv6(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetMediaOnly(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTcpoOnly(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetCdn(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetStatic(true)
			}
			m.SetId(dBuf.Int())
			m.SetIpAddress(dBuf.String())
			m.SetPort(dBuf.Int())
			if (flags & (1 << 10)) != 0 {
				m.SetSecret(dBuf.StringBytes())
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDcOption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsGraph <--
//  + TL_StatsGraphAsync
//  + TL_StatsGraphError
//  + TL_StatsGraph
//

func (m *StatsGraph) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsGraphAsync:
		t := m.To_StatsGraphAsync()
		xBuf = t.Encode(layer)
	case Predicate_statsGraphError:
		t := m.To_StatsGraphError()
		xBuf = t.Encode(layer)
	case Predicate_statsGraph:
		t := m.To_StatsGraph()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsGraph) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsGraph) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4a27eb2d:
		m2 := MakeTLStatsGraphAsync(m)
		m2.Decode(dBuf)
	case 0xbedc9822:
		m2 := MakeTLStatsGraphError(m)
		m2.Decode(dBuf)
	case 0x8ea464b6:
		m2 := MakeTLStatsGraph(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsGraph) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsGraphAsync:
		t := m.To_StatsGraphAsync()
		return t.DebugString()
	case Predicate_statsGraphError:
		t := m.To_StatsGraphError()
		return t.DebugString()
	case Predicate_statsGraph:
		t := m.To_StatsGraph()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsGraphAsync
func (m *StatsGraph) To_StatsGraphAsync() *TLStatsGraphAsync {
	m.PredicateName = Predicate_statsGraphAsync
	return &TLStatsGraphAsync{
		Data2: m,
	}
}

// To_StatsGraphError
func (m *StatsGraph) To_StatsGraphError() *TLStatsGraphError {
	m.PredicateName = Predicate_statsGraphError
	return &TLStatsGraphError{
		Data2: m,
	}
}

// To_StatsGraph
func (m *StatsGraph) To_StatsGraph() *TLStatsGraph {
	m.PredicateName = Predicate_statsGraph
	return &TLStatsGraph{
		Data2: m,
	}
}

// MakeTLStatsGraphAsync
func MakeTLStatsGraphAsync(data2 *StatsGraph) *TLStatsGraphAsync {
	if data2 == nil {
		return &TLStatsGraphAsync{Data2: &StatsGraph{
			PredicateName: Predicate_statsGraphAsync,
		}}
	} else {
		data2.PredicateName = Predicate_statsGraphAsync
		return &TLStatsGraphAsync{Data2: data2}
	}
}

func (m *TLStatsGraphAsync) To_StatsGraph() *StatsGraph {
	m.Data2.PredicateName = Predicate_statsGraphAsync
	return m.Data2
}

func (m *TLStatsGraphAsync) SetToken(v string) { m.Data2.Token = v }
func (m *TLStatsGraphAsync) GetToken() string  { return m.Data2.Token }

func (m *TLStatsGraphAsync) GetPredicateName() string {
	return Predicate_statsGraphAsync
}

func (m *TLStatsGraphAsync) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4a27eb2d: func() []byte {
			x.UInt(0x4a27eb2d)

			x.String(m.GetToken())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGraphAsync, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGraphAsync, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGraphAsync) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGraphAsync) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4a27eb2d: func() error {
			m.SetToken(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGraphAsync) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStatsGraphError
func MakeTLStatsGraphError(data2 *StatsGraph) *TLStatsGraphError {
	if data2 == nil {
		return &TLStatsGraphError{Data2: &StatsGraph{
			PredicateName: Predicate_statsGraphError,
		}}
	} else {
		data2.PredicateName = Predicate_statsGraphError
		return &TLStatsGraphError{Data2: data2}
	}
}

func (m *TLStatsGraphError) To_StatsGraph() *StatsGraph {
	m.Data2.PredicateName = Predicate_statsGraphError
	return m.Data2
}

func (m *TLStatsGraphError) SetError(v string) { m.Data2.Error = v }
func (m *TLStatsGraphError) GetError() string  { return m.Data2.Error }

func (m *TLStatsGraphError) GetPredicateName() string {
	return Predicate_statsGraphError
}

func (m *TLStatsGraphError) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbedc9822: func() []byte {
			x.UInt(0xbedc9822)

			x.String(m.GetError())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGraphError, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGraphError, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGraphError) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGraphError) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbedc9822: func() error {
			m.SetError(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGraphError) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStatsGraph
func MakeTLStatsGraph(data2 *StatsGraph) *TLStatsGraph {
	if data2 == nil {
		return &TLStatsGraph{Data2: &StatsGraph{
			PredicateName: Predicate_statsGraph,
		}}
	} else {
		data2.PredicateName = Predicate_statsGraph
		return &TLStatsGraph{Data2: data2}
	}
}

func (m *TLStatsGraph) To_StatsGraph() *StatsGraph {
	m.Data2.PredicateName = Predicate_statsGraph
	return m.Data2
}

//// flags
func (m *TLStatsGraph) SetJson(v *DataJSON) { m.Data2.Json = v }
func (m *TLStatsGraph) GetJson() *DataJSON  { return m.Data2.Json }

func (m *TLStatsGraph) SetZoomToken(v *types.StringValue) { m.Data2.ZoomToken = v }
func (m *TLStatsGraph) GetZoomToken() *types.StringValue  { return m.Data2.ZoomToken }

func (m *TLStatsGraph) GetPredicateName() string {
	return Predicate_statsGraph
}

func (m *TLStatsGraph) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8ea464b6: func() []byte {
			x.UInt(0x8ea464b6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetZoomToken() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetJson().Encode(layer))
			if m.GetZoomToken() != nil {
				x.String(m.GetZoomToken().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGraph, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGraph, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGraph) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGraph) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8ea464b6: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m3 := &DataJSON{}
			m3.Decode(dBuf)
			m.SetJson(m3)

			if (flags & (1 << 0)) != 0 {
				m.SetZoomToken(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGraph) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopInviter <--
//  + TL_StatsGroupTopInviter
//

func (m *StatsGroupTopInviter) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsGroupTopInviter:
		t := m.To_StatsGroupTopInviter()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsGroupTopInviter) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsGroupTopInviter) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x535f779d:
		m2 := MakeTLStatsGroupTopInviter(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsGroupTopInviter) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsGroupTopInviter:
		t := m.To_StatsGroupTopInviter()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsGroupTopInviter
func (m *StatsGroupTopInviter) To_StatsGroupTopInviter() *TLStatsGroupTopInviter {
	m.PredicateName = Predicate_statsGroupTopInviter
	return &TLStatsGroupTopInviter{
		Data2: m,
	}
}

// MakeTLStatsGroupTopInviter
func MakeTLStatsGroupTopInviter(data2 *StatsGroupTopInviter) *TLStatsGroupTopInviter {
	if data2 == nil {
		return &TLStatsGroupTopInviter{Data2: &StatsGroupTopInviter{
			PredicateName: Predicate_statsGroupTopInviter,
		}}
	} else {
		data2.PredicateName = Predicate_statsGroupTopInviter
		return &TLStatsGroupTopInviter{Data2: data2}
	}
}

func (m *TLStatsGroupTopInviter) To_StatsGroupTopInviter() *StatsGroupTopInviter {
	m.Data2.PredicateName = Predicate_statsGroupTopInviter
	return m.Data2
}

func (m *TLStatsGroupTopInviter) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLStatsGroupTopInviter) GetUserId() int64  { return m.Data2.UserId }

func (m *TLStatsGroupTopInviter) SetInvitations(v int32) { m.Data2.Invitations = v }
func (m *TLStatsGroupTopInviter) GetInvitations() int32  { return m.Data2.Invitations }

func (m *TLStatsGroupTopInviter) GetPredicateName() string {
	return Predicate_statsGroupTopInviter
}

func (m *TLStatsGroupTopInviter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x535f779d: func() []byte {
			x.UInt(0x535f779d)

			x.Long(m.GetUserId())
			x.Int(m.GetInvitations())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGroupTopInviter, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGroupTopInviter, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGroupTopInviter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGroupTopInviter) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x535f779d: func() error {
			m.SetUserId(dBuf.Long())
			m.SetInvitations(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGroupTopInviter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// String <--
//  + TL_String
//

func (m *String) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_string:
		t := m.To_String()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *String) CalcByteSize(layer int32) int {
	return 0
}

func (m *String) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb973445:
		m2 := MakeTLString(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *String) DebugString() string {
	switch m.PredicateName {
	case Predicate_string:
		t := m.To_String()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_String
func (m *String) To_String() *TLString {
	m.PredicateName = Predicate_string
	return &TLString{
		Data2: m,
	}
}

// MakeTLString
func MakeTLString(data2 *String) *TLString {
	if data2 == nil {
		return &TLString{Data2: &String{
			PredicateName: Predicate_string,
		}}
	} else {
		data2.PredicateName = Predicate_string
		return &TLString{Data2: data2}
	}
}

func (m *TLString) To_String() *String {
	m.Data2.PredicateName = Predicate_string
	return m.Data2
}

func (m *TLString) SetV(v string) { m.Data2.V = v }
func (m *TLString) GetV() string  { return m.Data2.V }

func (m *TLString) GetPredicateName() string {
	return Predicate_string
}

func (m *TLString) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb973445: func() []byte {
			x.UInt(0xb973445)

			x.String(m.GetV())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_string, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_string, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLString) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLString) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb973445: func() error {
			m.SetV(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLString) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DialogFilterSuggested <--
//  + TL_DialogFilterSuggested
//

func (m *DialogFilterSuggested) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_dialogFilterSuggested:
		t := m.To_DialogFilterSuggested()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DialogFilterSuggested) CalcByteSize(layer int32) int {
	return 0
}

func (m *DialogFilterSuggested) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x77744d4a:
		m2 := MakeTLDialogFilterSuggested(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DialogFilterSuggested) DebugString() string {
	switch m.PredicateName {
	case Predicate_dialogFilterSuggested:
		t := m.To_DialogFilterSuggested()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DialogFilterSuggested
func (m *DialogFilterSuggested) To_DialogFilterSuggested() *TLDialogFilterSuggested {
	m.PredicateName = Predicate_dialogFilterSuggested
	return &TLDialogFilterSuggested{
		Data2: m,
	}
}

// MakeTLDialogFilterSuggested
func MakeTLDialogFilterSuggested(data2 *DialogFilterSuggested) *TLDialogFilterSuggested {
	if data2 == nil {
		return &TLDialogFilterSuggested{Data2: &DialogFilterSuggested{
			PredicateName: Predicate_dialogFilterSuggested,
		}}
	} else {
		data2.PredicateName = Predicate_dialogFilterSuggested
		return &TLDialogFilterSuggested{Data2: data2}
	}
}

func (m *TLDialogFilterSuggested) To_DialogFilterSuggested() *DialogFilterSuggested {
	m.Data2.PredicateName = Predicate_dialogFilterSuggested
	return m.Data2
}

func (m *TLDialogFilterSuggested) SetFilter(v *DialogFilter) { m.Data2.Filter = v }
func (m *TLDialogFilterSuggested) GetFilter() *DialogFilter  { return m.Data2.Filter }

func (m *TLDialogFilterSuggested) SetDescription(v string) { m.Data2.Description = v }
func (m *TLDialogFilterSuggested) GetDescription() string  { return m.Data2.Description }

func (m *TLDialogFilterSuggested) GetPredicateName() string {
	return Predicate_dialogFilterSuggested
}

func (m *TLDialogFilterSuggested) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x77744d4a: func() []byte {
			x.UInt(0x77744d4a)

			x.Bytes(m.GetFilter().Encode(layer))
			x.String(m.GetDescription())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_dialogFilterSuggested, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_dialogFilterSuggested, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDialogFilterSuggested) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDialogFilterSuggested) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x77744d4a: func() error {

			m0 := &DialogFilter{}
			m0.Decode(dBuf)
			m.SetFilter(m0)

			m.SetDescription(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDialogFilterSuggested) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// GroupCallParticipantVideoSourceGroup <--
//  + TL_GroupCallParticipantVideoSourceGroup
//

func (m *GroupCallParticipantVideoSourceGroup) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_groupCallParticipantVideoSourceGroup:
		t := m.To_GroupCallParticipantVideoSourceGroup()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *GroupCallParticipantVideoSourceGroup) CalcByteSize(layer int32) int {
	return 0
}

func (m *GroupCallParticipantVideoSourceGroup) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdcb118b7:
		m2 := MakeTLGroupCallParticipantVideoSourceGroup(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *GroupCallParticipantVideoSourceGroup) DebugString() string {
	switch m.PredicateName {
	case Predicate_groupCallParticipantVideoSourceGroup:
		t := m.To_GroupCallParticipantVideoSourceGroup()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_GroupCallParticipantVideoSourceGroup
func (m *GroupCallParticipantVideoSourceGroup) To_GroupCallParticipantVideoSourceGroup() *TLGroupCallParticipantVideoSourceGroup {
	m.PredicateName = Predicate_groupCallParticipantVideoSourceGroup
	return &TLGroupCallParticipantVideoSourceGroup{
		Data2: m,
	}
}

// MakeTLGroupCallParticipantVideoSourceGroup
func MakeTLGroupCallParticipantVideoSourceGroup(data2 *GroupCallParticipantVideoSourceGroup) *TLGroupCallParticipantVideoSourceGroup {
	if data2 == nil {
		return &TLGroupCallParticipantVideoSourceGroup{Data2: &GroupCallParticipantVideoSourceGroup{
			PredicateName: Predicate_groupCallParticipantVideoSourceGroup,
		}}
	} else {
		data2.PredicateName = Predicate_groupCallParticipantVideoSourceGroup
		return &TLGroupCallParticipantVideoSourceGroup{Data2: data2}
	}
}

func (m *TLGroupCallParticipantVideoSourceGroup) To_GroupCallParticipantVideoSourceGroup() *GroupCallParticipantVideoSourceGroup {
	m.Data2.PredicateName = Predicate_groupCallParticipantVideoSourceGroup
	return m.Data2
}

func (m *TLGroupCallParticipantVideoSourceGroup) SetSemantics(v string) { m.Data2.Semantics = v }
func (m *TLGroupCallParticipantVideoSourceGroup) GetSemantics() string  { return m.Data2.Semantics }

func (m *TLGroupCallParticipantVideoSourceGroup) SetSources(v []int32) { m.Data2.Sources = v }
func (m *TLGroupCallParticipantVideoSourceGroup) GetSources() []int32  { return m.Data2.Sources }

func (m *TLGroupCallParticipantVideoSourceGroup) GetPredicateName() string {
	return Predicate_groupCallParticipantVideoSourceGroup
}

func (m *TLGroupCallParticipantVideoSourceGroup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdcb118b7: func() []byte {
			x.UInt(0xdcb118b7)

			x.String(m.GetSemantics())

			x.VectorInt(m.GetSources())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_groupCallParticipantVideoSourceGroup, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_groupCallParticipantVideoSourceGroup, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGroupCallParticipantVideoSourceGroup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGroupCallParticipantVideoSourceGroup) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdcb118b7: func() error {
			m.SetSemantics(dBuf.String())

			m.SetSources(dBuf.VectorInt())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGroupCallParticipantVideoSourceGroup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageUserReaction <--
//  + TL_MessageUserReaction
//

func (m *MessageUserReaction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageUserReaction:
		t := m.To_MessageUserReaction()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageUserReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageUserReaction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x932844fa:
		m2 := MakeTLMessageUserReaction(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageUserReaction) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageUserReaction:
		t := m.To_MessageUserReaction()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageUserReaction
func (m *MessageUserReaction) To_MessageUserReaction() *TLMessageUserReaction {
	m.PredicateName = Predicate_messageUserReaction
	return &TLMessageUserReaction{
		Data2: m,
	}
}

// MakeTLMessageUserReaction
func MakeTLMessageUserReaction(data2 *MessageUserReaction) *TLMessageUserReaction {
	if data2 == nil {
		return &TLMessageUserReaction{Data2: &MessageUserReaction{
			PredicateName: Predicate_messageUserReaction,
		}}
	} else {
		data2.PredicateName = Predicate_messageUserReaction
		return &TLMessageUserReaction{Data2: data2}
	}
}

func (m *TLMessageUserReaction) To_MessageUserReaction() *MessageUserReaction {
	m.Data2.PredicateName = Predicate_messageUserReaction
	return m.Data2
}

func (m *TLMessageUserReaction) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageUserReaction) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageUserReaction) SetReaction(v string) { m.Data2.Reaction = v }
func (m *TLMessageUserReaction) GetReaction() string  { return m.Data2.Reaction }

func (m *TLMessageUserReaction) GetPredicateName() string {
	return Predicate_messageUserReaction
}

func (m *TLMessageUserReaction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x932844fa: func() []byte {
			x.UInt(0x932844fa)

			x.Long(m.GetUserId())
			x.String(m.GetReaction())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageUserReaction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageUserReaction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageUserReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageUserReaction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x932844fa: func() error {
			m.SetUserId(dBuf.Long())
			m.SetReaction(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageUserReaction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Updates <--
//  + TL_UpdatesTooLong
//  + TL_UpdateShortMessage
//  + TL_UpdateShortChatMessage
//  + TL_UpdateShort
//  + TL_UpdatesCombined
//  + TL_Updates
//  + TL_UpdateShortSentMessage
//  + TL_UpdateAccountResetAuthorization
//

func (m *Updates) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_updatesTooLong:
		t := m.To_UpdatesTooLong()
		xBuf = t.Encode(layer)
	case Predicate_updateShortMessage:
		t := m.To_UpdateShortMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateShortChatMessage:
		t := m.To_UpdateShortChatMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateShort:
		t := m.To_UpdateShort()
		xBuf = t.Encode(layer)
	case Predicate_updatesCombined:
		t := m.To_UpdatesCombined()
		xBuf = t.Encode(layer)
	case Predicate_updates:
		t := m.To_Updates()
		xBuf = t.Encode(layer)
	case Predicate_updateShortSentMessage:
		t := m.To_UpdateShortSentMessage()
		xBuf = t.Encode(layer)
	case Predicate_updateAccountResetAuthorization:
		t := m.To_UpdateAccountResetAuthorization()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Updates) CalcByteSize(layer int32) int {
	return 0
}

func (m *Updates) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe317af7e:
		m2 := MakeTLUpdatesTooLong(m)
		m2.Decode(dBuf)
	case 0x313bc7f8:
		m2 := MakeTLUpdateShortMessage(m)
		m2.Decode(dBuf)
	case 0x4d6deea5:
		m2 := MakeTLUpdateShortChatMessage(m)
		m2.Decode(dBuf)
	case 0x78d4dec1:
		m2 := MakeTLUpdateShort(m)
		m2.Decode(dBuf)
	case 0x725b04c3:
		m2 := MakeTLUpdatesCombined(m)
		m2.Decode(dBuf)
	case 0x74ae4240:
		m2 := MakeTLUpdates(m)
		m2.Decode(dBuf)
	case 0x9015e101:
		m2 := MakeTLUpdateShortSentMessage(m)
		m2.Decode(dBuf)
	case 0x1194cd3d:
		m2 := MakeTLUpdateAccountResetAuthorization(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Updates) DebugString() string {
	switch m.PredicateName {
	case Predicate_updatesTooLong:
		t := m.To_UpdatesTooLong()
		return t.DebugString()
	case Predicate_updateShortMessage:
		t := m.To_UpdateShortMessage()
		return t.DebugString()
	case Predicate_updateShortChatMessage:
		t := m.To_UpdateShortChatMessage()
		return t.DebugString()
	case Predicate_updateShort:
		t := m.To_UpdateShort()
		return t.DebugString()
	case Predicate_updatesCombined:
		t := m.To_UpdatesCombined()
		return t.DebugString()
	case Predicate_updates:
		t := m.To_Updates()
		return t.DebugString()
	case Predicate_updateShortSentMessage:
		t := m.To_UpdateShortSentMessage()
		return t.DebugString()
	case Predicate_updateAccountResetAuthorization:
		t := m.To_UpdateAccountResetAuthorization()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UpdatesTooLong
func (m *Updates) To_UpdatesTooLong() *TLUpdatesTooLong {
	m.PredicateName = Predicate_updatesTooLong
	return &TLUpdatesTooLong{
		Data2: m,
	}
}

// To_UpdateShortMessage
func (m *Updates) To_UpdateShortMessage() *TLUpdateShortMessage {
	m.PredicateName = Predicate_updateShortMessage
	return &TLUpdateShortMessage{
		Data2: m,
	}
}

// To_UpdateShortChatMessage
func (m *Updates) To_UpdateShortChatMessage() *TLUpdateShortChatMessage {
	m.PredicateName = Predicate_updateShortChatMessage
	return &TLUpdateShortChatMessage{
		Data2: m,
	}
}

// To_UpdateShort
func (m *Updates) To_UpdateShort() *TLUpdateShort {
	m.PredicateName = Predicate_updateShort
	return &TLUpdateShort{
		Data2: m,
	}
}

// To_UpdatesCombined
func (m *Updates) To_UpdatesCombined() *TLUpdatesCombined {
	m.PredicateName = Predicate_updatesCombined
	return &TLUpdatesCombined{
		Data2: m,
	}
}

// To_Updates
func (m *Updates) To_Updates() *TLUpdates {
	m.PredicateName = Predicate_updates
	return &TLUpdates{
		Data2: m,
	}
}

// To_UpdateShortSentMessage
func (m *Updates) To_UpdateShortSentMessage() *TLUpdateShortSentMessage {
	m.PredicateName = Predicate_updateShortSentMessage
	return &TLUpdateShortSentMessage{
		Data2: m,
	}
}

// To_UpdateAccountResetAuthorization
func (m *Updates) To_UpdateAccountResetAuthorization() *TLUpdateAccountResetAuthorization {
	m.PredicateName = Predicate_updateAccountResetAuthorization
	return &TLUpdateAccountResetAuthorization{
		Data2: m,
	}
}

// MakeTLUpdatesTooLong
func MakeTLUpdatesTooLong(data2 *Updates) *TLUpdatesTooLong {
	if data2 == nil {
		return &TLUpdatesTooLong{Data2: &Updates{
			PredicateName: Predicate_updatesTooLong,
		}}
	} else {
		data2.PredicateName = Predicate_updatesTooLong
		return &TLUpdatesTooLong{Data2: data2}
	}
}

func (m *TLUpdatesTooLong) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updatesTooLong
	return m.Data2
}

func (m *TLUpdatesTooLong) GetPredicateName() string {
	return Predicate_updatesTooLong
}

func (m *TLUpdatesTooLong) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe317af7e: func() []byte {
			x.UInt(0xe317af7e)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatesTooLong, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatesTooLong, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesTooLong) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesTooLong) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe317af7e: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesTooLong) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateShortMessage
func MakeTLUpdateShortMessage(data2 *Updates) *TLUpdateShortMessage {
	if data2 == nil {
		return &TLUpdateShortMessage{Data2: &Updates{
			PredicateName: Predicate_updateShortMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateShortMessage
		return &TLUpdateShortMessage{Data2: data2}
	}
}

func (m *TLUpdateShortMessage) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updateShortMessage
	return m.Data2
}

//// flags
func (m *TLUpdateShortMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLUpdateShortMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLUpdateShortMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLUpdateShortMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortMessage) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateShortMessage) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateShortMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLUpdateShortMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLUpdateShortMessage) SetViaBotId(v *types.Int64Value) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortMessage) GetViaBotId() *types.Int64Value  { return m.Data2.ViaBotId }

func (m *TLUpdateShortMessage) SetReplyTo(v *MessageReplyHeader) { m.Data2.ReplyTo = v }
func (m *TLUpdateShortMessage) GetReplyTo() *MessageReplyHeader  { return m.Data2.ReplyTo }

func (m *TLUpdateShortMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLUpdateShortMessage) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLUpdateShortMessage) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLUpdateShortMessage) GetPredicateName() string {
	return Predicate_updateShortMessage
}

func (m *TLUpdateShortMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x313bc7f8: func() []byte {
			x.UInt(0x313bc7f8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}
				if m.GetMentioned() == true {
					flags |= 1 << 4
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 5
				}
				if m.GetSilent() == true {
					flags |= 1 << 13
				}

				if m.GetFwdFrom() != nil {
					flags |= 1 << 2
				}
				if m.GetViaBotId() != nil {
					flags |= 1 << 11
				}
				if m.GetReplyTo() != nil {
					flags |= 1 << 3
				}
				if m.GetEntities() != nil {
					flags |= 1 << 7
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.Long(m.GetUserId())
			x.String(m.GetMessage())
			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetDate())
			if m.GetFwdFrom() != nil {
				x.Bytes(m.GetFwdFrom().Encode(layer))
			}

			if m.GetViaBotId() != nil {
				x.Long(m.GetViaBotId().Value)
			}

			if m.GetReplyTo() != nil {
				x.Bytes(m.GetReplyTo().Encode(layer))
			}

			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateShortMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateShortMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateShortMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateShortMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x313bc7f8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetSilent(true)
			}
			m.SetId(dBuf.Int())
			m.SetUserId(dBuf.Long())
			m.SetMessage(dBuf.String())
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m11 := &MessageFwdHeader{}
				m11.Decode(dBuf)
				m.SetFwdFrom(m11)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetViaBotId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m13 := &MessageReplyHeader{}
				m13.Decode(dBuf)
				m.SetReplyTo(m13)
			}
			if (flags & (1 << 7)) != 0 {
				c14 := dBuf.Int()
				if c14 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
					return dBuf.GetError()
				}
				l14 := dBuf.Int()
				v14 := make([]*MessageEntity, l14)
				for i := int32(0); i < l14; i++ {
					v14[i] = &MessageEntity{}
					v14[i].Decode(dBuf)
				}
				m.SetEntities(v14)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateShortMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateShortChatMessage
func MakeTLUpdateShortChatMessage(data2 *Updates) *TLUpdateShortChatMessage {
	if data2 == nil {
		return &TLUpdateShortChatMessage{Data2: &Updates{
			PredicateName: Predicate_updateShortChatMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateShortChatMessage
		return &TLUpdateShortChatMessage{Data2: data2}
	}
}

func (m *TLUpdateShortChatMessage) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updateShortChatMessage
	return m.Data2
}

//// flags
func (m *TLUpdateShortChatMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortChatMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortChatMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortChatMessage) GetMentioned() bool  { return m.Data2.Mentioned }

func (m *TLUpdateShortChatMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortChatMessage) GetMediaUnread() bool  { return m.Data2.MediaUnread }

func (m *TLUpdateShortChatMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortChatMessage) GetSilent() bool  { return m.Data2.Silent }

func (m *TLUpdateShortChatMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortChatMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortChatMessage) SetFromId(v int64) { m.Data2.FromId = v }
func (m *TLUpdateShortChatMessage) GetFromId() int64  { return m.Data2.FromId }

func (m *TLUpdateShortChatMessage) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLUpdateShortChatMessage) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLUpdateShortChatMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortChatMessage) GetMessage() string  { return m.Data2.Message }

func (m *TLUpdateShortChatMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortChatMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortChatMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortChatMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortChatMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortChatMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortChatMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortChatMessage) GetFwdFrom() *MessageFwdHeader  { return m.Data2.FwdFrom }

func (m *TLUpdateShortChatMessage) SetViaBotId(v *types.Int64Value) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortChatMessage) GetViaBotId() *types.Int64Value  { return m.Data2.ViaBotId }

func (m *TLUpdateShortChatMessage) SetReplyTo(v *MessageReplyHeader) { m.Data2.ReplyTo = v }
func (m *TLUpdateShortChatMessage) GetReplyTo() *MessageReplyHeader  { return m.Data2.ReplyTo }

func (m *TLUpdateShortChatMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortChatMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLUpdateShortChatMessage) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLUpdateShortChatMessage) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLUpdateShortChatMessage) GetPredicateName() string {
	return Predicate_updateShortChatMessage
}

func (m *TLUpdateShortChatMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4d6deea5: func() []byte {
			x.UInt(0x4d6deea5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}
				if m.GetMentioned() == true {
					flags |= 1 << 4
				}
				if m.GetMediaUnread() == true {
					flags |= 1 << 5
				}
				if m.GetSilent() == true {
					flags |= 1 << 13
				}

				if m.GetFwdFrom() != nil {
					flags |= 1 << 2
				}
				if m.GetViaBotId() != nil {
					flags |= 1 << 11
				}
				if m.GetReplyTo() != nil {
					flags |= 1 << 3
				}
				if m.GetEntities() != nil {
					flags |= 1 << 7
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.Long(m.GetFromId())
			x.Long(m.GetChatId())
			x.String(m.GetMessage())
			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetDate())
			if m.GetFwdFrom() != nil {
				x.Bytes(m.GetFwdFrom().Encode(layer))
			}

			if m.GetViaBotId() != nil {
				x.Long(m.GetViaBotId().Value)
			}

			if m.GetReplyTo() != nil {
				x.Bytes(m.GetReplyTo().Encode(layer))
			}

			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateShortChatMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateShortChatMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateShortChatMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateShortChatMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4d6deea5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetMentioned(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetMediaUnread(true)
			}
			if (flags & (1 << 13)) != 0 {
				m.SetSilent(true)
			}
			m.SetId(dBuf.Int())
			m.SetFromId(dBuf.Long())
			m.SetChatId(dBuf.Long())
			m.SetMessage(dBuf.String())
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 2)) != 0 {
				m11 := &MessageFwdHeader{}
				m11.Decode(dBuf)
				m.SetFwdFrom(m11)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetViaBotId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 3)) != 0 {
				m13 := &MessageReplyHeader{}
				m13.Decode(dBuf)
				m.SetReplyTo(m13)
			}
			if (flags & (1 << 7)) != 0 {
				c14 := dBuf.Int()
				if c14 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
					return dBuf.GetError()
				}
				l14 := dBuf.Int()
				v14 := make([]*MessageEntity, l14)
				for i := int32(0); i < l14; i++ {
					v14[i] = &MessageEntity{}
					v14[i].Decode(dBuf)
				}
				m.SetEntities(v14)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateShortChatMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateShort
func MakeTLUpdateShort(data2 *Updates) *TLUpdateShort {
	if data2 == nil {
		return &TLUpdateShort{Data2: &Updates{
			PredicateName: Predicate_updateShort,
		}}
	} else {
		data2.PredicateName = Predicate_updateShort
		return &TLUpdateShort{Data2: data2}
	}
}

func (m *TLUpdateShort) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updateShort
	return m.Data2
}

func (m *TLUpdateShort) SetUpdate(v *Update) { m.Data2.Update = v }
func (m *TLUpdateShort) GetUpdate() *Update  { return m.Data2.Update }

func (m *TLUpdateShort) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShort) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShort) GetPredicateName() string {
	return Predicate_updateShort
}

func (m *TLUpdateShort) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x78d4dec1: func() []byte {
			x.UInt(0x78d4dec1)

			x.Bytes(m.GetUpdate().Encode(layer))
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateShort, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateShort, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateShort) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateShort) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x78d4dec1: func() error {

			m18 := &Update{}
			m18.Decode(dBuf)
			m.SetUpdate(m18)

			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateShort) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdatesCombined
func MakeTLUpdatesCombined(data2 *Updates) *TLUpdatesCombined {
	if data2 == nil {
		return &TLUpdatesCombined{Data2: &Updates{
			PredicateName: Predicate_updatesCombined,
		}}
	} else {
		data2.PredicateName = Predicate_updatesCombined
		return &TLUpdatesCombined{Data2: data2}
	}
}

func (m *TLUpdatesCombined) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updatesCombined
	return m.Data2
}

func (m *TLUpdatesCombined) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdatesCombined) GetUpdates() []*Update  { return m.Data2.Updates }

func (m *TLUpdatesCombined) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesCombined) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdatesCombined) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesCombined) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdatesCombined) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesCombined) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdatesCombined) SetSeqStart(v int32) { m.Data2.SeqStart = v }
func (m *TLUpdatesCombined) GetSeqStart() int32  { return m.Data2.SeqStart }

func (m *TLUpdatesCombined) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesCombined) GetSeq() int32  { return m.Data2.Seq }

func (m *TLUpdatesCombined) GetPredicateName() string {
	return Predicate_updatesCombined
}

func (m *TLUpdatesCombined) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x725b04c3: func() []byte {
			x.UInt(0x725b04c3)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUpdates())))
			for _, v := range m.GetUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetDate())
			x.Int(m.GetSeqStart())
			x.Int(m.GetSeq())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updatesCombined, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updatesCombined, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdatesCombined) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesCombined) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x725b04c3: func() error {
			c19 := dBuf.Int()
			if c19 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 19, c19)
				return dBuf.GetError()
			}
			l19 := dBuf.Int()
			v19 := make([]*Update, l19)
			for i := int32(0); i < l19; i++ {
				v19[i] = &Update{}
				v19[i].Decode(dBuf)
			}
			m.SetUpdates(v19)

			c20 := dBuf.Int()
			if c20 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 20, c20)
				return dBuf.GetError()
			}
			l20 := dBuf.Int()
			v20 := make([]*User, l20)
			for i := int32(0); i < l20; i++ {
				v20[i] = &User{}
				v20[i].Decode(dBuf)
			}
			m.SetUsers(v20)

			c21 := dBuf.Int()
			if c21 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 21, c21)
				return dBuf.GetError()
			}
			l21 := dBuf.Int()
			v21 := make([]*Chat, l21)
			for i := int32(0); i < l21; i++ {
				v21[i] = &Chat{}
				v21[i].Decode(dBuf)
			}
			m.SetChats(v21)

			m.SetDate(dBuf.Int())
			m.SetSeqStart(dBuf.Int())
			m.SetSeq(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdatesCombined) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdates
func MakeTLUpdates(data2 *Updates) *TLUpdates {
	if data2 == nil {
		return &TLUpdates{Data2: &Updates{
			PredicateName: Predicate_updates,
		}}
	} else {
		data2.PredicateName = Predicate_updates
		return &TLUpdates{Data2: data2}
	}
}

func (m *TLUpdates) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updates
	return m.Data2
}

func (m *TLUpdates) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdates) GetUpdates() []*Update  { return m.Data2.Updates }

func (m *TLUpdates) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdates) GetUsers() []*User  { return m.Data2.Users }

func (m *TLUpdates) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdates) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLUpdates) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdates) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdates) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdates) GetSeq() int32  { return m.Data2.Seq }

func (m *TLUpdates) GetPredicateName() string {
	return Predicate_updates
}

func (m *TLUpdates) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x74ae4240: func() []byte {
			x.UInt(0x74ae4240)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUpdates())))
			for _, v := range m.GetUpdates() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetDate())
			x.Int(m.GetSeq())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updates, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updates, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdates) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdates) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x74ae4240: func() error {
			c19 := dBuf.Int()
			if c19 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 19, c19)
				return dBuf.GetError()
			}
			l19 := dBuf.Int()
			v19 := make([]*Update, l19)
			for i := int32(0); i < l19; i++ {
				v19[i] = &Update{}
				v19[i].Decode(dBuf)
			}
			m.SetUpdates(v19)

			c20 := dBuf.Int()
			if c20 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 20, c20)
				return dBuf.GetError()
			}
			l20 := dBuf.Int()
			v20 := make([]*User, l20)
			for i := int32(0); i < l20; i++ {
				v20[i] = &User{}
				v20[i].Decode(dBuf)
			}
			m.SetUsers(v20)

			c21 := dBuf.Int()
			if c21 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 21, c21)
				return dBuf.GetError()
			}
			l21 := dBuf.Int()
			v21 := make([]*Chat, l21)
			for i := int32(0); i < l21; i++ {
				v21[i] = &Chat{}
				v21[i].Decode(dBuf)
			}
			m.SetChats(v21)

			m.SetDate(dBuf.Int())
			m.SetSeq(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdates) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateShortSentMessage
func MakeTLUpdateShortSentMessage(data2 *Updates) *TLUpdateShortSentMessage {
	if data2 == nil {
		return &TLUpdateShortSentMessage{Data2: &Updates{
			PredicateName: Predicate_updateShortSentMessage,
		}}
	} else {
		data2.PredicateName = Predicate_updateShortSentMessage
		return &TLUpdateShortSentMessage{Data2: data2}
	}
}

func (m *TLUpdateShortSentMessage) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updateShortSentMessage
	return m.Data2
}

//// flags
func (m *TLUpdateShortSentMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortSentMessage) GetOut() bool  { return m.Data2.Out }

func (m *TLUpdateShortSentMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortSentMessage) GetId() int32  { return m.Data2.Id }

func (m *TLUpdateShortSentMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortSentMessage) GetPts() int32  { return m.Data2.Pts }

func (m *TLUpdateShortSentMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortSentMessage) GetPtsCount() int32  { return m.Data2.PtsCount }

func (m *TLUpdateShortSentMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortSentMessage) GetDate() int32  { return m.Data2.Date }

func (m *TLUpdateShortSentMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateShortSentMessage) GetMedia() *MessageMedia  { return m.Data2.Media }

func (m *TLUpdateShortSentMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortSentMessage) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLUpdateShortSentMessage) SetTtlPeriod(v *types.Int32Value) { m.Data2.TtlPeriod = v }
func (m *TLUpdateShortSentMessage) GetTtlPeriod() *types.Int32Value  { return m.Data2.TtlPeriod }

func (m *TLUpdateShortSentMessage) GetPredicateName() string {
	return Predicate_updateShortSentMessage
}

func (m *TLUpdateShortSentMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9015e101: func() []byte {
			x.UInt(0x9015e101)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetOut() == true {
					flags |= 1 << 1
				}

				if m.GetMedia() != nil {
					flags |= 1 << 9
				}
				if m.GetEntities() != nil {
					flags |= 1 << 7
				}
				if m.GetTtlPeriod() != nil {
					flags |= 1 << 25
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.Int(m.GetPts())
			x.Int(m.GetPtsCount())
			x.Int(m.GetDate())
			if m.GetMedia() != nil {
				x.Bytes(m.GetMedia().Encode(layer))
			}

			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTtlPeriod() != nil {
				x.Int(m.GetTtlPeriod().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateShortSentMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateShortSentMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateShortSentMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateShortSentMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9015e101: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetOut(true)
			}
			m.SetId(dBuf.Int())
			m.SetPts(dBuf.Int())
			m.SetPtsCount(dBuf.Int())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 9)) != 0 {
				m24 := &MessageMedia{}
				m24.Decode(dBuf)
				m.SetMedia(m24)
			}
			if (flags & (1 << 7)) != 0 {
				c14 := dBuf.Int()
				if c14 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
					return dBuf.GetError()
				}
				l14 := dBuf.Int()
				v14 := make([]*MessageEntity, l14)
				for i := int32(0); i < l14; i++ {
					v14[i] = &MessageEntity{}
					v14[i].Decode(dBuf)
				}
				m.SetEntities(v14)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetTtlPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateShortSentMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUpdateAccountResetAuthorization
func MakeTLUpdateAccountResetAuthorization(data2 *Updates) *TLUpdateAccountResetAuthorization {
	if data2 == nil {
		return &TLUpdateAccountResetAuthorization{Data2: &Updates{
			PredicateName: Predicate_updateAccountResetAuthorization,
		}}
	} else {
		data2.PredicateName = Predicate_updateAccountResetAuthorization
		return &TLUpdateAccountResetAuthorization{Data2: data2}
	}
}

func (m *TLUpdateAccountResetAuthorization) To_Updates() *Updates {
	m.Data2.PredicateName = Predicate_updateAccountResetAuthorization
	return m.Data2
}

func (m *TLUpdateAccountResetAuthorization) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLUpdateAccountResetAuthorization) GetUserId() int64  { return m.Data2.UserId }

func (m *TLUpdateAccountResetAuthorization) SetAuthKeyId(v int64) { m.Data2.AuthKeyId = v }
func (m *TLUpdateAccountResetAuthorization) GetAuthKeyId() int64  { return m.Data2.AuthKeyId }

func (m *TLUpdateAccountResetAuthorization) GetPredicateName() string {
	return Predicate_updateAccountResetAuthorization
}

func (m *TLUpdateAccountResetAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1194cd3d: func() []byte {
			x.UInt(0x1194cd3d)

			x.Long(m.GetUserId())
			x.Long(m.GetAuthKeyId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_updateAccountResetAuthorization, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_updateAccountResetAuthorization, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUpdateAccountResetAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdateAccountResetAuthorization) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1194cd3d: func() error {
			m.SetUserId(dBuf.Long())
			m.SetAuthKeyId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUpdateAccountResetAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputGame <--
//  + TL_InputGameID
//  + TL_InputGameShortName
//

func (m *InputGame) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputGameID:
		t := m.To_InputGameID()
		xBuf = t.Encode(layer)
	case Predicate_inputGameShortName:
		t := m.To_InputGameShortName()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputGame) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x32c3e77:
		m2 := MakeTLInputGameID(m)
		m2.Decode(dBuf)
	case 0xc331e80a:
		m2 := MakeTLInputGameShortName(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputGame) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputGameID:
		t := m.To_InputGameID()
		return t.DebugString()
	case Predicate_inputGameShortName:
		t := m.To_InputGameShortName()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputGameID
func (m *InputGame) To_InputGameID() *TLInputGameID {
	m.PredicateName = Predicate_inputGameID
	return &TLInputGameID{
		Data2: m,
	}
}

// To_InputGameShortName
func (m *InputGame) To_InputGameShortName() *TLInputGameShortName {
	m.PredicateName = Predicate_inputGameShortName
	return &TLInputGameShortName{
		Data2: m,
	}
}

// MakeTLInputGameID
func MakeTLInputGameID(data2 *InputGame) *TLInputGameID {
	if data2 == nil {
		return &TLInputGameID{Data2: &InputGame{
			PredicateName: Predicate_inputGameID,
		}}
	} else {
		data2.PredicateName = Predicate_inputGameID
		return &TLInputGameID{Data2: data2}
	}
}

func (m *TLInputGameID) To_InputGame() *InputGame {
	m.Data2.PredicateName = Predicate_inputGameID
	return m.Data2
}

func (m *TLInputGameID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputGameID) GetId() int64  { return m.Data2.Id }

func (m *TLInputGameID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputGameID) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputGameID) GetPredicateName() string {
	return Predicate_inputGameID
}

func (m *TLInputGameID) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x32c3e77: func() []byte {
			x.UInt(0x32c3e77)

			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGameID, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGameID, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGameID) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGameID) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x32c3e77: func() error {
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGameID) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputGameShortName
func MakeTLInputGameShortName(data2 *InputGame) *TLInputGameShortName {
	if data2 == nil {
		return &TLInputGameShortName{Data2: &InputGame{
			PredicateName: Predicate_inputGameShortName,
		}}
	} else {
		data2.PredicateName = Predicate_inputGameShortName
		return &TLInputGameShortName{Data2: data2}
	}
}

func (m *TLInputGameShortName) To_InputGame() *InputGame {
	m.Data2.PredicateName = Predicate_inputGameShortName
	return m.Data2
}

func (m *TLInputGameShortName) SetBotId(v *InputUser) { m.Data2.BotId = v }
func (m *TLInputGameShortName) GetBotId() *InputUser  { return m.Data2.BotId }

func (m *TLInputGameShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputGameShortName) GetShortName() string  { return m.Data2.ShortName }

func (m *TLInputGameShortName) GetPredicateName() string {
	return Predicate_inputGameShortName
}

func (m *TLInputGameShortName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc331e80a: func() []byte {
			x.UInt(0xc331e80a)

			x.Bytes(m.GetBotId().Encode(layer))
			x.String(m.GetShortName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputGameShortName, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputGameShortName, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputGameShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputGameShortName) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc331e80a: func() error {

			m2 := &InputUser{}
			m2.Decode(dBuf)
			m.SetBotId(m2)

			m.SetShortName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputGameShortName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// RichText <--
//  + TL_TextEmpty
//  + TL_TextPlain
//  + TL_TextBold
//  + TL_TextItalic
//  + TL_TextUnderline
//  + TL_TextStrike
//  + TL_TextFixed
//  + TL_TextUrl
//  + TL_TextEmail
//  + TL_TextConcat
//  + TL_TextSubscript
//  + TL_TextSuperscript
//  + TL_TextMarked
//  + TL_TextPhone
//  + TL_TextImage
//  + TL_TextAnchor
//

func (m *RichText) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_textEmpty:
		t := m.To_TextEmpty()
		xBuf = t.Encode(layer)
	case Predicate_textPlain:
		t := m.To_TextPlain()
		xBuf = t.Encode(layer)
	case Predicate_textBold:
		t := m.To_TextBold()
		xBuf = t.Encode(layer)
	case Predicate_textItalic:
		t := m.To_TextItalic()
		xBuf = t.Encode(layer)
	case Predicate_textUnderline:
		t := m.To_TextUnderline()
		xBuf = t.Encode(layer)
	case Predicate_textStrike:
		t := m.To_TextStrike()
		xBuf = t.Encode(layer)
	case Predicate_textFixed:
		t := m.To_TextFixed()
		xBuf = t.Encode(layer)
	case Predicate_textUrl:
		t := m.To_TextUrl()
		xBuf = t.Encode(layer)
	case Predicate_textEmail:
		t := m.To_TextEmail()
		xBuf = t.Encode(layer)
	case Predicate_textConcat:
		t := m.To_TextConcat()
		xBuf = t.Encode(layer)
	case Predicate_textSubscript:
		t := m.To_TextSubscript()
		xBuf = t.Encode(layer)
	case Predicate_textSuperscript:
		t := m.To_TextSuperscript()
		xBuf = t.Encode(layer)
	case Predicate_textMarked:
		t := m.To_TextMarked()
		xBuf = t.Encode(layer)
	case Predicate_textPhone:
		t := m.To_TextPhone()
		xBuf = t.Encode(layer)
	case Predicate_textImage:
		t := m.To_TextImage()
		xBuf = t.Encode(layer)
	case Predicate_textAnchor:
		t := m.To_TextAnchor()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *RichText) CalcByteSize(layer int32) int {
	return 0
}

func (m *RichText) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdc3d824f:
		m2 := MakeTLTextEmpty(m)
		m2.Decode(dBuf)
	case 0x744694e0:
		m2 := MakeTLTextPlain(m)
		m2.Decode(dBuf)
	case 0x6724abc4:
		m2 := MakeTLTextBold(m)
		m2.Decode(dBuf)
	case 0xd912a59c:
		m2 := MakeTLTextItalic(m)
		m2.Decode(dBuf)
	case 0xc12622c4:
		m2 := MakeTLTextUnderline(m)
		m2.Decode(dBuf)
	case 0x9bf8bb95:
		m2 := MakeTLTextStrike(m)
		m2.Decode(dBuf)
	case 0x6c3f19b9:
		m2 := MakeTLTextFixed(m)
		m2.Decode(dBuf)
	case 0x3c2884c1:
		m2 := MakeTLTextUrl(m)
		m2.Decode(dBuf)
	case 0xde5a0dd6:
		m2 := MakeTLTextEmail(m)
		m2.Decode(dBuf)
	case 0x7e6260d7:
		m2 := MakeTLTextConcat(m)
		m2.Decode(dBuf)
	case 0xed6a8504:
		m2 := MakeTLTextSubscript(m)
		m2.Decode(dBuf)
	case 0xc7fb5e01:
		m2 := MakeTLTextSuperscript(m)
		m2.Decode(dBuf)
	case 0x34b8621:
		m2 := MakeTLTextMarked(m)
		m2.Decode(dBuf)
	case 0x1ccb966a:
		m2 := MakeTLTextPhone(m)
		m2.Decode(dBuf)
	case 0x81ccf4f:
		m2 := MakeTLTextImage(m)
		m2.Decode(dBuf)
	case 0x35553762:
		m2 := MakeTLTextAnchor(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *RichText) DebugString() string {
	switch m.PredicateName {
	case Predicate_textEmpty:
		t := m.To_TextEmpty()
		return t.DebugString()
	case Predicate_textPlain:
		t := m.To_TextPlain()
		return t.DebugString()
	case Predicate_textBold:
		t := m.To_TextBold()
		return t.DebugString()
	case Predicate_textItalic:
		t := m.To_TextItalic()
		return t.DebugString()
	case Predicate_textUnderline:
		t := m.To_TextUnderline()
		return t.DebugString()
	case Predicate_textStrike:
		t := m.To_TextStrike()
		return t.DebugString()
	case Predicate_textFixed:
		t := m.To_TextFixed()
		return t.DebugString()
	case Predicate_textUrl:
		t := m.To_TextUrl()
		return t.DebugString()
	case Predicate_textEmail:
		t := m.To_TextEmail()
		return t.DebugString()
	case Predicate_textConcat:
		t := m.To_TextConcat()
		return t.DebugString()
	case Predicate_textSubscript:
		t := m.To_TextSubscript()
		return t.DebugString()
	case Predicate_textSuperscript:
		t := m.To_TextSuperscript()
		return t.DebugString()
	case Predicate_textMarked:
		t := m.To_TextMarked()
		return t.DebugString()
	case Predicate_textPhone:
		t := m.To_TextPhone()
		return t.DebugString()
	case Predicate_textImage:
		t := m.To_TextImage()
		return t.DebugString()
	case Predicate_textAnchor:
		t := m.To_TextAnchor()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_TextEmpty
func (m *RichText) To_TextEmpty() *TLTextEmpty {
	m.PredicateName = Predicate_textEmpty
	return &TLTextEmpty{
		Data2: m,
	}
}

// To_TextPlain
func (m *RichText) To_TextPlain() *TLTextPlain {
	m.PredicateName = Predicate_textPlain
	return &TLTextPlain{
		Data2: m,
	}
}

// To_TextBold
func (m *RichText) To_TextBold() *TLTextBold {
	m.PredicateName = Predicate_textBold
	return &TLTextBold{
		Data2: m,
	}
}

// To_TextItalic
func (m *RichText) To_TextItalic() *TLTextItalic {
	m.PredicateName = Predicate_textItalic
	return &TLTextItalic{
		Data2: m,
	}
}

// To_TextUnderline
func (m *RichText) To_TextUnderline() *TLTextUnderline {
	m.PredicateName = Predicate_textUnderline
	return &TLTextUnderline{
		Data2: m,
	}
}

// To_TextStrike
func (m *RichText) To_TextStrike() *TLTextStrike {
	m.PredicateName = Predicate_textStrike
	return &TLTextStrike{
		Data2: m,
	}
}

// To_TextFixed
func (m *RichText) To_TextFixed() *TLTextFixed {
	m.PredicateName = Predicate_textFixed
	return &TLTextFixed{
		Data2: m,
	}
}

// To_TextUrl
func (m *RichText) To_TextUrl() *TLTextUrl {
	m.PredicateName = Predicate_textUrl
	return &TLTextUrl{
		Data2: m,
	}
}

// To_TextEmail
func (m *RichText) To_TextEmail() *TLTextEmail {
	m.PredicateName = Predicate_textEmail
	return &TLTextEmail{
		Data2: m,
	}
}

// To_TextConcat
func (m *RichText) To_TextConcat() *TLTextConcat {
	m.PredicateName = Predicate_textConcat
	return &TLTextConcat{
		Data2: m,
	}
}

// To_TextSubscript
func (m *RichText) To_TextSubscript() *TLTextSubscript {
	m.PredicateName = Predicate_textSubscript
	return &TLTextSubscript{
		Data2: m,
	}
}

// To_TextSuperscript
func (m *RichText) To_TextSuperscript() *TLTextSuperscript {
	m.PredicateName = Predicate_textSuperscript
	return &TLTextSuperscript{
		Data2: m,
	}
}

// To_TextMarked
func (m *RichText) To_TextMarked() *TLTextMarked {
	m.PredicateName = Predicate_textMarked
	return &TLTextMarked{
		Data2: m,
	}
}

// To_TextPhone
func (m *RichText) To_TextPhone() *TLTextPhone {
	m.PredicateName = Predicate_textPhone
	return &TLTextPhone{
		Data2: m,
	}
}

// To_TextImage
func (m *RichText) To_TextImage() *TLTextImage {
	m.PredicateName = Predicate_textImage
	return &TLTextImage{
		Data2: m,
	}
}

// To_TextAnchor
func (m *RichText) To_TextAnchor() *TLTextAnchor {
	m.PredicateName = Predicate_textAnchor
	return &TLTextAnchor{
		Data2: m,
	}
}

// MakeTLTextEmpty
func MakeTLTextEmpty(data2 *RichText) *TLTextEmpty {
	if data2 == nil {
		return &TLTextEmpty{Data2: &RichText{
			PredicateName: Predicate_textEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_textEmpty
		return &TLTextEmpty{Data2: data2}
	}
}

func (m *TLTextEmpty) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textEmpty
	return m.Data2
}

func (m *TLTextEmpty) GetPredicateName() string {
	return Predicate_textEmpty
}

func (m *TLTextEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdc3d824f: func() []byte {
			x.UInt(0xdc3d824f)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdc3d824f: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextPlain
func MakeTLTextPlain(data2 *RichText) *TLTextPlain {
	if data2 == nil {
		return &TLTextPlain{Data2: &RichText{
			PredicateName: Predicate_textPlain,
		}}
	} else {
		data2.PredicateName = Predicate_textPlain
		return &TLTextPlain{Data2: data2}
	}
}

func (m *TLTextPlain) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textPlain
	return m.Data2
}

func (m *TLTextPlain) SetText_STRING(v string) { m.Data2.Text_STRING = v }
func (m *TLTextPlain) GetText_STRING() string  { return m.Data2.Text_STRING }

func (m *TLTextPlain) GetPredicateName() string {
	return Predicate_textPlain
}

func (m *TLTextPlain) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x744694e0: func() []byte {
			x.UInt(0x744694e0)

			x.String(m.GetText_STRING())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textPlain, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textPlain, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextPlain) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextPlain) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x744694e0: func() error {
			m.SetText_STRING(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextPlain) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextBold
func MakeTLTextBold(data2 *RichText) *TLTextBold {
	if data2 == nil {
		return &TLTextBold{Data2: &RichText{
			PredicateName: Predicate_textBold,
		}}
	} else {
		data2.PredicateName = Predicate_textBold
		return &TLTextBold{Data2: data2}
	}
}

func (m *TLTextBold) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textBold
	return m.Data2
}

func (m *TLTextBold) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextBold) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextBold) GetPredicateName() string {
	return Predicate_textBold
}

func (m *TLTextBold) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6724abc4: func() []byte {
			x.UInt(0x6724abc4)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textBold, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textBold, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextBold) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextBold) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6724abc4: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextBold) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextItalic
func MakeTLTextItalic(data2 *RichText) *TLTextItalic {
	if data2 == nil {
		return &TLTextItalic{Data2: &RichText{
			PredicateName: Predicate_textItalic,
		}}
	} else {
		data2.PredicateName = Predicate_textItalic
		return &TLTextItalic{Data2: data2}
	}
}

func (m *TLTextItalic) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textItalic
	return m.Data2
}

func (m *TLTextItalic) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextItalic) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextItalic) GetPredicateName() string {
	return Predicate_textItalic
}

func (m *TLTextItalic) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd912a59c: func() []byte {
			x.UInt(0xd912a59c)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textItalic, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textItalic, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextItalic) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextItalic) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd912a59c: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextItalic) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextUnderline
func MakeTLTextUnderline(data2 *RichText) *TLTextUnderline {
	if data2 == nil {
		return &TLTextUnderline{Data2: &RichText{
			PredicateName: Predicate_textUnderline,
		}}
	} else {
		data2.PredicateName = Predicate_textUnderline
		return &TLTextUnderline{Data2: data2}
	}
}

func (m *TLTextUnderline) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textUnderline
	return m.Data2
}

func (m *TLTextUnderline) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextUnderline) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextUnderline) GetPredicateName() string {
	return Predicate_textUnderline
}

func (m *TLTextUnderline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc12622c4: func() []byte {
			x.UInt(0xc12622c4)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textUnderline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textUnderline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextUnderline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextUnderline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc12622c4: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextUnderline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextStrike
func MakeTLTextStrike(data2 *RichText) *TLTextStrike {
	if data2 == nil {
		return &TLTextStrike{Data2: &RichText{
			PredicateName: Predicate_textStrike,
		}}
	} else {
		data2.PredicateName = Predicate_textStrike
		return &TLTextStrike{Data2: data2}
	}
}

func (m *TLTextStrike) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textStrike
	return m.Data2
}

func (m *TLTextStrike) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextStrike) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextStrike) GetPredicateName() string {
	return Predicate_textStrike
}

func (m *TLTextStrike) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9bf8bb95: func() []byte {
			x.UInt(0x9bf8bb95)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textStrike, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textStrike, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextStrike) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextStrike) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9bf8bb95: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextStrike) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextFixed
func MakeTLTextFixed(data2 *RichText) *TLTextFixed {
	if data2 == nil {
		return &TLTextFixed{Data2: &RichText{
			PredicateName: Predicate_textFixed,
		}}
	} else {
		data2.PredicateName = Predicate_textFixed
		return &TLTextFixed{Data2: data2}
	}
}

func (m *TLTextFixed) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textFixed
	return m.Data2
}

func (m *TLTextFixed) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextFixed) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextFixed) GetPredicateName() string {
	return Predicate_textFixed
}

func (m *TLTextFixed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6c3f19b9: func() []byte {
			x.UInt(0x6c3f19b9)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textFixed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textFixed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextFixed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextFixed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6c3f19b9: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextFixed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextUrl
func MakeTLTextUrl(data2 *RichText) *TLTextUrl {
	if data2 == nil {
		return &TLTextUrl{Data2: &RichText{
			PredicateName: Predicate_textUrl,
		}}
	} else {
		data2.PredicateName = Predicate_textUrl
		return &TLTextUrl{Data2: data2}
	}
}

func (m *TLTextUrl) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textUrl
	return m.Data2
}

func (m *TLTextUrl) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextUrl) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLTextUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLTextUrl) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLTextUrl) GetWebpageId() int64  { return m.Data2.WebpageId }

func (m *TLTextUrl) GetPredicateName() string {
	return Predicate_textUrl
}

func (m *TLTextUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3c2884c1: func() []byte {
			x.UInt(0x3c2884c1)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			x.String(m.GetUrl())
			x.Long(m.GetWebpageId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3c2884c1: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			m.SetUrl(dBuf.String())
			m.SetWebpageId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextEmail
func MakeTLTextEmail(data2 *RichText) *TLTextEmail {
	if data2 == nil {
		return &TLTextEmail{Data2: &RichText{
			PredicateName: Predicate_textEmail,
		}}
	} else {
		data2.PredicateName = Predicate_textEmail
		return &TLTextEmail{Data2: data2}
	}
}

func (m *TLTextEmail) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textEmail
	return m.Data2
}

func (m *TLTextEmail) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextEmail) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLTextEmail) GetEmail() string  { return m.Data2.Email }

func (m *TLTextEmail) GetPredicateName() string {
	return Predicate_textEmail
}

func (m *TLTextEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xde5a0dd6: func() []byte {
			x.UInt(0xde5a0dd6)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			x.String(m.GetEmail())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textEmail, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textEmail, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextEmail) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xde5a0dd6: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			m.SetEmail(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextConcat
func MakeTLTextConcat(data2 *RichText) *TLTextConcat {
	if data2 == nil {
		return &TLTextConcat{Data2: &RichText{
			PredicateName: Predicate_textConcat,
		}}
	} else {
		data2.PredicateName = Predicate_textConcat
		return &TLTextConcat{Data2: data2}
	}
}

func (m *TLTextConcat) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textConcat
	return m.Data2
}

func (m *TLTextConcat) SetTexts(v []*RichText) { m.Data2.Texts = v }
func (m *TLTextConcat) GetTexts() []*RichText  { return m.Data2.Texts }

func (m *TLTextConcat) GetPredicateName() string {
	return Predicate_textConcat
}

func (m *TLTextConcat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7e6260d7: func() []byte {
			x.UInt(0x7e6260d7)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTexts())))
			for _, v := range m.GetTexts() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textConcat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textConcat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextConcat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextConcat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7e6260d7: func() error {
			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*RichText, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &RichText{}
				v4[i].Decode(dBuf)
			}
			m.SetTexts(v4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextConcat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextSubscript
func MakeTLTextSubscript(data2 *RichText) *TLTextSubscript {
	if data2 == nil {
		return &TLTextSubscript{Data2: &RichText{
			PredicateName: Predicate_textSubscript,
		}}
	} else {
		data2.PredicateName = Predicate_textSubscript
		return &TLTextSubscript{Data2: data2}
	}
}

func (m *TLTextSubscript) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textSubscript
	return m.Data2
}

func (m *TLTextSubscript) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextSubscript) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextSubscript) GetPredicateName() string {
	return Predicate_textSubscript
}

func (m *TLTextSubscript) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xed6a8504: func() []byte {
			x.UInt(0xed6a8504)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textSubscript, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textSubscript, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextSubscript) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextSubscript) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xed6a8504: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextSubscript) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextSuperscript
func MakeTLTextSuperscript(data2 *RichText) *TLTextSuperscript {
	if data2 == nil {
		return &TLTextSuperscript{Data2: &RichText{
			PredicateName: Predicate_textSuperscript,
		}}
	} else {
		data2.PredicateName = Predicate_textSuperscript
		return &TLTextSuperscript{Data2: data2}
	}
}

func (m *TLTextSuperscript) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textSuperscript
	return m.Data2
}

func (m *TLTextSuperscript) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextSuperscript) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextSuperscript) GetPredicateName() string {
	return Predicate_textSuperscript
}

func (m *TLTextSuperscript) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc7fb5e01: func() []byte {
			x.UInt(0xc7fb5e01)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textSuperscript, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textSuperscript, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextSuperscript) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextSuperscript) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc7fb5e01: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextSuperscript) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextMarked
func MakeTLTextMarked(data2 *RichText) *TLTextMarked {
	if data2 == nil {
		return &TLTextMarked{Data2: &RichText{
			PredicateName: Predicate_textMarked,
		}}
	} else {
		data2.PredicateName = Predicate_textMarked
		return &TLTextMarked{Data2: data2}
	}
}

func (m *TLTextMarked) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textMarked
	return m.Data2
}

func (m *TLTextMarked) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextMarked) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextMarked) GetPredicateName() string {
	return Predicate_textMarked
}

func (m *TLTextMarked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x34b8621: func() []byte {
			x.UInt(0x34b8621)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textMarked, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textMarked, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextMarked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextMarked) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x34b8621: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextMarked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextPhone
func MakeTLTextPhone(data2 *RichText) *TLTextPhone {
	if data2 == nil {
		return &TLTextPhone{Data2: &RichText{
			PredicateName: Predicate_textPhone,
		}}
	} else {
		data2.PredicateName = Predicate_textPhone
		return &TLTextPhone{Data2: data2}
	}
}

func (m *TLTextPhone) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textPhone
	return m.Data2
}

func (m *TLTextPhone) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextPhone) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLTextPhone) GetPhone() string  { return m.Data2.Phone }

func (m *TLTextPhone) GetPredicateName() string {
	return Predicate_textPhone
}

func (m *TLTextPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1ccb966a: func() []byte {
			x.UInt(0x1ccb966a)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			x.String(m.GetPhone())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textPhone, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textPhone, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextPhone) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1ccb966a: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			m.SetPhone(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextImage
func MakeTLTextImage(data2 *RichText) *TLTextImage {
	if data2 == nil {
		return &TLTextImage{Data2: &RichText{
			PredicateName: Predicate_textImage,
		}}
	} else {
		data2.PredicateName = Predicate_textImage
		return &TLTextImage{Data2: data2}
	}
}

func (m *TLTextImage) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textImage
	return m.Data2
}

func (m *TLTextImage) SetDocumentId(v int64) { m.Data2.DocumentId = v }
func (m *TLTextImage) GetDocumentId() int64  { return m.Data2.DocumentId }

func (m *TLTextImage) SetW(v int32) { m.Data2.W = v }
func (m *TLTextImage) GetW() int32  { return m.Data2.W }

func (m *TLTextImage) SetH(v int32) { m.Data2.H = v }
func (m *TLTextImage) GetH() int32  { return m.Data2.H }

func (m *TLTextImage) GetPredicateName() string {
	return Predicate_textImage
}

func (m *TLTextImage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x81ccf4f: func() []byte {
			x.UInt(0x81ccf4f)

			x.Long(m.GetDocumentId())
			x.Int(m.GetW())
			x.Int(m.GetH())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textImage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textImage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextImage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextImage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x81ccf4f: func() error {
			m.SetDocumentId(dBuf.Long())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextImage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLTextAnchor
func MakeTLTextAnchor(data2 *RichText) *TLTextAnchor {
	if data2 == nil {
		return &TLTextAnchor{Data2: &RichText{
			PredicateName: Predicate_textAnchor,
		}}
	} else {
		data2.PredicateName = Predicate_textAnchor
		return &TLTextAnchor{Data2: data2}
	}
}

func (m *TLTextAnchor) To_RichText() *RichText {
	m.Data2.PredicateName = Predicate_textAnchor
	return m.Data2
}

func (m *TLTextAnchor) SetText_RICHTEXT(v *RichText) { m.Data2.Text_RICHTEXT = v }
func (m *TLTextAnchor) GetText_RICHTEXT() *RichText  { return m.Data2.Text_RICHTEXT }

func (m *TLTextAnchor) SetName(v string) { m.Data2.Name = v }
func (m *TLTextAnchor) GetName() string  { return m.Data2.Name }

func (m *TLTextAnchor) GetPredicateName() string {
	return Predicate_textAnchor
}

func (m *TLTextAnchor) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x35553762: func() []byte {
			x.UInt(0x35553762)

			x.Bytes(m.GetText_RICHTEXT().Encode(layer))
			x.String(m.GetName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_textAnchor, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_textAnchor, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLTextAnchor) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTextAnchor) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x35553762: func() error {

			m0 := &RichText{}
			m0.Decode(dBuf)
			m.SetText_RICHTEXT(m0)

			m.SetName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLTextAnchor) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PhoneCallProtocol <--
//  + TL_PhoneCallProtocol
//

func (m *PhoneCallProtocol) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phoneCallProtocol:
		t := m.To_PhoneCallProtocol()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PhoneCallProtocol) CalcByteSize(layer int32) int {
	return 0
}

func (m *PhoneCallProtocol) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xfc878fc8:
		m2 := MakeTLPhoneCallProtocol(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PhoneCallProtocol) DebugString() string {
	switch m.PredicateName {
	case Predicate_phoneCallProtocol:
		t := m.To_PhoneCallProtocol()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneCallProtocol
func (m *PhoneCallProtocol) To_PhoneCallProtocol() *TLPhoneCallProtocol {
	m.PredicateName = Predicate_phoneCallProtocol
	return &TLPhoneCallProtocol{
		Data2: m,
	}
}

// MakeTLPhoneCallProtocol
func MakeTLPhoneCallProtocol(data2 *PhoneCallProtocol) *TLPhoneCallProtocol {
	if data2 == nil {
		return &TLPhoneCallProtocol{Data2: &PhoneCallProtocol{
			PredicateName: Predicate_phoneCallProtocol,
		}}
	} else {
		data2.PredicateName = Predicate_phoneCallProtocol
		return &TLPhoneCallProtocol{Data2: data2}
	}
}

func (m *TLPhoneCallProtocol) To_PhoneCallProtocol() *PhoneCallProtocol {
	m.Data2.PredicateName = Predicate_phoneCallProtocol
	return m.Data2
}

//// flags
func (m *TLPhoneCallProtocol) SetUdpP2P(v bool) { m.Data2.UdpP2P = v }
func (m *TLPhoneCallProtocol) GetUdpP2P() bool  { return m.Data2.UdpP2P }

func (m *TLPhoneCallProtocol) SetUdpReflector(v bool) { m.Data2.UdpReflector = v }
func (m *TLPhoneCallProtocol) GetUdpReflector() bool  { return m.Data2.UdpReflector }

func (m *TLPhoneCallProtocol) SetMinLayer(v int32) { m.Data2.MinLayer = v }
func (m *TLPhoneCallProtocol) GetMinLayer() int32  { return m.Data2.MinLayer }

func (m *TLPhoneCallProtocol) SetMaxLayer(v int32) { m.Data2.MaxLayer = v }
func (m *TLPhoneCallProtocol) GetMaxLayer() int32  { return m.Data2.MaxLayer }

func (m *TLPhoneCallProtocol) SetLibraryVersions(v []string) { m.Data2.LibraryVersions = v }
func (m *TLPhoneCallProtocol) GetLibraryVersions() []string  { return m.Data2.LibraryVersions }

func (m *TLPhoneCallProtocol) GetPredicateName() string {
	return Predicate_phoneCallProtocol
}

func (m *TLPhoneCallProtocol) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfc878fc8: func() []byte {
			x.UInt(0xfc878fc8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetUdpP2P() == true {
					flags |= 1 << 0
				}
				if m.GetUdpReflector() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetMinLayer())
			x.Int(m.GetMaxLayer())

			x.VectorString(m.GetLibraryVersions())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phoneCallProtocol, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phoneCallProtocol, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneCallProtocol) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCallProtocol) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfc878fc8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetUdpP2P(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetUdpReflector(true)
			}
			m.SetMinLayer(dBuf.Int())
			m.SetMaxLayer(dBuf.Int())

			m.SetLibraryVersions(dBuf.VectorString())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneCallProtocol) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_BankCardData <--
//  + TL_PaymentsBankCardData
//

func (m *Payments_BankCardData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_bankCardData:
		t := m.To_PaymentsBankCardData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_BankCardData) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_BankCardData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3e24e573:
		m2 := MakeTLPaymentsBankCardData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_BankCardData) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_bankCardData:
		t := m.To_PaymentsBankCardData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsBankCardData
func (m *Payments_BankCardData) To_PaymentsBankCardData() *TLPaymentsBankCardData {
	m.PredicateName = Predicate_payments_bankCardData
	return &TLPaymentsBankCardData{
		Data2: m,
	}
}

// MakeTLPaymentsBankCardData
func MakeTLPaymentsBankCardData(data2 *Payments_BankCardData) *TLPaymentsBankCardData {
	if data2 == nil {
		return &TLPaymentsBankCardData{Data2: &Payments_BankCardData{
			PredicateName: Predicate_payments_bankCardData,
		}}
	} else {
		data2.PredicateName = Predicate_payments_bankCardData
		return &TLPaymentsBankCardData{Data2: data2}
	}
}

func (m *TLPaymentsBankCardData) To_Payments_BankCardData() *Payments_BankCardData {
	m.Data2.PredicateName = Predicate_payments_bankCardData
	return m.Data2
}

func (m *TLPaymentsBankCardData) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentsBankCardData) GetTitle() string  { return m.Data2.Title }

func (m *TLPaymentsBankCardData) SetOpenUrls(v []*BankCardOpenUrl) { m.Data2.OpenUrls = v }
func (m *TLPaymentsBankCardData) GetOpenUrls() []*BankCardOpenUrl  { return m.Data2.OpenUrls }

func (m *TLPaymentsBankCardData) GetPredicateName() string {
	return Predicate_payments_bankCardData
}

func (m *TLPaymentsBankCardData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3e24e573: func() []byte {
			x.UInt(0x3e24e573)

			x.String(m.GetTitle())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetOpenUrls())))
			for _, v := range m.GetOpenUrls() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_bankCardData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_bankCardData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsBankCardData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsBankCardData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3e24e573: func() error {
			m.SetTitle(dBuf.String())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*BankCardOpenUrl, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &BankCardOpenUrl{}
				v1[i].Decode(dBuf)
			}
			m.SetOpenUrls(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsBankCardData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsAbsValueAndPrev <--
//  + TL_StatsAbsValueAndPrev
//

func (m *StatsAbsValueAndPrev) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsAbsValueAndPrev:
		t := m.To_StatsAbsValueAndPrev()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsAbsValueAndPrev) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsAbsValueAndPrev) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcb43acde:
		m2 := MakeTLStatsAbsValueAndPrev(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsAbsValueAndPrev) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsAbsValueAndPrev:
		t := m.To_StatsAbsValueAndPrev()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsAbsValueAndPrev
func (m *StatsAbsValueAndPrev) To_StatsAbsValueAndPrev() *TLStatsAbsValueAndPrev {
	m.PredicateName = Predicate_statsAbsValueAndPrev
	return &TLStatsAbsValueAndPrev{
		Data2: m,
	}
}

// MakeTLStatsAbsValueAndPrev
func MakeTLStatsAbsValueAndPrev(data2 *StatsAbsValueAndPrev) *TLStatsAbsValueAndPrev {
	if data2 == nil {
		return &TLStatsAbsValueAndPrev{Data2: &StatsAbsValueAndPrev{
			PredicateName: Predicate_statsAbsValueAndPrev,
		}}
	} else {
		data2.PredicateName = Predicate_statsAbsValueAndPrev
		return &TLStatsAbsValueAndPrev{Data2: data2}
	}
}

func (m *TLStatsAbsValueAndPrev) To_StatsAbsValueAndPrev() *StatsAbsValueAndPrev {
	m.Data2.PredicateName = Predicate_statsAbsValueAndPrev
	return m.Data2
}

func (m *TLStatsAbsValueAndPrev) SetCurrent(v float64) { m.Data2.Current = v }
func (m *TLStatsAbsValueAndPrev) GetCurrent() float64  { return m.Data2.Current }

func (m *TLStatsAbsValueAndPrev) SetPrevious(v float64) { m.Data2.Previous = v }
func (m *TLStatsAbsValueAndPrev) GetPrevious() float64  { return m.Data2.Previous }

func (m *TLStatsAbsValueAndPrev) GetPredicateName() string {
	return Predicate_statsAbsValueAndPrev
}

func (m *TLStatsAbsValueAndPrev) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcb43acde: func() []byte {
			x.UInt(0xcb43acde)

			x.Double(m.GetCurrent())
			x.Double(m.GetPrevious())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsAbsValueAndPrev, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsAbsValueAndPrev, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsAbsValueAndPrev) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsAbsValueAndPrev) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcb43acde: func() error {
			m.SetCurrent(dBuf.Double())
			m.SetPrevious(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsAbsValueAndPrev) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatAdminWithInvites <--
//  + TL_ChatAdminWithInvites
//

func (m *ChatAdminWithInvites) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatAdminWithInvites:
		t := m.To_ChatAdminWithInvites()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatAdminWithInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatAdminWithInvites) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf2ecef23:
		m2 := MakeTLChatAdminWithInvites(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatAdminWithInvites) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatAdminWithInvites:
		t := m.To_ChatAdminWithInvites()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatAdminWithInvites
func (m *ChatAdminWithInvites) To_ChatAdminWithInvites() *TLChatAdminWithInvites {
	m.PredicateName = Predicate_chatAdminWithInvites
	return &TLChatAdminWithInvites{
		Data2: m,
	}
}

// MakeTLChatAdminWithInvites
func MakeTLChatAdminWithInvites(data2 *ChatAdminWithInvites) *TLChatAdminWithInvites {
	if data2 == nil {
		return &TLChatAdminWithInvites{Data2: &ChatAdminWithInvites{
			PredicateName: Predicate_chatAdminWithInvites,
		}}
	} else {
		data2.PredicateName = Predicate_chatAdminWithInvites
		return &TLChatAdminWithInvites{Data2: data2}
	}
}

func (m *TLChatAdminWithInvites) To_ChatAdminWithInvites() *ChatAdminWithInvites {
	m.Data2.PredicateName = Predicate_chatAdminWithInvites
	return m.Data2
}

func (m *TLChatAdminWithInvites) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLChatAdminWithInvites) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLChatAdminWithInvites) SetInvitesCount(v int32) { m.Data2.InvitesCount = v }
func (m *TLChatAdminWithInvites) GetInvitesCount() int32  { return m.Data2.InvitesCount }

func (m *TLChatAdminWithInvites) SetRevokedInvitesCount(v int32) { m.Data2.RevokedInvitesCount = v }
func (m *TLChatAdminWithInvites) GetRevokedInvitesCount() int32  { return m.Data2.RevokedInvitesCount }

func (m *TLChatAdminWithInvites) GetPredicateName() string {
	return Predicate_chatAdminWithInvites
}

func (m *TLChatAdminWithInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf2ecef23: func() []byte {
			x.UInt(0xf2ecef23)

			x.Long(m.GetAdminId())
			x.Int(m.GetInvitesCount())
			x.Int(m.GetRevokedInvitesCount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatAdminWithInvites, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatAdminWithInvites, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatAdminWithInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatAdminWithInvites) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf2ecef23: func() error {
			m.SetAdminId(dBuf.Long())
			m.SetInvitesCount(dBuf.Int())
			m.SetRevokedInvitesCount(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatAdminWithInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// UserStatus <--
//  + TL_UserStatusEmpty
//  + TL_UserStatusOnline
//  + TL_UserStatusOffline
//  + TL_UserStatusRecently
//  + TL_UserStatusLastWeek
//  + TL_UserStatusLastMonth
//

func (m *UserStatus) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_userStatusEmpty:
		t := m.To_UserStatusEmpty()
		xBuf = t.Encode(layer)
	case Predicate_userStatusOnline:
		t := m.To_UserStatusOnline()
		xBuf = t.Encode(layer)
	case Predicate_userStatusOffline:
		t := m.To_UserStatusOffline()
		xBuf = t.Encode(layer)
	case Predicate_userStatusRecently:
		t := m.To_UserStatusRecently()
		xBuf = t.Encode(layer)
	case Predicate_userStatusLastWeek:
		t := m.To_UserStatusLastWeek()
		xBuf = t.Encode(layer)
	case Predicate_userStatusLastMonth:
		t := m.To_UserStatusLastMonth()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *UserStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *UserStatus) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9d05049:
		m2 := MakeTLUserStatusEmpty(m)
		m2.Decode(dBuf)
	case 0xedb93949:
		m2 := MakeTLUserStatusOnline(m)
		m2.Decode(dBuf)
	case 0x8c703f:
		m2 := MakeTLUserStatusOffline(m)
		m2.Decode(dBuf)
	case 0xe26f42f1:
		m2 := MakeTLUserStatusRecently(m)
		m2.Decode(dBuf)
	case 0x7bf09fc:
		m2 := MakeTLUserStatusLastWeek(m)
		m2.Decode(dBuf)
	case 0x77ebc742:
		m2 := MakeTLUserStatusLastMonth(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *UserStatus) DebugString() string {
	switch m.PredicateName {
	case Predicate_userStatusEmpty:
		t := m.To_UserStatusEmpty()
		return t.DebugString()
	case Predicate_userStatusOnline:
		t := m.To_UserStatusOnline()
		return t.DebugString()
	case Predicate_userStatusOffline:
		t := m.To_UserStatusOffline()
		return t.DebugString()
	case Predicate_userStatusRecently:
		t := m.To_UserStatusRecently()
		return t.DebugString()
	case Predicate_userStatusLastWeek:
		t := m.To_UserStatusLastWeek()
		return t.DebugString()
	case Predicate_userStatusLastMonth:
		t := m.To_UserStatusLastMonth()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UserStatusEmpty
func (m *UserStatus) To_UserStatusEmpty() *TLUserStatusEmpty {
	m.PredicateName = Predicate_userStatusEmpty
	return &TLUserStatusEmpty{
		Data2: m,
	}
}

// To_UserStatusOnline
func (m *UserStatus) To_UserStatusOnline() *TLUserStatusOnline {
	m.PredicateName = Predicate_userStatusOnline
	return &TLUserStatusOnline{
		Data2: m,
	}
}

// To_UserStatusOffline
func (m *UserStatus) To_UserStatusOffline() *TLUserStatusOffline {
	m.PredicateName = Predicate_userStatusOffline
	return &TLUserStatusOffline{
		Data2: m,
	}
}

// To_UserStatusRecently
func (m *UserStatus) To_UserStatusRecently() *TLUserStatusRecently {
	m.PredicateName = Predicate_userStatusRecently
	return &TLUserStatusRecently{
		Data2: m,
	}
}

// To_UserStatusLastWeek
func (m *UserStatus) To_UserStatusLastWeek() *TLUserStatusLastWeek {
	m.PredicateName = Predicate_userStatusLastWeek
	return &TLUserStatusLastWeek{
		Data2: m,
	}
}

// To_UserStatusLastMonth
func (m *UserStatus) To_UserStatusLastMonth() *TLUserStatusLastMonth {
	m.PredicateName = Predicate_userStatusLastMonth
	return &TLUserStatusLastMonth{
		Data2: m,
	}
}

// MakeTLUserStatusEmpty
func MakeTLUserStatusEmpty(data2 *UserStatus) *TLUserStatusEmpty {
	if data2 == nil {
		return &TLUserStatusEmpty{Data2: &UserStatus{
			PredicateName: Predicate_userStatusEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusEmpty
		return &TLUserStatusEmpty{Data2: data2}
	}
}

func (m *TLUserStatusEmpty) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusEmpty
	return m.Data2
}

func (m *TLUserStatusEmpty) GetPredicateName() string {
	return Predicate_userStatusEmpty
}

func (m *TLUserStatusEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9d05049: func() []byte {
			x.UInt(0x9d05049)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9d05049: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserStatusOnline
func MakeTLUserStatusOnline(data2 *UserStatus) *TLUserStatusOnline {
	if data2 == nil {
		return &TLUserStatusOnline{Data2: &UserStatus{
			PredicateName: Predicate_userStatusOnline,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusOnline
		return &TLUserStatusOnline{Data2: data2}
	}
}

func (m *TLUserStatusOnline) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusOnline
	return m.Data2
}

func (m *TLUserStatusOnline) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLUserStatusOnline) GetExpires() int32  { return m.Data2.Expires }

func (m *TLUserStatusOnline) GetPredicateName() string {
	return Predicate_userStatusOnline
}

func (m *TLUserStatusOnline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xedb93949: func() []byte {
			x.UInt(0xedb93949)

			x.Int(m.GetExpires())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusOnline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusOnline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusOnline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusOnline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xedb93949: func() error {
			m.SetExpires(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusOnline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserStatusOffline
func MakeTLUserStatusOffline(data2 *UserStatus) *TLUserStatusOffline {
	if data2 == nil {
		return &TLUserStatusOffline{Data2: &UserStatus{
			PredicateName: Predicate_userStatusOffline,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusOffline
		return &TLUserStatusOffline{Data2: data2}
	}
}

func (m *TLUserStatusOffline) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusOffline
	return m.Data2
}

func (m *TLUserStatusOffline) SetWasOnline(v int32) { m.Data2.WasOnline = v }
func (m *TLUserStatusOffline) GetWasOnline() int32  { return m.Data2.WasOnline }

func (m *TLUserStatusOffline) GetPredicateName() string {
	return Predicate_userStatusOffline
}

func (m *TLUserStatusOffline) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8c703f: func() []byte {
			x.UInt(0x8c703f)

			x.Int(m.GetWasOnline())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusOffline, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusOffline, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusOffline) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusOffline) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8c703f: func() error {
			m.SetWasOnline(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusOffline) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserStatusRecently
func MakeTLUserStatusRecently(data2 *UserStatus) *TLUserStatusRecently {
	if data2 == nil {
		return &TLUserStatusRecently{Data2: &UserStatus{
			PredicateName: Predicate_userStatusRecently,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusRecently
		return &TLUserStatusRecently{Data2: data2}
	}
}

func (m *TLUserStatusRecently) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusRecently
	return m.Data2
}

func (m *TLUserStatusRecently) GetPredicateName() string {
	return Predicate_userStatusRecently
}

func (m *TLUserStatusRecently) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe26f42f1: func() []byte {
			x.UInt(0xe26f42f1)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusRecently, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusRecently, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusRecently) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusRecently) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe26f42f1: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusRecently) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserStatusLastWeek
func MakeTLUserStatusLastWeek(data2 *UserStatus) *TLUserStatusLastWeek {
	if data2 == nil {
		return &TLUserStatusLastWeek{Data2: &UserStatus{
			PredicateName: Predicate_userStatusLastWeek,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusLastWeek
		return &TLUserStatusLastWeek{Data2: data2}
	}
}

func (m *TLUserStatusLastWeek) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusLastWeek
	return m.Data2
}

func (m *TLUserStatusLastWeek) GetPredicateName() string {
	return Predicate_userStatusLastWeek
}

func (m *TLUserStatusLastWeek) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7bf09fc: func() []byte {
			x.UInt(0x7bf09fc)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusLastWeek, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusLastWeek, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusLastWeek) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusLastWeek) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7bf09fc: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusLastWeek) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUserStatusLastMonth
func MakeTLUserStatusLastMonth(data2 *UserStatus) *TLUserStatusLastMonth {
	if data2 == nil {
		return &TLUserStatusLastMonth{Data2: &UserStatus{
			PredicateName: Predicate_userStatusLastMonth,
		}}
	} else {
		data2.PredicateName = Predicate_userStatusLastMonth
		return &TLUserStatusLastMonth{Data2: data2}
	}
}

func (m *TLUserStatusLastMonth) To_UserStatus() *UserStatus {
	m.Data2.PredicateName = Predicate_userStatusLastMonth
	return m.Data2
}

func (m *TLUserStatusLastMonth) GetPredicateName() string {
	return Predicate_userStatusLastMonth
}

func (m *TLUserStatusLastMonth) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x77ebc742: func() []byte {
			x.UInt(0x77ebc742)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_userStatusLastMonth, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_userStatusLastMonth, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUserStatusLastMonth) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUserStatusLastMonth) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x77ebc742: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUserStatusLastMonth) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// EncryptedChat <--
//  + TL_EncryptedChatEmpty
//  + TL_EncryptedChatWaiting
//  + TL_EncryptedChatRequested
//  + TL_EncryptedChat
//  + TL_EncryptedChatDiscarded
//

func (m *EncryptedChat) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_encryptedChatEmpty:
		t := m.To_EncryptedChatEmpty()
		xBuf = t.Encode(layer)
	case Predicate_encryptedChatWaiting:
		t := m.To_EncryptedChatWaiting()
		xBuf = t.Encode(layer)
	case Predicate_encryptedChatRequested:
		t := m.To_EncryptedChatRequested()
		xBuf = t.Encode(layer)
	case Predicate_encryptedChat:
		t := m.To_EncryptedChat()
		xBuf = t.Encode(layer)
	case Predicate_encryptedChatDiscarded:
		t := m.To_EncryptedChatDiscarded()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *EncryptedChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *EncryptedChat) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xab7ec0a0:
		m2 := MakeTLEncryptedChatEmpty(m)
		m2.Decode(dBuf)
	case 0x66b25953:
		m2 := MakeTLEncryptedChatWaiting(m)
		m2.Decode(dBuf)
	case 0x48f1d94c:
		m2 := MakeTLEncryptedChatRequested(m)
		m2.Decode(dBuf)
	case 0x61f0d4c7:
		m2 := MakeTLEncryptedChat(m)
		m2.Decode(dBuf)
	case 0x1e1c7c45:
		m2 := MakeTLEncryptedChatDiscarded(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *EncryptedChat) DebugString() string {
	switch m.PredicateName {
	case Predicate_encryptedChatEmpty:
		t := m.To_EncryptedChatEmpty()
		return t.DebugString()
	case Predicate_encryptedChatWaiting:
		t := m.To_EncryptedChatWaiting()
		return t.DebugString()
	case Predicate_encryptedChatRequested:
		t := m.To_EncryptedChatRequested()
		return t.DebugString()
	case Predicate_encryptedChat:
		t := m.To_EncryptedChat()
		return t.DebugString()
	case Predicate_encryptedChatDiscarded:
		t := m.To_EncryptedChatDiscarded()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_EncryptedChatEmpty
func (m *EncryptedChat) To_EncryptedChatEmpty() *TLEncryptedChatEmpty {
	m.PredicateName = Predicate_encryptedChatEmpty
	return &TLEncryptedChatEmpty{
		Data2: m,
	}
}

// To_EncryptedChatWaiting
func (m *EncryptedChat) To_EncryptedChatWaiting() *TLEncryptedChatWaiting {
	m.PredicateName = Predicate_encryptedChatWaiting
	return &TLEncryptedChatWaiting{
		Data2: m,
	}
}

// To_EncryptedChatRequested
func (m *EncryptedChat) To_EncryptedChatRequested() *TLEncryptedChatRequested {
	m.PredicateName = Predicate_encryptedChatRequested
	return &TLEncryptedChatRequested{
		Data2: m,
	}
}

// To_EncryptedChat
func (m *EncryptedChat) To_EncryptedChat() *TLEncryptedChat {
	m.PredicateName = Predicate_encryptedChat
	return &TLEncryptedChat{
		Data2: m,
	}
}

// To_EncryptedChatDiscarded
func (m *EncryptedChat) To_EncryptedChatDiscarded() *TLEncryptedChatDiscarded {
	m.PredicateName = Predicate_encryptedChatDiscarded
	return &TLEncryptedChatDiscarded{
		Data2: m,
	}
}

// MakeTLEncryptedChatEmpty
func MakeTLEncryptedChatEmpty(data2 *EncryptedChat) *TLEncryptedChatEmpty {
	if data2 == nil {
		return &TLEncryptedChatEmpty{Data2: &EncryptedChat{
			PredicateName: Predicate_encryptedChatEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedChatEmpty
		return &TLEncryptedChatEmpty{Data2: data2}
	}
}

func (m *TLEncryptedChatEmpty) To_EncryptedChat() *EncryptedChat {
	m.Data2.PredicateName = Predicate_encryptedChatEmpty
	return m.Data2
}

func (m *TLEncryptedChatEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatEmpty) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatEmpty) GetPredicateName() string {
	return Predicate_encryptedChatEmpty
}

func (m *TLEncryptedChatEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xab7ec0a0: func() []byte {
			x.UInt(0xab7ec0a0)

			x.Int(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedChatEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedChatEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedChatEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedChatEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xab7ec0a0: func() error {
			m.SetId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedChatEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedChatWaiting
func MakeTLEncryptedChatWaiting(data2 *EncryptedChat) *TLEncryptedChatWaiting {
	if data2 == nil {
		return &TLEncryptedChatWaiting{Data2: &EncryptedChat{
			PredicateName: Predicate_encryptedChatWaiting,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedChatWaiting
		return &TLEncryptedChatWaiting{Data2: data2}
	}
}

func (m *TLEncryptedChatWaiting) To_EncryptedChat() *EncryptedChat {
	m.Data2.PredicateName = Predicate_encryptedChatWaiting
	return m.Data2
}

func (m *TLEncryptedChatWaiting) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatWaiting) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatWaiting) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChatWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatWaiting) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChatWaiting) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLEncryptedChatWaiting) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLEncryptedChatWaiting) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatWaiting) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLEncryptedChatWaiting) GetPredicateName() string {
	return Predicate_encryptedChatWaiting
}

func (m *TLEncryptedChatWaiting) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x66b25953: func() []byte {
			x.UInt(0x66b25953)

			x.Int(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedChatWaiting, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedChatWaiting, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedChatWaiting) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedChatWaiting) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x66b25953: func() error {
			m.SetId(dBuf.Int())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedChatWaiting) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedChatRequested
func MakeTLEncryptedChatRequested(data2 *EncryptedChat) *TLEncryptedChatRequested {
	if data2 == nil {
		return &TLEncryptedChatRequested{Data2: &EncryptedChat{
			PredicateName: Predicate_encryptedChatRequested,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedChatRequested
		return &TLEncryptedChatRequested{Data2: data2}
	}
}

func (m *TLEncryptedChatRequested) To_EncryptedChat() *EncryptedChat {
	m.Data2.PredicateName = Predicate_encryptedChatRequested
	return m.Data2
}

//// flags
func (m *TLEncryptedChatRequested) SetFolderId(v *types.Int32Value) { m.Data2.FolderId = v }
func (m *TLEncryptedChatRequested) GetFolderId() *types.Int32Value  { return m.Data2.FolderId }

func (m *TLEncryptedChatRequested) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatRequested) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatRequested) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChatRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatRequested) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChatRequested) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLEncryptedChatRequested) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLEncryptedChatRequested) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatRequested) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLEncryptedChatRequested) SetGA(v []byte) { m.Data2.GA = v }
func (m *TLEncryptedChatRequested) GetGA() []byte  { return m.Data2.GA }

func (m *TLEncryptedChatRequested) GetPredicateName() string {
	return Predicate_encryptedChatRequested
}

func (m *TLEncryptedChatRequested) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x48f1d94c: func() []byte {
			x.UInt(0x48f1d94c)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFolderId() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFolderId() != nil {
				x.Int(m.GetFolderId().Value)
			}

			x.Int(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.StringBytes(m.GetGA())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedChatRequested, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedChatRequested, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedChatRequested) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedChatRequested) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x48f1d94c: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetFolderId(&types.Int32Value{Value: dBuf.Int()})
			}

			m.SetId(dBuf.Int())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			m.SetGA(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedChatRequested) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedChat
func MakeTLEncryptedChat(data2 *EncryptedChat) *TLEncryptedChat {
	if data2 == nil {
		return &TLEncryptedChat{Data2: &EncryptedChat{
			PredicateName: Predicate_encryptedChat,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedChat
		return &TLEncryptedChat{Data2: data2}
	}
}

func (m *TLEncryptedChat) To_EncryptedChat() *EncryptedChat {
	m.Data2.PredicateName = Predicate_encryptedChat
	return m.Data2
}

func (m *TLEncryptedChat) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChat) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChat) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLEncryptedChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChat) GetDate() int32  { return m.Data2.Date }

func (m *TLEncryptedChat) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLEncryptedChat) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLEncryptedChat) SetParticipantId(v int64) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChat) GetParticipantId() int64  { return m.Data2.ParticipantId }

func (m *TLEncryptedChat) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLEncryptedChat) GetGAOrB() []byte  { return m.Data2.GAOrB }

func (m *TLEncryptedChat) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedChat) GetKeyFingerprint() int64  { return m.Data2.KeyFingerprint }

func (m *TLEncryptedChat) GetPredicateName() string {
	return Predicate_encryptedChat
}

func (m *TLEncryptedChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x61f0d4c7: func() []byte {
			x.UInt(0x61f0d4c7)

			x.Int(m.GetId())
			x.Long(m.GetAccessHash())
			x.Int(m.GetDate())
			x.Long(m.GetAdminId())
			x.Long(m.GetParticipantId())
			x.StringBytes(m.GetGAOrB())
			x.Long(m.GetKeyFingerprint())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x61f0d4c7: func() error {
			m.SetId(dBuf.Int())
			m.SetAccessHash(dBuf.Long())
			m.SetDate(dBuf.Int())
			m.SetAdminId(dBuf.Long())
			m.SetParticipantId(dBuf.Long())
			m.SetGAOrB(dBuf.StringBytes())
			m.SetKeyFingerprint(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLEncryptedChatDiscarded
func MakeTLEncryptedChatDiscarded(data2 *EncryptedChat) *TLEncryptedChatDiscarded {
	if data2 == nil {
		return &TLEncryptedChatDiscarded{Data2: &EncryptedChat{
			PredicateName: Predicate_encryptedChatDiscarded,
		}}
	} else {
		data2.PredicateName = Predicate_encryptedChatDiscarded
		return &TLEncryptedChatDiscarded{Data2: data2}
	}
}

func (m *TLEncryptedChatDiscarded) To_EncryptedChat() *EncryptedChat {
	m.Data2.PredicateName = Predicate_encryptedChatDiscarded
	return m.Data2
}

//// flags
func (m *TLEncryptedChatDiscarded) SetHistoryDeleted(v bool) { m.Data2.HistoryDeleted = v }
func (m *TLEncryptedChatDiscarded) GetHistoryDeleted() bool  { return m.Data2.HistoryDeleted }

func (m *TLEncryptedChatDiscarded) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatDiscarded) GetId() int32  { return m.Data2.Id }

func (m *TLEncryptedChatDiscarded) GetPredicateName() string {
	return Predicate_encryptedChatDiscarded
}

func (m *TLEncryptedChatDiscarded) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1e1c7c45: func() []byte {
			x.UInt(0x1e1c7c45)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHistoryDeleted() == true {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_encryptedChatDiscarded, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_encryptedChatDiscarded, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLEncryptedChatDiscarded) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLEncryptedChatDiscarded) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1e1c7c45: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHistoryDeleted(true)
			}
			m.SetId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLEncryptedChatDiscarded) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Folder <--
//  + TL_Folder
//

func (m *Folder) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_folder:
		t := m.To_Folder()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Folder) CalcByteSize(layer int32) int {
	return 0
}

func (m *Folder) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xff544e65:
		m2 := MakeTLFolder(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Folder) DebugString() string {
	switch m.PredicateName {
	case Predicate_folder:
		t := m.To_Folder()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Folder
func (m *Folder) To_Folder() *TLFolder {
	m.PredicateName = Predicate_folder
	return &TLFolder{
		Data2: m,
	}
}

// MakeTLFolder
func MakeTLFolder(data2 *Folder) *TLFolder {
	if data2 == nil {
		return &TLFolder{Data2: &Folder{
			PredicateName: Predicate_folder,
		}}
	} else {
		data2.PredicateName = Predicate_folder
		return &TLFolder{Data2: data2}
	}
}

func (m *TLFolder) To_Folder() *Folder {
	m.Data2.PredicateName = Predicate_folder
	return m.Data2
}

//// flags
func (m *TLFolder) SetAutofillNewBroadcasts(v bool) { m.Data2.AutofillNewBroadcasts = v }
func (m *TLFolder) GetAutofillNewBroadcasts() bool  { return m.Data2.AutofillNewBroadcasts }

func (m *TLFolder) SetAutofillPublicGroups(v bool) { m.Data2.AutofillPublicGroups = v }
func (m *TLFolder) GetAutofillPublicGroups() bool  { return m.Data2.AutofillPublicGroups }

func (m *TLFolder) SetAutofillNewCorrespondents(v bool) { m.Data2.AutofillNewCorrespondents = v }
func (m *TLFolder) GetAutofillNewCorrespondents() bool  { return m.Data2.AutofillNewCorrespondents }

func (m *TLFolder) SetId(v int32) { m.Data2.Id = v }
func (m *TLFolder) GetId() int32  { return m.Data2.Id }

func (m *TLFolder) SetTitle(v string) { m.Data2.Title = v }
func (m *TLFolder) GetTitle() string  { return m.Data2.Title }

func (m *TLFolder) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLFolder) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLFolder) GetPredicateName() string {
	return Predicate_folder
}

func (m *TLFolder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xff544e65: func() []byte {
			x.UInt(0xff544e65)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetAutofillNewBroadcasts() == true {
					flags |= 1 << 0
				}
				if m.GetAutofillPublicGroups() == true {
					flags |= 1 << 1
				}
				if m.GetAutofillNewCorrespondents() == true {
					flags |= 1 << 2
				}

				if m.GetPhoto() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.String(m.GetTitle())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_folder, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_folder, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLFolder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFolder) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xff544e65: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetAutofillNewBroadcasts(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetAutofillPublicGroups(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetAutofillNewCorrespondents(true)
			}
			m.SetId(dBuf.Int())
			m.SetTitle(dBuf.String())
			if (flags & (1 << 3)) != 0 {
				m6 := &ChatPhoto{}
				m6.Decode(dBuf)
				m.SetPhoto(m6)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLFolder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_MessageViews <--
//  + TL_MessagesMessageViews
//

func (m *Messages_MessageViews) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_messageViews:
		t := m.To_MessagesMessageViews()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_MessageViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_MessageViews) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb6c4f543:
		m2 := MakeTLMessagesMessageViews(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_MessageViews) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_messageViews:
		t := m.To_MessagesMessageViews()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesMessageViews
func (m *Messages_MessageViews) To_MessagesMessageViews() *TLMessagesMessageViews {
	m.PredicateName = Predicate_messages_messageViews
	return &TLMessagesMessageViews{
		Data2: m,
	}
}

// MakeTLMessagesMessageViews
func MakeTLMessagesMessageViews(data2 *Messages_MessageViews) *TLMessagesMessageViews {
	if data2 == nil {
		return &TLMessagesMessageViews{Data2: &Messages_MessageViews{
			PredicateName: Predicate_messages_messageViews,
		}}
	} else {
		data2.PredicateName = Predicate_messages_messageViews
		return &TLMessagesMessageViews{Data2: data2}
	}
}

func (m *TLMessagesMessageViews) To_Messages_MessageViews() *Messages_MessageViews {
	m.Data2.PredicateName = Predicate_messages_messageViews
	return m.Data2
}

func (m *TLMessagesMessageViews) SetViews(v []*MessageViews) { m.Data2.Views = v }
func (m *TLMessagesMessageViews) GetViews() []*MessageViews  { return m.Data2.Views }

func (m *TLMessagesMessageViews) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessageViews) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLMessagesMessageViews) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessageViews) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesMessageViews) GetPredicateName() string {
	return Predicate_messages_messageViews
}

func (m *TLMessagesMessageViews) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb6c4f543: func() []byte {
			x.UInt(0xb6c4f543)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetViews())))
			for _, v := range m.GetViews() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_messageViews, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_messageViews, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesMessageViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMessageViews) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb6c4f543: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*MessageViews, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &MessageViews{}
				v0[i].Decode(dBuf)
			}
			m.SetViews(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesMessageViews) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_GroupParticipants <--
//  + TL_PhoneGroupParticipants
//

func (m *Phone_GroupParticipants) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_groupParticipants:
		t := m.To_PhoneGroupParticipants()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_GroupParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_GroupParticipants) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf47751b6:
		m2 := MakeTLPhoneGroupParticipants(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_GroupParticipants) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_groupParticipants:
		t := m.To_PhoneGroupParticipants()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneGroupParticipants
func (m *Phone_GroupParticipants) To_PhoneGroupParticipants() *TLPhoneGroupParticipants {
	m.PredicateName = Predicate_phone_groupParticipants
	return &TLPhoneGroupParticipants{
		Data2: m,
	}
}

// MakeTLPhoneGroupParticipants
func MakeTLPhoneGroupParticipants(data2 *Phone_GroupParticipants) *TLPhoneGroupParticipants {
	if data2 == nil {
		return &TLPhoneGroupParticipants{Data2: &Phone_GroupParticipants{
			PredicateName: Predicate_phone_groupParticipants,
		}}
	} else {
		data2.PredicateName = Predicate_phone_groupParticipants
		return &TLPhoneGroupParticipants{Data2: data2}
	}
}

func (m *TLPhoneGroupParticipants) To_Phone_GroupParticipants() *Phone_GroupParticipants {
	m.Data2.PredicateName = Predicate_phone_groupParticipants
	return m.Data2
}

func (m *TLPhoneGroupParticipants) SetCount(v int32) { m.Data2.Count = v }
func (m *TLPhoneGroupParticipants) GetCount() int32  { return m.Data2.Count }

func (m *TLPhoneGroupParticipants) SetParticipants(v []*GroupCallParticipant) {
	m.Data2.Participants = v
}
func (m *TLPhoneGroupParticipants) GetParticipants() []*GroupCallParticipant {
	return m.Data2.Participants
}

func (m *TLPhoneGroupParticipants) SetNextOffset(v string) { m.Data2.NextOffset = v }
func (m *TLPhoneGroupParticipants) GetNextOffset() string  { return m.Data2.NextOffset }

func (m *TLPhoneGroupParticipants) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLPhoneGroupParticipants) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLPhoneGroupParticipants) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhoneGroupParticipants) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPhoneGroupParticipants) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLPhoneGroupParticipants) GetVersion() int32  { return m.Data2.Version }

func (m *TLPhoneGroupParticipants) GetPredicateName() string {
	return Predicate_phone_groupParticipants
}

func (m *TLPhoneGroupParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf47751b6: func() []byte {
			x.UInt(0xf47751b6)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetParticipants())))
			for _, v := range m.GetParticipants() {
				x.Bytes((*v).Encode(layer))
			}

			x.String(m.GetNextOffset())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(m.GetVersion())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_groupParticipants, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_groupParticipants, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneGroupParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGroupParticipants) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf47751b6: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*GroupCallParticipant, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &GroupCallParticipant{}
				v1[i].Decode(dBuf)
			}
			m.SetParticipants(v1)

			m.SetNextOffset(dBuf.String())
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*Chat, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &Chat{}
				v3[i].Decode(dBuf)
			}
			m.SetChats(v3)

			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*User, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &User{}
				v4[i].Decode(dBuf)
			}
			m.SetUsers(v4)

			m.SetVersion(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneGroupParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ChatInviteImporters <--
//  + TL_MessagesChatInviteImporters
//

func (m *Messages_ChatInviteImporters) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_chatInviteImporters:
		t := m.To_MessagesChatInviteImporters()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ChatInviteImporters) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ChatInviteImporters) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x81b6b00a:
		m2 := MakeTLMessagesChatInviteImporters(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ChatInviteImporters) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_chatInviteImporters:
		t := m.To_MessagesChatInviteImporters()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesChatInviteImporters
func (m *Messages_ChatInviteImporters) To_MessagesChatInviteImporters() *TLMessagesChatInviteImporters {
	m.PredicateName = Predicate_messages_chatInviteImporters
	return &TLMessagesChatInviteImporters{
		Data2: m,
	}
}

// MakeTLMessagesChatInviteImporters
func MakeTLMessagesChatInviteImporters(data2 *Messages_ChatInviteImporters) *TLMessagesChatInviteImporters {
	if data2 == nil {
		return &TLMessagesChatInviteImporters{Data2: &Messages_ChatInviteImporters{
			PredicateName: Predicate_messages_chatInviteImporters,
		}}
	} else {
		data2.PredicateName = Predicate_messages_chatInviteImporters
		return &TLMessagesChatInviteImporters{Data2: data2}
	}
}

func (m *TLMessagesChatInviteImporters) To_Messages_ChatInviteImporters() *Messages_ChatInviteImporters {
	m.Data2.PredicateName = Predicate_messages_chatInviteImporters
	return m.Data2
}

func (m *TLMessagesChatInviteImporters) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChatInviteImporters) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesChatInviteImporters) SetImporters(v []*ChatInviteImporter) { m.Data2.Importers = v }
func (m *TLMessagesChatInviteImporters) GetImporters() []*ChatInviteImporter {
	return m.Data2.Importers
}

func (m *TLMessagesChatInviteImporters) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChatInviteImporters) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesChatInviteImporters) GetPredicateName() string {
	return Predicate_messages_chatInviteImporters
}

func (m *TLMessagesChatInviteImporters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x81b6b00a: func() []byte {
			x.UInt(0x81b6b00a)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetImporters())))
			for _, v := range m.GetImporters() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_chatInviteImporters, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_chatInviteImporters, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesChatInviteImporters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesChatInviteImporters) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x81b6b00a: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*ChatInviteImporter, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &ChatInviteImporter{}
				v1[i].Decode(dBuf)
			}
			m.SetImporters(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesChatInviteImporters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputChannel <--
//  + TL_InputChannelEmpty
//  + TL_InputChannel
//  + TL_InputChannelFromMessage
//

func (m *InputChannel) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputChannelEmpty:
		t := m.To_InputChannelEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputChannel:
		t := m.To_InputChannel()
		xBuf = t.Encode(layer)
	case Predicate_inputChannelFromMessage:
		t := m.To_InputChannelFromMessage()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputChannel) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xee8c1e86:
		m2 := MakeTLInputChannelEmpty(m)
		m2.Decode(dBuf)
	case 0xf35aec28:
		m2 := MakeTLInputChannel(m)
		m2.Decode(dBuf)
	case 0x5b934f9d:
		m2 := MakeTLInputChannelFromMessage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputChannel) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputChannelEmpty:
		t := m.To_InputChannelEmpty()
		return t.DebugString()
	case Predicate_inputChannel:
		t := m.To_InputChannel()
		return t.DebugString()
	case Predicate_inputChannelFromMessage:
		t := m.To_InputChannelFromMessage()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputChannelEmpty
func (m *InputChannel) To_InputChannelEmpty() *TLInputChannelEmpty {
	m.PredicateName = Predicate_inputChannelEmpty
	return &TLInputChannelEmpty{
		Data2: m,
	}
}

// To_InputChannel
func (m *InputChannel) To_InputChannel() *TLInputChannel {
	m.PredicateName = Predicate_inputChannel
	return &TLInputChannel{
		Data2: m,
	}
}

// To_InputChannelFromMessage
func (m *InputChannel) To_InputChannelFromMessage() *TLInputChannelFromMessage {
	m.PredicateName = Predicate_inputChannelFromMessage
	return &TLInputChannelFromMessage{
		Data2: m,
	}
}

// MakeTLInputChannelEmpty
func MakeTLInputChannelEmpty(data2 *InputChannel) *TLInputChannelEmpty {
	if data2 == nil {
		return &TLInputChannelEmpty{Data2: &InputChannel{
			PredicateName: Predicate_inputChannelEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputChannelEmpty
		return &TLInputChannelEmpty{Data2: data2}
	}
}

func (m *TLInputChannelEmpty) To_InputChannel() *InputChannel {
	m.Data2.PredicateName = Predicate_inputChannelEmpty
	return m.Data2
}

func (m *TLInputChannelEmpty) GetPredicateName() string {
	return Predicate_inputChannelEmpty
}

func (m *TLInputChannelEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xee8c1e86: func() []byte {
			x.UInt(0xee8c1e86)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChannelEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChannelEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChannelEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChannelEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xee8c1e86: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChannelEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputChannel
func MakeTLInputChannel(data2 *InputChannel) *TLInputChannel {
	if data2 == nil {
		return &TLInputChannel{Data2: &InputChannel{
			PredicateName: Predicate_inputChannel,
		}}
	} else {
		data2.PredicateName = Predicate_inputChannel
		return &TLInputChannel{Data2: data2}
	}
}

func (m *TLInputChannel) To_InputChannel() *InputChannel {
	m.Data2.PredicateName = Predicate_inputChannel
	return m.Data2
}

func (m *TLInputChannel) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLInputChannel) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLInputChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputChannel) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputChannel) GetPredicateName() string {
	return Predicate_inputChannel
}

func (m *TLInputChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf35aec28: func() []byte {
			x.UInt(0xf35aec28)

			x.Long(m.GetChannelId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf35aec28: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputChannelFromMessage
func MakeTLInputChannelFromMessage(data2 *InputChannel) *TLInputChannelFromMessage {
	if data2 == nil {
		return &TLInputChannelFromMessage{Data2: &InputChannel{
			PredicateName: Predicate_inputChannelFromMessage,
		}}
	} else {
		data2.PredicateName = Predicate_inputChannelFromMessage
		return &TLInputChannelFromMessage{Data2: data2}
	}
}

func (m *TLInputChannelFromMessage) To_InputChannel() *InputChannel {
	m.Data2.PredicateName = Predicate_inputChannelFromMessage
	return m.Data2
}

func (m *TLInputChannelFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputChannelFromMessage) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputChannelFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputChannelFromMessage) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLInputChannelFromMessage) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLInputChannelFromMessage) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLInputChannelFromMessage) GetPredicateName() string {
	return Predicate_inputChannelFromMessage
}

func (m *TLInputChannelFromMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5b934f9d: func() []byte {
			x.UInt(0x5b934f9d)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetMsgId())
			x.Long(m.GetChannelId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChannelFromMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChannelFromMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChannelFromMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChannelFromMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5b934f9d: func() error {

			m2 := &InputPeer{}
			m2.Decode(dBuf)
			m.SetPeer(m2)

			m.SetMsgId(dBuf.Int())
			m.SetChannelId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChannelFromMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputStickeredMedia <--
//  + TL_InputStickeredMediaPhoto
//  + TL_InputStickeredMediaDocument
//

func (m *InputStickeredMedia) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputStickeredMediaPhoto:
		t := m.To_InputStickeredMediaPhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputStickeredMediaDocument:
		t := m.To_InputStickeredMediaDocument()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputStickeredMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputStickeredMedia) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x4a992157:
		m2 := MakeTLInputStickeredMediaPhoto(m)
		m2.Decode(dBuf)
	case 0x438865b:
		m2 := MakeTLInputStickeredMediaDocument(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputStickeredMedia) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputStickeredMediaPhoto:
		t := m.To_InputStickeredMediaPhoto()
		return t.DebugString()
	case Predicate_inputStickeredMediaDocument:
		t := m.To_InputStickeredMediaDocument()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputStickeredMediaPhoto
func (m *InputStickeredMedia) To_InputStickeredMediaPhoto() *TLInputStickeredMediaPhoto {
	m.PredicateName = Predicate_inputStickeredMediaPhoto
	return &TLInputStickeredMediaPhoto{
		Data2: m,
	}
}

// To_InputStickeredMediaDocument
func (m *InputStickeredMedia) To_InputStickeredMediaDocument() *TLInputStickeredMediaDocument {
	m.PredicateName = Predicate_inputStickeredMediaDocument
	return &TLInputStickeredMediaDocument{
		Data2: m,
	}
}

// MakeTLInputStickeredMediaPhoto
func MakeTLInputStickeredMediaPhoto(data2 *InputStickeredMedia) *TLInputStickeredMediaPhoto {
	if data2 == nil {
		return &TLInputStickeredMediaPhoto{Data2: &InputStickeredMedia{
			PredicateName: Predicate_inputStickeredMediaPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickeredMediaPhoto
		return &TLInputStickeredMediaPhoto{Data2: data2}
	}
}

func (m *TLInputStickeredMediaPhoto) To_InputStickeredMedia() *InputStickeredMedia {
	m.Data2.PredicateName = Predicate_inputStickeredMediaPhoto
	return m.Data2
}

func (m *TLInputStickeredMediaPhoto) SetId_INPUTPHOTO(v *InputPhoto) { m.Data2.Id_INPUTPHOTO = v }
func (m *TLInputStickeredMediaPhoto) GetId_INPUTPHOTO() *InputPhoto  { return m.Data2.Id_INPUTPHOTO }

func (m *TLInputStickeredMediaPhoto) GetPredicateName() string {
	return Predicate_inputStickeredMediaPhoto
}

func (m *TLInputStickeredMediaPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4a992157: func() []byte {
			x.UInt(0x4a992157)

			x.Bytes(m.GetId_INPUTPHOTO().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickeredMediaPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickeredMediaPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickeredMediaPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickeredMediaPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4a992157: func() error {

			m0 := &InputPhoto{}
			m0.Decode(dBuf)
			m.SetId_INPUTPHOTO(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickeredMediaPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputStickeredMediaDocument
func MakeTLInputStickeredMediaDocument(data2 *InputStickeredMedia) *TLInputStickeredMediaDocument {
	if data2 == nil {
		return &TLInputStickeredMediaDocument{Data2: &InputStickeredMedia{
			PredicateName: Predicate_inputStickeredMediaDocument,
		}}
	} else {
		data2.PredicateName = Predicate_inputStickeredMediaDocument
		return &TLInputStickeredMediaDocument{Data2: data2}
	}
}

func (m *TLInputStickeredMediaDocument) To_InputStickeredMedia() *InputStickeredMedia {
	m.Data2.PredicateName = Predicate_inputStickeredMediaDocument
	return m.Data2
}

func (m *TLInputStickeredMediaDocument) SetId_INPUTDOCUMENT(v *InputDocument) {
	m.Data2.Id_INPUTDOCUMENT = v
}
func (m *TLInputStickeredMediaDocument) GetId_INPUTDOCUMENT() *InputDocument {
	return m.Data2.Id_INPUTDOCUMENT
}

func (m *TLInputStickeredMediaDocument) GetPredicateName() string {
	return Predicate_inputStickeredMediaDocument
}

func (m *TLInputStickeredMediaDocument) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x438865b: func() []byte {
			x.UInt(0x438865b)

			x.Bytes(m.GetId_INPUTDOCUMENT().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputStickeredMediaDocument, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputStickeredMediaDocument, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputStickeredMediaDocument) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputStickeredMediaDocument) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x438865b: func() error {

			m0 := &InputDocument{}
			m0.Decode(dBuf)
			m.SetId_INPUTDOCUMENT(m0)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputStickeredMediaDocument) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Page <--
//  + TL_Page
//

func (m *Page) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_page:
		t := m.To_Page()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Page) CalcByteSize(layer int32) int {
	return 0
}

func (m *Page) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x98657f0d:
		m2 := MakeTLPage(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Page) DebugString() string {
	switch m.PredicateName {
	case Predicate_page:
		t := m.To_Page()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Page
func (m *Page) To_Page() *TLPage {
	m.PredicateName = Predicate_page
	return &TLPage{
		Data2: m,
	}
}

// MakeTLPage
func MakeTLPage(data2 *Page) *TLPage {
	if data2 == nil {
		return &TLPage{Data2: &Page{
			PredicateName: Predicate_page,
		}}
	} else {
		data2.PredicateName = Predicate_page
		return &TLPage{Data2: data2}
	}
}

func (m *TLPage) To_Page() *Page {
	m.Data2.PredicateName = Predicate_page
	return m.Data2
}

//// flags
func (m *TLPage) SetPart(v bool) { m.Data2.Part = v }
func (m *TLPage) GetPart() bool  { return m.Data2.Part }

func (m *TLPage) SetRtl(v bool) { m.Data2.Rtl = v }
func (m *TLPage) GetRtl() bool  { return m.Data2.Rtl }

func (m *TLPage) SetV2(v bool) { m.Data2.V2 = v }
func (m *TLPage) GetV2() bool  { return m.Data2.V2 }

func (m *TLPage) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPage) GetUrl() string  { return m.Data2.Url }

func (m *TLPage) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPage) GetBlocks() []*PageBlock  { return m.Data2.Blocks }

func (m *TLPage) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPage) GetPhotos() []*Photo  { return m.Data2.Photos }

func (m *TLPage) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPage) GetDocuments() []*Document  { return m.Data2.Documents }

func (m *TLPage) SetViews(v *types.Int32Value) { m.Data2.Views = v }
func (m *TLPage) GetViews() *types.Int32Value  { return m.Data2.Views }

func (m *TLPage) GetPredicateName() string {
	return Predicate_page
}

func (m *TLPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x98657f0d: func() []byte {
			x.UInt(0x98657f0d)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPart() == true {
					flags |= 1 << 0
				}
				if m.GetRtl() == true {
					flags |= 1 << 1
				}
				if m.GetV2() == true {
					flags |= 1 << 2
				}

				if m.GetViews() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetUrl())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetBlocks())))
			for _, v := range m.GetBlocks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPhotos())))
			for _, v := range m.GetPhotos() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDocuments())))
			for _, v := range m.GetDocuments() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetViews() != nil {
				x.Int(m.GetViews().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_page, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_page, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x98657f0d: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetPart(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetRtl(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetV2(true)
			}
			m.SetUrl(dBuf.String())
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*PageBlock, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &PageBlock{}
				v5[i].Decode(dBuf)
			}
			m.SetBlocks(v5)

			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*Photo, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &Photo{}
				v6[i].Decode(dBuf)
			}
			m.SetPhotos(v6)

			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*Document, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &Document{}
				v7[i].Decode(dBuf)
			}
			m.SetDocuments(v7)

			if (flags & (1 << 3)) != 0 {
				m.SetViews(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// VideoSize <--
//  + TL_VideoSize
//

func (m *VideoSize) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_videoSize:
		t := m.To_VideoSize()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *VideoSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *VideoSize) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xde33b094:
		m2 := MakeTLVideoSize(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *VideoSize) DebugString() string {
	switch m.PredicateName {
	case Predicate_videoSize:
		t := m.To_VideoSize()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_VideoSize
func (m *VideoSize) To_VideoSize() *TLVideoSize {
	m.PredicateName = Predicate_videoSize
	return &TLVideoSize{
		Data2: m,
	}
}

// MakeTLVideoSize
func MakeTLVideoSize(data2 *VideoSize) *TLVideoSize {
	if data2 == nil {
		return &TLVideoSize{Data2: &VideoSize{
			PredicateName: Predicate_videoSize,
		}}
	} else {
		data2.PredicateName = Predicate_videoSize
		return &TLVideoSize{Data2: data2}
	}
}

func (m *TLVideoSize) To_VideoSize() *VideoSize {
	m.Data2.PredicateName = Predicate_videoSize
	return m.Data2
}

//// flags
func (m *TLVideoSize) SetType(v string) { m.Data2.Type = v }
func (m *TLVideoSize) GetType() string  { return m.Data2.Type }

func (m *TLVideoSize) SetW(v int32) { m.Data2.W = v }
func (m *TLVideoSize) GetW() int32  { return m.Data2.W }

func (m *TLVideoSize) SetH(v int32) { m.Data2.H = v }
func (m *TLVideoSize) GetH() int32  { return m.Data2.H }

func (m *TLVideoSize) SetSize2(v int32) { m.Data2.Size2 = v }
func (m *TLVideoSize) GetSize2() int32  { return m.Data2.Size2 }

func (m *TLVideoSize) SetVideoStartTs(v *types.DoubleValue) { m.Data2.VideoStartTs = v }
func (m *TLVideoSize) GetVideoStartTs() *types.DoubleValue  { return m.Data2.VideoStartTs }

func (m *TLVideoSize) GetPredicateName() string {
	return Predicate_videoSize
}

func (m *TLVideoSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xde33b094: func() []byte {
			x.UInt(0xde33b094)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideoStartTs() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetType())
			x.Int(m.GetW())
			x.Int(m.GetH())
			x.Int(m.GetSize2())
			if m.GetVideoStartTs() != nil {
				x.Double(m.GetVideoStartTs().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_videoSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_videoSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLVideoSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLVideoSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xde33b094: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetType(dBuf.String())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			m.SetSize2(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetVideoStartTs(&types.DoubleValue{Value: dBuf.Double()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLVideoSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputChatPhoto <--
//  + TL_InputChatPhotoEmpty
//  + TL_InputChatUploadedPhoto
//  + TL_InputChatPhoto
//

func (m *InputChatPhoto) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputChatPhotoEmpty:
		t := m.To_InputChatPhotoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputChatUploadedPhoto:
		t := m.To_InputChatUploadedPhoto()
		xBuf = t.Encode(layer)
	case Predicate_inputChatPhoto:
		t := m.To_InputChatPhoto()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputChatPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputChatPhoto) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1ca48f57:
		m2 := MakeTLInputChatPhotoEmpty(m)
		m2.Decode(dBuf)
	case 0xc642724e:
		m2 := MakeTLInputChatUploadedPhoto(m)
		m2.Decode(dBuf)
	case 0x8953ad37:
		m2 := MakeTLInputChatPhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputChatPhoto) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputChatPhotoEmpty:
		t := m.To_InputChatPhotoEmpty()
		return t.DebugString()
	case Predicate_inputChatUploadedPhoto:
		t := m.To_InputChatUploadedPhoto()
		return t.DebugString()
	case Predicate_inputChatPhoto:
		t := m.To_InputChatPhoto()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputChatPhotoEmpty
func (m *InputChatPhoto) To_InputChatPhotoEmpty() *TLInputChatPhotoEmpty {
	m.PredicateName = Predicate_inputChatPhotoEmpty
	return &TLInputChatPhotoEmpty{
		Data2: m,
	}
}

// To_InputChatUploadedPhoto
func (m *InputChatPhoto) To_InputChatUploadedPhoto() *TLInputChatUploadedPhoto {
	m.PredicateName = Predicate_inputChatUploadedPhoto
	return &TLInputChatUploadedPhoto{
		Data2: m,
	}
}

// To_InputChatPhoto
func (m *InputChatPhoto) To_InputChatPhoto() *TLInputChatPhoto {
	m.PredicateName = Predicate_inputChatPhoto
	return &TLInputChatPhoto{
		Data2: m,
	}
}

// MakeTLInputChatPhotoEmpty
func MakeTLInputChatPhotoEmpty(data2 *InputChatPhoto) *TLInputChatPhotoEmpty {
	if data2 == nil {
		return &TLInputChatPhotoEmpty{Data2: &InputChatPhoto{
			PredicateName: Predicate_inputChatPhotoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputChatPhotoEmpty
		return &TLInputChatPhotoEmpty{Data2: data2}
	}
}

func (m *TLInputChatPhotoEmpty) To_InputChatPhoto() *InputChatPhoto {
	m.Data2.PredicateName = Predicate_inputChatPhotoEmpty
	return m.Data2
}

func (m *TLInputChatPhotoEmpty) GetPredicateName() string {
	return Predicate_inputChatPhotoEmpty
}

func (m *TLInputChatPhotoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1ca48f57: func() []byte {
			x.UInt(0x1ca48f57)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChatPhotoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChatPhotoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChatPhotoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChatPhotoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1ca48f57: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChatPhotoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputChatUploadedPhoto
func MakeTLInputChatUploadedPhoto(data2 *InputChatPhoto) *TLInputChatUploadedPhoto {
	if data2 == nil {
		return &TLInputChatUploadedPhoto{Data2: &InputChatPhoto{
			PredicateName: Predicate_inputChatUploadedPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputChatUploadedPhoto
		return &TLInputChatUploadedPhoto{Data2: data2}
	}
}

func (m *TLInputChatUploadedPhoto) To_InputChatPhoto() *InputChatPhoto {
	m.Data2.PredicateName = Predicate_inputChatUploadedPhoto
	return m.Data2
}

//// flags
func (m *TLInputChatUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputChatUploadedPhoto) GetFile() *InputFile  { return m.Data2.File }

func (m *TLInputChatUploadedPhoto) SetVideo(v *InputFile) { m.Data2.Video = v }
func (m *TLInputChatUploadedPhoto) GetVideo() *InputFile  { return m.Data2.Video }

func (m *TLInputChatUploadedPhoto) SetVideoStartTs(v *types.DoubleValue) { m.Data2.VideoStartTs = v }
func (m *TLInputChatUploadedPhoto) GetVideoStartTs() *types.DoubleValue  { return m.Data2.VideoStartTs }

func (m *TLInputChatUploadedPhoto) GetPredicateName() string {
	return Predicate_inputChatUploadedPhoto
}

func (m *TLInputChatUploadedPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc642724e: func() []byte {
			x.UInt(0xc642724e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFile() != nil {
					flags |= 1 << 0
				}
				if m.GetVideo() != nil {
					flags |= 1 << 1
				}
				if m.GetVideoStartTs() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetFile() != nil {
				x.Bytes(m.GetFile().Encode(layer))
			}

			if m.GetVideo() != nil {
				x.Bytes(m.GetVideo().Encode(layer))
			}

			if m.GetVideoStartTs() != nil {
				x.Double(m.GetVideoStartTs().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChatUploadedPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChatUploadedPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChatUploadedPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChatUploadedPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc642724e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &InputFile{}
				m1.Decode(dBuf)
				m.SetFile(m1)
			}
			if (flags & (1 << 1)) != 0 {
				m2 := &InputFile{}
				m2.Decode(dBuf)
				m.SetVideo(m2)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetVideoStartTs(&types.DoubleValue{Value: dBuf.Double()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChatUploadedPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputChatPhoto
func MakeTLInputChatPhoto(data2 *InputChatPhoto) *TLInputChatPhoto {
	if data2 == nil {
		return &TLInputChatPhoto{Data2: &InputChatPhoto{
			PredicateName: Predicate_inputChatPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_inputChatPhoto
		return &TLInputChatPhoto{Data2: data2}
	}
}

func (m *TLInputChatPhoto) To_InputChatPhoto() *InputChatPhoto {
	m.Data2.PredicateName = Predicate_inputChatPhoto
	return m.Data2
}

func (m *TLInputChatPhoto) SetId(v *InputPhoto) { m.Data2.Id = v }
func (m *TLInputChatPhoto) GetId() *InputPhoto  { return m.Data2.Id }

func (m *TLInputChatPhoto) GetPredicateName() string {
	return Predicate_inputChatPhoto
}

func (m *TLInputChatPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8953ad37: func() []byte {
			x.UInt(0x8953ad37)

			x.Bytes(m.GetId().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputChatPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputChatPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputChatPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputChatPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8953ad37: func() error {

			m4 := &InputPhoto{}
			m4.Decode(dBuf)
			m.SetId(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputChatPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// DocumentAttribute <--
//  + TL_DocumentAttributeImageSize
//  + TL_DocumentAttributeAnimated
//  + TL_DocumentAttributeSticker
//  + TL_DocumentAttributeVideo
//  + TL_DocumentAttributeAudio
//  + TL_DocumentAttributeFilename
//  + TL_DocumentAttributeHasStickers
//

func (m *DocumentAttribute) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_documentAttributeImageSize:
		t := m.To_DocumentAttributeImageSize()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeAnimated:
		t := m.To_DocumentAttributeAnimated()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeSticker:
		t := m.To_DocumentAttributeSticker()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeVideo:
		t := m.To_DocumentAttributeVideo()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeAudio:
		t := m.To_DocumentAttributeAudio()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeFilename:
		t := m.To_DocumentAttributeFilename()
		xBuf = t.Encode(layer)
	case Predicate_documentAttributeHasStickers:
		t := m.To_DocumentAttributeHasStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *DocumentAttribute) CalcByteSize(layer int32) int {
	return 0
}

func (m *DocumentAttribute) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6c37c15c:
		m2 := MakeTLDocumentAttributeImageSize(m)
		m2.Decode(dBuf)
	case 0x11b58939:
		m2 := MakeTLDocumentAttributeAnimated(m)
		m2.Decode(dBuf)
	case 0x6319d612:
		m2 := MakeTLDocumentAttributeSticker(m)
		m2.Decode(dBuf)
	case 0xef02ce6:
		m2 := MakeTLDocumentAttributeVideo(m)
		m2.Decode(dBuf)
	case 0x9852f9c6:
		m2 := MakeTLDocumentAttributeAudio(m)
		m2.Decode(dBuf)
	case 0x15590068:
		m2 := MakeTLDocumentAttributeFilename(m)
		m2.Decode(dBuf)
	case 0x9801d2f7:
		m2 := MakeTLDocumentAttributeHasStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *DocumentAttribute) DebugString() string {
	switch m.PredicateName {
	case Predicate_documentAttributeImageSize:
		t := m.To_DocumentAttributeImageSize()
		return t.DebugString()
	case Predicate_documentAttributeAnimated:
		t := m.To_DocumentAttributeAnimated()
		return t.DebugString()
	case Predicate_documentAttributeSticker:
		t := m.To_DocumentAttributeSticker()
		return t.DebugString()
	case Predicate_documentAttributeVideo:
		t := m.To_DocumentAttributeVideo()
		return t.DebugString()
	case Predicate_documentAttributeAudio:
		t := m.To_DocumentAttributeAudio()
		return t.DebugString()
	case Predicate_documentAttributeFilename:
		t := m.To_DocumentAttributeFilename()
		return t.DebugString()
	case Predicate_documentAttributeHasStickers:
		t := m.To_DocumentAttributeHasStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_DocumentAttributeImageSize
func (m *DocumentAttribute) To_DocumentAttributeImageSize() *TLDocumentAttributeImageSize {
	m.PredicateName = Predicate_documentAttributeImageSize
	return &TLDocumentAttributeImageSize{
		Data2: m,
	}
}

// To_DocumentAttributeAnimated
func (m *DocumentAttribute) To_DocumentAttributeAnimated() *TLDocumentAttributeAnimated {
	m.PredicateName = Predicate_documentAttributeAnimated
	return &TLDocumentAttributeAnimated{
		Data2: m,
	}
}

// To_DocumentAttributeSticker
func (m *DocumentAttribute) To_DocumentAttributeSticker() *TLDocumentAttributeSticker {
	m.PredicateName = Predicate_documentAttributeSticker
	return &TLDocumentAttributeSticker{
		Data2: m,
	}
}

// To_DocumentAttributeVideo
func (m *DocumentAttribute) To_DocumentAttributeVideo() *TLDocumentAttributeVideo {
	m.PredicateName = Predicate_documentAttributeVideo
	return &TLDocumentAttributeVideo{
		Data2: m,
	}
}

// To_DocumentAttributeAudio
func (m *DocumentAttribute) To_DocumentAttributeAudio() *TLDocumentAttributeAudio {
	m.PredicateName = Predicate_documentAttributeAudio
	return &TLDocumentAttributeAudio{
		Data2: m,
	}
}

// To_DocumentAttributeFilename
func (m *DocumentAttribute) To_DocumentAttributeFilename() *TLDocumentAttributeFilename {
	m.PredicateName = Predicate_documentAttributeFilename
	return &TLDocumentAttributeFilename{
		Data2: m,
	}
}

// To_DocumentAttributeHasStickers
func (m *DocumentAttribute) To_DocumentAttributeHasStickers() *TLDocumentAttributeHasStickers {
	m.PredicateName = Predicate_documentAttributeHasStickers
	return &TLDocumentAttributeHasStickers{
		Data2: m,
	}
}

// MakeTLDocumentAttributeImageSize
func MakeTLDocumentAttributeImageSize(data2 *DocumentAttribute) *TLDocumentAttributeImageSize {
	if data2 == nil {
		return &TLDocumentAttributeImageSize{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeImageSize,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeImageSize
		return &TLDocumentAttributeImageSize{Data2: data2}
	}
}

func (m *TLDocumentAttributeImageSize) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeImageSize
	return m.Data2
}

func (m *TLDocumentAttributeImageSize) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeImageSize) GetW() int32  { return m.Data2.W }

func (m *TLDocumentAttributeImageSize) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeImageSize) GetH() int32  { return m.Data2.H }

func (m *TLDocumentAttributeImageSize) GetPredicateName() string {
	return Predicate_documentAttributeImageSize
}

func (m *TLDocumentAttributeImageSize) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6c37c15c: func() []byte {
			x.UInt(0x6c37c15c)

			x.Int(m.GetW())
			x.Int(m.GetH())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeImageSize, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeImageSize, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeImageSize) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeImageSize) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6c37c15c: func() error {
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeImageSize) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeAnimated
func MakeTLDocumentAttributeAnimated(data2 *DocumentAttribute) *TLDocumentAttributeAnimated {
	if data2 == nil {
		return &TLDocumentAttributeAnimated{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeAnimated,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeAnimated
		return &TLDocumentAttributeAnimated{Data2: data2}
	}
}

func (m *TLDocumentAttributeAnimated) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeAnimated
	return m.Data2
}

func (m *TLDocumentAttributeAnimated) GetPredicateName() string {
	return Predicate_documentAttributeAnimated
}

func (m *TLDocumentAttributeAnimated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x11b58939: func() []byte {
			x.UInt(0x11b58939)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeAnimated, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeAnimated, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeAnimated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeAnimated) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x11b58939: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeAnimated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeSticker
func MakeTLDocumentAttributeSticker(data2 *DocumentAttribute) *TLDocumentAttributeSticker {
	if data2 == nil {
		return &TLDocumentAttributeSticker{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeSticker,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeSticker
		return &TLDocumentAttributeSticker{Data2: data2}
	}
}

func (m *TLDocumentAttributeSticker) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeSticker
	return m.Data2
}

//// flags
func (m *TLDocumentAttributeSticker) SetMask(v bool) { m.Data2.Mask = v }
func (m *TLDocumentAttributeSticker) GetMask() bool  { return m.Data2.Mask }

func (m *TLDocumentAttributeSticker) SetAlt(v string) { m.Data2.Alt = v }
func (m *TLDocumentAttributeSticker) GetAlt() string  { return m.Data2.Alt }

func (m *TLDocumentAttributeSticker) SetStickerset(v *InputStickerSet) { m.Data2.Stickerset = v }
func (m *TLDocumentAttributeSticker) GetStickerset() *InputStickerSet  { return m.Data2.Stickerset }

func (m *TLDocumentAttributeSticker) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLDocumentAttributeSticker) GetMaskCoords() *MaskCoords  { return m.Data2.MaskCoords }

func (m *TLDocumentAttributeSticker) GetPredicateName() string {
	return Predicate_documentAttributeSticker
}

func (m *TLDocumentAttributeSticker) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6319d612: func() []byte {
			x.UInt(0x6319d612)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMask() == true {
					flags |= 1 << 1
				}

				if m.GetMaskCoords() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetAlt())
			x.Bytes(m.GetStickerset().Encode(layer))
			if m.GetMaskCoords() != nil {
				x.Bytes(m.GetMaskCoords().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeSticker, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeSticker, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeSticker) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeSticker) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6319d612: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetMask(true)
			}
			m.SetAlt(dBuf.String())

			m5 := &InputStickerSet{}
			m5.Decode(dBuf)
			m.SetStickerset(m5)

			if (flags & (1 << 0)) != 0 {
				m6 := &MaskCoords{}
				m6.Decode(dBuf)
				m.SetMaskCoords(m6)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeSticker) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeVideo
func MakeTLDocumentAttributeVideo(data2 *DocumentAttribute) *TLDocumentAttributeVideo {
	if data2 == nil {
		return &TLDocumentAttributeVideo{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeVideo,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeVideo
		return &TLDocumentAttributeVideo{Data2: data2}
	}
}

func (m *TLDocumentAttributeVideo) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeVideo
	return m.Data2
}

//// flags
func (m *TLDocumentAttributeVideo) SetRoundMessage(v bool) { m.Data2.RoundMessage = v }
func (m *TLDocumentAttributeVideo) GetRoundMessage() bool  { return m.Data2.RoundMessage }

func (m *TLDocumentAttributeVideo) SetSupportsStreaming(v bool) { m.Data2.SupportsStreaming = v }
func (m *TLDocumentAttributeVideo) GetSupportsStreaming() bool  { return m.Data2.SupportsStreaming }

func (m *TLDocumentAttributeVideo) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeVideo) GetDuration() int32  { return m.Data2.Duration }

func (m *TLDocumentAttributeVideo) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeVideo) GetW() int32  { return m.Data2.W }

func (m *TLDocumentAttributeVideo) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeVideo) GetH() int32  { return m.Data2.H }

func (m *TLDocumentAttributeVideo) GetPredicateName() string {
	return Predicate_documentAttributeVideo
}

func (m *TLDocumentAttributeVideo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xef02ce6: func() []byte {
			x.UInt(0xef02ce6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRoundMessage() == true {
					flags |= 1 << 0
				}
				if m.GetSupportsStreaming() == true {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetDuration())
			x.Int(m.GetW())
			x.Int(m.GetH())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeVideo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeVideo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeVideo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeVideo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xef02ce6: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRoundMessage(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetSupportsStreaming(true)
			}
			m.SetDuration(dBuf.Int())
			m.SetW(dBuf.Int())
			m.SetH(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeVideo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeAudio
func MakeTLDocumentAttributeAudio(data2 *DocumentAttribute) *TLDocumentAttributeAudio {
	if data2 == nil {
		return &TLDocumentAttributeAudio{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeAudio,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeAudio
		return &TLDocumentAttributeAudio{Data2: data2}
	}
}

func (m *TLDocumentAttributeAudio) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeAudio
	return m.Data2
}

//// flags
func (m *TLDocumentAttributeAudio) SetVoice(v bool) { m.Data2.Voice = v }
func (m *TLDocumentAttributeAudio) GetVoice() bool  { return m.Data2.Voice }

func (m *TLDocumentAttributeAudio) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeAudio) GetDuration() int32  { return m.Data2.Duration }

func (m *TLDocumentAttributeAudio) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLDocumentAttributeAudio) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLDocumentAttributeAudio) SetPerformer(v *types.StringValue) { m.Data2.Performer = v }
func (m *TLDocumentAttributeAudio) GetPerformer() *types.StringValue  { return m.Data2.Performer }

func (m *TLDocumentAttributeAudio) SetWaveform(v []byte) { m.Data2.Waveform = v }
func (m *TLDocumentAttributeAudio) GetWaveform() []byte  { return m.Data2.Waveform }

func (m *TLDocumentAttributeAudio) GetPredicateName() string {
	return Predicate_documentAttributeAudio
}

func (m *TLDocumentAttributeAudio) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9852f9c6: func() []byte {
			x.UInt(0x9852f9c6)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVoice() == true {
					flags |= 1 << 10
				}

				if m.GetTitle() != nil {
					flags |= 1 << 0
				}
				if m.GetPerformer() != nil {
					flags |= 1 << 1
				}
				if m.GetWaveform() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetDuration())
			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			if m.GetPerformer() != nil {
				x.String(m.GetPerformer().Value)
			}

			if m.GetWaveform() != nil {
				x.StringBytes(m.GetWaveform())
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeAudio, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeAudio, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeAudio) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeAudio) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9852f9c6: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 10)) != 0 {
				m.SetVoice(true)
			}
			m.SetDuration(dBuf.Int())
			if (flags & (1 << 0)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetPerformer(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetWaveform(dBuf.StringBytes())
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeAudio) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeFilename
func MakeTLDocumentAttributeFilename(data2 *DocumentAttribute) *TLDocumentAttributeFilename {
	if data2 == nil {
		return &TLDocumentAttributeFilename{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeFilename,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeFilename
		return &TLDocumentAttributeFilename{Data2: data2}
	}
}

func (m *TLDocumentAttributeFilename) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeFilename
	return m.Data2
}

func (m *TLDocumentAttributeFilename) SetFileName(v string) { m.Data2.FileName = v }
func (m *TLDocumentAttributeFilename) GetFileName() string  { return m.Data2.FileName }

func (m *TLDocumentAttributeFilename) GetPredicateName() string {
	return Predicate_documentAttributeFilename
}

func (m *TLDocumentAttributeFilename) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x15590068: func() []byte {
			x.UInt(0x15590068)

			x.String(m.GetFileName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeFilename, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeFilename, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeFilename) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeFilename) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x15590068: func() error {
			m.SetFileName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeFilename) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLDocumentAttributeHasStickers
func MakeTLDocumentAttributeHasStickers(data2 *DocumentAttribute) *TLDocumentAttributeHasStickers {
	if data2 == nil {
		return &TLDocumentAttributeHasStickers{Data2: &DocumentAttribute{
			PredicateName: Predicate_documentAttributeHasStickers,
		}}
	} else {
		data2.PredicateName = Predicate_documentAttributeHasStickers
		return &TLDocumentAttributeHasStickers{Data2: data2}
	}
}

func (m *TLDocumentAttributeHasStickers) To_DocumentAttribute() *DocumentAttribute {
	m.Data2.PredicateName = Predicate_documentAttributeHasStickers
	return m.Data2
}

func (m *TLDocumentAttributeHasStickers) GetPredicateName() string {
	return Predicate_documentAttributeHasStickers
}

func (m *TLDocumentAttributeHasStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9801d2f7: func() []byte {
			x.UInt(0x9801d2f7)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_documentAttributeHasStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_documentAttributeHasStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLDocumentAttributeHasStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDocumentAttributeHasStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9801d2f7: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLDocumentAttributeHasStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_PasswordSettings <--
//  + TL_AccountPasswordSettings
//

func (m *Account_PasswordSettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_passwordSettings:
		t := m.To_AccountPasswordSettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_PasswordSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_PasswordSettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9a5c33e5:
		m2 := MakeTLAccountPasswordSettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_PasswordSettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_passwordSettings:
		t := m.To_AccountPasswordSettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountPasswordSettings
func (m *Account_PasswordSettings) To_AccountPasswordSettings() *TLAccountPasswordSettings {
	m.PredicateName = Predicate_account_passwordSettings
	return &TLAccountPasswordSettings{
		Data2: m,
	}
}

// MakeTLAccountPasswordSettings
func MakeTLAccountPasswordSettings(data2 *Account_PasswordSettings) *TLAccountPasswordSettings {
	if data2 == nil {
		return &TLAccountPasswordSettings{Data2: &Account_PasswordSettings{
			PredicateName: Predicate_account_passwordSettings,
		}}
	} else {
		data2.PredicateName = Predicate_account_passwordSettings
		return &TLAccountPasswordSettings{Data2: data2}
	}
}

func (m *TLAccountPasswordSettings) To_Account_PasswordSettings() *Account_PasswordSettings {
	m.Data2.PredicateName = Predicate_account_passwordSettings
	return m.Data2
}

//// flags
func (m *TLAccountPasswordSettings) SetEmail(v *types.StringValue) { m.Data2.Email = v }
func (m *TLAccountPasswordSettings) GetEmail() *types.StringValue  { return m.Data2.Email }

func (m *TLAccountPasswordSettings) SetSecureSettings(v *SecureSecretSettings) {
	m.Data2.SecureSettings = v
}
func (m *TLAccountPasswordSettings) GetSecureSettings() *SecureSecretSettings {
	return m.Data2.SecureSettings
}

func (m *TLAccountPasswordSettings) GetPredicateName() string {
	return Predicate_account_passwordSettings
}

func (m *TLAccountPasswordSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9a5c33e5: func() []byte {
			x.UInt(0x9a5c33e5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetEmail() != nil {
					flags |= 1 << 0
				}
				if m.GetSecureSettings() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetEmail() != nil {
				x.String(m.GetEmail().Value)
			}

			if m.GetSecureSettings() != nil {
				x.Bytes(m.GetSecureSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_passwordSettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_passwordSettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountPasswordSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountPasswordSettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9a5c33e5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetEmail(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m2 := &SecureSecretSettings{}
				m2.Decode(dBuf)
				m.SetSecureSettings(m2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountPasswordSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChannelLocation <--
//  + TL_ChannelLocationEmpty
//  + TL_ChannelLocation
//

func (m *ChannelLocation) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_channelLocationEmpty:
		t := m.To_ChannelLocationEmpty()
		xBuf = t.Encode(layer)
	case Predicate_channelLocation:
		t := m.To_ChannelLocation()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChannelLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChannelLocation) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbfb5ad8b:
		m2 := MakeTLChannelLocationEmpty(m)
		m2.Decode(dBuf)
	case 0x209b82db:
		m2 := MakeTLChannelLocation(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChannelLocation) DebugString() string {
	switch m.PredicateName {
	case Predicate_channelLocationEmpty:
		t := m.To_ChannelLocationEmpty()
		return t.DebugString()
	case Predicate_channelLocation:
		t := m.To_ChannelLocation()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChannelLocationEmpty
func (m *ChannelLocation) To_ChannelLocationEmpty() *TLChannelLocationEmpty {
	m.PredicateName = Predicate_channelLocationEmpty
	return &TLChannelLocationEmpty{
		Data2: m,
	}
}

// To_ChannelLocation
func (m *ChannelLocation) To_ChannelLocation() *TLChannelLocation {
	m.PredicateName = Predicate_channelLocation
	return &TLChannelLocation{
		Data2: m,
	}
}

// MakeTLChannelLocationEmpty
func MakeTLChannelLocationEmpty(data2 *ChannelLocation) *TLChannelLocationEmpty {
	if data2 == nil {
		return &TLChannelLocationEmpty{Data2: &ChannelLocation{
			PredicateName: Predicate_channelLocationEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_channelLocationEmpty
		return &TLChannelLocationEmpty{Data2: data2}
	}
}

func (m *TLChannelLocationEmpty) To_ChannelLocation() *ChannelLocation {
	m.Data2.PredicateName = Predicate_channelLocationEmpty
	return m.Data2
}

func (m *TLChannelLocationEmpty) GetPredicateName() string {
	return Predicate_channelLocationEmpty
}

func (m *TLChannelLocationEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbfb5ad8b: func() []byte {
			x.UInt(0xbfb5ad8b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelLocationEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelLocationEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelLocationEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelLocationEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbfb5ad8b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelLocationEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelLocation
func MakeTLChannelLocation(data2 *ChannelLocation) *TLChannelLocation {
	if data2 == nil {
		return &TLChannelLocation{Data2: &ChannelLocation{
			PredicateName: Predicate_channelLocation,
		}}
	} else {
		data2.PredicateName = Predicate_channelLocation
		return &TLChannelLocation{Data2: data2}
	}
}

func (m *TLChannelLocation) To_ChannelLocation() *ChannelLocation {
	m.Data2.PredicateName = Predicate_channelLocation
	return m.Data2
}

func (m *TLChannelLocation) SetGeoPoint(v *GeoPoint) { m.Data2.GeoPoint = v }
func (m *TLChannelLocation) GetGeoPoint() *GeoPoint  { return m.Data2.GeoPoint }

func (m *TLChannelLocation) SetAddress(v string) { m.Data2.Address = v }
func (m *TLChannelLocation) GetAddress() string  { return m.Data2.Address }

func (m *TLChannelLocation) GetPredicateName() string {
	return Predicate_channelLocation
}

func (m *TLChannelLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x209b82db: func() []byte {
			x.UInt(0x209b82db)

			x.Bytes(m.GetGeoPoint().Encode(layer))
			x.String(m.GetAddress())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelLocation, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelLocation, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelLocation) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x209b82db: func() error {

			m0 := &GeoPoint{}
			m0.Decode(dBuf)
			m.SetGeoPoint(m0)

			m.SetAddress(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopAdmin <--
//  + TL_StatsGroupTopAdmin
//

func (m *StatsGroupTopAdmin) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsGroupTopAdmin:
		t := m.To_StatsGroupTopAdmin()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsGroupTopAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsGroupTopAdmin) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xd7584c87:
		m2 := MakeTLStatsGroupTopAdmin(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsGroupTopAdmin) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsGroupTopAdmin:
		t := m.To_StatsGroupTopAdmin()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsGroupTopAdmin
func (m *StatsGroupTopAdmin) To_StatsGroupTopAdmin() *TLStatsGroupTopAdmin {
	m.PredicateName = Predicate_statsGroupTopAdmin
	return &TLStatsGroupTopAdmin{
		Data2: m,
	}
}

// MakeTLStatsGroupTopAdmin
func MakeTLStatsGroupTopAdmin(data2 *StatsGroupTopAdmin) *TLStatsGroupTopAdmin {
	if data2 == nil {
		return &TLStatsGroupTopAdmin{Data2: &StatsGroupTopAdmin{
			PredicateName: Predicate_statsGroupTopAdmin,
		}}
	} else {
		data2.PredicateName = Predicate_statsGroupTopAdmin
		return &TLStatsGroupTopAdmin{Data2: data2}
	}
}

func (m *TLStatsGroupTopAdmin) To_StatsGroupTopAdmin() *StatsGroupTopAdmin {
	m.Data2.PredicateName = Predicate_statsGroupTopAdmin
	return m.Data2
}

func (m *TLStatsGroupTopAdmin) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLStatsGroupTopAdmin) GetUserId() int64  { return m.Data2.UserId }

func (m *TLStatsGroupTopAdmin) SetDeleted(v int32) { m.Data2.Deleted = v }
func (m *TLStatsGroupTopAdmin) GetDeleted() int32  { return m.Data2.Deleted }

func (m *TLStatsGroupTopAdmin) SetKicked(v int32) { m.Data2.Kicked = v }
func (m *TLStatsGroupTopAdmin) GetKicked() int32  { return m.Data2.Kicked }

func (m *TLStatsGroupTopAdmin) SetBanned(v int32) { m.Data2.Banned = v }
func (m *TLStatsGroupTopAdmin) GetBanned() int32  { return m.Data2.Banned }

func (m *TLStatsGroupTopAdmin) GetPredicateName() string {
	return Predicate_statsGroupTopAdmin
}

func (m *TLStatsGroupTopAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd7584c87: func() []byte {
			x.UInt(0xd7584c87)

			x.Long(m.GetUserId())
			x.Int(m.GetDeleted())
			x.Int(m.GetKicked())
			x.Int(m.GetBanned())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsGroupTopAdmin, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsGroupTopAdmin, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsGroupTopAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGroupTopAdmin) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd7584c87: func() error {
			m.SetUserId(dBuf.Long())
			m.SetDeleted(dBuf.Int())
			m.SetKicked(dBuf.Int())
			m.SetBanned(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsGroupTopAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Chat <--
//  + TL_ChatEmpty
//  + TL_Chat
//  + TL_ChatForbidden
//  + TL_Channel
//  + TL_ChannelForbidden
//

func (m *Chat) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatEmpty:
		t := m.To_ChatEmpty()
		xBuf = t.Encode(layer)
	case Predicate_chat:
		t := m.To_Chat()
		xBuf = t.Encode(layer)
	case Predicate_chatForbidden:
		t := m.To_ChatForbidden()
		xBuf = t.Encode(layer)
	case Predicate_channel:
		t := m.To_Channel()
		xBuf = t.Encode(layer)
	case Predicate_channelForbidden:
		t := m.To_ChannelForbidden()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Chat) CalcByteSize(layer int32) int {
	return 0
}

func (m *Chat) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x29562865:
		m2 := MakeTLChatEmpty(m)
		m2.Decode(dBuf)
	case 0x41cbf256:
		m2 := MakeTLChat(m)
		m2.Decode(dBuf)
	case 0x6592a1a7:
		m2 := MakeTLChatForbidden(m)
		m2.Decode(dBuf)
	case 0x8261ac61:
		m2 := MakeTLChannel(m)
		m2.Decode(dBuf)
	case 0x17d493d5:
		m2 := MakeTLChannelForbidden(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Chat) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatEmpty:
		t := m.To_ChatEmpty()
		return t.DebugString()
	case Predicate_chat:
		t := m.To_Chat()
		return t.DebugString()
	case Predicate_chatForbidden:
		t := m.To_ChatForbidden()
		return t.DebugString()
	case Predicate_channel:
		t := m.To_Channel()
		return t.DebugString()
	case Predicate_channelForbidden:
		t := m.To_ChannelForbidden()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatEmpty
func (m *Chat) To_ChatEmpty() *TLChatEmpty {
	m.PredicateName = Predicate_chatEmpty
	return &TLChatEmpty{
		Data2: m,
	}
}

// To_Chat
func (m *Chat) To_Chat() *TLChat {
	m.PredicateName = Predicate_chat
	return &TLChat{
		Data2: m,
	}
}

// To_ChatForbidden
func (m *Chat) To_ChatForbidden() *TLChatForbidden {
	m.PredicateName = Predicate_chatForbidden
	return &TLChatForbidden{
		Data2: m,
	}
}

// To_Channel
func (m *Chat) To_Channel() *TLChannel {
	m.PredicateName = Predicate_channel
	return &TLChannel{
		Data2: m,
	}
}

// To_ChannelForbidden
func (m *Chat) To_ChannelForbidden() *TLChannelForbidden {
	m.PredicateName = Predicate_channelForbidden
	return &TLChannelForbidden{
		Data2: m,
	}
}

// MakeTLChatEmpty
func MakeTLChatEmpty(data2 *Chat) *TLChatEmpty {
	if data2 == nil {
		return &TLChatEmpty{Data2: &Chat{
			PredicateName: Predicate_chatEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_chatEmpty
		return &TLChatEmpty{Data2: data2}
	}
}

func (m *TLChatEmpty) To_Chat() *Chat {
	m.Data2.PredicateName = Predicate_chatEmpty
	return m.Data2
}

func (m *TLChatEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLChatEmpty) GetId() int64  { return m.Data2.Id }

func (m *TLChatEmpty) GetPredicateName() string {
	return Predicate_chatEmpty
}

func (m *TLChatEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x29562865: func() []byte {
			x.UInt(0x29562865)

			x.Long(m.GetId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x29562865: func() error {
			m.SetId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChat
func MakeTLChat(data2 *Chat) *TLChat {
	if data2 == nil {
		return &TLChat{Data2: &Chat{
			PredicateName: Predicate_chat,
		}}
	} else {
		data2.PredicateName = Predicate_chat
		return &TLChat{Data2: data2}
	}
}

func (m *TLChat) To_Chat() *Chat {
	m.Data2.PredicateName = Predicate_chat
	return m.Data2
}

//// flags
func (m *TLChat) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChat) GetCreator() bool  { return m.Data2.Creator }

func (m *TLChat) SetKicked(v bool) { m.Data2.Kicked = v }
func (m *TLChat) GetKicked() bool  { return m.Data2.Kicked }

func (m *TLChat) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChat) GetLeft() bool  { return m.Data2.Left }

func (m *TLChat) SetDeactivated(v bool) { m.Data2.Deactivated = v }
func (m *TLChat) GetDeactivated() bool  { return m.Data2.Deactivated }

func (m *TLChat) SetCallActive(v bool) { m.Data2.CallActive = v }
func (m *TLChat) GetCallActive() bool  { return m.Data2.CallActive }

func (m *TLChat) SetCallNotEmpty(v bool) { m.Data2.CallNotEmpty = v }
func (m *TLChat) GetCallNotEmpty() bool  { return m.Data2.CallNotEmpty }

func (m *TLChat) SetNoforwards(v bool) { m.Data2.Noforwards = v }
func (m *TLChat) GetNoforwards() bool  { return m.Data2.Noforwards }

func (m *TLChat) SetId(v int64) { m.Data2.Id = v }
func (m *TLChat) GetId() int64  { return m.Data2.Id }

func (m *TLChat) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChat) GetTitle() string  { return m.Data2.Title }

func (m *TLChat) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChat) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLChat) SetParticipantsCount_INT32(v int32) { m.Data2.ParticipantsCount_INT32 = v }
func (m *TLChat) GetParticipantsCount_INT32() int32  { return m.Data2.ParticipantsCount_INT32 }

func (m *TLChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChat) GetDate() int32  { return m.Data2.Date }

func (m *TLChat) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChat) GetVersion() int32  { return m.Data2.Version }

func (m *TLChat) SetMigratedTo(v *InputChannel) { m.Data2.MigratedTo = v }
func (m *TLChat) GetMigratedTo() *InputChannel  { return m.Data2.MigratedTo }

func (m *TLChat) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights = v }
func (m *TLChat) GetAdminRights() *ChatAdminRights  { return m.Data2.AdminRights }

func (m *TLChat) SetDefaultBannedRights(v *ChatBannedRights) { m.Data2.DefaultBannedRights = v }
func (m *TLChat) GetDefaultBannedRights() *ChatBannedRights  { return m.Data2.DefaultBannedRights }

func (m *TLChat) GetPredicateName() string {
	return Predicate_chat
}

func (m *TLChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x41cbf256: func() []byte {
			x.UInt(0x41cbf256)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCreator() == true {
					flags |= 1 << 0
				}
				if m.GetKicked() == true {
					flags |= 1 << 1
				}
				if m.GetLeft() == true {
					flags |= 1 << 2
				}
				if m.GetDeactivated() == true {
					flags |= 1 << 5
				}
				if m.GetCallActive() == true {
					flags |= 1 << 23
				}
				if m.GetCallNotEmpty() == true {
					flags |= 1 << 24
				}
				if m.GetNoforwards() == true {
					flags |= 1 << 25
				}

				if m.GetMigratedTo() != nil {
					flags |= 1 << 6
				}
				if m.GetAdminRights() != nil {
					flags |= 1 << 14
				}
				if m.GetDefaultBannedRights() != nil {
					flags |= 1 << 18
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.String(m.GetTitle())
			x.Bytes(m.GetPhoto().Encode(layer))
			x.Int(m.GetParticipantsCount_INT32())
			x.Int(m.GetDate())
			x.Int(m.GetVersion())
			if m.GetMigratedTo() != nil {
				x.Bytes(m.GetMigratedTo().Encode(layer))
			}

			if m.GetAdminRights() != nil {
				x.Bytes(m.GetAdminRights().Encode(layer))
			}

			if m.GetDefaultBannedRights() != nil {
				x.Bytes(m.GetDefaultBannedRights().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x41cbf256: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCreator(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetKicked(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetLeft(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetDeactivated(true)
			}
			if (flags & (1 << 23)) != 0 {
				m.SetCallActive(true)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetCallNotEmpty(true)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetNoforwards(true)
			}
			m.SetId(dBuf.Long())
			m.SetTitle(dBuf.String())

			m10 := &ChatPhoto{}
			m10.Decode(dBuf)
			m.SetPhoto(m10)

			m.SetParticipantsCount_INT32(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetVersion(dBuf.Int())
			if (flags & (1 << 6)) != 0 {
				m14 := &InputChannel{}
				m14.Decode(dBuf)
				m.SetMigratedTo(m14)
			}
			if (flags & (1 << 14)) != 0 {
				m15 := &ChatAdminRights{}
				m15.Decode(dBuf)
				m.SetAdminRights(m15)
			}
			if (flags & (1 << 18)) != 0 {
				m16 := &ChatBannedRights{}
				m16.Decode(dBuf)
				m.SetDefaultBannedRights(m16)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatForbidden
func MakeTLChatForbidden(data2 *Chat) *TLChatForbidden {
	if data2 == nil {
		return &TLChatForbidden{Data2: &Chat{
			PredicateName: Predicate_chatForbidden,
		}}
	} else {
		data2.PredicateName = Predicate_chatForbidden
		return &TLChatForbidden{Data2: data2}
	}
}

func (m *TLChatForbidden) To_Chat() *Chat {
	m.Data2.PredicateName = Predicate_chatForbidden
	return m.Data2
}

func (m *TLChatForbidden) SetId(v int64) { m.Data2.Id = v }
func (m *TLChatForbidden) GetId() int64  { return m.Data2.Id }

func (m *TLChatForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatForbidden) GetTitle() string  { return m.Data2.Title }

func (m *TLChatForbidden) GetPredicateName() string {
	return Predicate_chatForbidden
}

func (m *TLChatForbidden) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6592a1a7: func() []byte {
			x.UInt(0x6592a1a7)

			x.Long(m.GetId())
			x.String(m.GetTitle())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatForbidden, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatForbidden, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatForbidden) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatForbidden) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6592a1a7: func() error {
			m.SetId(dBuf.Long())
			m.SetTitle(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatForbidden) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannel
func MakeTLChannel(data2 *Chat) *TLChannel {
	if data2 == nil {
		return &TLChannel{Data2: &Chat{
			PredicateName: Predicate_channel,
		}}
	} else {
		data2.PredicateName = Predicate_channel
		return &TLChannel{Data2: data2}
	}
}

func (m *TLChannel) To_Chat() *Chat {
	m.Data2.PredicateName = Predicate_channel
	return m.Data2
}

//// flags
func (m *TLChannel) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChannel) GetCreator() bool  { return m.Data2.Creator }

func (m *TLChannel) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannel) GetLeft() bool  { return m.Data2.Left }

func (m *TLChannel) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannel) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChannel) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLChannel) GetVerified() bool  { return m.Data2.Verified }

func (m *TLChannel) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannel) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChannel) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLChannel) GetRestricted() bool  { return m.Data2.Restricted }

func (m *TLChannel) SetSignatures(v bool) { m.Data2.Signatures = v }
func (m *TLChannel) GetSignatures() bool  { return m.Data2.Signatures }

func (m *TLChannel) SetMin(v bool) { m.Data2.Min = v }
func (m *TLChannel) GetMin() bool  { return m.Data2.Min }

func (m *TLChannel) SetScam(v bool) { m.Data2.Scam = v }
func (m *TLChannel) GetScam() bool  { return m.Data2.Scam }

func (m *TLChannel) SetHasLink(v bool) { m.Data2.HasLink = v }
func (m *TLChannel) GetHasLink() bool  { return m.Data2.HasLink }

func (m *TLChannel) SetHasGeo(v bool) { m.Data2.HasGeo = v }
func (m *TLChannel) GetHasGeo() bool  { return m.Data2.HasGeo }

func (m *TLChannel) SetSlowmodeEnabled(v bool) { m.Data2.SlowmodeEnabled = v }
func (m *TLChannel) GetSlowmodeEnabled() bool  { return m.Data2.SlowmodeEnabled }

func (m *TLChannel) SetCallActive(v bool) { m.Data2.CallActive = v }
func (m *TLChannel) GetCallActive() bool  { return m.Data2.CallActive }

func (m *TLChannel) SetCallNotEmpty(v bool) { m.Data2.CallNotEmpty = v }
func (m *TLChannel) GetCallNotEmpty() bool  { return m.Data2.CallNotEmpty }

func (m *TLChannel) SetFake(v bool) { m.Data2.Fake = v }
func (m *TLChannel) GetFake() bool  { return m.Data2.Fake }

func (m *TLChannel) SetGigagroup(v bool) { m.Data2.Gigagroup = v }
func (m *TLChannel) GetGigagroup() bool  { return m.Data2.Gigagroup }

func (m *TLChannel) SetNoforwards(v bool) { m.Data2.Noforwards = v }
func (m *TLChannel) GetNoforwards() bool  { return m.Data2.Noforwards }

func (m *TLChannel) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannel) GetId() int64  { return m.Data2.Id }

func (m *TLChannel) SetAccessHash_FLAGINT64(v *types.Int64Value) { m.Data2.AccessHash_FLAGINT64 = v }
func (m *TLChannel) GetAccessHash_FLAGINT64() *types.Int64Value  { return m.Data2.AccessHash_FLAGINT64 }

func (m *TLChannel) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannel) GetTitle() string  { return m.Data2.Title }

func (m *TLChannel) SetUsername(v *types.StringValue) { m.Data2.Username = v }
func (m *TLChannel) GetUsername() *types.StringValue  { return m.Data2.Username }

func (m *TLChannel) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChannel) GetPhoto() *ChatPhoto  { return m.Data2.Photo }

func (m *TLChannel) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannel) GetDate() int32  { return m.Data2.Date }

func (m *TLChannel) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason = v }
func (m *TLChannel) GetRestrictionReason() []*RestrictionReason  { return m.Data2.RestrictionReason }

func (m *TLChannel) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights = v }
func (m *TLChannel) GetAdminRights() *ChatAdminRights  { return m.Data2.AdminRights }

func (m *TLChannel) SetBannedRights(v *ChatBannedRights) { m.Data2.BannedRights = v }
func (m *TLChannel) GetBannedRights() *ChatBannedRights  { return m.Data2.BannedRights }

func (m *TLChannel) SetDefaultBannedRights(v *ChatBannedRights) { m.Data2.DefaultBannedRights = v }
func (m *TLChannel) GetDefaultBannedRights() *ChatBannedRights  { return m.Data2.DefaultBannedRights }

func (m *TLChannel) SetParticipantsCount_FLAGINT32(v *types.Int32Value) {
	m.Data2.ParticipantsCount_FLAGINT32 = v
}
func (m *TLChannel) GetParticipantsCount_FLAGINT32() *types.Int32Value {
	return m.Data2.ParticipantsCount_FLAGINT32
}

func (m *TLChannel) GetPredicateName() string {
	return Predicate_channel
}

func (m *TLChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8261ac61: func() []byte {
			x.UInt(0x8261ac61)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCreator() == true {
					flags |= 1 << 0
				}
				if m.GetLeft() == true {
					flags |= 1 << 2
				}
				if m.GetBroadcast() == true {
					flags |= 1 << 5
				}
				if m.GetVerified() == true {
					flags |= 1 << 7
				}
				if m.GetMegagroup() == true {
					flags |= 1 << 8
				}
				if m.GetRestricted() == true {
					flags |= 1 << 9
				}
				if m.GetSignatures() == true {
					flags |= 1 << 11
				}
				if m.GetMin() == true {
					flags |= 1 << 12
				}
				if m.GetScam() == true {
					flags |= 1 << 19
				}
				if m.GetHasLink() == true {
					flags |= 1 << 20
				}
				if m.GetHasGeo() == true {
					flags |= 1 << 21
				}
				if m.GetSlowmodeEnabled() == true {
					flags |= 1 << 22
				}
				if m.GetCallActive() == true {
					flags |= 1 << 23
				}
				if m.GetCallNotEmpty() == true {
					flags |= 1 << 24
				}
				if m.GetFake() == true {
					flags |= 1 << 25
				}
				if m.GetGigagroup() == true {
					flags |= 1 << 26
				}
				if m.GetNoforwards() == true {
					flags |= 1 << 27
				}

				if m.GetAccessHash_FLAGINT64() != nil {
					flags |= 1 << 13
				}

				if m.GetUsername() != nil {
					flags |= 1 << 6
				}

				if m.GetRestrictionReason() != nil {
					flags |= 1 << 9
				}
				if m.GetAdminRights() != nil {
					flags |= 1 << 14
				}
				if m.GetBannedRights() != nil {
					flags |= 1 << 15
				}
				if m.GetDefaultBannedRights() != nil {
					flags |= 1 << 18
				}
				if m.GetParticipantsCount_FLAGINT32() != nil {
					flags |= 1 << 17
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			if m.GetAccessHash_FLAGINT64() != nil {
				x.Long(m.GetAccessHash_FLAGINT64().Value)
			}

			x.String(m.GetTitle())
			if m.GetUsername() != nil {
				x.String(m.GetUsername().Value)
			}

			x.Bytes(m.GetPhoto().Encode(layer))
			x.Int(m.GetDate())
			if m.GetRestrictionReason() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetRestrictionReason())))
				for _, v := range m.GetRestrictionReason() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetAdminRights() != nil {
				x.Bytes(m.GetAdminRights().Encode(layer))
			}

			if m.GetBannedRights() != nil {
				x.Bytes(m.GetBannedRights().Encode(layer))
			}

			if m.GetDefaultBannedRights() != nil {
				x.Bytes(m.GetDefaultBannedRights().Encode(layer))
			}

			if m.GetParticipantsCount_FLAGINT32() != nil {
				x.Int(m.GetParticipantsCount_FLAGINT32().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8261ac61: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCreator(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetLeft(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetBroadcast(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetVerified(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetMegagroup(true)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetRestricted(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetSignatures(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 19)) != 0 {
				m.SetScam(true)
			}
			if (flags & (1 << 20)) != 0 {
				m.SetHasLink(true)
			}
			if (flags & (1 << 21)) != 0 {
				m.SetHasGeo(true)
			}
			if (flags & (1 << 22)) != 0 {
				m.SetSlowmodeEnabled(true)
			}
			if (flags & (1 << 23)) != 0 {
				m.SetCallActive(true)
			}
			if (flags & (1 << 24)) != 0 {
				m.SetCallNotEmpty(true)
			}
			if (flags & (1 << 25)) != 0 {
				m.SetFake(true)
			}
			if (flags & (1 << 26)) != 0 {
				m.SetGigagroup(true)
			}
			if (flags & (1 << 27)) != 0 {
				m.SetNoforwards(true)
			}
			m.SetId(dBuf.Long())
			if (flags & (1 << 13)) != 0 {
				m.SetAccessHash_FLAGINT64(&types.Int64Value{Value: dBuf.Long()})
			}

			m.SetTitle(dBuf.String())
			if (flags & (1 << 6)) != 0 {
				m.SetUsername(&types.StringValue{Value: dBuf.String()})
			}

			m10 := &ChatPhoto{}
			m10.Decode(dBuf)
			m.SetPhoto(m10)

			m.SetDate(dBuf.Int())
			if (flags & (1 << 9)) != 0 {
				c31 := dBuf.Int()
				if c31 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 31, c31)
					return dBuf.GetError()
				}
				l31 := dBuf.Int()
				v31 := make([]*RestrictionReason, l31)
				for i := int32(0); i < l31; i++ {
					v31[i] = &RestrictionReason{}
					v31[i].Decode(dBuf)
				}
				m.SetRestrictionReason(v31)
			}
			if (flags & (1 << 14)) != 0 {
				m15 := &ChatAdminRights{}
				m15.Decode(dBuf)
				m.SetAdminRights(m15)
			}
			if (flags & (1 << 15)) != 0 {
				m32 := &ChatBannedRights{}
				m32.Decode(dBuf)
				m.SetBannedRights(m32)
			}
			if (flags & (1 << 18)) != 0 {
				m16 := &ChatBannedRights{}
				m16.Decode(dBuf)
				m.SetDefaultBannedRights(m16)
			}
			if (flags & (1 << 17)) != 0 {
				m.SetParticipantsCount_FLAGINT32(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChannelForbidden
func MakeTLChannelForbidden(data2 *Chat) *TLChannelForbidden {
	if data2 == nil {
		return &TLChannelForbidden{Data2: &Chat{
			PredicateName: Predicate_channelForbidden,
		}}
	} else {
		data2.PredicateName = Predicate_channelForbidden
		return &TLChannelForbidden{Data2: data2}
	}
}

func (m *TLChannelForbidden) To_Chat() *Chat {
	m.Data2.PredicateName = Predicate_channelForbidden
	return m.Data2
}

//// flags
func (m *TLChannelForbidden) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannelForbidden) GetBroadcast() bool  { return m.Data2.Broadcast }

func (m *TLChannelForbidden) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannelForbidden) GetMegagroup() bool  { return m.Data2.Megagroup }

func (m *TLChannelForbidden) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannelForbidden) GetId() int64  { return m.Data2.Id }

func (m *TLChannelForbidden) SetAccessHash_INT64(v int64) { m.Data2.AccessHash_INT64 = v }
func (m *TLChannelForbidden) GetAccessHash_INT64() int64  { return m.Data2.AccessHash_INT64 }

func (m *TLChannelForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannelForbidden) GetTitle() string  { return m.Data2.Title }

func (m *TLChannelForbidden) SetUntilDate(v *types.Int32Value) { m.Data2.UntilDate = v }
func (m *TLChannelForbidden) GetUntilDate() *types.Int32Value  { return m.Data2.UntilDate }

func (m *TLChannelForbidden) GetPredicateName() string {
	return Predicate_channelForbidden
}

func (m *TLChannelForbidden) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x17d493d5: func() []byte {
			x.UInt(0x17d493d5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetBroadcast() == true {
					flags |= 1 << 5
				}
				if m.GetMegagroup() == true {
					flags |= 1 << 8
				}

				if m.GetUntilDate() != nil {
					flags |= 1 << 16
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash_INT64())
			x.String(m.GetTitle())
			if m.GetUntilDate() != nil {
				x.Int(m.GetUntilDate().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_channelForbidden, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_channelForbidden, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChannelForbidden) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelForbidden) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x17d493d5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 5)) != 0 {
				m.SetBroadcast(true)
			}
			if (flags & (1 << 8)) != 0 {
				m.SetMegagroup(true)
			}
			m.SetId(dBuf.Long())
			m.SetAccessHash_INT64(dBuf.Long())
			m.SetTitle(dBuf.String())
			if (flags & (1 << 16)) != 0 {
				m.SetUntilDate(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChannelForbidden) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_AllStickers <--
//  + TL_MessagesAllStickersNotModified
//  + TL_MessagesAllStickers
//

func (m *Messages_AllStickers) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_allStickersNotModified:
		t := m.To_MessagesAllStickersNotModified()
		xBuf = t.Encode(layer)
	case Predicate_messages_allStickers:
		t := m.To_MessagesAllStickers()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_AllStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_AllStickers) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe86602c3:
		m2 := MakeTLMessagesAllStickersNotModified(m)
		m2.Decode(dBuf)
	case 0xcdbbcebb:
		m2 := MakeTLMessagesAllStickers(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_AllStickers) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_allStickersNotModified:
		t := m.To_MessagesAllStickersNotModified()
		return t.DebugString()
	case Predicate_messages_allStickers:
		t := m.To_MessagesAllStickers()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesAllStickersNotModified
func (m *Messages_AllStickers) To_MessagesAllStickersNotModified() *TLMessagesAllStickersNotModified {
	m.PredicateName = Predicate_messages_allStickersNotModified
	return &TLMessagesAllStickersNotModified{
		Data2: m,
	}
}

// To_MessagesAllStickers
func (m *Messages_AllStickers) To_MessagesAllStickers() *TLMessagesAllStickers {
	m.PredicateName = Predicate_messages_allStickers
	return &TLMessagesAllStickers{
		Data2: m,
	}
}

// MakeTLMessagesAllStickersNotModified
func MakeTLMessagesAllStickersNotModified(data2 *Messages_AllStickers) *TLMessagesAllStickersNotModified {
	if data2 == nil {
		return &TLMessagesAllStickersNotModified{Data2: &Messages_AllStickers{
			PredicateName: Predicate_messages_allStickersNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_allStickersNotModified
		return &TLMessagesAllStickersNotModified{Data2: data2}
	}
}

func (m *TLMessagesAllStickersNotModified) To_Messages_AllStickers() *Messages_AllStickers {
	m.Data2.PredicateName = Predicate_messages_allStickersNotModified
	return m.Data2
}

func (m *TLMessagesAllStickersNotModified) GetPredicateName() string {
	return Predicate_messages_allStickersNotModified
}

func (m *TLMessagesAllStickersNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe86602c3: func() []byte {
			x.UInt(0xe86602c3)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_allStickersNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_allStickersNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAllStickersNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAllStickersNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe86602c3: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAllStickersNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesAllStickers
func MakeTLMessagesAllStickers(data2 *Messages_AllStickers) *TLMessagesAllStickers {
	if data2 == nil {
		return &TLMessagesAllStickers{Data2: &Messages_AllStickers{
			PredicateName: Predicate_messages_allStickers,
		}}
	} else {
		data2.PredicateName = Predicate_messages_allStickers
		return &TLMessagesAllStickers{Data2: data2}
	}
}

func (m *TLMessagesAllStickers) To_Messages_AllStickers() *Messages_AllStickers {
	m.Data2.PredicateName = Predicate_messages_allStickers
	return m.Data2
}

func (m *TLMessagesAllStickers) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLMessagesAllStickers) GetHash() int64  { return m.Data2.Hash }

func (m *TLMessagesAllStickers) SetSets(v []*StickerSet) { m.Data2.Sets = v }
func (m *TLMessagesAllStickers) GetSets() []*StickerSet  { return m.Data2.Sets }

func (m *TLMessagesAllStickers) GetPredicateName() string {
	return Predicate_messages_allStickers
}

func (m *TLMessagesAllStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcdbbcebb: func() []byte {
			x.UInt(0xcdbbcebb)

			x.Long(m.GetHash())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSets())))
			for _, v := range m.GetSets() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_allStickers, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_allStickers, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesAllStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAllStickers) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcdbbcebb: func() error {
			m.SetHash(dBuf.Long())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerSet, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerSet{}
				v1[i].Decode(dBuf)
			}
			m.SetSets(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesAllStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_ResolvedPeer <--
//  + TL_ContactsResolvedPeer
//

func (m *Contacts_ResolvedPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_resolvedPeer:
		t := m.To_ContactsResolvedPeer()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_ResolvedPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_ResolvedPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7f077ad9:
		m2 := MakeTLContactsResolvedPeer(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_ResolvedPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_resolvedPeer:
		t := m.To_ContactsResolvedPeer()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsResolvedPeer
func (m *Contacts_ResolvedPeer) To_ContactsResolvedPeer() *TLContactsResolvedPeer {
	m.PredicateName = Predicate_contacts_resolvedPeer
	return &TLContactsResolvedPeer{
		Data2: m,
	}
}

// MakeTLContactsResolvedPeer
func MakeTLContactsResolvedPeer(data2 *Contacts_ResolvedPeer) *TLContactsResolvedPeer {
	if data2 == nil {
		return &TLContactsResolvedPeer{Data2: &Contacts_ResolvedPeer{
			PredicateName: Predicate_contacts_resolvedPeer,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_resolvedPeer
		return &TLContactsResolvedPeer{Data2: data2}
	}
}

func (m *TLContactsResolvedPeer) To_Contacts_ResolvedPeer() *Contacts_ResolvedPeer {
	m.Data2.PredicateName = Predicate_contacts_resolvedPeer
	return m.Data2
}

func (m *TLContactsResolvedPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLContactsResolvedPeer) GetPeer() *Peer  { return m.Data2.Peer }

func (m *TLContactsResolvedPeer) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsResolvedPeer) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsResolvedPeer) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsResolvedPeer) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsResolvedPeer) GetPredicateName() string {
	return Predicate_contacts_resolvedPeer
}

func (m *TLContactsResolvedPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7f077ad9: func() []byte {
			x.UInt(0x7f077ad9)

			x.Bytes(m.GetPeer().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_resolvedPeer, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_resolvedPeer, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsResolvedPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsResolvedPeer) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7f077ad9: func() error {

			m0 := &Peer{}
			m0.Decode(dBuf)
			m.SetPeer(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsResolvedPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentReceipt <--
//  + TL_PaymentsPaymentReceipt
//

func (m *Payments_PaymentReceipt) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_payments_paymentReceipt:
		t := m.To_PaymentsPaymentReceipt()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Payments_PaymentReceipt) CalcByteSize(layer int32) int {
	return 0
}

func (m *Payments_PaymentReceipt) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x70c4fe03:
		m2 := MakeTLPaymentsPaymentReceipt(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Payments_PaymentReceipt) DebugString() string {
	switch m.PredicateName {
	case Predicate_payments_paymentReceipt:
		t := m.To_PaymentsPaymentReceipt()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentsPaymentReceipt
func (m *Payments_PaymentReceipt) To_PaymentsPaymentReceipt() *TLPaymentsPaymentReceipt {
	m.PredicateName = Predicate_payments_paymentReceipt
	return &TLPaymentsPaymentReceipt{
		Data2: m,
	}
}

// MakeTLPaymentsPaymentReceipt
func MakeTLPaymentsPaymentReceipt(data2 *Payments_PaymentReceipt) *TLPaymentsPaymentReceipt {
	if data2 == nil {
		return &TLPaymentsPaymentReceipt{Data2: &Payments_PaymentReceipt{
			PredicateName: Predicate_payments_paymentReceipt,
		}}
	} else {
		data2.PredicateName = Predicate_payments_paymentReceipt
		return &TLPaymentsPaymentReceipt{Data2: data2}
	}
}

func (m *TLPaymentsPaymentReceipt) To_Payments_PaymentReceipt() *Payments_PaymentReceipt {
	m.Data2.PredicateName = Predicate_payments_paymentReceipt
	return m.Data2
}

//// flags
func (m *TLPaymentsPaymentReceipt) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPaymentsPaymentReceipt) GetDate() int32  { return m.Data2.Date }

func (m *TLPaymentsPaymentReceipt) SetBotId(v int64) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentReceipt) GetBotId() int64  { return m.Data2.BotId }

func (m *TLPaymentsPaymentReceipt) SetProviderId(v int64) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentReceipt) GetProviderId() int64  { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentReceipt) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentsPaymentReceipt) GetTitle() string  { return m.Data2.Title }

func (m *TLPaymentsPaymentReceipt) SetDescription(v string) { m.Data2.Description = v }
func (m *TLPaymentsPaymentReceipt) GetDescription() string  { return m.Data2.Description }

func (m *TLPaymentsPaymentReceipt) SetPhoto(v *WebDocument) { m.Data2.Photo = v }
func (m *TLPaymentsPaymentReceipt) GetPhoto() *WebDocument  { return m.Data2.Photo }

func (m *TLPaymentsPaymentReceipt) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentReceipt) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLPaymentsPaymentReceipt) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLPaymentsPaymentReceipt) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLPaymentsPaymentReceipt) SetShipping(v *ShippingOption) { m.Data2.Shipping = v }
func (m *TLPaymentsPaymentReceipt) GetShipping() *ShippingOption  { return m.Data2.Shipping }

func (m *TLPaymentsPaymentReceipt) SetTipAmount(v *types.Int64Value) { m.Data2.TipAmount = v }
func (m *TLPaymentsPaymentReceipt) GetTipAmount() *types.Int64Value  { return m.Data2.TipAmount }

func (m *TLPaymentsPaymentReceipt) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLPaymentsPaymentReceipt) GetCurrency() string  { return m.Data2.Currency }

func (m *TLPaymentsPaymentReceipt) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLPaymentsPaymentReceipt) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLPaymentsPaymentReceipt) SetCredentialsTitle(v string) { m.Data2.CredentialsTitle = v }
func (m *TLPaymentsPaymentReceipt) GetCredentialsTitle() string  { return m.Data2.CredentialsTitle }

func (m *TLPaymentsPaymentReceipt) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentReceipt) GetUsers() []*User  { return m.Data2.Users }

func (m *TLPaymentsPaymentReceipt) GetPredicateName() string {
	return Predicate_payments_paymentReceipt
}

func (m *TLPaymentsPaymentReceipt) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x70c4fe03: func() []byte {
			x.UInt(0x70c4fe03)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhoto() != nil {
					flags |= 1 << 2
				}

				if m.GetInfo() != nil {
					flags |= 1 << 0
				}
				if m.GetShipping() != nil {
					flags |= 1 << 1
				}
				if m.GetTipAmount() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetDate())
			x.Long(m.GetBotId())
			x.Long(m.GetProviderId())
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			x.Bytes(m.GetInvoice().Encode(layer))
			if m.GetInfo() != nil {
				x.Bytes(m.GetInfo().Encode(layer))
			}

			if m.GetShipping() != nil {
				x.Bytes(m.GetShipping().Encode(layer))
			}

			if m.GetTipAmount() != nil {
				x.Long(m.GetTipAmount().Value)
			}

			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			x.String(m.GetCredentialsTitle())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_payments_paymentReceipt, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_payments_paymentReceipt, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentsPaymentReceipt) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsPaymentReceipt) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x70c4fe03: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetDate(dBuf.Int())
			m.SetBotId(dBuf.Long())
			m.SetProviderId(dBuf.Long())
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m6 := &WebDocument{}
				m6.Decode(dBuf)
				m.SetPhoto(m6)
			}

			m7 := &Invoice{}
			m7.Decode(dBuf)
			m.SetInvoice(m7)

			if (flags & (1 << 0)) != 0 {
				m8 := &PaymentRequestedInfo{}
				m8.Decode(dBuf)
				m.SetInfo(m8)
			}
			if (flags & (1 << 1)) != 0 {
				m9 := &ShippingOption{}
				m9.Decode(dBuf)
				m.SetShipping(m9)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetTipAmount(&types.Int64Value{Value: dBuf.Long()})
			}

			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			m.SetCredentialsTitle(dBuf.String())
			c14 := dBuf.Int()
			if c14 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 14, c14)
				return dBuf.GetError()
			}
			l14 := dBuf.Int()
			v14 := make([]*User, l14)
			for i := int32(0); i < l14; i++ {
				v14[i] = &User{}
				v14[i].Decode(dBuf)
			}
			m.SetUsers(v14)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentsPaymentReceipt) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_PassportConfig <--
//  + TL_HelpPassportConfigNotModified
//  + TL_HelpPassportConfig
//

func (m *Help_PassportConfig) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_passportConfigNotModified:
		t := m.To_HelpPassportConfigNotModified()
		xBuf = t.Encode(layer)
	case Predicate_help_passportConfig:
		t := m.To_HelpPassportConfig()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_PassportConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_PassportConfig) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbfb9f457:
		m2 := MakeTLHelpPassportConfigNotModified(m)
		m2.Decode(dBuf)
	case 0xa098d6af:
		m2 := MakeTLHelpPassportConfig(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_PassportConfig) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_passportConfigNotModified:
		t := m.To_HelpPassportConfigNotModified()
		return t.DebugString()
	case Predicate_help_passportConfig:
		t := m.To_HelpPassportConfig()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpPassportConfigNotModified
func (m *Help_PassportConfig) To_HelpPassportConfigNotModified() *TLHelpPassportConfigNotModified {
	m.PredicateName = Predicate_help_passportConfigNotModified
	return &TLHelpPassportConfigNotModified{
		Data2: m,
	}
}

// To_HelpPassportConfig
func (m *Help_PassportConfig) To_HelpPassportConfig() *TLHelpPassportConfig {
	m.PredicateName = Predicate_help_passportConfig
	return &TLHelpPassportConfig{
		Data2: m,
	}
}

// MakeTLHelpPassportConfigNotModified
func MakeTLHelpPassportConfigNotModified(data2 *Help_PassportConfig) *TLHelpPassportConfigNotModified {
	if data2 == nil {
		return &TLHelpPassportConfigNotModified{Data2: &Help_PassportConfig{
			PredicateName: Predicate_help_passportConfigNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_help_passportConfigNotModified
		return &TLHelpPassportConfigNotModified{Data2: data2}
	}
}

func (m *TLHelpPassportConfigNotModified) To_Help_PassportConfig() *Help_PassportConfig {
	m.Data2.PredicateName = Predicate_help_passportConfigNotModified
	return m.Data2
}

func (m *TLHelpPassportConfigNotModified) GetPredicateName() string {
	return Predicate_help_passportConfigNotModified
}

func (m *TLHelpPassportConfigNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbfb9f457: func() []byte {
			x.UInt(0xbfb9f457)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_passportConfigNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_passportConfigNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpPassportConfigNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpPassportConfigNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbfb9f457: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpPassportConfigNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpPassportConfig
func MakeTLHelpPassportConfig(data2 *Help_PassportConfig) *TLHelpPassportConfig {
	if data2 == nil {
		return &TLHelpPassportConfig{Data2: &Help_PassportConfig{
			PredicateName: Predicate_help_passportConfig,
		}}
	} else {
		data2.PredicateName = Predicate_help_passportConfig
		return &TLHelpPassportConfig{Data2: data2}
	}
}

func (m *TLHelpPassportConfig) To_Help_PassportConfig() *Help_PassportConfig {
	m.Data2.PredicateName = Predicate_help_passportConfig
	return m.Data2
}

func (m *TLHelpPassportConfig) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLHelpPassportConfig) GetHash() int32  { return m.Data2.Hash }

func (m *TLHelpPassportConfig) SetCountriesLangs(v *DataJSON) { m.Data2.CountriesLangs = v }
func (m *TLHelpPassportConfig) GetCountriesLangs() *DataJSON  { return m.Data2.CountriesLangs }

func (m *TLHelpPassportConfig) GetPredicateName() string {
	return Predicate_help_passportConfig
}

func (m *TLHelpPassportConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa098d6af: func() []byte {
			x.UInt(0xa098d6af)

			x.Int(m.GetHash())
			x.Bytes(m.GetCountriesLangs().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_passportConfig, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_passportConfig, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpPassportConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpPassportConfig) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa098d6af: func() error {
			m.SetHash(dBuf.Int())

			m1 := &DataJSON{}
			m1.Decode(dBuf)
			m.SetCountriesLangs(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpPassportConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PaymentRequestedInfo <--
//  + TL_PaymentRequestedInfo
//

func (m *PaymentRequestedInfo) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_paymentRequestedInfo:
		t := m.To_PaymentRequestedInfo()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PaymentRequestedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *PaymentRequestedInfo) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x909c3f94:
		m2 := MakeTLPaymentRequestedInfo(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PaymentRequestedInfo) DebugString() string {
	switch m.PredicateName {
	case Predicate_paymentRequestedInfo:
		t := m.To_PaymentRequestedInfo()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PaymentRequestedInfo
func (m *PaymentRequestedInfo) To_PaymentRequestedInfo() *TLPaymentRequestedInfo {
	m.PredicateName = Predicate_paymentRequestedInfo
	return &TLPaymentRequestedInfo{
		Data2: m,
	}
}

// MakeTLPaymentRequestedInfo
func MakeTLPaymentRequestedInfo(data2 *PaymentRequestedInfo) *TLPaymentRequestedInfo {
	if data2 == nil {
		return &TLPaymentRequestedInfo{Data2: &PaymentRequestedInfo{
			PredicateName: Predicate_paymentRequestedInfo,
		}}
	} else {
		data2.PredicateName = Predicate_paymentRequestedInfo
		return &TLPaymentRequestedInfo{Data2: data2}
	}
}

func (m *TLPaymentRequestedInfo) To_PaymentRequestedInfo() *PaymentRequestedInfo {
	m.Data2.PredicateName = Predicate_paymentRequestedInfo
	return m.Data2
}

//// flags
func (m *TLPaymentRequestedInfo) SetName(v *types.StringValue) { m.Data2.Name = v }
func (m *TLPaymentRequestedInfo) GetName() *types.StringValue  { return m.Data2.Name }

func (m *TLPaymentRequestedInfo) SetPhone(v *types.StringValue) { m.Data2.Phone = v }
func (m *TLPaymentRequestedInfo) GetPhone() *types.StringValue  { return m.Data2.Phone }

func (m *TLPaymentRequestedInfo) SetEmail(v *types.StringValue) { m.Data2.Email = v }
func (m *TLPaymentRequestedInfo) GetEmail() *types.StringValue  { return m.Data2.Email }

func (m *TLPaymentRequestedInfo) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLPaymentRequestedInfo) GetShippingAddress() *PostAddress  { return m.Data2.ShippingAddress }

func (m *TLPaymentRequestedInfo) GetPredicateName() string {
	return Predicate_paymentRequestedInfo
}

func (m *TLPaymentRequestedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x909c3f94: func() []byte {
			x.UInt(0x909c3f94)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetName() != nil {
					flags |= 1 << 0
				}
				if m.GetPhone() != nil {
					flags |= 1 << 1
				}
				if m.GetEmail() != nil {
					flags |= 1 << 2
				}
				if m.GetShippingAddress() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetName() != nil {
				x.String(m.GetName().Value)
			}

			if m.GetPhone() != nil {
				x.String(m.GetPhone().Value)
			}

			if m.GetEmail() != nil {
				x.String(m.GetEmail().Value)
			}

			if m.GetShippingAddress() != nil {
				x.Bytes(m.GetShippingAddress().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_paymentRequestedInfo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_paymentRequestedInfo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPaymentRequestedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentRequestedInfo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x909c3f94: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetPhone(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetEmail(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m4 := &PostAddress{}
				m4.Decode(dBuf)
				m.SetShippingAddress(m4)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPaymentRequestedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_RecentMeUrls <--
//  + TL_HelpRecentMeUrls
//

func (m *Help_RecentMeUrls) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_recentMeUrls:
		t := m.To_HelpRecentMeUrls()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_RecentMeUrls) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_RecentMeUrls) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe0310d7:
		m2 := MakeTLHelpRecentMeUrls(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_RecentMeUrls) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_recentMeUrls:
		t := m.To_HelpRecentMeUrls()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpRecentMeUrls
func (m *Help_RecentMeUrls) To_HelpRecentMeUrls() *TLHelpRecentMeUrls {
	m.PredicateName = Predicate_help_recentMeUrls
	return &TLHelpRecentMeUrls{
		Data2: m,
	}
}

// MakeTLHelpRecentMeUrls
func MakeTLHelpRecentMeUrls(data2 *Help_RecentMeUrls) *TLHelpRecentMeUrls {
	if data2 == nil {
		return &TLHelpRecentMeUrls{Data2: &Help_RecentMeUrls{
			PredicateName: Predicate_help_recentMeUrls,
		}}
	} else {
		data2.PredicateName = Predicate_help_recentMeUrls
		return &TLHelpRecentMeUrls{Data2: data2}
	}
}

func (m *TLHelpRecentMeUrls) To_Help_RecentMeUrls() *Help_RecentMeUrls {
	m.Data2.PredicateName = Predicate_help_recentMeUrls
	return m.Data2
}

func (m *TLHelpRecentMeUrls) SetUrls(v []*RecentMeUrl) { m.Data2.Urls = v }
func (m *TLHelpRecentMeUrls) GetUrls() []*RecentMeUrl  { return m.Data2.Urls }

func (m *TLHelpRecentMeUrls) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpRecentMeUrls) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLHelpRecentMeUrls) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpRecentMeUrls) GetUsers() []*User  { return m.Data2.Users }

func (m *TLHelpRecentMeUrls) GetPredicateName() string {
	return Predicate_help_recentMeUrls
}

func (m *TLHelpRecentMeUrls) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe0310d7: func() []byte {
			x.UInt(0xe0310d7)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUrls())))
			for _, v := range m.GetUrls() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_recentMeUrls, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_recentMeUrls, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpRecentMeUrls) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpRecentMeUrls) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe0310d7: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*RecentMeUrl, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &RecentMeUrl{}
				v0[i].Decode(dBuf)
			}
			m.SetUrls(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Chat, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Chat{}
				v1[i].Decode(dBuf)
			}
			m.SetChats(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpRecentMeUrls) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPeer <--
//  + TL_InputPeerEmpty
//  + TL_InputPeerSelf
//  + TL_InputPeerChat
//  + TL_InputPeerUser
//  + TL_InputPeerChannel
//  + TL_InputPeerUserFromMessage
//  + TL_InputPeerChannelFromMessage
//  + TL_InputPeerUsername
//

func (m *InputPeer) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPeerEmpty:
		t := m.To_InputPeerEmpty()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerSelf:
		t := m.To_InputPeerSelf()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerChat:
		t := m.To_InputPeerChat()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerUser:
		t := m.To_InputPeerUser()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerChannel:
		t := m.To_InputPeerChannel()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerUserFromMessage:
		t := m.To_InputPeerUserFromMessage()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerChannelFromMessage:
		t := m.To_InputPeerChannelFromMessage()
		xBuf = t.Encode(layer)
	case Predicate_inputPeerUsername:
		t := m.To_InputPeerUsername()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPeer) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7f3b18ea:
		m2 := MakeTLInputPeerEmpty(m)
		m2.Decode(dBuf)
	case 0x7da07ec9:
		m2 := MakeTLInputPeerSelf(m)
		m2.Decode(dBuf)
	case 0x35a95cb9:
		m2 := MakeTLInputPeerChat(m)
		m2.Decode(dBuf)
	case 0xdde8a54c:
		m2 := MakeTLInputPeerUser(m)
		m2.Decode(dBuf)
	case 0x27bcbbfc:
		m2 := MakeTLInputPeerChannel(m)
		m2.Decode(dBuf)
	case 0xa87b0a1c:
		m2 := MakeTLInputPeerUserFromMessage(m)
		m2.Decode(dBuf)
	case 0xbd2a0840:
		m2 := MakeTLInputPeerChannelFromMessage(m)
		m2.Decode(dBuf)
	case 0xfac102d4:
		m2 := MakeTLInputPeerUsername(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPeer) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPeerEmpty:
		t := m.To_InputPeerEmpty()
		return t.DebugString()
	case Predicate_inputPeerSelf:
		t := m.To_InputPeerSelf()
		return t.DebugString()
	case Predicate_inputPeerChat:
		t := m.To_InputPeerChat()
		return t.DebugString()
	case Predicate_inputPeerUser:
		t := m.To_InputPeerUser()
		return t.DebugString()
	case Predicate_inputPeerChannel:
		t := m.To_InputPeerChannel()
		return t.DebugString()
	case Predicate_inputPeerUserFromMessage:
		t := m.To_InputPeerUserFromMessage()
		return t.DebugString()
	case Predicate_inputPeerChannelFromMessage:
		t := m.To_InputPeerChannelFromMessage()
		return t.DebugString()
	case Predicate_inputPeerUsername:
		t := m.To_InputPeerUsername()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPeerEmpty
func (m *InputPeer) To_InputPeerEmpty() *TLInputPeerEmpty {
	m.PredicateName = Predicate_inputPeerEmpty
	return &TLInputPeerEmpty{
		Data2: m,
	}
}

// To_InputPeerSelf
func (m *InputPeer) To_InputPeerSelf() *TLInputPeerSelf {
	m.PredicateName = Predicate_inputPeerSelf
	return &TLInputPeerSelf{
		Data2: m,
	}
}

// To_InputPeerChat
func (m *InputPeer) To_InputPeerChat() *TLInputPeerChat {
	m.PredicateName = Predicate_inputPeerChat
	return &TLInputPeerChat{
		Data2: m,
	}
}

// To_InputPeerUser
func (m *InputPeer) To_InputPeerUser() *TLInputPeerUser {
	m.PredicateName = Predicate_inputPeerUser
	return &TLInputPeerUser{
		Data2: m,
	}
}

// To_InputPeerChannel
func (m *InputPeer) To_InputPeerChannel() *TLInputPeerChannel {
	m.PredicateName = Predicate_inputPeerChannel
	return &TLInputPeerChannel{
		Data2: m,
	}
}

// To_InputPeerUserFromMessage
func (m *InputPeer) To_InputPeerUserFromMessage() *TLInputPeerUserFromMessage {
	m.PredicateName = Predicate_inputPeerUserFromMessage
	return &TLInputPeerUserFromMessage{
		Data2: m,
	}
}

// To_InputPeerChannelFromMessage
func (m *InputPeer) To_InputPeerChannelFromMessage() *TLInputPeerChannelFromMessage {
	m.PredicateName = Predicate_inputPeerChannelFromMessage
	return &TLInputPeerChannelFromMessage{
		Data2: m,
	}
}

// To_InputPeerUsername
func (m *InputPeer) To_InputPeerUsername() *TLInputPeerUsername {
	m.PredicateName = Predicate_inputPeerUsername
	return &TLInputPeerUsername{
		Data2: m,
	}
}

// MakeTLInputPeerEmpty
func MakeTLInputPeerEmpty(data2 *InputPeer) *TLInputPeerEmpty {
	if data2 == nil {
		return &TLInputPeerEmpty{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerEmpty
		return &TLInputPeerEmpty{Data2: data2}
	}
}

func (m *TLInputPeerEmpty) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerEmpty
	return m.Data2
}

func (m *TLInputPeerEmpty) GetPredicateName() string {
	return Predicate_inputPeerEmpty
}

func (m *TLInputPeerEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7f3b18ea: func() []byte {
			x.UInt(0x7f3b18ea)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7f3b18ea: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerSelf
func MakeTLInputPeerSelf(data2 *InputPeer) *TLInputPeerSelf {
	if data2 == nil {
		return &TLInputPeerSelf{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerSelf,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerSelf
		return &TLInputPeerSelf{Data2: data2}
	}
}

func (m *TLInputPeerSelf) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerSelf
	return m.Data2
}

func (m *TLInputPeerSelf) GetPredicateName() string {
	return Predicate_inputPeerSelf
}

func (m *TLInputPeerSelf) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7da07ec9: func() []byte {
			x.UInt(0x7da07ec9)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerSelf, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerSelf, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerSelf) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerSelf) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7da07ec9: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerSelf) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerChat
func MakeTLInputPeerChat(data2 *InputPeer) *TLInputPeerChat {
	if data2 == nil {
		return &TLInputPeerChat{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerChat,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerChat
		return &TLInputPeerChat{Data2: data2}
	}
}

func (m *TLInputPeerChat) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerChat
	return m.Data2
}

func (m *TLInputPeerChat) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLInputPeerChat) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLInputPeerChat) GetPredicateName() string {
	return Predicate_inputPeerChat
}

func (m *TLInputPeerChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x35a95cb9: func() []byte {
			x.UInt(0x35a95cb9)

			x.Long(m.GetChatId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x35a95cb9: func() error {
			m.SetChatId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerUser
func MakeTLInputPeerUser(data2 *InputPeer) *TLInputPeerUser {
	if data2 == nil {
		return &TLInputPeerUser{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerUser,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerUser
		return &TLInputPeerUser{Data2: data2}
	}
}

func (m *TLInputPeerUser) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerUser
	return m.Data2
}

func (m *TLInputPeerUser) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLInputPeerUser) GetUserId() int64  { return m.Data2.UserId }

func (m *TLInputPeerUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerUser) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPeerUser) GetPredicateName() string {
	return Predicate_inputPeerUser
}

func (m *TLInputPeerUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdde8a54c: func() []byte {
			x.UInt(0xdde8a54c)

			x.Long(m.GetUserId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdde8a54c: func() error {
			m.SetUserId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerChannel
func MakeTLInputPeerChannel(data2 *InputPeer) *TLInputPeerChannel {
	if data2 == nil {
		return &TLInputPeerChannel{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerChannel,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerChannel
		return &TLInputPeerChannel{Data2: data2}
	}
}

func (m *TLInputPeerChannel) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerChannel
	return m.Data2
}

func (m *TLInputPeerChannel) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLInputPeerChannel) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLInputPeerChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerChannel) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLInputPeerChannel) GetPredicateName() string {
	return Predicate_inputPeerChannel
}

func (m *TLInputPeerChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x27bcbbfc: func() []byte {
			x.UInt(0x27bcbbfc)

			x.Long(m.GetChannelId())
			x.Long(m.GetAccessHash())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerChannel, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerChannel, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerChannel) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x27bcbbfc: func() error {
			m.SetChannelId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerUserFromMessage
func MakeTLInputPeerUserFromMessage(data2 *InputPeer) *TLInputPeerUserFromMessage {
	if data2 == nil {
		return &TLInputPeerUserFromMessage{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerUserFromMessage,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerUserFromMessage
		return &TLInputPeerUserFromMessage{Data2: data2}
	}
}

func (m *TLInputPeerUserFromMessage) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerUserFromMessage
	return m.Data2
}

func (m *TLInputPeerUserFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerUserFromMessage) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputPeerUserFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputPeerUserFromMessage) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLInputPeerUserFromMessage) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLInputPeerUserFromMessage) GetUserId() int64  { return m.Data2.UserId }

func (m *TLInputPeerUserFromMessage) GetPredicateName() string {
	return Predicate_inputPeerUserFromMessage
}

func (m *TLInputPeerUserFromMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa87b0a1c: func() []byte {
			x.UInt(0xa87b0a1c)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetMsgId())
			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerUserFromMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerUserFromMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerUserFromMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerUserFromMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa87b0a1c: func() error {

			m4 := &InputPeer{}
			m4.Decode(dBuf)
			m.SetPeer(m4)

			m.SetMsgId(dBuf.Int())
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerUserFromMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerChannelFromMessage
func MakeTLInputPeerChannelFromMessage(data2 *InputPeer) *TLInputPeerChannelFromMessage {
	if data2 == nil {
		return &TLInputPeerChannelFromMessage{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerChannelFromMessage,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerChannelFromMessage
		return &TLInputPeerChannelFromMessage{Data2: data2}
	}
}

func (m *TLInputPeerChannelFromMessage) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerChannelFromMessage
	return m.Data2
}

func (m *TLInputPeerChannelFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerChannelFromMessage) GetPeer() *InputPeer  { return m.Data2.Peer }

func (m *TLInputPeerChannelFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputPeerChannelFromMessage) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLInputPeerChannelFromMessage) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLInputPeerChannelFromMessage) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLInputPeerChannelFromMessage) GetPredicateName() string {
	return Predicate_inputPeerChannelFromMessage
}

func (m *TLInputPeerChannelFromMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbd2a0840: func() []byte {
			x.UInt(0xbd2a0840)

			x.Bytes(m.GetPeer().Encode(layer))
			x.Int(m.GetMsgId())
			x.Long(m.GetChannelId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerChannelFromMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerChannelFromMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerChannelFromMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerChannelFromMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbd2a0840: func() error {

			m4 := &InputPeer{}
			m4.Decode(dBuf)
			m.SetPeer(m4)

			m.SetMsgId(dBuf.Int())
			m.SetChannelId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerChannelFromMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputPeerUsername
func MakeTLInputPeerUsername(data2 *InputPeer) *TLInputPeerUsername {
	if data2 == nil {
		return &TLInputPeerUsername{Data2: &InputPeer{
			PredicateName: Predicate_inputPeerUsername,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerUsername
		return &TLInputPeerUsername{Data2: data2}
	}
}

func (m *TLInputPeerUsername) To_InputPeer() *InputPeer {
	m.Data2.PredicateName = Predicate_inputPeerUsername
	return m.Data2
}

func (m *TLInputPeerUsername) SetUsername(v string) { m.Data2.Username = v }
func (m *TLInputPeerUsername) GetUsername() string  { return m.Data2.Username }

func (m *TLInputPeerUsername) GetPredicateName() string {
	return Predicate_inputPeerUsername
}

func (m *TLInputPeerUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfac102d4: func() []byte {
			x.UInt(0xfac102d4)

			x.String(m.GetUsername())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerUsername, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerUsername, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerUsername) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfac102d4: func() error {
			m.SetUsername(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WallPaper <--
//  + TL_WallPaper
//  + TL_WallPaperNoFile
//

func (m *WallPaper) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_wallPaper:
		t := m.To_WallPaper()
		xBuf = t.Encode(layer)
	case Predicate_wallPaperNoFile:
		t := m.To_WallPaperNoFile()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *WallPaper) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xa437c3ed:
		m2 := MakeTLWallPaper(m)
		m2.Decode(dBuf)
	case 0xe0804116:
		m2 := MakeTLWallPaperNoFile(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WallPaper) DebugString() string {
	switch m.PredicateName {
	case Predicate_wallPaper:
		t := m.To_WallPaper()
		return t.DebugString()
	case Predicate_wallPaperNoFile:
		t := m.To_WallPaperNoFile()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WallPaper
func (m *WallPaper) To_WallPaper() *TLWallPaper {
	m.PredicateName = Predicate_wallPaper
	return &TLWallPaper{
		Data2: m,
	}
}

// To_WallPaperNoFile
func (m *WallPaper) To_WallPaperNoFile() *TLWallPaperNoFile {
	m.PredicateName = Predicate_wallPaperNoFile
	return &TLWallPaperNoFile{
		Data2: m,
	}
}

// MakeTLWallPaper
func MakeTLWallPaper(data2 *WallPaper) *TLWallPaper {
	if data2 == nil {
		return &TLWallPaper{Data2: &WallPaper{
			PredicateName: Predicate_wallPaper,
		}}
	} else {
		data2.PredicateName = Predicate_wallPaper
		return &TLWallPaper{Data2: data2}
	}
}

func (m *TLWallPaper) To_WallPaper() *WallPaper {
	m.Data2.PredicateName = Predicate_wallPaper
	return m.Data2
}

func (m *TLWallPaper) SetId(v int64) { m.Data2.Id = v }
func (m *TLWallPaper) GetId() int64  { return m.Data2.Id }

//// flags
func (m *TLWallPaper) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLWallPaper) GetCreator() bool  { return m.Data2.Creator }

func (m *TLWallPaper) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLWallPaper) GetDefault() bool  { return m.Data2.Default }

func (m *TLWallPaper) SetPattern(v bool) { m.Data2.Pattern = v }
func (m *TLWallPaper) GetPattern() bool  { return m.Data2.Pattern }

func (m *TLWallPaper) SetDark(v bool) { m.Data2.Dark = v }
func (m *TLWallPaper) GetDark() bool  { return m.Data2.Dark }

func (m *TLWallPaper) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWallPaper) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLWallPaper) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLWallPaper) GetSlug() string  { return m.Data2.Slug }

func (m *TLWallPaper) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWallPaper) GetDocument() *Document  { return m.Data2.Document }

func (m *TLWallPaper) SetSettings(v *WallPaperSettings) { m.Data2.Settings = v }
func (m *TLWallPaper) GetSettings() *WallPaperSettings  { return m.Data2.Settings }

func (m *TLWallPaper) GetPredicateName() string {
	return Predicate_wallPaper
}

func (m *TLWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa437c3ed: func() []byte {
			x.UInt(0xa437c3ed)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCreator() == true {
					flags |= 1 << 0
				}
				if m.GetDefault() == true {
					flags |= 1 << 1
				}
				if m.GetPattern() == true {
					flags |= 1 << 3
				}
				if m.GetDark() == true {
					flags |= 1 << 4
				}

				if m.GetSettings() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			x.Long(m.GetId())
			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetAccessHash())
			x.String(m.GetSlug())
			x.Bytes(m.GetDocument().Encode(layer))
			if m.GetSettings() != nil {
				x.Bytes(m.GetSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_wallPaper, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_wallPaper, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWallPaper) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa437c3ed: func() error {
			m.SetId(dBuf.Long())
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCreator(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetDefault(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetPattern(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetDark(true)
			}
			m.SetAccessHash(dBuf.Long())
			m.SetSlug(dBuf.String())

			m8 := &Document{}
			m8.Decode(dBuf)
			m.SetDocument(m8)

			if (flags & (1 << 2)) != 0 {
				m9 := &WallPaperSettings{}
				m9.Decode(dBuf)
				m.SetSettings(m9)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLWallPaperNoFile
func MakeTLWallPaperNoFile(data2 *WallPaper) *TLWallPaperNoFile {
	if data2 == nil {
		return &TLWallPaperNoFile{Data2: &WallPaper{
			PredicateName: Predicate_wallPaperNoFile,
		}}
	} else {
		data2.PredicateName = Predicate_wallPaperNoFile
		return &TLWallPaperNoFile{Data2: data2}
	}
}

func (m *TLWallPaperNoFile) To_WallPaper() *WallPaper {
	m.Data2.PredicateName = Predicate_wallPaperNoFile
	return m.Data2
}

func (m *TLWallPaperNoFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLWallPaperNoFile) GetId() int64  { return m.Data2.Id }

//// flags
func (m *TLWallPaperNoFile) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLWallPaperNoFile) GetDefault() bool  { return m.Data2.Default }

func (m *TLWallPaperNoFile) SetDark(v bool) { m.Data2.Dark = v }
func (m *TLWallPaperNoFile) GetDark() bool  { return m.Data2.Dark }

func (m *TLWallPaperNoFile) SetSettings(v *WallPaperSettings) { m.Data2.Settings = v }
func (m *TLWallPaperNoFile) GetSettings() *WallPaperSettings  { return m.Data2.Settings }

func (m *TLWallPaperNoFile) GetPredicateName() string {
	return Predicate_wallPaperNoFile
}

func (m *TLWallPaperNoFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe0804116: func() []byte {
			x.UInt(0xe0804116)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDefault() == true {
					flags |= 1 << 1
				}
				if m.GetDark() == true {
					flags |= 1 << 4
				}
				if m.GetSettings() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			x.Long(m.GetId())
			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetSettings() != nil {
				x.Bytes(m.GetSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_wallPaperNoFile, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_wallPaperNoFile, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWallPaperNoFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWallPaperNoFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe0804116: func() error {
			m.SetId(dBuf.Long())
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 1)) != 0 {
				m.SetDefault(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetDark(true)
			}
			if (flags & (1 << 2)) != 0 {
				m9 := &WallPaperSettings{}
				m9.Decode(dBuf)
				m.SetSettings(m9)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWallPaperNoFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_AppUpdate <--
//  + TL_HelpAppUpdate
//  + TL_HelpNoAppUpdate
//

func (m *Help_AppUpdate) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_appUpdate:
		t := m.To_HelpAppUpdate()
		xBuf = t.Encode(layer)
	case Predicate_help_noAppUpdate:
		t := m.To_HelpNoAppUpdate()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_AppUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_AppUpdate) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xccbbce30:
		m2 := MakeTLHelpAppUpdate(m)
		m2.Decode(dBuf)
	case 0xc45a6536:
		m2 := MakeTLHelpNoAppUpdate(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_AppUpdate) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_appUpdate:
		t := m.To_HelpAppUpdate()
		return t.DebugString()
	case Predicate_help_noAppUpdate:
		t := m.To_HelpNoAppUpdate()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpAppUpdate
func (m *Help_AppUpdate) To_HelpAppUpdate() *TLHelpAppUpdate {
	m.PredicateName = Predicate_help_appUpdate
	return &TLHelpAppUpdate{
		Data2: m,
	}
}

// To_HelpNoAppUpdate
func (m *Help_AppUpdate) To_HelpNoAppUpdate() *TLHelpNoAppUpdate {
	m.PredicateName = Predicate_help_noAppUpdate
	return &TLHelpNoAppUpdate{
		Data2: m,
	}
}

// MakeTLHelpAppUpdate
func MakeTLHelpAppUpdate(data2 *Help_AppUpdate) *TLHelpAppUpdate {
	if data2 == nil {
		return &TLHelpAppUpdate{Data2: &Help_AppUpdate{
			PredicateName: Predicate_help_appUpdate,
		}}
	} else {
		data2.PredicateName = Predicate_help_appUpdate
		return &TLHelpAppUpdate{Data2: data2}
	}
}

func (m *TLHelpAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
	m.Data2.PredicateName = Predicate_help_appUpdate
	return m.Data2
}

//// flags
func (m *TLHelpAppUpdate) SetCanNotSkip(v bool) { m.Data2.CanNotSkip = v }
func (m *TLHelpAppUpdate) GetCanNotSkip() bool  { return m.Data2.CanNotSkip }

func (m *TLHelpAppUpdate) SetId(v int32) { m.Data2.Id = v }
func (m *TLHelpAppUpdate) GetId() int32  { return m.Data2.Id }

func (m *TLHelpAppUpdate) SetVersion(v string) { m.Data2.Version = v }
func (m *TLHelpAppUpdate) GetVersion() string  { return m.Data2.Version }

func (m *TLHelpAppUpdate) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpAppUpdate) GetText() string  { return m.Data2.Text }

func (m *TLHelpAppUpdate) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpAppUpdate) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLHelpAppUpdate) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLHelpAppUpdate) GetDocument() *Document  { return m.Data2.Document }

func (m *TLHelpAppUpdate) SetUrl(v *types.StringValue) { m.Data2.Url = v }
func (m *TLHelpAppUpdate) GetUrl() *types.StringValue  { return m.Data2.Url }

func (m *TLHelpAppUpdate) SetSticker(v *Document) { m.Data2.Sticker = v }
func (m *TLHelpAppUpdate) GetSticker() *Document  { return m.Data2.Sticker }

func (m *TLHelpAppUpdate) GetPredicateName() string {
	return Predicate_help_appUpdate
}

func (m *TLHelpAppUpdate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xccbbce30: func() []byte {
			x.UInt(0xccbbce30)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetCanNotSkip() == true {
					flags |= 1 << 0
				}

				if m.GetDocument() != nil {
					flags |= 1 << 1
				}
				if m.GetUrl() != nil {
					flags |= 1 << 2
				}
				if m.GetSticker() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Int(m.GetId())
			x.String(m.GetVersion())
			x.String(m.GetText())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}

			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			if m.GetUrl() != nil {
				x.String(m.GetUrl().Value)
			}

			if m.GetSticker() != nil {
				x.Bytes(m.GetSticker().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_appUpdate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_appUpdate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpAppUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpAppUpdate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xccbbce30: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetCanNotSkip(true)
			}
			m.SetId(dBuf.Int())
			m.SetVersion(dBuf.String())
			m.SetText(dBuf.String())
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*MessageEntity, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &MessageEntity{}
				v5[i].Decode(dBuf)
			}
			m.SetEntities(v5)

			if (flags & (1 << 1)) != 0 {
				m6 := &Document{}
				m6.Decode(dBuf)
				m.SetDocument(m6)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetUrl(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 3)) != 0 {
				m8 := &Document{}
				m8.Decode(dBuf)
				m.SetSticker(m8)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpAppUpdate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpNoAppUpdate
func MakeTLHelpNoAppUpdate(data2 *Help_AppUpdate) *TLHelpNoAppUpdate {
	if data2 == nil {
		return &TLHelpNoAppUpdate{Data2: &Help_AppUpdate{
			PredicateName: Predicate_help_noAppUpdate,
		}}
	} else {
		data2.PredicateName = Predicate_help_noAppUpdate
		return &TLHelpNoAppUpdate{Data2: data2}
	}
}

func (m *TLHelpNoAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
	m.Data2.PredicateName = Predicate_help_noAppUpdate
	return m.Data2
}

func (m *TLHelpNoAppUpdate) GetPredicateName() string {
	return Predicate_help_noAppUpdate
}

func (m *TLHelpNoAppUpdate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc45a6536: func() []byte {
			x.UInt(0xc45a6536)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_noAppUpdate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_noAppUpdate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpNoAppUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpNoAppUpdate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc45a6536: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpNoAppUpdate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSet <--
//  + TL_MessagesStickerSet
//  + TL_MessagesStickerSetNotModified
//

func (m *Messages_StickerSet) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_stickerSet:
		t := m.To_MessagesStickerSet()
		xBuf = t.Encode(layer)
	case Predicate_messages_stickerSetNotModified:
		t := m.To_MessagesStickerSetNotModified()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_StickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_StickerSet) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb60a24a6:
		m2 := MakeTLMessagesStickerSet(m)
		m2.Decode(dBuf)
	case 0xd3f924eb:
		m2 := MakeTLMessagesStickerSetNotModified(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_StickerSet) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_stickerSet:
		t := m.To_MessagesStickerSet()
		return t.DebugString()
	case Predicate_messages_stickerSetNotModified:
		t := m.To_MessagesStickerSetNotModified()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesStickerSet
func (m *Messages_StickerSet) To_MessagesStickerSet() *TLMessagesStickerSet {
	m.PredicateName = Predicate_messages_stickerSet
	return &TLMessagesStickerSet{
		Data2: m,
	}
}

// To_MessagesStickerSetNotModified
func (m *Messages_StickerSet) To_MessagesStickerSetNotModified() *TLMessagesStickerSetNotModified {
	m.PredicateName = Predicate_messages_stickerSetNotModified
	return &TLMessagesStickerSetNotModified{
		Data2: m,
	}
}

// MakeTLMessagesStickerSet
func MakeTLMessagesStickerSet(data2 *Messages_StickerSet) *TLMessagesStickerSet {
	if data2 == nil {
		return &TLMessagesStickerSet{Data2: &Messages_StickerSet{
			PredicateName: Predicate_messages_stickerSet,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickerSet
		return &TLMessagesStickerSet{Data2: data2}
	}
}

func (m *TLMessagesStickerSet) To_Messages_StickerSet() *Messages_StickerSet {
	m.Data2.PredicateName = Predicate_messages_stickerSet
	return m.Data2
}

func (m *TLMessagesStickerSet) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLMessagesStickerSet) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLMessagesStickerSet) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesStickerSet) GetPacks() []*StickerPack  { return m.Data2.Packs }

func (m *TLMessagesStickerSet) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLMessagesStickerSet) GetDocuments() []*Document  { return m.Data2.Documents }

func (m *TLMessagesStickerSet) GetPredicateName() string {
	return Predicate_messages_stickerSet
}

func (m *TLMessagesStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb60a24a6: func() []byte {
			x.UInt(0xb60a24a6)

			x.Bytes(m.GetSet().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPacks())))
			for _, v := range m.GetPacks() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetDocuments())))
			for _, v := range m.GetDocuments() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickerSet, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickerSet, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickerSet) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb60a24a6: func() error {

			m0 := &StickerSet{}
			m0.Decode(dBuf)
			m.SetSet(m0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*StickerPack, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &StickerPack{}
				v1[i].Decode(dBuf)
			}
			m.SetPacks(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Document, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Document{}
				v2[i].Decode(dBuf)
			}
			m.SetDocuments(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessagesStickerSetNotModified
func MakeTLMessagesStickerSetNotModified(data2 *Messages_StickerSet) *TLMessagesStickerSetNotModified {
	if data2 == nil {
		return &TLMessagesStickerSetNotModified{Data2: &Messages_StickerSet{
			PredicateName: Predicate_messages_stickerSetNotModified,
		}}
	} else {
		data2.PredicateName = Predicate_messages_stickerSetNotModified
		return &TLMessagesStickerSetNotModified{Data2: data2}
	}
}

func (m *TLMessagesStickerSetNotModified) To_Messages_StickerSet() *Messages_StickerSet {
	m.Data2.PredicateName = Predicate_messages_stickerSetNotModified
	return m.Data2
}

func (m *TLMessagesStickerSetNotModified) GetPredicateName() string {
	return Predicate_messages_stickerSetNotModified
}

func (m *TLMessagesStickerSetNotModified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd3f924eb: func() []byte {
			x.UInt(0xd3f924eb)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_stickerSetNotModified, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_stickerSetNotModified, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesStickerSetNotModified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStickerSetNotModified) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd3f924eb: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesStickerSetNotModified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessage <--
//  + TL_InputBotInlineMessageMediaAuto
//  + TL_InputBotInlineMessageText
//  + TL_InputBotInlineMessageMediaGeo
//  + TL_InputBotInlineMessageMediaVenue
//  + TL_InputBotInlineMessageMediaContact
//  + TL_InputBotInlineMessageGame
//  + TL_InputBotInlineMessageMediaInvoice
//

func (m *InputBotInlineMessage) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputBotInlineMessageMediaAuto:
		t := m.To_InputBotInlineMessageMediaAuto()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageText:
		t := m.To_InputBotInlineMessageText()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageMediaGeo:
		t := m.To_InputBotInlineMessageMediaGeo()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageMediaVenue:
		t := m.To_InputBotInlineMessageMediaVenue()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageMediaContact:
		t := m.To_InputBotInlineMessageMediaContact()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageGame:
		t := m.To_InputBotInlineMessageGame()
		xBuf = t.Encode(layer)
	case Predicate_inputBotInlineMessageMediaInvoice:
		t := m.To_InputBotInlineMessageMediaInvoice()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputBotInlineMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputBotInlineMessage) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3380c786:
		m2 := MakeTLInputBotInlineMessageMediaAuto(m)
		m2.Decode(dBuf)
	case 0x3dcd7a87:
		m2 := MakeTLInputBotInlineMessageText(m)
		m2.Decode(dBuf)
	case 0x96929a85:
		m2 := MakeTLInputBotInlineMessageMediaGeo(m)
		m2.Decode(dBuf)
	case 0x417bbf11:
		m2 := MakeTLInputBotInlineMessageMediaVenue(m)
		m2.Decode(dBuf)
	case 0xa6edbffd:
		m2 := MakeTLInputBotInlineMessageMediaContact(m)
		m2.Decode(dBuf)
	case 0x4b425864:
		m2 := MakeTLInputBotInlineMessageGame(m)
		m2.Decode(dBuf)
	case 0xd7e78225:
		m2 := MakeTLInputBotInlineMessageMediaInvoice(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputBotInlineMessage) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputBotInlineMessageMediaAuto:
		t := m.To_InputBotInlineMessageMediaAuto()
		return t.DebugString()
	case Predicate_inputBotInlineMessageText:
		t := m.To_InputBotInlineMessageText()
		return t.DebugString()
	case Predicate_inputBotInlineMessageMediaGeo:
		t := m.To_InputBotInlineMessageMediaGeo()
		return t.DebugString()
	case Predicate_inputBotInlineMessageMediaVenue:
		t := m.To_InputBotInlineMessageMediaVenue()
		return t.DebugString()
	case Predicate_inputBotInlineMessageMediaContact:
		t := m.To_InputBotInlineMessageMediaContact()
		return t.DebugString()
	case Predicate_inputBotInlineMessageGame:
		t := m.To_InputBotInlineMessageGame()
		return t.DebugString()
	case Predicate_inputBotInlineMessageMediaInvoice:
		t := m.To_InputBotInlineMessageMediaInvoice()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputBotInlineMessageMediaAuto
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaAuto() *TLInputBotInlineMessageMediaAuto {
	m.PredicateName = Predicate_inputBotInlineMessageMediaAuto
	return &TLInputBotInlineMessageMediaAuto{
		Data2: m,
	}
}

// To_InputBotInlineMessageText
func (m *InputBotInlineMessage) To_InputBotInlineMessageText() *TLInputBotInlineMessageText {
	m.PredicateName = Predicate_inputBotInlineMessageText
	return &TLInputBotInlineMessageText{
		Data2: m,
	}
}

// To_InputBotInlineMessageMediaGeo
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaGeo() *TLInputBotInlineMessageMediaGeo {
	m.PredicateName = Predicate_inputBotInlineMessageMediaGeo
	return &TLInputBotInlineMessageMediaGeo{
		Data2: m,
	}
}

// To_InputBotInlineMessageMediaVenue
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaVenue() *TLInputBotInlineMessageMediaVenue {
	m.PredicateName = Predicate_inputBotInlineMessageMediaVenue
	return &TLInputBotInlineMessageMediaVenue{
		Data2: m,
	}
}

// To_InputBotInlineMessageMediaContact
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaContact() *TLInputBotInlineMessageMediaContact {
	m.PredicateName = Predicate_inputBotInlineMessageMediaContact
	return &TLInputBotInlineMessageMediaContact{
		Data2: m,
	}
}

// To_InputBotInlineMessageGame
func (m *InputBotInlineMessage) To_InputBotInlineMessageGame() *TLInputBotInlineMessageGame {
	m.PredicateName = Predicate_inputBotInlineMessageGame
	return &TLInputBotInlineMessageGame{
		Data2: m,
	}
}

// To_InputBotInlineMessageMediaInvoice
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaInvoice() *TLInputBotInlineMessageMediaInvoice {
	m.PredicateName = Predicate_inputBotInlineMessageMediaInvoice
	return &TLInputBotInlineMessageMediaInvoice{
		Data2: m,
	}
}

// MakeTLInputBotInlineMessageMediaAuto
func MakeTLInputBotInlineMessageMediaAuto(data2 *InputBotInlineMessage) *TLInputBotInlineMessageMediaAuto {
	if data2 == nil {
		return &TLInputBotInlineMessageMediaAuto{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageMediaAuto,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageMediaAuto
		return &TLInputBotInlineMessageMediaAuto{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageMediaAuto) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageMediaAuto
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageMediaAuto) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageMediaAuto) GetMessage() string  { return m.Data2.Message }

func (m *TLInputBotInlineMessageMediaAuto) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageMediaAuto) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLInputBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLInputBotInlineMessageMediaAuto) GetPredicateName() string {
	return Predicate_inputBotInlineMessageMediaAuto
}

func (m *TLInputBotInlineMessageMediaAuto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3380c786: func() []byte {
			x.UInt(0x3380c786)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageMediaAuto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageMediaAuto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageMediaAuto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageMediaAuto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3380c786: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*MessageEntity, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &MessageEntity{}
					v2[i].Decode(dBuf)
				}
				m.SetEntities(v2)
			}
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageMediaAuto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageText
func MakeTLInputBotInlineMessageText(data2 *InputBotInlineMessage) *TLInputBotInlineMessageText {
	if data2 == nil {
		return &TLInputBotInlineMessageText{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageText,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageText
		return &TLInputBotInlineMessageText{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageText) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageText
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLInputBotInlineMessageText) GetNoWebpage() bool  { return m.Data2.NoWebpage }

func (m *TLInputBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageText) GetMessage() string  { return m.Data2.Message }

func (m *TLInputBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageText) GetEntities() []*MessageEntity  { return m.Data2.Entities }

func (m *TLInputBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageText) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLInputBotInlineMessageText) GetPredicateName() string {
	return Predicate_inputBotInlineMessageText
}

func (m *TLInputBotInlineMessageText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3dcd7a87: func() []byte {
			x.UInt(0x3dcd7a87)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetNoWebpage() == true {
					flags |= 1 << 0
				}

				if m.GetEntities() != nil {
					flags |= 1 << 1
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetMessage())
			if m.GetEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetEntities())))
				for _, v := range m.GetEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageText, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageText, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageText) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3dcd7a87: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetNoWebpage(true)
			}
			m.SetMessage(dBuf.String())
			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*MessageEntity, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &MessageEntity{}
					v2[i].Decode(dBuf)
				}
				m.SetEntities(v2)
			}
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageMediaGeo
func MakeTLInputBotInlineMessageMediaGeo(data2 *InputBotInlineMessage) *TLInputBotInlineMessageMediaGeo {
	if data2 == nil {
		return &TLInputBotInlineMessageMediaGeo{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageMediaGeo,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageMediaGeo
		return &TLInputBotInlineMessageMediaGeo{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageMediaGeo) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageMediaGeo
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageMediaGeo) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaGeo) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaGeo) SetHeading(v *types.Int32Value) { m.Data2.Heading = v }
func (m *TLInputBotInlineMessageMediaGeo) GetHeading() *types.Int32Value  { return m.Data2.Heading }

func (m *TLInputBotInlineMessageMediaGeo) SetPeriod(v *types.Int32Value) { m.Data2.Period = v }
func (m *TLInputBotInlineMessageMediaGeo) GetPeriod() *types.Int32Value  { return m.Data2.Period }

func (m *TLInputBotInlineMessageMediaGeo) SetProximityNotificationRadius(v *types.Int32Value) {
	m.Data2.ProximityNotificationRadius = v
}
func (m *TLInputBotInlineMessageMediaGeo) GetProximityNotificationRadius() *types.Int32Value {
	return m.Data2.ProximityNotificationRadius
}

func (m *TLInputBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLInputBotInlineMessageMediaGeo) GetPredicateName() string {
	return Predicate_inputBotInlineMessageMediaGeo
}

func (m *TLInputBotInlineMessageMediaGeo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x96929a85: func() []byte {
			x.UInt(0x96929a85)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHeading() != nil {
					flags |= 1 << 0
				}
				if m.GetPeriod() != nil {
					flags |= 1 << 1
				}
				if m.GetProximityNotificationRadius() != nil {
					flags |= 1 << 3
				}
				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeoPoint().Encode(layer))
			if m.GetHeading() != nil {
				x.Int(m.GetHeading().Value)
			}

			if m.GetPeriod() != nil {
				x.Int(m.GetPeriod().Value)
			}

			if m.GetProximityNotificationRadius() != nil {
				x.Int(m.GetProximityNotificationRadius().Value)
			}

			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageMediaGeo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageMediaGeo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageMediaGeo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageMediaGeo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x96929a85: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m5 := &InputGeoPoint{}
			m5.Decode(dBuf)
			m.SetGeoPoint(m5)

			if (flags & (1 << 0)) != 0 {
				m.SetHeading(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetPeriod(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetProximityNotificationRadius(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageMediaGeo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageMediaVenue
func MakeTLInputBotInlineMessageMediaVenue(data2 *InputBotInlineMessage) *TLInputBotInlineMessageMediaVenue {
	if data2 == nil {
		return &TLInputBotInlineMessageMediaVenue{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageMediaVenue,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageMediaVenue
		return &TLInputBotInlineMessageMediaVenue{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageMediaVenue) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageMediaVenue
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaVenue) GetGeoPoint() *InputGeoPoint  { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineMessageMediaVenue) GetTitle() string  { return m.Data2.Title }

func (m *TLInputBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputBotInlineMessageMediaVenue) GetAddress() string  { return m.Data2.Address }

func (m *TLInputBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputBotInlineMessageMediaVenue) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputBotInlineMessageMediaVenue) GetVenueId() string  { return m.Data2.VenueId }

func (m *TLInputBotInlineMessageMediaVenue) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputBotInlineMessageMediaVenue) GetVenueType() string  { return m.Data2.VenueType }

func (m *TLInputBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLInputBotInlineMessageMediaVenue) GetPredicateName() string {
	return Predicate_inputBotInlineMessageMediaVenue
}

func (m *TLInputBotInlineMessageMediaVenue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x417bbf11: func() []byte {
			x.UInt(0x417bbf11)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetGeoPoint().Encode(layer))
			x.String(m.GetTitle())
			x.String(m.GetAddress())
			x.String(m.GetProvider())
			x.String(m.GetVenueId())
			x.String(m.GetVenueType())
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageMediaVenue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageMediaVenue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageMediaVenue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageMediaVenue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x417bbf11: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m5 := &InputGeoPoint{}
			m5.Decode(dBuf)
			m.SetGeoPoint(m5)

			m.SetTitle(dBuf.String())
			m.SetAddress(dBuf.String())
			m.SetProvider(dBuf.String())
			m.SetVenueId(dBuf.String())
			m.SetVenueType(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageMediaVenue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageMediaContact
func MakeTLInputBotInlineMessageMediaContact(data2 *InputBotInlineMessage) *TLInputBotInlineMessageMediaContact {
	if data2 == nil {
		return &TLInputBotInlineMessageMediaContact{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageMediaContact,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageMediaContact
		return &TLInputBotInlineMessageMediaContact{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageMediaContact) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageMediaContact
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputBotInlineMessageMediaContact) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLInputBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputBotInlineMessageMediaContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputBotInlineMessageMediaContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLInputBotInlineMessageMediaContact) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputBotInlineMessageMediaContact) GetVcard() string  { return m.Data2.Vcard }

func (m *TLInputBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup {
	return m.Data2.ReplyMarkup
}

func (m *TLInputBotInlineMessageMediaContact) GetPredicateName() string {
	return Predicate_inputBotInlineMessageMediaContact
}

func (m *TLInputBotInlineMessageMediaContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa6edbffd: func() []byte {
			x.UInt(0xa6edbffd)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetPhoneNumber())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.String(m.GetVcard())
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageMediaContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageMediaContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageMediaContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageMediaContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa6edbffd: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetPhoneNumber(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetVcard(dBuf.String())
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageMediaContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageGame
func MakeTLInputBotInlineMessageGame(data2 *InputBotInlineMessage) *TLInputBotInlineMessageGame {
	if data2 == nil {
		return &TLInputBotInlineMessageGame{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageGame,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageGame
		return &TLInputBotInlineMessageGame{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageGame) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageGame
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageGame) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageGame) GetReplyMarkup() *ReplyMarkup  { return m.Data2.ReplyMarkup }

func (m *TLInputBotInlineMessageGame) GetPredicateName() string {
	return Predicate_inputBotInlineMessageGame
}

func (m *TLInputBotInlineMessageGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4b425864: func() []byte {
			x.UInt(0x4b425864)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageGame, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageGame, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4b425864: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInputBotInlineMessageMediaInvoice
func MakeTLInputBotInlineMessageMediaInvoice(data2 *InputBotInlineMessage) *TLInputBotInlineMessageMediaInvoice {
	if data2 == nil {
		return &TLInputBotInlineMessageMediaInvoice{Data2: &InputBotInlineMessage{
			PredicateName: Predicate_inputBotInlineMessageMediaInvoice,
		}}
	} else {
		data2.PredicateName = Predicate_inputBotInlineMessageMediaInvoice
		return &TLInputBotInlineMessageMediaInvoice{Data2: data2}
	}
}

func (m *TLInputBotInlineMessageMediaInvoice) To_InputBotInlineMessage() *InputBotInlineMessage {
	m.Data2.PredicateName = Predicate_inputBotInlineMessageMediaInvoice
	return m.Data2
}

//// flags
func (m *TLInputBotInlineMessageMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetTitle() string  { return m.Data2.Title }

func (m *TLInputBotInlineMessageMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetDescription() string  { return m.Data2.Description }

func (m *TLInputBotInlineMessageMediaInvoice) SetPhoto(v *InputWebDocument) { m.Data2.Photo = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetPhoto() *InputWebDocument  { return m.Data2.Photo }

func (m *TLInputBotInlineMessageMediaInvoice) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetInvoice() *Invoice  { return m.Data2.Invoice }

func (m *TLInputBotInlineMessageMediaInvoice) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLInputBotInlineMessageMediaInvoice) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetProvider() string  { return m.Data2.Provider }

func (m *TLInputBotInlineMessageMediaInvoice) SetProviderData(v *DataJSON) { m.Data2.ProviderData = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetProviderData() *DataJSON {
	return m.Data2.ProviderData
}

func (m *TLInputBotInlineMessageMediaInvoice) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaInvoice) GetReplyMarkup() *ReplyMarkup {
	return m.Data2.ReplyMarkup
}

func (m *TLInputBotInlineMessageMediaInvoice) GetPredicateName() string {
	return Predicate_inputBotInlineMessageMediaInvoice
}

func (m *TLInputBotInlineMessageMediaInvoice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd7e78225: func() []byte {
			x.UInt(0xd7e78225)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetPhoto() != nil {
					flags |= 1 << 0
				}

				if m.GetReplyMarkup() != nil {
					flags |= 1 << 2
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			if m.GetPhoto() != nil {
				x.Bytes(m.GetPhoto().Encode(layer))
			}

			x.Bytes(m.GetInvoice().Encode(layer))
			x.StringBytes(m.GetPayload())
			x.String(m.GetProvider())
			x.Bytes(m.GetProviderData().Encode(layer))
			if m.GetReplyMarkup() != nil {
				x.Bytes(m.GetReplyMarkup().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputBotInlineMessageMediaInvoice, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputBotInlineMessageMediaInvoice, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputBotInlineMessageMediaInvoice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputBotInlineMessageMediaInvoice) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd7e78225: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m19 := &InputWebDocument{}
				m19.Decode(dBuf)
				m.SetPhoto(m19)
			}

			m20 := &Invoice{}
			m20.Decode(dBuf)
			m.SetInvoice(m20)

			m.SetPayload(dBuf.StringBytes())
			m.SetProvider(dBuf.String())

			m22 := &DataJSON{}
			m22.Decode(dBuf)
			m.SetProviderData(m22)

			if (flags & (1 << 2)) != 0 {
				m3 := &ReplyMarkup{}
				m3.Decode(dBuf)
				m.SetReplyMarkup(m3)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputBotInlineMessageMediaInvoice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_HighScores <--
//  + TL_MessagesHighScores
//

func (m *Messages_HighScores) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_highScores:
		t := m.To_MessagesHighScores()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_HighScores) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_HighScores) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9a3bfd99:
		m2 := MakeTLMessagesHighScores(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_HighScores) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_highScores:
		t := m.To_MessagesHighScores()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesHighScores
func (m *Messages_HighScores) To_MessagesHighScores() *TLMessagesHighScores {
	m.PredicateName = Predicate_messages_highScores
	return &TLMessagesHighScores{
		Data2: m,
	}
}

// MakeTLMessagesHighScores
func MakeTLMessagesHighScores(data2 *Messages_HighScores) *TLMessagesHighScores {
	if data2 == nil {
		return &TLMessagesHighScores{Data2: &Messages_HighScores{
			PredicateName: Predicate_messages_highScores,
		}}
	} else {
		data2.PredicateName = Predicate_messages_highScores
		return &TLMessagesHighScores{Data2: data2}
	}
}

func (m *TLMessagesHighScores) To_Messages_HighScores() *Messages_HighScores {
	m.Data2.PredicateName = Predicate_messages_highScores
	return m.Data2
}

func (m *TLMessagesHighScores) SetScores(v []*HighScore) { m.Data2.Scores = v }
func (m *TLMessagesHighScores) GetScores() []*HighScore  { return m.Data2.Scores }

func (m *TLMessagesHighScores) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesHighScores) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesHighScores) GetPredicateName() string {
	return Predicate_messages_highScores
}

func (m *TLMessagesHighScores) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9a3bfd99: func() []byte {
			x.UInt(0x9a3bfd99)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetScores())))
			for _, v := range m.GetScores() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_highScores, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_highScores, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesHighScores) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHighScores) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9a3bfd99: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*HighScore, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &HighScore{}
				v0[i].Decode(dBuf)
			}
			m.SetScores(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*User, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &User{}
				v1[i].Decode(dBuf)
			}
			m.SetUsers(v1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesHighScores) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PollResults <--
//  + TL_PollResults
//

func (m *PollResults) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_pollResults:
		t := m.To_PollResults()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PollResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *PollResults) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdcb82ea3:
		m2 := MakeTLPollResults(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PollResults) DebugString() string {
	switch m.PredicateName {
	case Predicate_pollResults:
		t := m.To_PollResults()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PollResults
func (m *PollResults) To_PollResults() *TLPollResults {
	m.PredicateName = Predicate_pollResults
	return &TLPollResults{
		Data2: m,
	}
}

// MakeTLPollResults
func MakeTLPollResults(data2 *PollResults) *TLPollResults {
	if data2 == nil {
		return &TLPollResults{Data2: &PollResults{
			PredicateName: Predicate_pollResults,
		}}
	} else {
		data2.PredicateName = Predicate_pollResults
		return &TLPollResults{Data2: data2}
	}
}

func (m *TLPollResults) To_PollResults() *PollResults {
	m.Data2.PredicateName = Predicate_pollResults
	return m.Data2
}

//// flags
func (m *TLPollResults) SetMin(v bool) { m.Data2.Min = v }
func (m *TLPollResults) GetMin() bool  { return m.Data2.Min }

func (m *TLPollResults) SetResults(v []*PollAnswerVoters) { m.Data2.Results = v }
func (m *TLPollResults) GetResults() []*PollAnswerVoters  { return m.Data2.Results }

func (m *TLPollResults) SetTotalVoters(v *types.Int32Value) { m.Data2.TotalVoters = v }
func (m *TLPollResults) GetTotalVoters() *types.Int32Value  { return m.Data2.TotalVoters }

func (m *TLPollResults) SetRecentVoters(v []int64) { m.Data2.RecentVoters = v }
func (m *TLPollResults) GetRecentVoters() []int64  { return m.Data2.RecentVoters }

func (m *TLPollResults) SetSolution(v *types.StringValue) { m.Data2.Solution = v }
func (m *TLPollResults) GetSolution() *types.StringValue  { return m.Data2.Solution }

func (m *TLPollResults) SetSolutionEntities(v []*MessageEntity) { m.Data2.SolutionEntities = v }
func (m *TLPollResults) GetSolutionEntities() []*MessageEntity  { return m.Data2.SolutionEntities }

func (m *TLPollResults) GetPredicateName() string {
	return Predicate_pollResults
}

func (m *TLPollResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdcb82ea3: func() []byte {
			x.UInt(0xdcb82ea3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetMin() == true {
					flags |= 1 << 0
				}
				if m.GetResults() != nil {
					flags |= 1 << 1
				}
				if m.GetTotalVoters() != nil {
					flags |= 1 << 2
				}
				if m.GetRecentVoters() != nil {
					flags |= 1 << 3
				}
				if m.GetSolution() != nil {
					flags |= 1 << 4
				}
				if m.GetSolutionEntities() != nil {
					flags |= 1 << 4
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetResults() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetResults())))
				for _, v := range m.GetResults() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetTotalVoters() != nil {
				x.Int(m.GetTotalVoters().Value)
			}

			if m.GetRecentVoters() != nil {
				x.VectorLong(m.GetRecentVoters())
			}
			if m.GetSolution() != nil {
				x.String(m.GetSolution().Value)
			}

			if m.GetSolutionEntities() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetSolutionEntities())))
				for _, v := range m.GetSolutionEntities() {
					x.Bytes((*v).Encode(layer))
				}
			}
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_pollResults, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_pollResults, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPollResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPollResults) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdcb82ea3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetMin(true)
			}
			if (flags & (1 << 1)) != 0 {
				c2 := dBuf.Int()
				if c2 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
					return dBuf.GetError()
				}
				l2 := dBuf.Int()
				v2 := make([]*PollAnswerVoters, l2)
				for i := int32(0); i < l2; i++ {
					v2[i] = &PollAnswerVoters{}
					v2[i].Decode(dBuf)
				}
				m.SetResults(v2)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetTotalVoters(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetRecentVoters(dBuf.VectorLong())
			}
			if (flags & (1 << 4)) != 0 {
				m.SetSolution(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 4)) != 0 {
				c6 := dBuf.Int()
				if c6 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
					return dBuf.GetError()
				}
				l6 := dBuf.Int()
				v6 := make([]*MessageEntity, l6)
				for i := int32(0); i < l6; i++ {
					v6[i] = &MessageEntity{}
					v6[i].Decode(dBuf)
				}
				m.SetSolutionEntities(v6)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPollResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InlineQueryPeerType <--
//  + TL_InlineQueryPeerTypeSameBotPM
//  + TL_InlineQueryPeerTypePM
//  + TL_InlineQueryPeerTypeChat
//  + TL_InlineQueryPeerTypeMegagroup
//  + TL_InlineQueryPeerTypeBroadcast
//

func (m *InlineQueryPeerType) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inlineQueryPeerTypeSameBotPM:
		t := m.To_InlineQueryPeerTypeSameBotPM()
		xBuf = t.Encode(layer)
	case Predicate_inlineQueryPeerTypePM:
		t := m.To_InlineQueryPeerTypePM()
		xBuf = t.Encode(layer)
	case Predicate_inlineQueryPeerTypeChat:
		t := m.To_InlineQueryPeerTypeChat()
		xBuf = t.Encode(layer)
	case Predicate_inlineQueryPeerTypeMegagroup:
		t := m.To_InlineQueryPeerTypeMegagroup()
		xBuf = t.Encode(layer)
	case Predicate_inlineQueryPeerTypeBroadcast:
		t := m.To_InlineQueryPeerTypeBroadcast()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InlineQueryPeerType) CalcByteSize(layer int32) int {
	return 0
}

func (m *InlineQueryPeerType) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3081ed9d:
		m2 := MakeTLInlineQueryPeerTypeSameBotPM(m)
		m2.Decode(dBuf)
	case 0x833c0fac:
		m2 := MakeTLInlineQueryPeerTypePM(m)
		m2.Decode(dBuf)
	case 0xd766c50a:
		m2 := MakeTLInlineQueryPeerTypeChat(m)
		m2.Decode(dBuf)
	case 0x5ec4be43:
		m2 := MakeTLInlineQueryPeerTypeMegagroup(m)
		m2.Decode(dBuf)
	case 0x6334ee9a:
		m2 := MakeTLInlineQueryPeerTypeBroadcast(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InlineQueryPeerType) DebugString() string {
	switch m.PredicateName {
	case Predicate_inlineQueryPeerTypeSameBotPM:
		t := m.To_InlineQueryPeerTypeSameBotPM()
		return t.DebugString()
	case Predicate_inlineQueryPeerTypePM:
		t := m.To_InlineQueryPeerTypePM()
		return t.DebugString()
	case Predicate_inlineQueryPeerTypeChat:
		t := m.To_InlineQueryPeerTypeChat()
		return t.DebugString()
	case Predicate_inlineQueryPeerTypeMegagroup:
		t := m.To_InlineQueryPeerTypeMegagroup()
		return t.DebugString()
	case Predicate_inlineQueryPeerTypeBroadcast:
		t := m.To_InlineQueryPeerTypeBroadcast()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InlineQueryPeerTypeSameBotPM
func (m *InlineQueryPeerType) To_InlineQueryPeerTypeSameBotPM() *TLInlineQueryPeerTypeSameBotPM {
	m.PredicateName = Predicate_inlineQueryPeerTypeSameBotPM
	return &TLInlineQueryPeerTypeSameBotPM{
		Data2: m,
	}
}

// To_InlineQueryPeerTypePM
func (m *InlineQueryPeerType) To_InlineQueryPeerTypePM() *TLInlineQueryPeerTypePM {
	m.PredicateName = Predicate_inlineQueryPeerTypePM
	return &TLInlineQueryPeerTypePM{
		Data2: m,
	}
}

// To_InlineQueryPeerTypeChat
func (m *InlineQueryPeerType) To_InlineQueryPeerTypeChat() *TLInlineQueryPeerTypeChat {
	m.PredicateName = Predicate_inlineQueryPeerTypeChat
	return &TLInlineQueryPeerTypeChat{
		Data2: m,
	}
}

// To_InlineQueryPeerTypeMegagroup
func (m *InlineQueryPeerType) To_InlineQueryPeerTypeMegagroup() *TLInlineQueryPeerTypeMegagroup {
	m.PredicateName = Predicate_inlineQueryPeerTypeMegagroup
	return &TLInlineQueryPeerTypeMegagroup{
		Data2: m,
	}
}

// To_InlineQueryPeerTypeBroadcast
func (m *InlineQueryPeerType) To_InlineQueryPeerTypeBroadcast() *TLInlineQueryPeerTypeBroadcast {
	m.PredicateName = Predicate_inlineQueryPeerTypeBroadcast
	return &TLInlineQueryPeerTypeBroadcast{
		Data2: m,
	}
}

// MakeTLInlineQueryPeerTypeSameBotPM
func MakeTLInlineQueryPeerTypeSameBotPM(data2 *InlineQueryPeerType) *TLInlineQueryPeerTypeSameBotPM {
	if data2 == nil {
		return &TLInlineQueryPeerTypeSameBotPM{Data2: &InlineQueryPeerType{
			PredicateName: Predicate_inlineQueryPeerTypeSameBotPM,
		}}
	} else {
		data2.PredicateName = Predicate_inlineQueryPeerTypeSameBotPM
		return &TLInlineQueryPeerTypeSameBotPM{Data2: data2}
	}
}

func (m *TLInlineQueryPeerTypeSameBotPM) To_InlineQueryPeerType() *InlineQueryPeerType {
	m.Data2.PredicateName = Predicate_inlineQueryPeerTypeSameBotPM
	return m.Data2
}

func (m *TLInlineQueryPeerTypeSameBotPM) GetPredicateName() string {
	return Predicate_inlineQueryPeerTypeSameBotPM
}

func (m *TLInlineQueryPeerTypeSameBotPM) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3081ed9d: func() []byte {
			x.UInt(0x3081ed9d)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineQueryPeerTypeSameBotPM, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineQueryPeerTypeSameBotPM, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineQueryPeerTypeSameBotPM) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineQueryPeerTypeSameBotPM) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3081ed9d: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineQueryPeerTypeSameBotPM) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInlineQueryPeerTypePM
func MakeTLInlineQueryPeerTypePM(data2 *InlineQueryPeerType) *TLInlineQueryPeerTypePM {
	if data2 == nil {
		return &TLInlineQueryPeerTypePM{Data2: &InlineQueryPeerType{
			PredicateName: Predicate_inlineQueryPeerTypePM,
		}}
	} else {
		data2.PredicateName = Predicate_inlineQueryPeerTypePM
		return &TLInlineQueryPeerTypePM{Data2: data2}
	}
}

func (m *TLInlineQueryPeerTypePM) To_InlineQueryPeerType() *InlineQueryPeerType {
	m.Data2.PredicateName = Predicate_inlineQueryPeerTypePM
	return m.Data2
}

func (m *TLInlineQueryPeerTypePM) GetPredicateName() string {
	return Predicate_inlineQueryPeerTypePM
}

func (m *TLInlineQueryPeerTypePM) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x833c0fac: func() []byte {
			x.UInt(0x833c0fac)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineQueryPeerTypePM, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineQueryPeerTypePM, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineQueryPeerTypePM) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineQueryPeerTypePM) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x833c0fac: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineQueryPeerTypePM) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInlineQueryPeerTypeChat
func MakeTLInlineQueryPeerTypeChat(data2 *InlineQueryPeerType) *TLInlineQueryPeerTypeChat {
	if data2 == nil {
		return &TLInlineQueryPeerTypeChat{Data2: &InlineQueryPeerType{
			PredicateName: Predicate_inlineQueryPeerTypeChat,
		}}
	} else {
		data2.PredicateName = Predicate_inlineQueryPeerTypeChat
		return &TLInlineQueryPeerTypeChat{Data2: data2}
	}
}

func (m *TLInlineQueryPeerTypeChat) To_InlineQueryPeerType() *InlineQueryPeerType {
	m.Data2.PredicateName = Predicate_inlineQueryPeerTypeChat
	return m.Data2
}

func (m *TLInlineQueryPeerTypeChat) GetPredicateName() string {
	return Predicate_inlineQueryPeerTypeChat
}

func (m *TLInlineQueryPeerTypeChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd766c50a: func() []byte {
			x.UInt(0xd766c50a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineQueryPeerTypeChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineQueryPeerTypeChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineQueryPeerTypeChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineQueryPeerTypeChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd766c50a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineQueryPeerTypeChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInlineQueryPeerTypeMegagroup
func MakeTLInlineQueryPeerTypeMegagroup(data2 *InlineQueryPeerType) *TLInlineQueryPeerTypeMegagroup {
	if data2 == nil {
		return &TLInlineQueryPeerTypeMegagroup{Data2: &InlineQueryPeerType{
			PredicateName: Predicate_inlineQueryPeerTypeMegagroup,
		}}
	} else {
		data2.PredicateName = Predicate_inlineQueryPeerTypeMegagroup
		return &TLInlineQueryPeerTypeMegagroup{Data2: data2}
	}
}

func (m *TLInlineQueryPeerTypeMegagroup) To_InlineQueryPeerType() *InlineQueryPeerType {
	m.Data2.PredicateName = Predicate_inlineQueryPeerTypeMegagroup
	return m.Data2
}

func (m *TLInlineQueryPeerTypeMegagroup) GetPredicateName() string {
	return Predicate_inlineQueryPeerTypeMegagroup
}

func (m *TLInlineQueryPeerTypeMegagroup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5ec4be43: func() []byte {
			x.UInt(0x5ec4be43)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineQueryPeerTypeMegagroup, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineQueryPeerTypeMegagroup, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineQueryPeerTypeMegagroup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineQueryPeerTypeMegagroup) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5ec4be43: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineQueryPeerTypeMegagroup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLInlineQueryPeerTypeBroadcast
func MakeTLInlineQueryPeerTypeBroadcast(data2 *InlineQueryPeerType) *TLInlineQueryPeerTypeBroadcast {
	if data2 == nil {
		return &TLInlineQueryPeerTypeBroadcast{Data2: &InlineQueryPeerType{
			PredicateName: Predicate_inlineQueryPeerTypeBroadcast,
		}}
	} else {
		data2.PredicateName = Predicate_inlineQueryPeerTypeBroadcast
		return &TLInlineQueryPeerTypeBroadcast{Data2: data2}
	}
}

func (m *TLInlineQueryPeerTypeBroadcast) To_InlineQueryPeerType() *InlineQueryPeerType {
	m.Data2.PredicateName = Predicate_inlineQueryPeerTypeBroadcast
	return m.Data2
}

func (m *TLInlineQueryPeerTypeBroadcast) GetPredicateName() string {
	return Predicate_inlineQueryPeerTypeBroadcast
}

func (m *TLInlineQueryPeerTypeBroadcast) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6334ee9a: func() []byte {
			x.UInt(0x6334ee9a)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineQueryPeerTypeBroadcast, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineQueryPeerTypeBroadcast, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineQueryPeerTypeBroadcast) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineQueryPeerTypeBroadcast) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6334ee9a: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineQueryPeerTypeBroadcast) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Messages_ExportedChatInvites <--
//  + TL_MessagesExportedChatInvites
//

func (m *Messages_ExportedChatInvites) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messages_exportedChatInvites:
		t := m.To_MessagesExportedChatInvites()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Messages_ExportedChatInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *Messages_ExportedChatInvites) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbdc62dcc:
		m2 := MakeTLMessagesExportedChatInvites(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Messages_ExportedChatInvites) DebugString() string {
	switch m.PredicateName {
	case Predicate_messages_exportedChatInvites:
		t := m.To_MessagesExportedChatInvites()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessagesExportedChatInvites
func (m *Messages_ExportedChatInvites) To_MessagesExportedChatInvites() *TLMessagesExportedChatInvites {
	m.PredicateName = Predicate_messages_exportedChatInvites
	return &TLMessagesExportedChatInvites{
		Data2: m,
	}
}

// MakeTLMessagesExportedChatInvites
func MakeTLMessagesExportedChatInvites(data2 *Messages_ExportedChatInvites) *TLMessagesExportedChatInvites {
	if data2 == nil {
		return &TLMessagesExportedChatInvites{Data2: &Messages_ExportedChatInvites{
			PredicateName: Predicate_messages_exportedChatInvites,
		}}
	} else {
		data2.PredicateName = Predicate_messages_exportedChatInvites
		return &TLMessagesExportedChatInvites{Data2: data2}
	}
}

func (m *TLMessagesExportedChatInvites) To_Messages_ExportedChatInvites() *Messages_ExportedChatInvites {
	m.Data2.PredicateName = Predicate_messages_exportedChatInvites
	return m.Data2
}

func (m *TLMessagesExportedChatInvites) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesExportedChatInvites) GetCount() int32  { return m.Data2.Count }

func (m *TLMessagesExportedChatInvites) SetInvites(v []*ExportedChatInvite) { m.Data2.Invites = v }
func (m *TLMessagesExportedChatInvites) GetInvites() []*ExportedChatInvite  { return m.Data2.Invites }

func (m *TLMessagesExportedChatInvites) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesExportedChatInvites) GetUsers() []*User  { return m.Data2.Users }

func (m *TLMessagesExportedChatInvites) GetPredicateName() string {
	return Predicate_messages_exportedChatInvites
}

func (m *TLMessagesExportedChatInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbdc62dcc: func() []byte {
			x.UInt(0xbdc62dcc)

			x.Int(m.GetCount())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetInvites())))
			for _, v := range m.GetInvites() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messages_exportedChatInvites, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messages_exportedChatInvites, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessagesExportedChatInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesExportedChatInvites) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbdc62dcc: func() error {
			m.SetCount(dBuf.Int())
			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*ExportedChatInvite, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &ExportedChatInvite{}
				v1[i].Decode(dBuf)
			}
			m.SetInvites(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*User, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &User{}
				v2[i].Decode(dBuf)
			}
			m.SetUsers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessagesExportedChatInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SearchResultsPosition <--
//  + TL_SearchResultPosition
//

func (m *SearchResultsPosition) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_searchResultPosition:
		t := m.To_SearchResultPosition()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SearchResultsPosition) CalcByteSize(layer int32) int {
	return 0
}

func (m *SearchResultsPosition) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x7f648b67:
		m2 := MakeTLSearchResultPosition(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SearchResultsPosition) DebugString() string {
	switch m.PredicateName {
	case Predicate_searchResultPosition:
		t := m.To_SearchResultPosition()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SearchResultPosition
func (m *SearchResultsPosition) To_SearchResultPosition() *TLSearchResultPosition {
	m.PredicateName = Predicate_searchResultPosition
	return &TLSearchResultPosition{
		Data2: m,
	}
}

// MakeTLSearchResultPosition
func MakeTLSearchResultPosition(data2 *SearchResultsPosition) *TLSearchResultPosition {
	if data2 == nil {
		return &TLSearchResultPosition{Data2: &SearchResultsPosition{
			PredicateName: Predicate_searchResultPosition,
		}}
	} else {
		data2.PredicateName = Predicate_searchResultPosition
		return &TLSearchResultPosition{Data2: data2}
	}
}

func (m *TLSearchResultPosition) To_SearchResultsPosition() *SearchResultsPosition {
	m.Data2.PredicateName = Predicate_searchResultPosition
	return m.Data2
}

func (m *TLSearchResultPosition) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLSearchResultPosition) GetMsgId() int32  { return m.Data2.MsgId }

func (m *TLSearchResultPosition) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSearchResultPosition) GetDate() int32  { return m.Data2.Date }

func (m *TLSearchResultPosition) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLSearchResultPosition) GetOffset() int32  { return m.Data2.Offset }

func (m *TLSearchResultPosition) GetPredicateName() string {
	return Predicate_searchResultPosition
}

func (m *TLSearchResultPosition) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7f648b67: func() []byte {
			x.UInt(0x7f648b67)

			x.Int(m.GetMsgId())
			x.Int(m.GetDate())
			x.Int(m.GetOffset())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_searchResultPosition, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_searchResultPosition, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSearchResultPosition) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSearchResultPosition) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7f648b67: func() error {
			m.SetMsgId(dBuf.Int())
			m.SetDate(dBuf.Int())
			m.SetOffset(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSearchResultPosition) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// RecentMeUrl <--
//  + TL_RecentMeUrlUnknown
//  + TL_RecentMeUrlUser
//  + TL_RecentMeUrlChat
//  + TL_RecentMeUrlChatInvite
//  + TL_RecentMeUrlStickerSet
//

func (m *RecentMeUrl) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_recentMeUrlUnknown:
		t := m.To_RecentMeUrlUnknown()
		xBuf = t.Encode(layer)
	case Predicate_recentMeUrlUser:
		t := m.To_RecentMeUrlUser()
		xBuf = t.Encode(layer)
	case Predicate_recentMeUrlChat:
		t := m.To_RecentMeUrlChat()
		xBuf = t.Encode(layer)
	case Predicate_recentMeUrlChatInvite:
		t := m.To_RecentMeUrlChatInvite()
		xBuf = t.Encode(layer)
	case Predicate_recentMeUrlStickerSet:
		t := m.To_RecentMeUrlStickerSet()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *RecentMeUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *RecentMeUrl) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x46e1d13d:
		m2 := MakeTLRecentMeUrlUnknown(m)
		m2.Decode(dBuf)
	case 0xb92c09e2:
		m2 := MakeTLRecentMeUrlUser(m)
		m2.Decode(dBuf)
	case 0xb2da71d2:
		m2 := MakeTLRecentMeUrlChat(m)
		m2.Decode(dBuf)
	case 0xeb49081d:
		m2 := MakeTLRecentMeUrlChatInvite(m)
		m2.Decode(dBuf)
	case 0xbc0a57dc:
		m2 := MakeTLRecentMeUrlStickerSet(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *RecentMeUrl) DebugString() string {
	switch m.PredicateName {
	case Predicate_recentMeUrlUnknown:
		t := m.To_RecentMeUrlUnknown()
		return t.DebugString()
	case Predicate_recentMeUrlUser:
		t := m.To_RecentMeUrlUser()
		return t.DebugString()
	case Predicate_recentMeUrlChat:
		t := m.To_RecentMeUrlChat()
		return t.DebugString()
	case Predicate_recentMeUrlChatInvite:
		t := m.To_RecentMeUrlChatInvite()
		return t.DebugString()
	case Predicate_recentMeUrlStickerSet:
		t := m.To_RecentMeUrlStickerSet()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_RecentMeUrlUnknown
func (m *RecentMeUrl) To_RecentMeUrlUnknown() *TLRecentMeUrlUnknown {
	m.PredicateName = Predicate_recentMeUrlUnknown
	return &TLRecentMeUrlUnknown{
		Data2: m,
	}
}

// To_RecentMeUrlUser
func (m *RecentMeUrl) To_RecentMeUrlUser() *TLRecentMeUrlUser {
	m.PredicateName = Predicate_recentMeUrlUser
	return &TLRecentMeUrlUser{
		Data2: m,
	}
}

// To_RecentMeUrlChat
func (m *RecentMeUrl) To_RecentMeUrlChat() *TLRecentMeUrlChat {
	m.PredicateName = Predicate_recentMeUrlChat
	return &TLRecentMeUrlChat{
		Data2: m,
	}
}

// To_RecentMeUrlChatInvite
func (m *RecentMeUrl) To_RecentMeUrlChatInvite() *TLRecentMeUrlChatInvite {
	m.PredicateName = Predicate_recentMeUrlChatInvite
	return &TLRecentMeUrlChatInvite{
		Data2: m,
	}
}

// To_RecentMeUrlStickerSet
func (m *RecentMeUrl) To_RecentMeUrlStickerSet() *TLRecentMeUrlStickerSet {
	m.PredicateName = Predicate_recentMeUrlStickerSet
	return &TLRecentMeUrlStickerSet{
		Data2: m,
	}
}

// MakeTLRecentMeUrlUnknown
func MakeTLRecentMeUrlUnknown(data2 *RecentMeUrl) *TLRecentMeUrlUnknown {
	if data2 == nil {
		return &TLRecentMeUrlUnknown{Data2: &RecentMeUrl{
			PredicateName: Predicate_recentMeUrlUnknown,
		}}
	} else {
		data2.PredicateName = Predicate_recentMeUrlUnknown
		return &TLRecentMeUrlUnknown{Data2: data2}
	}
}

func (m *TLRecentMeUrlUnknown) To_RecentMeUrl() *RecentMeUrl {
	m.Data2.PredicateName = Predicate_recentMeUrlUnknown
	return m.Data2
}

func (m *TLRecentMeUrlUnknown) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUnknown) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlUnknown) GetPredicateName() string {
	return Predicate_recentMeUrlUnknown
}

func (m *TLRecentMeUrlUnknown) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x46e1d13d: func() []byte {
			x.UInt(0x46e1d13d)

			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_recentMeUrlUnknown, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_recentMeUrlUnknown, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRecentMeUrlUnknown) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRecentMeUrlUnknown) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x46e1d13d: func() error {
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRecentMeUrlUnknown) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRecentMeUrlUser
func MakeTLRecentMeUrlUser(data2 *RecentMeUrl) *TLRecentMeUrlUser {
	if data2 == nil {
		return &TLRecentMeUrlUser{Data2: &RecentMeUrl{
			PredicateName: Predicate_recentMeUrlUser,
		}}
	} else {
		data2.PredicateName = Predicate_recentMeUrlUser
		return &TLRecentMeUrlUser{Data2: data2}
	}
}

func (m *TLRecentMeUrlUser) To_RecentMeUrl() *RecentMeUrl {
	m.Data2.PredicateName = Predicate_recentMeUrlUser
	return m.Data2
}

func (m *TLRecentMeUrlUser) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUser) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlUser) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLRecentMeUrlUser) GetUserId() int64  { return m.Data2.UserId }

func (m *TLRecentMeUrlUser) GetPredicateName() string {
	return Predicate_recentMeUrlUser
}

func (m *TLRecentMeUrlUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb92c09e2: func() []byte {
			x.UInt(0xb92c09e2)

			x.String(m.GetUrl())
			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_recentMeUrlUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_recentMeUrlUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRecentMeUrlUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRecentMeUrlUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb92c09e2: func() error {
			m.SetUrl(dBuf.String())
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRecentMeUrlUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRecentMeUrlChat
func MakeTLRecentMeUrlChat(data2 *RecentMeUrl) *TLRecentMeUrlChat {
	if data2 == nil {
		return &TLRecentMeUrlChat{Data2: &RecentMeUrl{
			PredicateName: Predicate_recentMeUrlChat,
		}}
	} else {
		data2.PredicateName = Predicate_recentMeUrlChat
		return &TLRecentMeUrlChat{Data2: data2}
	}
}

func (m *TLRecentMeUrlChat) To_RecentMeUrl() *RecentMeUrl {
	m.Data2.PredicateName = Predicate_recentMeUrlChat
	return m.Data2
}

func (m *TLRecentMeUrlChat) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChat) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlChat) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLRecentMeUrlChat) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLRecentMeUrlChat) GetPredicateName() string {
	return Predicate_recentMeUrlChat
}

func (m *TLRecentMeUrlChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb2da71d2: func() []byte {
			x.UInt(0xb2da71d2)

			x.String(m.GetUrl())
			x.Long(m.GetChatId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_recentMeUrlChat, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_recentMeUrlChat, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRecentMeUrlChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRecentMeUrlChat) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb2da71d2: func() error {
			m.SetUrl(dBuf.String())
			m.SetChatId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRecentMeUrlChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRecentMeUrlChatInvite
func MakeTLRecentMeUrlChatInvite(data2 *RecentMeUrl) *TLRecentMeUrlChatInvite {
	if data2 == nil {
		return &TLRecentMeUrlChatInvite{Data2: &RecentMeUrl{
			PredicateName: Predicate_recentMeUrlChatInvite,
		}}
	} else {
		data2.PredicateName = Predicate_recentMeUrlChatInvite
		return &TLRecentMeUrlChatInvite{Data2: data2}
	}
}

func (m *TLRecentMeUrlChatInvite) To_RecentMeUrl() *RecentMeUrl {
	m.Data2.PredicateName = Predicate_recentMeUrlChatInvite
	return m.Data2
}

func (m *TLRecentMeUrlChatInvite) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChatInvite) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlChatInvite) SetChatInvite(v *ChatInvite) { m.Data2.ChatInvite = v }
func (m *TLRecentMeUrlChatInvite) GetChatInvite() *ChatInvite  { return m.Data2.ChatInvite }

func (m *TLRecentMeUrlChatInvite) GetPredicateName() string {
	return Predicate_recentMeUrlChatInvite
}

func (m *TLRecentMeUrlChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xeb49081d: func() []byte {
			x.UInt(0xeb49081d)

			x.String(m.GetUrl())
			x.Bytes(m.GetChatInvite().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_recentMeUrlChatInvite, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_recentMeUrlChatInvite, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRecentMeUrlChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRecentMeUrlChatInvite) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xeb49081d: func() error {
			m.SetUrl(dBuf.String())

			m3 := &ChatInvite{}
			m3.Decode(dBuf)
			m.SetChatInvite(m3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRecentMeUrlChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLRecentMeUrlStickerSet
func MakeTLRecentMeUrlStickerSet(data2 *RecentMeUrl) *TLRecentMeUrlStickerSet {
	if data2 == nil {
		return &TLRecentMeUrlStickerSet{Data2: &RecentMeUrl{
			PredicateName: Predicate_recentMeUrlStickerSet,
		}}
	} else {
		data2.PredicateName = Predicate_recentMeUrlStickerSet
		return &TLRecentMeUrlStickerSet{Data2: data2}
	}
}

func (m *TLRecentMeUrlStickerSet) To_RecentMeUrl() *RecentMeUrl {
	m.Data2.PredicateName = Predicate_recentMeUrlStickerSet
	return m.Data2
}

func (m *TLRecentMeUrlStickerSet) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlStickerSet) GetUrl() string  { return m.Data2.Url }

func (m *TLRecentMeUrlStickerSet) SetSet(v *StickerSetCovered) { m.Data2.Set = v }
func (m *TLRecentMeUrlStickerSet) GetSet() *StickerSetCovered  { return m.Data2.Set }

func (m *TLRecentMeUrlStickerSet) GetPredicateName() string {
	return Predicate_recentMeUrlStickerSet
}

func (m *TLRecentMeUrlStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbc0a57dc: func() []byte {
			x.UInt(0xbc0a57dc)

			x.String(m.GetUrl())
			x.Bytes(m.GetSet().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_recentMeUrlStickerSet, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_recentMeUrlStickerSet, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLRecentMeUrlStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRecentMeUrlStickerSet) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbc0a57dc: func() error {
			m.SetUrl(dBuf.String())

			m4 := &StickerSetCovered{}
			m4.Decode(dBuf)
			m.SetSet(m4)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLRecentMeUrlStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SavedContact <--
//  + TL_SavedPhoneContact
//

func (m *SavedContact) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_savedPhoneContact:
		t := m.To_SavedPhoneContact()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SavedContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *SavedContact) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x1142bd56:
		m2 := MakeTLSavedPhoneContact(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SavedContact) DebugString() string {
	switch m.PredicateName {
	case Predicate_savedPhoneContact:
		t := m.To_SavedPhoneContact()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SavedPhoneContact
func (m *SavedContact) To_SavedPhoneContact() *TLSavedPhoneContact {
	m.PredicateName = Predicate_savedPhoneContact
	return &TLSavedPhoneContact{
		Data2: m,
	}
}

// MakeTLSavedPhoneContact
func MakeTLSavedPhoneContact(data2 *SavedContact) *TLSavedPhoneContact {
	if data2 == nil {
		return &TLSavedPhoneContact{Data2: &SavedContact{
			PredicateName: Predicate_savedPhoneContact,
		}}
	} else {
		data2.PredicateName = Predicate_savedPhoneContact
		return &TLSavedPhoneContact{Data2: data2}
	}
}

func (m *TLSavedPhoneContact) To_SavedContact() *SavedContact {
	m.Data2.PredicateName = Predicate_savedPhoneContact
	return m.Data2
}

func (m *TLSavedPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSavedPhoneContact) GetPhone() string  { return m.Data2.Phone }

func (m *TLSavedPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLSavedPhoneContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLSavedPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLSavedPhoneContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLSavedPhoneContact) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSavedPhoneContact) GetDate() int32  { return m.Data2.Date }

func (m *TLSavedPhoneContact) GetPredicateName() string {
	return Predicate_savedPhoneContact
}

func (m *TLSavedPhoneContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1142bd56: func() []byte {
			x.UInt(0x1142bd56)

			x.String(m.GetPhone())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			x.Int(m.GetDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_savedPhoneContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_savedPhoneContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSavedPhoneContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSavedPhoneContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1142bd56: func() error {
			m.SetPhone(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			m.SetDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSavedPhoneContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputContact <--
//  + TL_InputPhoneContact
//

func (m *InputContact) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPhoneContact:
		t := m.To_InputPhoneContact()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputContact) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xf392b7f4:
		m2 := MakeTLInputPhoneContact(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputContact) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPhoneContact:
		t := m.To_InputPhoneContact()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPhoneContact
func (m *InputContact) To_InputPhoneContact() *TLInputPhoneContact {
	m.PredicateName = Predicate_inputPhoneContact
	return &TLInputPhoneContact{
		Data2: m,
	}
}

// MakeTLInputPhoneContact
func MakeTLInputPhoneContact(data2 *InputContact) *TLInputPhoneContact {
	if data2 == nil {
		return &TLInputPhoneContact{Data2: &InputContact{
			PredicateName: Predicate_inputPhoneContact,
		}}
	} else {
		data2.PredicateName = Predicate_inputPhoneContact
		return &TLInputPhoneContact{Data2: data2}
	}
}

func (m *TLInputPhoneContact) To_InputContact() *InputContact {
	m.Data2.PredicateName = Predicate_inputPhoneContact
	return m.Data2
}

func (m *TLInputPhoneContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLInputPhoneContact) GetClientId() int64  { return m.Data2.ClientId }

func (m *TLInputPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLInputPhoneContact) GetPhone() string  { return m.Data2.Phone }

func (m *TLInputPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputPhoneContact) GetFirstName() string  { return m.Data2.FirstName }

func (m *TLInputPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputPhoneContact) GetLastName() string  { return m.Data2.LastName }

func (m *TLInputPhoneContact) GetPredicateName() string {
	return Predicate_inputPhoneContact
}

func (m *TLInputPhoneContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf392b7f4: func() []byte {
			x.UInt(0xf392b7f4)

			x.Long(m.GetClientId())
			x.String(m.GetPhone())
			x.String(m.GetFirstName())
			x.String(m.GetLastName())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPhoneContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPhoneContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPhoneContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPhoneContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf392b7f4: func() error {
			m.SetClientId(dBuf.Long())
			m.SetPhone(dBuf.String())
			m.SetFirstName(dBuf.String())
			m.SetLastName(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPhoneContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_Support <--
//  + TL_HelpSupport
//

func (m *Help_Support) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_support:
		t := m.To_HelpSupport()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_Support) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_Support) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x17c6b5f6:
		m2 := MakeTLHelpSupport(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_Support) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_support:
		t := m.To_HelpSupport()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpSupport
func (m *Help_Support) To_HelpSupport() *TLHelpSupport {
	m.PredicateName = Predicate_help_support
	return &TLHelpSupport{
		Data2: m,
	}
}

// MakeTLHelpSupport
func MakeTLHelpSupport(data2 *Help_Support) *TLHelpSupport {
	if data2 == nil {
		return &TLHelpSupport{Data2: &Help_Support{
			PredicateName: Predicate_help_support,
		}}
	} else {
		data2.PredicateName = Predicate_help_support
		return &TLHelpSupport{Data2: data2}
	}
}

func (m *TLHelpSupport) To_Help_Support() *Help_Support {
	m.Data2.PredicateName = Predicate_help_support
	return m.Data2
}

func (m *TLHelpSupport) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLHelpSupport) GetPhoneNumber() string  { return m.Data2.PhoneNumber }

func (m *TLHelpSupport) SetUser(v *User) { m.Data2.User = v }
func (m *TLHelpSupport) GetUser() *User  { return m.Data2.User }

func (m *TLHelpSupport) GetPredicateName() string {
	return Predicate_help_support
}

func (m *TLHelpSupport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x17c6b5f6: func() []byte {
			x.UInt(0x17c6b5f6)

			x.String(m.GetPhoneNumber())
			x.Bytes(m.GetUser().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_support, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_support, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpSupport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpSupport) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x17c6b5f6: func() error {
			m.SetPhoneNumber(dBuf.String())

			m1 := &User{}
			m1.Decode(dBuf)
			m.SetUser(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpSupport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_Found <--
//  + TL_ContactsFound
//

func (m *Contacts_Found) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_found:
		t := m.To_ContactsFound()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_Found) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_Found) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb3134d9d:
		m2 := MakeTLContactsFound(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_Found) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_found:
		t := m.To_ContactsFound()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsFound
func (m *Contacts_Found) To_ContactsFound() *TLContactsFound {
	m.PredicateName = Predicate_contacts_found
	return &TLContactsFound{
		Data2: m,
	}
}

// MakeTLContactsFound
func MakeTLContactsFound(data2 *Contacts_Found) *TLContactsFound {
	if data2 == nil {
		return &TLContactsFound{Data2: &Contacts_Found{
			PredicateName: Predicate_contacts_found,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_found
		return &TLContactsFound{Data2: data2}
	}
}

func (m *TLContactsFound) To_Contacts_Found() *Contacts_Found {
	m.Data2.PredicateName = Predicate_contacts_found
	return m.Data2
}

func (m *TLContactsFound) SetMyResults(v []*Peer) { m.Data2.MyResults = v }
func (m *TLContactsFound) GetMyResults() []*Peer  { return m.Data2.MyResults }

func (m *TLContactsFound) SetResults(v []*Peer) { m.Data2.Results = v }
func (m *TLContactsFound) GetResults() []*Peer  { return m.Data2.Results }

func (m *TLContactsFound) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsFound) GetChats() []*Chat  { return m.Data2.Chats }

func (m *TLContactsFound) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsFound) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsFound) GetPredicateName() string {
	return Predicate_contacts_found
}

func (m *TLContactsFound) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb3134d9d: func() []byte {
			x.UInt(0xb3134d9d)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetMyResults())))
			for _, v := range m.GetMyResults() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetResults())))
			for _, v := range m.GetResults() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetChats())))
			for _, v := range m.GetChats() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_found, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_found, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsFound) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsFound) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb3134d9d: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*Peer, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &Peer{}
				v0[i].Decode(dBuf)
			}
			m.SetMyResults(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*Peer, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &Peer{}
				v1[i].Decode(dBuf)
			}
			m.SetResults(v1)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Chat, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Chat{}
				v2[i].Decode(dBuf)
			}
			m.SetChats(v2)

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsFound) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StickerSetCovered <--
//  + TL_StickerSetCovered
//  + TL_StickerSetMultiCovered
//

func (m *StickerSetCovered) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_stickerSetCovered:
		t := m.To_StickerSetCovered()
		xBuf = t.Encode(layer)
	case Predicate_stickerSetMultiCovered:
		t := m.To_StickerSetMultiCovered()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StickerSetCovered) CalcByteSize(layer int32) int {
	return 0
}

func (m *StickerSetCovered) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6410a5d2:
		m2 := MakeTLStickerSetCovered(m)
		m2.Decode(dBuf)
	case 0x3407e51b:
		m2 := MakeTLStickerSetMultiCovered(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StickerSetCovered) DebugString() string {
	switch m.PredicateName {
	case Predicate_stickerSetCovered:
		t := m.To_StickerSetCovered()
		return t.DebugString()
	case Predicate_stickerSetMultiCovered:
		t := m.To_StickerSetMultiCovered()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StickerSetCovered
func (m *StickerSetCovered) To_StickerSetCovered() *TLStickerSetCovered {
	m.PredicateName = Predicate_stickerSetCovered
	return &TLStickerSetCovered{
		Data2: m,
	}
}

// To_StickerSetMultiCovered
func (m *StickerSetCovered) To_StickerSetMultiCovered() *TLStickerSetMultiCovered {
	m.PredicateName = Predicate_stickerSetMultiCovered
	return &TLStickerSetMultiCovered{
		Data2: m,
	}
}

// MakeTLStickerSetCovered
func MakeTLStickerSetCovered(data2 *StickerSetCovered) *TLStickerSetCovered {
	if data2 == nil {
		return &TLStickerSetCovered{Data2: &StickerSetCovered{
			PredicateName: Predicate_stickerSetCovered,
		}}
	} else {
		data2.PredicateName = Predicate_stickerSetCovered
		return &TLStickerSetCovered{Data2: data2}
	}
}

func (m *TLStickerSetCovered) To_StickerSetCovered() *StickerSetCovered {
	m.Data2.PredicateName = Predicate_stickerSetCovered
	return m.Data2
}

func (m *TLStickerSetCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetCovered) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLStickerSetCovered) SetCover(v *Document) { m.Data2.Cover = v }
func (m *TLStickerSetCovered) GetCover() *Document  { return m.Data2.Cover }

func (m *TLStickerSetCovered) GetPredicateName() string {
	return Predicate_stickerSetCovered
}

func (m *TLStickerSetCovered) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6410a5d2: func() []byte {
			x.UInt(0x6410a5d2)

			x.Bytes(m.GetSet().Encode(layer))
			x.Bytes(m.GetCover().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stickerSetCovered, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stickerSetCovered, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStickerSetCovered) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickerSetCovered) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6410a5d2: func() error {

			m0 := &StickerSet{}
			m0.Decode(dBuf)
			m.SetSet(m0)

			m1 := &Document{}
			m1.Decode(dBuf)
			m.SetCover(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStickerSetCovered) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLStickerSetMultiCovered
func MakeTLStickerSetMultiCovered(data2 *StickerSetCovered) *TLStickerSetMultiCovered {
	if data2 == nil {
		return &TLStickerSetMultiCovered{Data2: &StickerSetCovered{
			PredicateName: Predicate_stickerSetMultiCovered,
		}}
	} else {
		data2.PredicateName = Predicate_stickerSetMultiCovered
		return &TLStickerSetMultiCovered{Data2: data2}
	}
}

func (m *TLStickerSetMultiCovered) To_StickerSetCovered() *StickerSetCovered {
	m.Data2.PredicateName = Predicate_stickerSetMultiCovered
	return m.Data2
}

func (m *TLStickerSetMultiCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetMultiCovered) GetSet() *StickerSet  { return m.Data2.Set }

func (m *TLStickerSetMultiCovered) SetCovers(v []*Document) { m.Data2.Covers = v }
func (m *TLStickerSetMultiCovered) GetCovers() []*Document  { return m.Data2.Covers }

func (m *TLStickerSetMultiCovered) GetPredicateName() string {
	return Predicate_stickerSetMultiCovered
}

func (m *TLStickerSetMultiCovered) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3407e51b: func() []byte {
			x.UInt(0x3407e51b)

			x.Bytes(m.GetSet().Encode(layer))

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetCovers())))
			for _, v := range m.GetCovers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_stickerSetMultiCovered, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_stickerSetMultiCovered, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStickerSetMultiCovered) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickerSetMultiCovered) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3407e51b: func() error {

			m0 := &StickerSet{}
			m0.Decode(dBuf)
			m.SetSet(m0)

			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*Document, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &Document{}
				v2[i].Decode(dBuf)
			}
			m.SetCovers(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStickerSetMultiCovered) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Game <--
//  + TL_Game
//

func (m *Game) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_game:
		t := m.To_Game()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Game) CalcByteSize(layer int32) int {
	return 0
}

func (m *Game) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xbdf9653b:
		m2 := MakeTLGame(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Game) DebugString() string {
	switch m.PredicateName {
	case Predicate_game:
		t := m.To_Game()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_Game
func (m *Game) To_Game() *TLGame {
	m.PredicateName = Predicate_game
	return &TLGame{
		Data2: m,
	}
}

// MakeTLGame
func MakeTLGame(data2 *Game) *TLGame {
	if data2 == nil {
		return &TLGame{Data2: &Game{
			PredicateName: Predicate_game,
		}}
	} else {
		data2.PredicateName = Predicate_game
		return &TLGame{Data2: data2}
	}
}

func (m *TLGame) To_Game() *Game {
	m.Data2.PredicateName = Predicate_game
	return m.Data2
}

//// flags
func (m *TLGame) SetId(v int64) { m.Data2.Id = v }
func (m *TLGame) GetId() int64  { return m.Data2.Id }

func (m *TLGame) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGame) GetAccessHash() int64  { return m.Data2.AccessHash }

func (m *TLGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLGame) GetShortName() string  { return m.Data2.ShortName }

func (m *TLGame) SetTitle(v string) { m.Data2.Title = v }
func (m *TLGame) GetTitle() string  { return m.Data2.Title }

func (m *TLGame) SetDescription(v string) { m.Data2.Description = v }
func (m *TLGame) GetDescription() string  { return m.Data2.Description }

func (m *TLGame) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLGame) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLGame) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLGame) GetDocument() *Document  { return m.Data2.Document }

func (m *TLGame) GetPredicateName() string {
	return Predicate_game
}

func (m *TLGame) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbdf9653b: func() []byte {
			x.UInt(0xbdf9653b)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDocument() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetId())
			x.Long(m.GetAccessHash())
			x.String(m.GetShortName())
			x.String(m.GetTitle())
			x.String(m.GetDescription())
			x.Bytes(m.GetPhoto().Encode(layer))
			if m.GetDocument() != nil {
				x.Bytes(m.GetDocument().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_game, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_game, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLGame) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGame) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbdf9653b: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetId(dBuf.Long())
			m.SetAccessHash(dBuf.Long())
			m.SetShortName(dBuf.String())
			m.SetTitle(dBuf.String())
			m.SetDescription(dBuf.String())

			m6 := &Photo{}
			m6.Decode(dBuf)
			m.SetPhoto(m6)

			if (flags & (1 << 0)) != 0 {
				m7 := &Document{}
				m7.Decode(dBuf)
				m.SetDocument(m7)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLGame) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ShippingOption <--
//  + TL_ShippingOption
//

func (m *ShippingOption) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_shippingOption:
		t := m.To_ShippingOption()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ShippingOption) CalcByteSize(layer int32) int {
	return 0
}

func (m *ShippingOption) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb6213cdf:
		m2 := MakeTLShippingOption(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ShippingOption) DebugString() string {
	switch m.PredicateName {
	case Predicate_shippingOption:
		t := m.To_ShippingOption()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ShippingOption
func (m *ShippingOption) To_ShippingOption() *TLShippingOption {
	m.PredicateName = Predicate_shippingOption
	return &TLShippingOption{
		Data2: m,
	}
}

// MakeTLShippingOption
func MakeTLShippingOption(data2 *ShippingOption) *TLShippingOption {
	if data2 == nil {
		return &TLShippingOption{Data2: &ShippingOption{
			PredicateName: Predicate_shippingOption,
		}}
	} else {
		data2.PredicateName = Predicate_shippingOption
		return &TLShippingOption{Data2: data2}
	}
}

func (m *TLShippingOption) To_ShippingOption() *ShippingOption {
	m.Data2.PredicateName = Predicate_shippingOption
	return m.Data2
}

func (m *TLShippingOption) SetId(v string) { m.Data2.Id = v }
func (m *TLShippingOption) GetId() string  { return m.Data2.Id }

func (m *TLShippingOption) SetTitle(v string) { m.Data2.Title = v }
func (m *TLShippingOption) GetTitle() string  { return m.Data2.Title }

func (m *TLShippingOption) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLShippingOption) GetPrices() []*LabeledPrice  { return m.Data2.Prices }

func (m *TLShippingOption) GetPredicateName() string {
	return Predicate_shippingOption
}

func (m *TLShippingOption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb6213cdf: func() []byte {
			x.UInt(0xb6213cdf)

			x.String(m.GetId())
			x.String(m.GetTitle())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPrices())))
			for _, v := range m.GetPrices() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_shippingOption, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_shippingOption, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLShippingOption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLShippingOption) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb6213cdf: func() error {
			m.SetId(dBuf.String())
			m.SetTitle(dBuf.String())
			c2 := dBuf.Int()
			if c2 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
				return dBuf.GetError()
			}
			l2 := dBuf.Int()
			v2 := make([]*LabeledPrice, l2)
			for i := int32(0); i < l2; i++ {
				v2[i] = &LabeledPrice{}
				v2[i].Decode(dBuf)
			}
			m.SetPrices(v2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLShippingOption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// BizDataRaw <--
//  + TL_BizDataRaw
//

func (m *BizDataRaw) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_bizDataRaw:
		t := m.To_BizDataRaw()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *BizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *BizDataRaw) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x6db3ac79:
		m2 := MakeTLBizDataRaw(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *BizDataRaw) DebugString() string {
	switch m.PredicateName {
	case Predicate_bizDataRaw:
		t := m.To_BizDataRaw()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_BizDataRaw
func (m *BizDataRaw) To_BizDataRaw() *TLBizDataRaw {
	m.PredicateName = Predicate_bizDataRaw
	return &TLBizDataRaw{
		Data2: m,
	}
}

// MakeTLBizDataRaw
func MakeTLBizDataRaw(data2 *BizDataRaw) *TLBizDataRaw {
	if data2 == nil {
		return &TLBizDataRaw{Data2: &BizDataRaw{
			PredicateName: Predicate_bizDataRaw,
		}}
	} else {
		data2.PredicateName = Predicate_bizDataRaw
		return &TLBizDataRaw{Data2: data2}
	}
}

func (m *TLBizDataRaw) To_BizDataRaw() *BizDataRaw {
	m.Data2.PredicateName = Predicate_bizDataRaw
	return m.Data2
}

func (m *TLBizDataRaw) SetData(v []byte) { m.Data2.Data = v }
func (m *TLBizDataRaw) GetData() []byte  { return m.Data2.Data }

func (m *TLBizDataRaw) GetPredicateName() string {
	return Predicate_bizDataRaw
}

func (m *TLBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x6db3ac79: func() []byte {
			x.UInt(0x6db3ac79)

			x.StringBytes(m.GetData())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_bizDataRaw, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_bizDataRaw, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBizDataRaw) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x6db3ac79: func() error {
			m.SetData(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PeerNotifySettings <--
//  + TL_PeerNotifySettings
//

func (m *PeerNotifySettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_peerNotifySettings:
		t := m.To_PeerNotifySettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PeerNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *PeerNotifySettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xaf509d20:
		m2 := MakeTLPeerNotifySettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PeerNotifySettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_peerNotifySettings:
		t := m.To_PeerNotifySettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PeerNotifySettings
func (m *PeerNotifySettings) To_PeerNotifySettings() *TLPeerNotifySettings {
	m.PredicateName = Predicate_peerNotifySettings
	return &TLPeerNotifySettings{
		Data2: m,
	}
}

// MakeTLPeerNotifySettings
func MakeTLPeerNotifySettings(data2 *PeerNotifySettings) *TLPeerNotifySettings {
	if data2 == nil {
		return &TLPeerNotifySettings{Data2: &PeerNotifySettings{
			PredicateName: Predicate_peerNotifySettings,
		}}
	} else {
		data2.PredicateName = Predicate_peerNotifySettings
		return &TLPeerNotifySettings{Data2: data2}
	}
}

func (m *TLPeerNotifySettings) To_PeerNotifySettings() *PeerNotifySettings {
	m.Data2.PredicateName = Predicate_peerNotifySettings
	return m.Data2
}

//// flags
func (m *TLPeerNotifySettings) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews = v }
func (m *TLPeerNotifySettings) GetShowPreviews() *Bool  { return m.Data2.ShowPreviews }

func (m *TLPeerNotifySettings) SetSilent(v *Bool) { m.Data2.Silent = v }
func (m *TLPeerNotifySettings) GetSilent() *Bool  { return m.Data2.Silent }

func (m *TLPeerNotifySettings) SetMuteUntil(v *types.Int32Value) { m.Data2.MuteUntil = v }
func (m *TLPeerNotifySettings) GetMuteUntil() *types.Int32Value  { return m.Data2.MuteUntil }

func (m *TLPeerNotifySettings) SetSound(v *types.StringValue) { m.Data2.Sound = v }
func (m *TLPeerNotifySettings) GetSound() *types.StringValue  { return m.Data2.Sound }

func (m *TLPeerNotifySettings) GetPredicateName() string {
	return Predicate_peerNotifySettings
}

func (m *TLPeerNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaf509d20: func() []byte {
			x.UInt(0xaf509d20)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetShowPreviews() != nil {
					flags |= 1 << 0
				}
				if m.GetSilent() != nil {
					flags |= 1 << 1
				}
				if m.GetMuteUntil() != nil {
					flags |= 1 << 2
				}
				if m.GetSound() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetShowPreviews() != nil {
				x.Bytes(m.GetShowPreviews().Encode(layer))
			}

			if m.GetSilent() != nil {
				x.Bytes(m.GetSilent().Encode(layer))
			}

			if m.GetMuteUntil() != nil {
				x.Int(m.GetMuteUntil().Value)
			}

			if m.GetSound() != nil {
				x.String(m.GetSound().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_peerNotifySettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_peerNotifySettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPeerNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPeerNotifySettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaf509d20: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &Bool{}
				m1.Decode(dBuf)
				m.SetShowPreviews(m1)
			}
			if (flags & (1 << 1)) != 0 {
				m2 := &Bool{}
				m2.Decode(dBuf)
				m.SetSilent(m2)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetMuteUntil(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetSound(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPeerNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// PredefinedUser <--
//  + TL_PredefinedUser
//

func (m *PredefinedUser) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_predefinedUser:
		t := m.To_PredefinedUser()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *PredefinedUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *PredefinedUser) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x16d5ecc3:
		m2 := MakeTLPredefinedUser(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *PredefinedUser) DebugString() string {
	switch m.PredicateName {
	case Predicate_predefinedUser:
		t := m.To_PredefinedUser()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PredefinedUser
func (m *PredefinedUser) To_PredefinedUser() *TLPredefinedUser {
	m.PredicateName = Predicate_predefinedUser
	return &TLPredefinedUser{
		Data2: m,
	}
}

// MakeTLPredefinedUser
func MakeTLPredefinedUser(data2 *PredefinedUser) *TLPredefinedUser {
	if data2 == nil {
		return &TLPredefinedUser{Data2: &PredefinedUser{
			PredicateName: Predicate_predefinedUser,
		}}
	} else {
		data2.PredicateName = Predicate_predefinedUser
		return &TLPredefinedUser{Data2: data2}
	}
}

func (m *TLPredefinedUser) To_PredefinedUser() *PredefinedUser {
	m.Data2.PredicateName = Predicate_predefinedUser
	return m.Data2
}

//// flags
func (m *TLPredefinedUser) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLPredefinedUser) GetPhone() string  { return m.Data2.Phone }

func (m *TLPredefinedUser) SetFirstName(v *types.StringValue) { m.Data2.FirstName = v }
func (m *TLPredefinedUser) GetFirstName() *types.StringValue  { return m.Data2.FirstName }

func (m *TLPredefinedUser) SetLastName(v *types.StringValue) { m.Data2.LastName = v }
func (m *TLPredefinedUser) GetLastName() *types.StringValue  { return m.Data2.LastName }

func (m *TLPredefinedUser) SetUsername(v *types.StringValue) { m.Data2.Username = v }
func (m *TLPredefinedUser) GetUsername() *types.StringValue  { return m.Data2.Username }

func (m *TLPredefinedUser) SetCode(v string) { m.Data2.Code = v }
func (m *TLPredefinedUser) GetCode() string  { return m.Data2.Code }

func (m *TLPredefinedUser) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLPredefinedUser) GetVerified() bool  { return m.Data2.Verified }

func (m *TLPredefinedUser) SetRegisteredUserId(v *types.Int64Value) { m.Data2.RegisteredUserId = v }
func (m *TLPredefinedUser) GetRegisteredUserId() *types.Int64Value  { return m.Data2.RegisteredUserId }

func (m *TLPredefinedUser) SetLastSeenAt(v *types.Int32Value) { m.Data2.LastSeenAt = v }
func (m *TLPredefinedUser) GetLastSeenAt() *types.Int32Value  { return m.Data2.LastSeenAt }

func (m *TLPredefinedUser) SetBanned(v bool) { m.Data2.Banned = v }
func (m *TLPredefinedUser) GetBanned() bool  { return m.Data2.Banned }

func (m *TLPredefinedUser) GetPredicateName() string {
	return Predicate_predefinedUser
}

func (m *TLPredefinedUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x16d5ecc3: func() []byte {
			x.UInt(0x16d5ecc3)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetFirstName() != nil {
					flags |= 1 << 0
				}
				if m.GetLastName() != nil {
					flags |= 1 << 1
				}
				if m.GetUsername() != nil {
					flags |= 1 << 2
				}

				if m.GetVerified() == true {
					flags |= 1 << 3
				}
				if m.GetRegisteredUserId() != nil {
					flags |= 1 << 4
				}
				if m.GetLastSeenAt() != nil {
					flags |= 1 << 5
				}
				if m.GetBanned() == true {
					flags |= 1 << 6
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetPhone())
			if m.GetFirstName() != nil {
				x.String(m.GetFirstName().Value)
			}

			if m.GetLastName() != nil {
				x.String(m.GetLastName().Value)
			}

			if m.GetUsername() != nil {
				x.String(m.GetUsername().Value)
			}

			x.String(m.GetCode())
			if m.GetRegisteredUserId() != nil {
				x.Long(m.GetRegisteredUserId().Value)
			}

			if m.GetLastSeenAt() != nil {
				x.Int(m.GetLastSeenAt().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_predefinedUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_predefinedUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPredefinedUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x16d5ecc3: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetPhone(dBuf.String())
			if (flags & (1 << 0)) != 0 {
				m.SetFirstName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetLastName(&types.StringValue{Value: dBuf.String()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetUsername(&types.StringValue{Value: dBuf.String()})
			}

			m.SetCode(dBuf.String())
			if (flags & (1 << 3)) != 0 {
				m.SetVerified(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetRegisteredUserId(&types.Int64Value{Value: dBuf.Long()})
			}

			if (flags & (1 << 5)) != 0 {
				m.SetLastSeenAt(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 6)) != 0 {
				m.SetBanned(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPredefinedUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InputPeerNotifySettings <--
//  + TL_InputPeerNotifySettings
//

func (m *InputPeerNotifySettings) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inputPeerNotifySettings:
		t := m.To_InputPeerNotifySettings()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InputPeerNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *InputPeerNotifySettings) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x9c3d198e:
		m2 := MakeTLInputPeerNotifySettings(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InputPeerNotifySettings) DebugString() string {
	switch m.PredicateName {
	case Predicate_inputPeerNotifySettings:
		t := m.To_InputPeerNotifySettings()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InputPeerNotifySettings
func (m *InputPeerNotifySettings) To_InputPeerNotifySettings() *TLInputPeerNotifySettings {
	m.PredicateName = Predicate_inputPeerNotifySettings
	return &TLInputPeerNotifySettings{
		Data2: m,
	}
}

// MakeTLInputPeerNotifySettings
func MakeTLInputPeerNotifySettings(data2 *InputPeerNotifySettings) *TLInputPeerNotifySettings {
	if data2 == nil {
		return &TLInputPeerNotifySettings{Data2: &InputPeerNotifySettings{
			PredicateName: Predicate_inputPeerNotifySettings,
		}}
	} else {
		data2.PredicateName = Predicate_inputPeerNotifySettings
		return &TLInputPeerNotifySettings{Data2: data2}
	}
}

func (m *TLInputPeerNotifySettings) To_InputPeerNotifySettings() *InputPeerNotifySettings {
	m.Data2.PredicateName = Predicate_inputPeerNotifySettings
	return m.Data2
}

//// flags
func (m *TLInputPeerNotifySettings) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews = v }
func (m *TLInputPeerNotifySettings) GetShowPreviews() *Bool  { return m.Data2.ShowPreviews }

func (m *TLInputPeerNotifySettings) SetSilent(v *Bool) { m.Data2.Silent = v }
func (m *TLInputPeerNotifySettings) GetSilent() *Bool  { return m.Data2.Silent }

func (m *TLInputPeerNotifySettings) SetMuteUntil(v *types.Int32Value) { m.Data2.MuteUntil = v }
func (m *TLInputPeerNotifySettings) GetMuteUntil() *types.Int32Value  { return m.Data2.MuteUntil }

func (m *TLInputPeerNotifySettings) SetSound(v *types.StringValue) { m.Data2.Sound = v }
func (m *TLInputPeerNotifySettings) GetSound() *types.StringValue  { return m.Data2.Sound }

func (m *TLInputPeerNotifySettings) GetPredicateName() string {
	return Predicate_inputPeerNotifySettings
}

func (m *TLInputPeerNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9c3d198e: func() []byte {
			x.UInt(0x9c3d198e)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetShowPreviews() != nil {
					flags |= 1 << 0
				}
				if m.GetSilent() != nil {
					flags |= 1 << 1
				}
				if m.GetMuteUntil() != nil {
					flags |= 1 << 2
				}
				if m.GetSound() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetShowPreviews() != nil {
				x.Bytes(m.GetShowPreviews().Encode(layer))
			}

			if m.GetSilent() != nil {
				x.Bytes(m.GetSilent().Encode(layer))
			}

			if m.GetMuteUntil() != nil {
				x.Int(m.GetMuteUntil().Value)
			}

			if m.GetSound() != nil {
				x.String(m.GetSound().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inputPeerNotifySettings, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inputPeerNotifySettings, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInputPeerNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInputPeerNotifySettings) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9c3d198e: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m1 := &Bool{}
				m1.Decode(dBuf)
				m.SetShowPreviews(m1)
			}
			if (flags & (1 << 1)) != 0 {
				m2 := &Bool{}
				m2.Decode(dBuf)
				m.SetSilent(m2)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetMuteUntil(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetSound(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInputPeerNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// WebPageAttribute <--
//  + TL_WebPageAttributeTheme
//

func (m *WebPageAttribute) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_webPageAttributeTheme:
		t := m.To_WebPageAttributeTheme()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *WebPageAttribute) CalcByteSize(layer int32) int {
	return 0
}

func (m *WebPageAttribute) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x54b56617:
		m2 := MakeTLWebPageAttributeTheme(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *WebPageAttribute) DebugString() string {
	switch m.PredicateName {
	case Predicate_webPageAttributeTheme:
		t := m.To_WebPageAttributeTheme()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_WebPageAttributeTheme
func (m *WebPageAttribute) To_WebPageAttributeTheme() *TLWebPageAttributeTheme {
	m.PredicateName = Predicate_webPageAttributeTheme
	return &TLWebPageAttributeTheme{
		Data2: m,
	}
}

// MakeTLWebPageAttributeTheme
func MakeTLWebPageAttributeTheme(data2 *WebPageAttribute) *TLWebPageAttributeTheme {
	if data2 == nil {
		return &TLWebPageAttributeTheme{Data2: &WebPageAttribute{
			PredicateName: Predicate_webPageAttributeTheme,
		}}
	} else {
		data2.PredicateName = Predicate_webPageAttributeTheme
		return &TLWebPageAttributeTheme{Data2: data2}
	}
}

func (m *TLWebPageAttributeTheme) To_WebPageAttribute() *WebPageAttribute {
	m.Data2.PredicateName = Predicate_webPageAttributeTheme
	return m.Data2
}

//// flags
func (m *TLWebPageAttributeTheme) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLWebPageAttributeTheme) GetDocuments() []*Document  { return m.Data2.Documents }

func (m *TLWebPageAttributeTheme) SetSettings(v *ThemeSettings) { m.Data2.Settings = v }
func (m *TLWebPageAttributeTheme) GetSettings() *ThemeSettings  { return m.Data2.Settings }

func (m *TLWebPageAttributeTheme) GetPredicateName() string {
	return Predicate_webPageAttributeTheme
}

func (m *TLWebPageAttributeTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x54b56617: func() []byte {
			x.UInt(0x54b56617)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDocuments() != nil {
					flags |= 1 << 0
				}
				if m.GetSettings() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			if m.GetDocuments() != nil {
				x.Int(int32(CRC32_vector))
				x.Int(int32(len(m.GetDocuments())))
				for _, v := range m.GetDocuments() {
					x.Bytes((*v).Encode(layer))
				}
			}
			if m.GetSettings() != nil {
				x.Bytes(m.GetSettings().Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_webPageAttributeTheme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_webPageAttributeTheme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLWebPageAttributeTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLWebPageAttributeTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x54b56617: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				c1 := dBuf.Int()
				if c1 != int32(CRC32_vector) {
					// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
					return dBuf.GetError()
				}
				l1 := dBuf.Int()
				v1 := make([]*Document, l1)
				for i := int32(0); i < l1; i++ {
					v1[i] = &Document{}
					v1[i].Decode(dBuf)
				}
				m.SetDocuments(v1)
			}
			if (flags & (1 << 1)) != 0 {
				m2 := &ThemeSettings{}
				m2.Decode(dBuf)
				m.SetSettings(m2)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLWebPageAttributeTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Upload_File <--
//  + TL_UploadFile
//  + TL_UploadFileCdnRedirect
//

func (m *Upload_File) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_upload_file:
		t := m.To_UploadFile()
		xBuf = t.Encode(layer)
	case Predicate_upload_fileCdnRedirect:
		t := m.To_UploadFileCdnRedirect()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Upload_File) CalcByteSize(layer int32) int {
	return 0
}

func (m *Upload_File) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x96a18d5:
		m2 := MakeTLUploadFile(m)
		m2.Decode(dBuf)
	case 0xf18cda44:
		m2 := MakeTLUploadFileCdnRedirect(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Upload_File) DebugString() string {
	switch m.PredicateName {
	case Predicate_upload_file:
		t := m.To_UploadFile()
		return t.DebugString()
	case Predicate_upload_fileCdnRedirect:
		t := m.To_UploadFileCdnRedirect()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_UploadFile
func (m *Upload_File) To_UploadFile() *TLUploadFile {
	m.PredicateName = Predicate_upload_file
	return &TLUploadFile{
		Data2: m,
	}
}

// To_UploadFileCdnRedirect
func (m *Upload_File) To_UploadFileCdnRedirect() *TLUploadFileCdnRedirect {
	m.PredicateName = Predicate_upload_fileCdnRedirect
	return &TLUploadFileCdnRedirect{
		Data2: m,
	}
}

// MakeTLUploadFile
func MakeTLUploadFile(data2 *Upload_File) *TLUploadFile {
	if data2 == nil {
		return &TLUploadFile{Data2: &Upload_File{
			PredicateName: Predicate_upload_file,
		}}
	} else {
		data2.PredicateName = Predicate_upload_file
		return &TLUploadFile{Data2: data2}
	}
}

func (m *TLUploadFile) To_Upload_File() *Upload_File {
	m.Data2.PredicateName = Predicate_upload_file
	return m.Data2
}

func (m *TLUploadFile) SetType(v *Storage_FileType) { m.Data2.Type = v }
func (m *TLUploadFile) GetType() *Storage_FileType  { return m.Data2.Type }

func (m *TLUploadFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadFile) GetMtime() int32  { return m.Data2.Mtime }

func (m *TLUploadFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadFile) GetBytes() []byte  { return m.Data2.Bytes }

func (m *TLUploadFile) GetPredicateName() string {
	return Predicate_upload_file
}

func (m *TLUploadFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x96a18d5: func() []byte {
			x.UInt(0x96a18d5)

			x.Bytes(m.GetType().Encode(layer))
			x.Int(m.GetMtime())
			x.StringBytes(m.GetBytes())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_upload_file, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_upload_file, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUploadFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadFile) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x96a18d5: func() error {

			m0 := &Storage_FileType{}
			m0.Decode(dBuf)
			m.SetType(m0)

			m.SetMtime(dBuf.Int())
			m.SetBytes(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUploadFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLUploadFileCdnRedirect
func MakeTLUploadFileCdnRedirect(data2 *Upload_File) *TLUploadFileCdnRedirect {
	if data2 == nil {
		return &TLUploadFileCdnRedirect{Data2: &Upload_File{
			PredicateName: Predicate_upload_fileCdnRedirect,
		}}
	} else {
		data2.PredicateName = Predicate_upload_fileCdnRedirect
		return &TLUploadFileCdnRedirect{Data2: data2}
	}
}

func (m *TLUploadFileCdnRedirect) To_Upload_File() *Upload_File {
	m.Data2.PredicateName = Predicate_upload_fileCdnRedirect
	return m.Data2
}

func (m *TLUploadFileCdnRedirect) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUploadFileCdnRedirect) GetDcId() int32  { return m.Data2.DcId }

func (m *TLUploadFileCdnRedirect) SetFileToken(v []byte) { m.Data2.FileToken = v }
func (m *TLUploadFileCdnRedirect) GetFileToken() []byte  { return m.Data2.FileToken }

func (m *TLUploadFileCdnRedirect) SetEncryptionKey(v []byte) { m.Data2.EncryptionKey = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionKey() []byte  { return m.Data2.EncryptionKey }

func (m *TLUploadFileCdnRedirect) SetEncryptionIv(v []byte) { m.Data2.EncryptionIv = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionIv() []byte  { return m.Data2.EncryptionIv }

func (m *TLUploadFileCdnRedirect) SetFileHashes(v []*FileHash) { m.Data2.FileHashes = v }
func (m *TLUploadFileCdnRedirect) GetFileHashes() []*FileHash  { return m.Data2.FileHashes }

func (m *TLUploadFileCdnRedirect) GetPredicateName() string {
	return Predicate_upload_fileCdnRedirect
}

func (m *TLUploadFileCdnRedirect) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf18cda44: func() []byte {
			x.UInt(0xf18cda44)

			x.Int(m.GetDcId())
			x.StringBytes(m.GetFileToken())
			x.StringBytes(m.GetEncryptionKey())
			x.StringBytes(m.GetEncryptionIv())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetFileHashes())))
			for _, v := range m.GetFileHashes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_upload_fileCdnRedirect, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_upload_fileCdnRedirect, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLUploadFileCdnRedirect) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadFileCdnRedirect) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf18cda44: func() error {
			m.SetDcId(dBuf.Int())
			m.SetFileToken(dBuf.StringBytes())
			m.SetEncryptionKey(dBuf.StringBytes())
			m.SetEncryptionIv(dBuf.StringBytes())
			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*FileHash, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &FileHash{}
				v7[i].Decode(dBuf)
			}
			m.SetFileHashes(v7)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLUploadFileCdnRedirect) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Phone_GroupCallStreamRtmpUrl <--
//  + TL_PhoneGroupCallStreamRtmpUrl
//

func (m *Phone_GroupCallStreamRtmpUrl) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_phone_groupCallStreamRtmpUrl:
		t := m.To_PhoneGroupCallStreamRtmpUrl()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Phone_GroupCallStreamRtmpUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *Phone_GroupCallStreamRtmpUrl) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x2dbf3432:
		m2 := MakeTLPhoneGroupCallStreamRtmpUrl(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Phone_GroupCallStreamRtmpUrl) DebugString() string {
	switch m.PredicateName {
	case Predicate_phone_groupCallStreamRtmpUrl:
		t := m.To_PhoneGroupCallStreamRtmpUrl()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_PhoneGroupCallStreamRtmpUrl
func (m *Phone_GroupCallStreamRtmpUrl) To_PhoneGroupCallStreamRtmpUrl() *TLPhoneGroupCallStreamRtmpUrl {
	m.PredicateName = Predicate_phone_groupCallStreamRtmpUrl
	return &TLPhoneGroupCallStreamRtmpUrl{
		Data2: m,
	}
}

// MakeTLPhoneGroupCallStreamRtmpUrl
func MakeTLPhoneGroupCallStreamRtmpUrl(data2 *Phone_GroupCallStreamRtmpUrl) *TLPhoneGroupCallStreamRtmpUrl {
	if data2 == nil {
		return &TLPhoneGroupCallStreamRtmpUrl{Data2: &Phone_GroupCallStreamRtmpUrl{
			PredicateName: Predicate_phone_groupCallStreamRtmpUrl,
		}}
	} else {
		data2.PredicateName = Predicate_phone_groupCallStreamRtmpUrl
		return &TLPhoneGroupCallStreamRtmpUrl{Data2: data2}
	}
}

func (m *TLPhoneGroupCallStreamRtmpUrl) To_Phone_GroupCallStreamRtmpUrl() *Phone_GroupCallStreamRtmpUrl {
	m.Data2.PredicateName = Predicate_phone_groupCallStreamRtmpUrl
	return m.Data2
}

func (m *TLPhoneGroupCallStreamRtmpUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPhoneGroupCallStreamRtmpUrl) GetUrl() string  { return m.Data2.Url }

func (m *TLPhoneGroupCallStreamRtmpUrl) SetKey(v string) { m.Data2.Key = v }
func (m *TLPhoneGroupCallStreamRtmpUrl) GetKey() string  { return m.Data2.Key }

func (m *TLPhoneGroupCallStreamRtmpUrl) GetPredicateName() string {
	return Predicate_phone_groupCallStreamRtmpUrl
}

func (m *TLPhoneGroupCallStreamRtmpUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2dbf3432: func() []byte {
			x.UInt(0x2dbf3432)

			x.String(m.GetUrl())
			x.String(m.GetKey())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_phone_groupCallStreamRtmpUrl, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_phone_groupCallStreamRtmpUrl, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLPhoneGroupCallStreamRtmpUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGroupCallStreamRtmpUrl) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2dbf3432: func() error {
			m.SetUrl(dBuf.String())
			m.SetKey(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLPhoneGroupCallStreamRtmpUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatPhoto <--
//  + TL_ChatPhotoEmpty
//  + TL_ChatPhoto
//

func (m *ChatPhoto) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatPhotoEmpty:
		t := m.To_ChatPhotoEmpty()
		xBuf = t.Encode(layer)
	case Predicate_chatPhoto:
		t := m.To_ChatPhoto()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatPhoto) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x37c1011c:
		m2 := MakeTLChatPhotoEmpty(m)
		m2.Decode(dBuf)
	case 0x1c6e1c11:
		m2 := MakeTLChatPhoto(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatPhoto) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatPhotoEmpty:
		t := m.To_ChatPhotoEmpty()
		return t.DebugString()
	case Predicate_chatPhoto:
		t := m.To_ChatPhoto()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatPhotoEmpty
func (m *ChatPhoto) To_ChatPhotoEmpty() *TLChatPhotoEmpty {
	m.PredicateName = Predicate_chatPhotoEmpty
	return &TLChatPhotoEmpty{
		Data2: m,
	}
}

// To_ChatPhoto
func (m *ChatPhoto) To_ChatPhoto() *TLChatPhoto {
	m.PredicateName = Predicate_chatPhoto
	return &TLChatPhoto{
		Data2: m,
	}
}

// MakeTLChatPhotoEmpty
func MakeTLChatPhotoEmpty(data2 *ChatPhoto) *TLChatPhotoEmpty {
	if data2 == nil {
		return &TLChatPhotoEmpty{Data2: &ChatPhoto{
			PredicateName: Predicate_chatPhotoEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_chatPhotoEmpty
		return &TLChatPhotoEmpty{Data2: data2}
	}
}

func (m *TLChatPhotoEmpty) To_ChatPhoto() *ChatPhoto {
	m.Data2.PredicateName = Predicate_chatPhotoEmpty
	return m.Data2
}

func (m *TLChatPhotoEmpty) GetPredicateName() string {
	return Predicate_chatPhotoEmpty
}

func (m *TLChatPhotoEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x37c1011c: func() []byte {
			x.UInt(0x37c1011c)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatPhotoEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatPhotoEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatPhotoEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatPhotoEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x37c1011c: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatPhotoEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLChatPhoto
func MakeTLChatPhoto(data2 *ChatPhoto) *TLChatPhoto {
	if data2 == nil {
		return &TLChatPhoto{Data2: &ChatPhoto{
			PredicateName: Predicate_chatPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_chatPhoto
		return &TLChatPhoto{Data2: data2}
	}
}

func (m *TLChatPhoto) To_ChatPhoto() *ChatPhoto {
	m.Data2.PredicateName = Predicate_chatPhoto
	return m.Data2
}

//// flags
func (m *TLChatPhoto) SetHasVideo(v bool) { m.Data2.HasVideo = v }
func (m *TLChatPhoto) GetHasVideo() bool  { return m.Data2.HasVideo }

func (m *TLChatPhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLChatPhoto) GetPhotoId() int64  { return m.Data2.PhotoId }

func (m *TLChatPhoto) SetStrippedThumb(v []byte) { m.Data2.StrippedThumb = v }
func (m *TLChatPhoto) GetStrippedThumb() []byte  { return m.Data2.StrippedThumb }

func (m *TLChatPhoto) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLChatPhoto) GetDcId() int32  { return m.Data2.DcId }

func (m *TLChatPhoto) GetPredicateName() string {
	return Predicate_chatPhoto
}

func (m *TLChatPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1c6e1c11: func() []byte {
			x.UInt(0x1c6e1c11)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetHasVideo() == true {
					flags |= 1 << 0
				}

				if m.GetStrippedThumb() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetPhotoId())
			if m.GetStrippedThumb() != nil {
				x.StringBytes(m.GetStrippedThumb())
			}

			x.Int(m.GetDcId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1c6e1c11: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetHasVideo(true)
			}
			m.SetPhotoId(dBuf.Long())
			if (flags & (1 << 1)) != 0 {
				m.SetStrippedThumb(dBuf.StringBytes())
			}

			m.SetDcId(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ExportedChatInvite <--
//  + TL_ChatInviteExported
//

func (m *ExportedChatInvite) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatInviteExported:
		t := m.To_ChatInviteExported()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *ExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xab4a819:
		m2 := MakeTLChatInviteExported(m)
		m2.Decode(dBuf)
	case 0xb18105e8:
		m2 := MakeTLChatInviteExported(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ExportedChatInvite) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatInviteExported:
		t := m.To_ChatInviteExported()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatInviteExported
func (m *ExportedChatInvite) To_ChatInviteExported() *TLChatInviteExported {
	m.PredicateName = Predicate_chatInviteExported
	return &TLChatInviteExported{
		Data2: m,
	}
}

// MakeTLChatInviteExported
func MakeTLChatInviteExported(data2 *ExportedChatInvite) *TLChatInviteExported {
	if data2 == nil {
		return &TLChatInviteExported{Data2: &ExportedChatInvite{
			PredicateName: Predicate_chatInviteExported,
		}}
	} else {
		data2.PredicateName = Predicate_chatInviteExported
		return &TLChatInviteExported{Data2: data2}
	}
}

func (m *TLChatInviteExported) To_ExportedChatInvite() *ExportedChatInvite {
	m.Data2.PredicateName = Predicate_chatInviteExported
	return m.Data2
}

//// flags
func (m *TLChatInviteExported) SetRevoked(v bool) { m.Data2.Revoked = v }
func (m *TLChatInviteExported) GetRevoked() bool  { return m.Data2.Revoked }

func (m *TLChatInviteExported) SetPermanent(v bool) { m.Data2.Permanent = v }
func (m *TLChatInviteExported) GetPermanent() bool  { return m.Data2.Permanent }

func (m *TLChatInviteExported) SetRequestNeeded(v bool) { m.Data2.RequestNeeded = v }
func (m *TLChatInviteExported) GetRequestNeeded() bool  { return m.Data2.RequestNeeded }

func (m *TLChatInviteExported) SetLink(v string) { m.Data2.Link = v }
func (m *TLChatInviteExported) GetLink() string  { return m.Data2.Link }

func (m *TLChatInviteExported) SetAdminId(v int64) { m.Data2.AdminId = v }
func (m *TLChatInviteExported) GetAdminId() int64  { return m.Data2.AdminId }

func (m *TLChatInviteExported) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatInviteExported) GetDate() int32  { return m.Data2.Date }

func (m *TLChatInviteExported) SetStartDate(v *types.Int32Value) { m.Data2.StartDate = v }
func (m *TLChatInviteExported) GetStartDate() *types.Int32Value  { return m.Data2.StartDate }

func (m *TLChatInviteExported) SetExpireDate(v *types.Int32Value) { m.Data2.ExpireDate = v }
func (m *TLChatInviteExported) GetExpireDate() *types.Int32Value  { return m.Data2.ExpireDate }

func (m *TLChatInviteExported) SetUsageLimit(v *types.Int32Value) { m.Data2.UsageLimit = v }
func (m *TLChatInviteExported) GetUsageLimit() *types.Int32Value  { return m.Data2.UsageLimit }

func (m *TLChatInviteExported) SetUsage(v *types.Int32Value) { m.Data2.Usage = v }
func (m *TLChatInviteExported) GetUsage() *types.Int32Value  { return m.Data2.Usage }

func (m *TLChatInviteExported) SetRequested(v *types.Int32Value) { m.Data2.Requested = v }
func (m *TLChatInviteExported) GetRequested() *types.Int32Value  { return m.Data2.Requested }

func (m *TLChatInviteExported) SetTitle(v *types.StringValue) { m.Data2.Title = v }
func (m *TLChatInviteExported) GetTitle() *types.StringValue  { return m.Data2.Title }

func (m *TLChatInviteExported) GetPredicateName() string {
	return Predicate_chatInviteExported
}

func (m *TLChatInviteExported) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xab4a819: func() []byte {
			x.UInt(0xab4a819)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRevoked() == true {
					flags |= 1 << 0
				}
				if m.GetPermanent() == true {
					flags |= 1 << 5
				}
				if m.GetRequestNeeded() == true {
					flags |= 1 << 6
				}

				if m.GetStartDate() != nil {
					flags |= 1 << 4
				}
				if m.GetExpireDate() != nil {
					flags |= 1 << 1
				}
				if m.GetUsageLimit() != nil {
					flags |= 1 << 2
				}
				if m.GetUsage() != nil {
					flags |= 1 << 3
				}
				if m.GetRequested() != nil {
					flags |= 1 << 7
				}
				if m.GetTitle() != nil {
					flags |= 1 << 8
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetLink())
			x.Long(m.GetAdminId())
			x.Int(m.GetDate())
			if m.GetStartDate() != nil {
				x.Int(m.GetStartDate().Value)
			}

			if m.GetExpireDate() != nil {
				x.Int(m.GetExpireDate().Value)
			}

			if m.GetUsageLimit() != nil {
				x.Int(m.GetUsageLimit().Value)
			}

			if m.GetUsage() != nil {
				x.Int(m.GetUsage().Value)
			}

			if m.GetRequested() != nil {
				x.Int(m.GetRequested().Value)
			}

			if m.GetTitle() != nil {
				x.String(m.GetTitle().Value)
			}

			return x.GetBuf()
		},
		0xb18105e8: func() []byte {
			x.UInt(0xb18105e8)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetRevoked() == true {
					flags |= 1 << 0
				}
				if m.GetPermanent() == true {
					flags |= 1 << 5
				}

				if m.GetStartDate() != nil {
					flags |= 1 << 4
				}
				if m.GetExpireDate() != nil {
					flags |= 1 << 1
				}
				if m.GetUsageLimit() != nil {
					flags |= 1 << 2
				}
				if m.GetUsage() != nil {
					flags |= 1 << 3
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetLink())
			x.Long(m.GetAdminId())
			x.Int(m.GetDate())
			if m.GetStartDate() != nil {
				x.Int(m.GetStartDate().Value)
			}

			if m.GetExpireDate() != nil {
				x.Int(m.GetExpireDate().Value)
			}

			if m.GetUsageLimit() != nil {
				x.Int(m.GetUsageLimit().Value)
			}

			if m.GetUsage() != nil {
				x.Int(m.GetUsage().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatInviteExported, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatInviteExported, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatInviteExported) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatInviteExported) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xab4a819: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRevoked(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetPermanent(true)
			}
			if (flags & (1 << 6)) != 0 {
				m.SetRequestNeeded(true)
			}
			m.SetLink(dBuf.String())
			m.SetAdminId(dBuf.Long())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 4)) != 0 {
				m.SetStartDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetExpireDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetUsageLimit(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetUsage(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 7)) != 0 {
				m.SetRequested(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 8)) != 0 {
				m.SetTitle(&types.StringValue{Value: dBuf.String()})
			}

			return dBuf.GetError()
		},
		0xb18105e8: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetRevoked(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetPermanent(true)
			}
			m.SetLink(dBuf.String())
			m.SetAdminId(dBuf.Long())
			m.SetDate(dBuf.Int())
			if (flags & (1 << 4)) != 0 {
				m.SetStartDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 1)) != 0 {
				m.SetExpireDate(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 2)) != 0 {
				m.SetUsageLimit(&types.Int32Value{Value: dBuf.Int()})
			}

			if (flags & (1 << 3)) != 0 {
				m.SetUsage(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatInviteExported) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// InlineBotSwitchPM <--
//  + TL_InlineBotSwitchPM
//

func (m *InlineBotSwitchPM) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_inlineBotSwitchPM:
		t := m.To_InlineBotSwitchPM()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *InlineBotSwitchPM) CalcByteSize(layer int32) int {
	return 0
}

func (m *InlineBotSwitchPM) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x3c20629f:
		m2 := MakeTLInlineBotSwitchPM(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *InlineBotSwitchPM) DebugString() string {
	switch m.PredicateName {
	case Predicate_inlineBotSwitchPM:
		t := m.To_InlineBotSwitchPM()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_InlineBotSwitchPM
func (m *InlineBotSwitchPM) To_InlineBotSwitchPM() *TLInlineBotSwitchPM {
	m.PredicateName = Predicate_inlineBotSwitchPM
	return &TLInlineBotSwitchPM{
		Data2: m,
	}
}

// MakeTLInlineBotSwitchPM
func MakeTLInlineBotSwitchPM(data2 *InlineBotSwitchPM) *TLInlineBotSwitchPM {
	if data2 == nil {
		return &TLInlineBotSwitchPM{Data2: &InlineBotSwitchPM{
			PredicateName: Predicate_inlineBotSwitchPM,
		}}
	} else {
		data2.PredicateName = Predicate_inlineBotSwitchPM
		return &TLInlineBotSwitchPM{Data2: data2}
	}
}

func (m *TLInlineBotSwitchPM) To_InlineBotSwitchPM() *InlineBotSwitchPM {
	m.Data2.PredicateName = Predicate_inlineBotSwitchPM
	return m.Data2
}

func (m *TLInlineBotSwitchPM) SetText(v string) { m.Data2.Text = v }
func (m *TLInlineBotSwitchPM) GetText() string  { return m.Data2.Text }

func (m *TLInlineBotSwitchPM) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInlineBotSwitchPM) GetStartParam() string  { return m.Data2.StartParam }

func (m *TLInlineBotSwitchPM) GetPredicateName() string {
	return Predicate_inlineBotSwitchPM
}

func (m *TLInlineBotSwitchPM) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x3c20629f: func() []byte {
			x.UInt(0x3c20629f)

			x.String(m.GetText())
			x.String(m.GetStartParam())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_inlineBotSwitchPM, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_inlineBotSwitchPM, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLInlineBotSwitchPM) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInlineBotSwitchPM) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x3c20629f: func() error {
			m.SetText(dBuf.String())
			m.SetStartParam(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLInlineBotSwitchPM) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfServiceUpdate <--
//  + TL_HelpTermsOfServiceUpdateEmpty
//  + TL_HelpTermsOfServiceUpdate
//

func (m *Help_TermsOfServiceUpdate) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_help_termsOfServiceUpdateEmpty:
		t := m.To_HelpTermsOfServiceUpdateEmpty()
		xBuf = t.Encode(layer)
	case Predicate_help_termsOfServiceUpdate:
		t := m.To_HelpTermsOfServiceUpdate()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Help_TermsOfServiceUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *Help_TermsOfServiceUpdate) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xe3309f7f:
		m2 := MakeTLHelpTermsOfServiceUpdateEmpty(m)
		m2.Decode(dBuf)
	case 0x28ecf961:
		m2 := MakeTLHelpTermsOfServiceUpdate(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Help_TermsOfServiceUpdate) DebugString() string {
	switch m.PredicateName {
	case Predicate_help_termsOfServiceUpdateEmpty:
		t := m.To_HelpTermsOfServiceUpdateEmpty()
		return t.DebugString()
	case Predicate_help_termsOfServiceUpdate:
		t := m.To_HelpTermsOfServiceUpdate()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_HelpTermsOfServiceUpdateEmpty
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdateEmpty() *TLHelpTermsOfServiceUpdateEmpty {
	m.PredicateName = Predicate_help_termsOfServiceUpdateEmpty
	return &TLHelpTermsOfServiceUpdateEmpty{
		Data2: m,
	}
}

// To_HelpTermsOfServiceUpdate
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdate() *TLHelpTermsOfServiceUpdate {
	m.PredicateName = Predicate_help_termsOfServiceUpdate
	return &TLHelpTermsOfServiceUpdate{
		Data2: m,
	}
}

// MakeTLHelpTermsOfServiceUpdateEmpty
func MakeTLHelpTermsOfServiceUpdateEmpty(data2 *Help_TermsOfServiceUpdate) *TLHelpTermsOfServiceUpdateEmpty {
	if data2 == nil {
		return &TLHelpTermsOfServiceUpdateEmpty{Data2: &Help_TermsOfServiceUpdate{
			PredicateName: Predicate_help_termsOfServiceUpdateEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_help_termsOfServiceUpdateEmpty
		return &TLHelpTermsOfServiceUpdateEmpty{Data2: data2}
	}
}

func (m *TLHelpTermsOfServiceUpdateEmpty) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
	m.Data2.PredicateName = Predicate_help_termsOfServiceUpdateEmpty
	return m.Data2
}

func (m *TLHelpTermsOfServiceUpdateEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdateEmpty) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpTermsOfServiceUpdateEmpty) GetPredicateName() string {
	return Predicate_help_termsOfServiceUpdateEmpty
}

func (m *TLHelpTermsOfServiceUpdateEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe3309f7f: func() []byte {
			x.UInt(0xe3309f7f)

			x.Int(m.GetExpires())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_termsOfServiceUpdateEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_termsOfServiceUpdateEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpTermsOfServiceUpdateEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpTermsOfServiceUpdateEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe3309f7f: func() error {
			m.SetExpires(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpTermsOfServiceUpdateEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLHelpTermsOfServiceUpdate
func MakeTLHelpTermsOfServiceUpdate(data2 *Help_TermsOfServiceUpdate) *TLHelpTermsOfServiceUpdate {
	if data2 == nil {
		return &TLHelpTermsOfServiceUpdate{Data2: &Help_TermsOfServiceUpdate{
			PredicateName: Predicate_help_termsOfServiceUpdate,
		}}
	} else {
		data2.PredicateName = Predicate_help_termsOfServiceUpdate
		return &TLHelpTermsOfServiceUpdate{Data2: data2}
	}
}

func (m *TLHelpTermsOfServiceUpdate) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
	m.Data2.PredicateName = Predicate_help_termsOfServiceUpdate
	return m.Data2
}

func (m *TLHelpTermsOfServiceUpdate) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdate) GetExpires() int32  { return m.Data2.Expires }

func (m *TLHelpTermsOfServiceUpdate) SetTermsOfService(v *Help_TermsOfService) {
	m.Data2.TermsOfService = v
}
func (m *TLHelpTermsOfServiceUpdate) GetTermsOfService() *Help_TermsOfService {
	return m.Data2.TermsOfService
}

func (m *TLHelpTermsOfServiceUpdate) GetPredicateName() string {
	return Predicate_help_termsOfServiceUpdate
}

func (m *TLHelpTermsOfServiceUpdate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x28ecf961: func() []byte {
			x.UInt(0x28ecf961)

			x.Int(m.GetExpires())
			x.Bytes(m.GetTermsOfService().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_help_termsOfServiceUpdate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_help_termsOfServiceUpdate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLHelpTermsOfServiceUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpTermsOfServiceUpdate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x28ecf961: func() error {
			m.SetExpires(dBuf.Int())

			m1 := &Help_TermsOfService{}
			m1.Decode(dBuf)
			m.SetTermsOfService(m1)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLHelpTermsOfServiceUpdate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// SecureData <--
//  + TL_SecureData
//

func (m *SecureData) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_secureData:
		t := m.To_SecureData()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *SecureData) CalcByteSize(layer int32) int {
	return 0
}

func (m *SecureData) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x8aeabec3:
		m2 := MakeTLSecureData(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *SecureData) DebugString() string {
	switch m.PredicateName {
	case Predicate_secureData:
		t := m.To_SecureData()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_SecureData
func (m *SecureData) To_SecureData() *TLSecureData {
	m.PredicateName = Predicate_secureData
	return &TLSecureData{
		Data2: m,
	}
}

// MakeTLSecureData
func MakeTLSecureData(data2 *SecureData) *TLSecureData {
	if data2 == nil {
		return &TLSecureData{Data2: &SecureData{
			PredicateName: Predicate_secureData,
		}}
	} else {
		data2.PredicateName = Predicate_secureData
		return &TLSecureData{Data2: data2}
	}
}

func (m *TLSecureData) To_SecureData() *SecureData {
	m.Data2.PredicateName = Predicate_secureData
	return m.Data2
}

func (m *TLSecureData) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureData) GetData() []byte  { return m.Data2.Data }

func (m *TLSecureData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureData) GetDataHash() []byte  { return m.Data2.DataHash }

func (m *TLSecureData) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureData) GetSecret() []byte  { return m.Data2.Secret }

func (m *TLSecureData) GetPredicateName() string {
	return Predicate_secureData
}

func (m *TLSecureData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8aeabec3: func() []byte {
			x.UInt(0x8aeabec3)

			x.StringBytes(m.GetData())
			x.StringBytes(m.GetDataHash())
			x.StringBytes(m.GetSecret())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_secureData, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_secureData, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLSecureData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSecureData) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8aeabec3: func() error {
			m.SetData(dBuf.StringBytes())
			m.SetDataHash(dBuf.StringBytes())
			m.SetSecret(dBuf.StringBytes())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLSecureData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsPercentValue <--
//  + TL_StatsPercentValue
//

func (m *StatsPercentValue) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsPercentValue:
		t := m.To_StatsPercentValue()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsPercentValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsPercentValue) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xcbce2fe0:
		m2 := MakeTLStatsPercentValue(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsPercentValue) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsPercentValue:
		t := m.To_StatsPercentValue()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsPercentValue
func (m *StatsPercentValue) To_StatsPercentValue() *TLStatsPercentValue {
	m.PredicateName = Predicate_statsPercentValue
	return &TLStatsPercentValue{
		Data2: m,
	}
}

// MakeTLStatsPercentValue
func MakeTLStatsPercentValue(data2 *StatsPercentValue) *TLStatsPercentValue {
	if data2 == nil {
		return &TLStatsPercentValue{Data2: &StatsPercentValue{
			PredicateName: Predicate_statsPercentValue,
		}}
	} else {
		data2.PredicateName = Predicate_statsPercentValue
		return &TLStatsPercentValue{Data2: data2}
	}
}

func (m *TLStatsPercentValue) To_StatsPercentValue() *StatsPercentValue {
	m.Data2.PredicateName = Predicate_statsPercentValue
	return m.Data2
}

func (m *TLStatsPercentValue) SetPart(v float64) { m.Data2.Part = v }
func (m *TLStatsPercentValue) GetPart() float64  { return m.Data2.Part }

func (m *TLStatsPercentValue) SetTotal(v float64) { m.Data2.Total = v }
func (m *TLStatsPercentValue) GetTotal() float64  { return m.Data2.Total }

func (m *TLStatsPercentValue) GetPredicateName() string {
	return Predicate_statsPercentValue
}

func (m *TLStatsPercentValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xcbce2fe0: func() []byte {
			x.UInt(0xcbce2fe0)

			x.Double(m.GetPart())
			x.Double(m.GetTotal())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsPercentValue, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsPercentValue, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsPercentValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsPercentValue) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xcbce2fe0: func() error {
			m.SetPart(dBuf.Double())
			m.SetTotal(dBuf.Double())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsPercentValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// MessageAction <--
//  + TL_MessageActionEmpty
//  + TL_MessageActionChatCreate
//  + TL_MessageActionChatEditTitle
//  + TL_MessageActionChatEditPhoto
//  + TL_MessageActionChatDeletePhoto
//  + TL_MessageActionChatAddUser
//  + TL_MessageActionChatDeleteUser
//  + TL_MessageActionChatJoinedByLink
//  + TL_MessageActionChannelCreate
//  + TL_MessageActionChatMigrateTo
//  + TL_MessageActionChannelMigrateFrom
//  + TL_MessageActionPinMessage
//  + TL_MessageActionHistoryClear
//  + TL_MessageActionGameScore
//  + TL_MessageActionPaymentSentMe
//  + TL_MessageActionPaymentSent
//  + TL_MessageActionPhoneCall
//  + TL_MessageActionScreenshotTaken
//  + TL_MessageActionCustomAction
//  + TL_MessageActionBotAllowed
//  + TL_MessageActionSecureValuesSentMe
//  + TL_MessageActionSecureValuesSent
//  + TL_MessageActionContactSignUp
//  + TL_MessageActionGeoProximityReached
//  + TL_MessageActionGroupCall
//  + TL_MessageActionInviteToGroupCall
//  + TL_MessageActionSetMessagesTTL
//  + TL_MessageActionGroupCallScheduled
//  + TL_MessageActionSetChatTheme
//  + TL_MessageActionChatJoinedByRequest
//  + TL_MessageActionBizDataRaw
//

func (m *MessageAction) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_messageActionEmpty:
		t := m.To_MessageActionEmpty()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatCreate:
		t := m.To_MessageActionChatCreate()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatEditTitle:
		t := m.To_MessageActionChatEditTitle()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatEditPhoto:
		t := m.To_MessageActionChatEditPhoto()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatDeletePhoto:
		t := m.To_MessageActionChatDeletePhoto()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatAddUser:
		t := m.To_MessageActionChatAddUser()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatDeleteUser:
		t := m.To_MessageActionChatDeleteUser()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatJoinedByLink:
		t := m.To_MessageActionChatJoinedByLink()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChannelCreate:
		t := m.To_MessageActionChannelCreate()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatMigrateTo:
		t := m.To_MessageActionChatMigrateTo()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChannelMigrateFrom:
		t := m.To_MessageActionChannelMigrateFrom()
		xBuf = t.Encode(layer)
	case Predicate_messageActionPinMessage:
		t := m.To_MessageActionPinMessage()
		xBuf = t.Encode(layer)
	case Predicate_messageActionHistoryClear:
		t := m.To_MessageActionHistoryClear()
		xBuf = t.Encode(layer)
	case Predicate_messageActionGameScore:
		t := m.To_MessageActionGameScore()
		xBuf = t.Encode(layer)
	case Predicate_messageActionPaymentSentMe:
		t := m.To_MessageActionPaymentSentMe()
		xBuf = t.Encode(layer)
	case Predicate_messageActionPaymentSent:
		t := m.To_MessageActionPaymentSent()
		xBuf = t.Encode(layer)
	case Predicate_messageActionPhoneCall:
		t := m.To_MessageActionPhoneCall()
		xBuf = t.Encode(layer)
	case Predicate_messageActionScreenshotTaken:
		t := m.To_MessageActionScreenshotTaken()
		xBuf = t.Encode(layer)
	case Predicate_messageActionCustomAction:
		t := m.To_MessageActionCustomAction()
		xBuf = t.Encode(layer)
	case Predicate_messageActionBotAllowed:
		t := m.To_MessageActionBotAllowed()
		xBuf = t.Encode(layer)
	case Predicate_messageActionSecureValuesSentMe:
		t := m.To_MessageActionSecureValuesSentMe()
		xBuf = t.Encode(layer)
	case Predicate_messageActionSecureValuesSent:
		t := m.To_MessageActionSecureValuesSent()
		xBuf = t.Encode(layer)
	case Predicate_messageActionContactSignUp:
		t := m.To_MessageActionContactSignUp()
		xBuf = t.Encode(layer)
	case Predicate_messageActionGeoProximityReached:
		t := m.To_MessageActionGeoProximityReached()
		xBuf = t.Encode(layer)
	case Predicate_messageActionGroupCall:
		t := m.To_MessageActionGroupCall()
		xBuf = t.Encode(layer)
	case Predicate_messageActionInviteToGroupCall:
		t := m.To_MessageActionInviteToGroupCall()
		xBuf = t.Encode(layer)
	case Predicate_messageActionSetMessagesTTL:
		t := m.To_MessageActionSetMessagesTTL()
		xBuf = t.Encode(layer)
	case Predicate_messageActionGroupCallScheduled:
		t := m.To_MessageActionGroupCallScheduled()
		xBuf = t.Encode(layer)
	case Predicate_messageActionSetChatTheme:
		t := m.To_MessageActionSetChatTheme()
		xBuf = t.Encode(layer)
	case Predicate_messageActionChatJoinedByRequest:
		t := m.To_MessageActionChatJoinedByRequest()
		xBuf = t.Encode(layer)
	case Predicate_messageActionBizDataRaw:
		t := m.To_MessageActionBizDataRaw()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *MessageAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *MessageAction) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xb6aef7b0:
		m2 := MakeTLMessageActionEmpty(m)
		m2.Decode(dBuf)
	case 0xbd47cbad:
		m2 := MakeTLMessageActionChatCreate(m)
		m2.Decode(dBuf)
	case 0xb5a1ce5a:
		m2 := MakeTLMessageActionChatEditTitle(m)
		m2.Decode(dBuf)
	case 0x7fcb13a8:
		m2 := MakeTLMessageActionChatEditPhoto(m)
		m2.Decode(dBuf)
	case 0x95e3fbef:
		m2 := MakeTLMessageActionChatDeletePhoto(m)
		m2.Decode(dBuf)
	case 0x15cefd00:
		m2 := MakeTLMessageActionChatAddUser(m)
		m2.Decode(dBuf)
	case 0xa43f30cc:
		m2 := MakeTLMessageActionChatDeleteUser(m)
		m2.Decode(dBuf)
	case 0x31224c3:
		m2 := MakeTLMessageActionChatJoinedByLink(m)
		m2.Decode(dBuf)
	case 0x95d2ac92:
		m2 := MakeTLMessageActionChannelCreate(m)
		m2.Decode(dBuf)
	case 0xe1037f92:
		m2 := MakeTLMessageActionChatMigrateTo(m)
		m2.Decode(dBuf)
	case 0xea3948e9:
		m2 := MakeTLMessageActionChannelMigrateFrom(m)
		m2.Decode(dBuf)
	case 0x94bd38ed:
		m2 := MakeTLMessageActionPinMessage(m)
		m2.Decode(dBuf)
	case 0x9fbab604:
		m2 := MakeTLMessageActionHistoryClear(m)
		m2.Decode(dBuf)
	case 0x92a72876:
		m2 := MakeTLMessageActionGameScore(m)
		m2.Decode(dBuf)
	case 0x8f31b327:
		m2 := MakeTLMessageActionPaymentSentMe(m)
		m2.Decode(dBuf)
	case 0x40699cd0:
		m2 := MakeTLMessageActionPaymentSent(m)
		m2.Decode(dBuf)
	case 0x80e11a7f:
		m2 := MakeTLMessageActionPhoneCall(m)
		m2.Decode(dBuf)
	case 0x4792929b:
		m2 := MakeTLMessageActionScreenshotTaken(m)
		m2.Decode(dBuf)
	case 0xfae69f56:
		m2 := MakeTLMessageActionCustomAction(m)
		m2.Decode(dBuf)
	case 0xabe9affe:
		m2 := MakeTLMessageActionBotAllowed(m)
		m2.Decode(dBuf)
	case 0x1b287353:
		m2 := MakeTLMessageActionSecureValuesSentMe(m)
		m2.Decode(dBuf)
	case 0xd95c6154:
		m2 := MakeTLMessageActionSecureValuesSent(m)
		m2.Decode(dBuf)
	case 0xf3f25f76:
		m2 := MakeTLMessageActionContactSignUp(m)
		m2.Decode(dBuf)
	case 0x98e0d697:
		m2 := MakeTLMessageActionGeoProximityReached(m)
		m2.Decode(dBuf)
	case 0x7a0d7f42:
		m2 := MakeTLMessageActionGroupCall(m)
		m2.Decode(dBuf)
	case 0x502f92f7:
		m2 := MakeTLMessageActionInviteToGroupCall(m)
		m2.Decode(dBuf)
	case 0xaa1afbfd:
		m2 := MakeTLMessageActionSetMessagesTTL(m)
		m2.Decode(dBuf)
	case 0xb3a07661:
		m2 := MakeTLMessageActionGroupCallScheduled(m)
		m2.Decode(dBuf)
	case 0xaa786345:
		m2 := MakeTLMessageActionSetChatTheme(m)
		m2.Decode(dBuf)
	case 0xebbca3cb:
		m2 := MakeTLMessageActionChatJoinedByRequest(m)
		m2.Decode(dBuf)
	case 0x2ffdf1b7:
		m2 := MakeTLMessageActionBizDataRaw(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *MessageAction) DebugString() string {
	switch m.PredicateName {
	case Predicate_messageActionEmpty:
		t := m.To_MessageActionEmpty()
		return t.DebugString()
	case Predicate_messageActionChatCreate:
		t := m.To_MessageActionChatCreate()
		return t.DebugString()
	case Predicate_messageActionChatEditTitle:
		t := m.To_MessageActionChatEditTitle()
		return t.DebugString()
	case Predicate_messageActionChatEditPhoto:
		t := m.To_MessageActionChatEditPhoto()
		return t.DebugString()
	case Predicate_messageActionChatDeletePhoto:
		t := m.To_MessageActionChatDeletePhoto()
		return t.DebugString()
	case Predicate_messageActionChatAddUser:
		t := m.To_MessageActionChatAddUser()
		return t.DebugString()
	case Predicate_messageActionChatDeleteUser:
		t := m.To_MessageActionChatDeleteUser()
		return t.DebugString()
	case Predicate_messageActionChatJoinedByLink:
		t := m.To_MessageActionChatJoinedByLink()
		return t.DebugString()
	case Predicate_messageActionChannelCreate:
		t := m.To_MessageActionChannelCreate()
		return t.DebugString()
	case Predicate_messageActionChatMigrateTo:
		t := m.To_MessageActionChatMigrateTo()
		return t.DebugString()
	case Predicate_messageActionChannelMigrateFrom:
		t := m.To_MessageActionChannelMigrateFrom()
		return t.DebugString()
	case Predicate_messageActionPinMessage:
		t := m.To_MessageActionPinMessage()
		return t.DebugString()
	case Predicate_messageActionHistoryClear:
		t := m.To_MessageActionHistoryClear()
		return t.DebugString()
	case Predicate_messageActionGameScore:
		t := m.To_MessageActionGameScore()
		return t.DebugString()
	case Predicate_messageActionPaymentSentMe:
		t := m.To_MessageActionPaymentSentMe()
		return t.DebugString()
	case Predicate_messageActionPaymentSent:
		t := m.To_MessageActionPaymentSent()
		return t.DebugString()
	case Predicate_messageActionPhoneCall:
		t := m.To_MessageActionPhoneCall()
		return t.DebugString()
	case Predicate_messageActionScreenshotTaken:
		t := m.To_MessageActionScreenshotTaken()
		return t.DebugString()
	case Predicate_messageActionCustomAction:
		t := m.To_MessageActionCustomAction()
		return t.DebugString()
	case Predicate_messageActionBotAllowed:
		t := m.To_MessageActionBotAllowed()
		return t.DebugString()
	case Predicate_messageActionSecureValuesSentMe:
		t := m.To_MessageActionSecureValuesSentMe()
		return t.DebugString()
	case Predicate_messageActionSecureValuesSent:
		t := m.To_MessageActionSecureValuesSent()
		return t.DebugString()
	case Predicate_messageActionContactSignUp:
		t := m.To_MessageActionContactSignUp()
		return t.DebugString()
	case Predicate_messageActionGeoProximityReached:
		t := m.To_MessageActionGeoProximityReached()
		return t.DebugString()
	case Predicate_messageActionGroupCall:
		t := m.To_MessageActionGroupCall()
		return t.DebugString()
	case Predicate_messageActionInviteToGroupCall:
		t := m.To_MessageActionInviteToGroupCall()
		return t.DebugString()
	case Predicate_messageActionSetMessagesTTL:
		t := m.To_MessageActionSetMessagesTTL()
		return t.DebugString()
	case Predicate_messageActionGroupCallScheduled:
		t := m.To_MessageActionGroupCallScheduled()
		return t.DebugString()
	case Predicate_messageActionSetChatTheme:
		t := m.To_MessageActionSetChatTheme()
		return t.DebugString()
	case Predicate_messageActionChatJoinedByRequest:
		t := m.To_MessageActionChatJoinedByRequest()
		return t.DebugString()
	case Predicate_messageActionBizDataRaw:
		t := m.To_MessageActionBizDataRaw()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_MessageActionEmpty
func (m *MessageAction) To_MessageActionEmpty() *TLMessageActionEmpty {
	m.PredicateName = Predicate_messageActionEmpty
	return &TLMessageActionEmpty{
		Data2: m,
	}
}

// To_MessageActionChatCreate
func (m *MessageAction) To_MessageActionChatCreate() *TLMessageActionChatCreate {
	m.PredicateName = Predicate_messageActionChatCreate
	return &TLMessageActionChatCreate{
		Data2: m,
	}
}

// To_MessageActionChatEditTitle
func (m *MessageAction) To_MessageActionChatEditTitle() *TLMessageActionChatEditTitle {
	m.PredicateName = Predicate_messageActionChatEditTitle
	return &TLMessageActionChatEditTitle{
		Data2: m,
	}
}

// To_MessageActionChatEditPhoto
func (m *MessageAction) To_MessageActionChatEditPhoto() *TLMessageActionChatEditPhoto {
	m.PredicateName = Predicate_messageActionChatEditPhoto
	return &TLMessageActionChatEditPhoto{
		Data2: m,
	}
}

// To_MessageActionChatDeletePhoto
func (m *MessageAction) To_MessageActionChatDeletePhoto() *TLMessageActionChatDeletePhoto {
	m.PredicateName = Predicate_messageActionChatDeletePhoto
	return &TLMessageActionChatDeletePhoto{
		Data2: m,
	}
}

// To_MessageActionChatAddUser
func (m *MessageAction) To_MessageActionChatAddUser() *TLMessageActionChatAddUser {
	m.PredicateName = Predicate_messageActionChatAddUser
	return &TLMessageActionChatAddUser{
		Data2: m,
	}
}

// To_MessageActionChatDeleteUser
func (m *MessageAction) To_MessageActionChatDeleteUser() *TLMessageActionChatDeleteUser {
	m.PredicateName = Predicate_messageActionChatDeleteUser
	return &TLMessageActionChatDeleteUser{
		Data2: m,
	}
}

// To_MessageActionChatJoinedByLink
func (m *MessageAction) To_MessageActionChatJoinedByLink() *TLMessageActionChatJoinedByLink {
	m.PredicateName = Predicate_messageActionChatJoinedByLink
	return &TLMessageActionChatJoinedByLink{
		Data2: m,
	}
}

// To_MessageActionChannelCreate
func (m *MessageAction) To_MessageActionChannelCreate() *TLMessageActionChannelCreate {
	m.PredicateName = Predicate_messageActionChannelCreate
	return &TLMessageActionChannelCreate{
		Data2: m,
	}
}

// To_MessageActionChatMigrateTo
func (m *MessageAction) To_MessageActionChatMigrateTo() *TLMessageActionChatMigrateTo {
	m.PredicateName = Predicate_messageActionChatMigrateTo
	return &TLMessageActionChatMigrateTo{
		Data2: m,
	}
}

// To_MessageActionChannelMigrateFrom
func (m *MessageAction) To_MessageActionChannelMigrateFrom() *TLMessageActionChannelMigrateFrom {
	m.PredicateName = Predicate_messageActionChannelMigrateFrom
	return &TLMessageActionChannelMigrateFrom{
		Data2: m,
	}
}

// To_MessageActionPinMessage
func (m *MessageAction) To_MessageActionPinMessage() *TLMessageActionPinMessage {
	m.PredicateName = Predicate_messageActionPinMessage
	return &TLMessageActionPinMessage{
		Data2: m,
	}
}

// To_MessageActionHistoryClear
func (m *MessageAction) To_MessageActionHistoryClear() *TLMessageActionHistoryClear {
	m.PredicateName = Predicate_messageActionHistoryClear
	return &TLMessageActionHistoryClear{
		Data2: m,
	}
}

// To_MessageActionGameScore
func (m *MessageAction) To_MessageActionGameScore() *TLMessageActionGameScore {
	m.PredicateName = Predicate_messageActionGameScore
	return &TLMessageActionGameScore{
		Data2: m,
	}
}

// To_MessageActionPaymentSentMe
func (m *MessageAction) To_MessageActionPaymentSentMe() *TLMessageActionPaymentSentMe {
	m.PredicateName = Predicate_messageActionPaymentSentMe
	return &TLMessageActionPaymentSentMe{
		Data2: m,
	}
}

// To_MessageActionPaymentSent
func (m *MessageAction) To_MessageActionPaymentSent() *TLMessageActionPaymentSent {
	m.PredicateName = Predicate_messageActionPaymentSent
	return &TLMessageActionPaymentSent{
		Data2: m,
	}
}

// To_MessageActionPhoneCall
func (m *MessageAction) To_MessageActionPhoneCall() *TLMessageActionPhoneCall {
	m.PredicateName = Predicate_messageActionPhoneCall
	return &TLMessageActionPhoneCall{
		Data2: m,
	}
}

// To_MessageActionScreenshotTaken
func (m *MessageAction) To_MessageActionScreenshotTaken() *TLMessageActionScreenshotTaken {
	m.PredicateName = Predicate_messageActionScreenshotTaken
	return &TLMessageActionScreenshotTaken{
		Data2: m,
	}
}

// To_MessageActionCustomAction
func (m *MessageAction) To_MessageActionCustomAction() *TLMessageActionCustomAction {
	m.PredicateName = Predicate_messageActionCustomAction
	return &TLMessageActionCustomAction{
		Data2: m,
	}
}

// To_MessageActionBotAllowed
func (m *MessageAction) To_MessageActionBotAllowed() *TLMessageActionBotAllowed {
	m.PredicateName = Predicate_messageActionBotAllowed
	return &TLMessageActionBotAllowed{
		Data2: m,
	}
}

// To_MessageActionSecureValuesSentMe
func (m *MessageAction) To_MessageActionSecureValuesSentMe() *TLMessageActionSecureValuesSentMe {
	m.PredicateName = Predicate_messageActionSecureValuesSentMe
	return &TLMessageActionSecureValuesSentMe{
		Data2: m,
	}
}

// To_MessageActionSecureValuesSent
func (m *MessageAction) To_MessageActionSecureValuesSent() *TLMessageActionSecureValuesSent {
	m.PredicateName = Predicate_messageActionSecureValuesSent
	return &TLMessageActionSecureValuesSent{
		Data2: m,
	}
}

// To_MessageActionContactSignUp
func (m *MessageAction) To_MessageActionContactSignUp() *TLMessageActionContactSignUp {
	m.PredicateName = Predicate_messageActionContactSignUp
	return &TLMessageActionContactSignUp{
		Data2: m,
	}
}

// To_MessageActionGeoProximityReached
func (m *MessageAction) To_MessageActionGeoProximityReached() *TLMessageActionGeoProximityReached {
	m.PredicateName = Predicate_messageActionGeoProximityReached
	return &TLMessageActionGeoProximityReached{
		Data2: m,
	}
}

// To_MessageActionGroupCall
func (m *MessageAction) To_MessageActionGroupCall() *TLMessageActionGroupCall {
	m.PredicateName = Predicate_messageActionGroupCall
	return &TLMessageActionGroupCall{
		Data2: m,
	}
}

// To_MessageActionInviteToGroupCall
func (m *MessageAction) To_MessageActionInviteToGroupCall() *TLMessageActionInviteToGroupCall {
	m.PredicateName = Predicate_messageActionInviteToGroupCall
	return &TLMessageActionInviteToGroupCall{
		Data2: m,
	}
}

// To_MessageActionSetMessagesTTL
func (m *MessageAction) To_MessageActionSetMessagesTTL() *TLMessageActionSetMessagesTTL {
	m.PredicateName = Predicate_messageActionSetMessagesTTL
	return &TLMessageActionSetMessagesTTL{
		Data2: m,
	}
}

// To_MessageActionGroupCallScheduled
func (m *MessageAction) To_MessageActionGroupCallScheduled() *TLMessageActionGroupCallScheduled {
	m.PredicateName = Predicate_messageActionGroupCallScheduled
	return &TLMessageActionGroupCallScheduled{
		Data2: m,
	}
}

// To_MessageActionSetChatTheme
func (m *MessageAction) To_MessageActionSetChatTheme() *TLMessageActionSetChatTheme {
	m.PredicateName = Predicate_messageActionSetChatTheme
	return &TLMessageActionSetChatTheme{
		Data2: m,
	}
}

// To_MessageActionChatJoinedByRequest
func (m *MessageAction) To_MessageActionChatJoinedByRequest() *TLMessageActionChatJoinedByRequest {
	m.PredicateName = Predicate_messageActionChatJoinedByRequest
	return &TLMessageActionChatJoinedByRequest{
		Data2: m,
	}
}

// To_MessageActionBizDataRaw
func (m *MessageAction) To_MessageActionBizDataRaw() *TLMessageActionBizDataRaw {
	m.PredicateName = Predicate_messageActionBizDataRaw
	return &TLMessageActionBizDataRaw{
		Data2: m,
	}
}

// MakeTLMessageActionEmpty
func MakeTLMessageActionEmpty(data2 *MessageAction) *TLMessageActionEmpty {
	if data2 == nil {
		return &TLMessageActionEmpty{Data2: &MessageAction{
			PredicateName: Predicate_messageActionEmpty,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionEmpty
		return &TLMessageActionEmpty{Data2: data2}
	}
}

func (m *TLMessageActionEmpty) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionEmpty
	return m.Data2
}

func (m *TLMessageActionEmpty) GetPredicateName() string {
	return Predicate_messageActionEmpty
}

func (m *TLMessageActionEmpty) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb6aef7b0: func() []byte {
			x.UInt(0xb6aef7b0)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionEmpty, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionEmpty, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionEmpty) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionEmpty) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb6aef7b0: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionEmpty) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatCreate
func MakeTLMessageActionChatCreate(data2 *MessageAction) *TLMessageActionChatCreate {
	if data2 == nil {
		return &TLMessageActionChatCreate{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatCreate,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatCreate
		return &TLMessageActionChatCreate{Data2: data2}
	}
}

func (m *TLMessageActionChatCreate) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatCreate
	return m.Data2
}

func (m *TLMessageActionChatCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatCreate) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChatCreate) SetUsers(v []int64) { m.Data2.Users = v }
func (m *TLMessageActionChatCreate) GetUsers() []int64  { return m.Data2.Users }

func (m *TLMessageActionChatCreate) GetPredicateName() string {
	return Predicate_messageActionChatCreate
}

func (m *TLMessageActionChatCreate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xbd47cbad: func() []byte {
			x.UInt(0xbd47cbad)

			x.String(m.GetTitle())

			x.VectorLong(m.GetUsers())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatCreate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatCreate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatCreate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatCreate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xbd47cbad: func() error {
			m.SetTitle(dBuf.String())

			m.SetUsers(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatCreate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatEditTitle
func MakeTLMessageActionChatEditTitle(data2 *MessageAction) *TLMessageActionChatEditTitle {
	if data2 == nil {
		return &TLMessageActionChatEditTitle{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatEditTitle,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatEditTitle
		return &TLMessageActionChatEditTitle{Data2: data2}
	}
}

func (m *TLMessageActionChatEditTitle) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatEditTitle
	return m.Data2
}

func (m *TLMessageActionChatEditTitle) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatEditTitle) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChatEditTitle) GetPredicateName() string {
	return Predicate_messageActionChatEditTitle
}

func (m *TLMessageActionChatEditTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb5a1ce5a: func() []byte {
			x.UInt(0xb5a1ce5a)

			x.String(m.GetTitle())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatEditTitle, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatEditTitle, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatEditTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatEditTitle) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb5a1ce5a: func() error {
			m.SetTitle(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatEditTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatEditPhoto
func MakeTLMessageActionChatEditPhoto(data2 *MessageAction) *TLMessageActionChatEditPhoto {
	if data2 == nil {
		return &TLMessageActionChatEditPhoto{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatEditPhoto,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatEditPhoto
		return &TLMessageActionChatEditPhoto{Data2: data2}
	}
}

func (m *TLMessageActionChatEditPhoto) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatEditPhoto
	return m.Data2
}

func (m *TLMessageActionChatEditPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLMessageActionChatEditPhoto) GetPhoto() *Photo  { return m.Data2.Photo }

func (m *TLMessageActionChatEditPhoto) GetPredicateName() string {
	return Predicate_messageActionChatEditPhoto
}

func (m *TLMessageActionChatEditPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7fcb13a8: func() []byte {
			x.UInt(0x7fcb13a8)

			x.Bytes(m.GetPhoto().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatEditPhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatEditPhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatEditPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatEditPhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7fcb13a8: func() error {

			m2 := &Photo{}
			m2.Decode(dBuf)
			m.SetPhoto(m2)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatEditPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatDeletePhoto
func MakeTLMessageActionChatDeletePhoto(data2 *MessageAction) *TLMessageActionChatDeletePhoto {
	if data2 == nil {
		return &TLMessageActionChatDeletePhoto{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatDeletePhoto,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatDeletePhoto
		return &TLMessageActionChatDeletePhoto{Data2: data2}
	}
}

func (m *TLMessageActionChatDeletePhoto) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatDeletePhoto
	return m.Data2
}

func (m *TLMessageActionChatDeletePhoto) GetPredicateName() string {
	return Predicate_messageActionChatDeletePhoto
}

func (m *TLMessageActionChatDeletePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x95e3fbef: func() []byte {
			x.UInt(0x95e3fbef)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatDeletePhoto, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatDeletePhoto, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatDeletePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatDeletePhoto) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x95e3fbef: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatDeletePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatAddUser
func MakeTLMessageActionChatAddUser(data2 *MessageAction) *TLMessageActionChatAddUser {
	if data2 == nil {
		return &TLMessageActionChatAddUser{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatAddUser,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatAddUser
		return &TLMessageActionChatAddUser{Data2: data2}
	}
}

func (m *TLMessageActionChatAddUser) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatAddUser
	return m.Data2
}

func (m *TLMessageActionChatAddUser) SetUsers(v []int64) { m.Data2.Users = v }
func (m *TLMessageActionChatAddUser) GetUsers() []int64  { return m.Data2.Users }

func (m *TLMessageActionChatAddUser) GetPredicateName() string {
	return Predicate_messageActionChatAddUser
}

func (m *TLMessageActionChatAddUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x15cefd00: func() []byte {
			x.UInt(0x15cefd00)

			x.VectorLong(m.GetUsers())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatAddUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatAddUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatAddUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatAddUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x15cefd00: func() error {

			m.SetUsers(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatAddUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatDeleteUser
func MakeTLMessageActionChatDeleteUser(data2 *MessageAction) *TLMessageActionChatDeleteUser {
	if data2 == nil {
		return &TLMessageActionChatDeleteUser{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatDeleteUser,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatDeleteUser
		return &TLMessageActionChatDeleteUser{Data2: data2}
	}
}

func (m *TLMessageActionChatDeleteUser) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatDeleteUser
	return m.Data2
}

func (m *TLMessageActionChatDeleteUser) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLMessageActionChatDeleteUser) GetUserId() int64  { return m.Data2.UserId }

func (m *TLMessageActionChatDeleteUser) GetPredicateName() string {
	return Predicate_messageActionChatDeleteUser
}

func (m *TLMessageActionChatDeleteUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xa43f30cc: func() []byte {
			x.UInt(0xa43f30cc)

			x.Long(m.GetUserId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatDeleteUser, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatDeleteUser, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatDeleteUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatDeleteUser) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xa43f30cc: func() error {
			m.SetUserId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatDeleteUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatJoinedByLink
func MakeTLMessageActionChatJoinedByLink(data2 *MessageAction) *TLMessageActionChatJoinedByLink {
	if data2 == nil {
		return &TLMessageActionChatJoinedByLink{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatJoinedByLink,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatJoinedByLink
		return &TLMessageActionChatJoinedByLink{Data2: data2}
	}
}

func (m *TLMessageActionChatJoinedByLink) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatJoinedByLink
	return m.Data2
}

func (m *TLMessageActionChatJoinedByLink) SetInviterId(v int64) { m.Data2.InviterId = v }
func (m *TLMessageActionChatJoinedByLink) GetInviterId() int64  { return m.Data2.InviterId }

func (m *TLMessageActionChatJoinedByLink) GetPredicateName() string {
	return Predicate_messageActionChatJoinedByLink
}

func (m *TLMessageActionChatJoinedByLink) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x31224c3: func() []byte {
			x.UInt(0x31224c3)

			x.Long(m.GetInviterId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatJoinedByLink, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatJoinedByLink, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatJoinedByLink) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatJoinedByLink) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x31224c3: func() error {
			m.SetInviterId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatJoinedByLink) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChannelCreate
func MakeTLMessageActionChannelCreate(data2 *MessageAction) *TLMessageActionChannelCreate {
	if data2 == nil {
		return &TLMessageActionChannelCreate{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChannelCreate,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChannelCreate
		return &TLMessageActionChannelCreate{Data2: data2}
	}
}

func (m *TLMessageActionChannelCreate) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChannelCreate
	return m.Data2
}

func (m *TLMessageActionChannelCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelCreate) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChannelCreate) GetPredicateName() string {
	return Predicate_messageActionChannelCreate
}

func (m *TLMessageActionChannelCreate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x95d2ac92: func() []byte {
			x.UInt(0x95d2ac92)

			x.String(m.GetTitle())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChannelCreate, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChannelCreate, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChannelCreate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChannelCreate) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x95d2ac92: func() error {
			m.SetTitle(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChannelCreate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatMigrateTo
func MakeTLMessageActionChatMigrateTo(data2 *MessageAction) *TLMessageActionChatMigrateTo {
	if data2 == nil {
		return &TLMessageActionChatMigrateTo{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatMigrateTo,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatMigrateTo
		return &TLMessageActionChatMigrateTo{Data2: data2}
	}
}

func (m *TLMessageActionChatMigrateTo) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatMigrateTo
	return m.Data2
}

func (m *TLMessageActionChatMigrateTo) SetChannelId(v int64) { m.Data2.ChannelId = v }
func (m *TLMessageActionChatMigrateTo) GetChannelId() int64  { return m.Data2.ChannelId }

func (m *TLMessageActionChatMigrateTo) GetPredicateName() string {
	return Predicate_messageActionChatMigrateTo
}

func (m *TLMessageActionChatMigrateTo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xe1037f92: func() []byte {
			x.UInt(0xe1037f92)

			x.Long(m.GetChannelId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatMigrateTo, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatMigrateTo, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatMigrateTo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatMigrateTo) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xe1037f92: func() error {
			m.SetChannelId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatMigrateTo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChannelMigrateFrom
func MakeTLMessageActionChannelMigrateFrom(data2 *MessageAction) *TLMessageActionChannelMigrateFrom {
	if data2 == nil {
		return &TLMessageActionChannelMigrateFrom{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChannelMigrateFrom,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChannelMigrateFrom
		return &TLMessageActionChannelMigrateFrom{Data2: data2}
	}
}

func (m *TLMessageActionChannelMigrateFrom) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChannelMigrateFrom
	return m.Data2
}

func (m *TLMessageActionChannelMigrateFrom) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelMigrateFrom) GetTitle() string  { return m.Data2.Title }

func (m *TLMessageActionChannelMigrateFrom) SetChatId(v int64) { m.Data2.ChatId = v }
func (m *TLMessageActionChannelMigrateFrom) GetChatId() int64  { return m.Data2.ChatId }

func (m *TLMessageActionChannelMigrateFrom) GetPredicateName() string {
	return Predicate_messageActionChannelMigrateFrom
}

func (m *TLMessageActionChannelMigrateFrom) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xea3948e9: func() []byte {
			x.UInt(0xea3948e9)

			x.String(m.GetTitle())
			x.Long(m.GetChatId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChannelMigrateFrom, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChannelMigrateFrom, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChannelMigrateFrom) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChannelMigrateFrom) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xea3948e9: func() error {
			m.SetTitle(dBuf.String())
			m.SetChatId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChannelMigrateFrom) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionPinMessage
func MakeTLMessageActionPinMessage(data2 *MessageAction) *TLMessageActionPinMessage {
	if data2 == nil {
		return &TLMessageActionPinMessage{Data2: &MessageAction{
			PredicateName: Predicate_messageActionPinMessage,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionPinMessage
		return &TLMessageActionPinMessage{Data2: data2}
	}
}

func (m *TLMessageActionPinMessage) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionPinMessage
	return m.Data2
}

func (m *TLMessageActionPinMessage) GetPredicateName() string {
	return Predicate_messageActionPinMessage
}

func (m *TLMessageActionPinMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x94bd38ed: func() []byte {
			x.UInt(0x94bd38ed)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionPinMessage, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionPinMessage, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionPinMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionPinMessage) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x94bd38ed: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionPinMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionHistoryClear
func MakeTLMessageActionHistoryClear(data2 *MessageAction) *TLMessageActionHistoryClear {
	if data2 == nil {
		return &TLMessageActionHistoryClear{Data2: &MessageAction{
			PredicateName: Predicate_messageActionHistoryClear,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionHistoryClear
		return &TLMessageActionHistoryClear{Data2: data2}
	}
}

func (m *TLMessageActionHistoryClear) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionHistoryClear
	return m.Data2
}

func (m *TLMessageActionHistoryClear) GetPredicateName() string {
	return Predicate_messageActionHistoryClear
}

func (m *TLMessageActionHistoryClear) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x9fbab604: func() []byte {
			x.UInt(0x9fbab604)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionHistoryClear, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionHistoryClear, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionHistoryClear) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionHistoryClear) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x9fbab604: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionHistoryClear) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionGameScore
func MakeTLMessageActionGameScore(data2 *MessageAction) *TLMessageActionGameScore {
	if data2 == nil {
		return &TLMessageActionGameScore{Data2: &MessageAction{
			PredicateName: Predicate_messageActionGameScore,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionGameScore
		return &TLMessageActionGameScore{Data2: data2}
	}
}

func (m *TLMessageActionGameScore) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionGameScore
	return m.Data2
}

func (m *TLMessageActionGameScore) SetGameId(v int64) { m.Data2.GameId = v }
func (m *TLMessageActionGameScore) GetGameId() int64  { return m.Data2.GameId }

func (m *TLMessageActionGameScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLMessageActionGameScore) GetScore() int32  { return m.Data2.Score }

func (m *TLMessageActionGameScore) GetPredicateName() string {
	return Predicate_messageActionGameScore
}

func (m *TLMessageActionGameScore) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x92a72876: func() []byte {
			x.UInt(0x92a72876)

			x.Long(m.GetGameId())
			x.Int(m.GetScore())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionGameScore, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionGameScore, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionGameScore) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionGameScore) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x92a72876: func() error {
			m.SetGameId(dBuf.Long())
			m.SetScore(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionGameScore) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionPaymentSentMe
func MakeTLMessageActionPaymentSentMe(data2 *MessageAction) *TLMessageActionPaymentSentMe {
	if data2 == nil {
		return &TLMessageActionPaymentSentMe{Data2: &MessageAction{
			PredicateName: Predicate_messageActionPaymentSentMe,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionPaymentSentMe
		return &TLMessageActionPaymentSentMe{Data2: data2}
	}
}

func (m *TLMessageActionPaymentSentMe) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionPaymentSentMe
	return m.Data2
}

//// flags
func (m *TLMessageActionPaymentSentMe) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSentMe) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageActionPaymentSentMe) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSentMe) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLMessageActionPaymentSentMe) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLMessageActionPaymentSentMe) GetPayload() []byte  { return m.Data2.Payload }

func (m *TLMessageActionPaymentSentMe) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLMessageActionPaymentSentMe) GetInfo() *PaymentRequestedInfo  { return m.Data2.Info }

func (m *TLMessageActionPaymentSentMe) SetShippingOptionId(v *types.StringValue) {
	m.Data2.ShippingOptionId = v
}
func (m *TLMessageActionPaymentSentMe) GetShippingOptionId() *types.StringValue {
	return m.Data2.ShippingOptionId
}

func (m *TLMessageActionPaymentSentMe) SetCharge(v *PaymentCharge) { m.Data2.Charge = v }
func (m *TLMessageActionPaymentSentMe) GetCharge() *PaymentCharge  { return m.Data2.Charge }

func (m *TLMessageActionPaymentSentMe) GetPredicateName() string {
	return Predicate_messageActionPaymentSentMe
}

func (m *TLMessageActionPaymentSentMe) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x8f31b327: func() []byte {
			x.UInt(0x8f31b327)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetInfo() != nil {
					flags |= 1 << 0
				}
				if m.GetShippingOptionId() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			x.StringBytes(m.GetPayload())
			if m.GetInfo() != nil {
				x.Bytes(m.GetInfo().Encode(layer))
			}

			if m.GetShippingOptionId() != nil {
				x.String(m.GetShippingOptionId().Value)
			}

			x.Bytes(m.GetCharge().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionPaymentSentMe, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionPaymentSentMe, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionPaymentSentMe) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionPaymentSentMe) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x8f31b327: func() error {
			var flags = dBuf.UInt()
			_ = flags
			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			m.SetPayload(dBuf.StringBytes())
			if (flags & (1 << 0)) != 0 {
				m13 := &PaymentRequestedInfo{}
				m13.Decode(dBuf)
				m.SetInfo(m13)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetShippingOptionId(&types.StringValue{Value: dBuf.String()})
			}

			m15 := &PaymentCharge{}
			m15.Decode(dBuf)
			m.SetCharge(m15)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionPaymentSentMe) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionPaymentSent
func MakeTLMessageActionPaymentSent(data2 *MessageAction) *TLMessageActionPaymentSent {
	if data2 == nil {
		return &TLMessageActionPaymentSent{Data2: &MessageAction{
			PredicateName: Predicate_messageActionPaymentSent,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionPaymentSent
		return &TLMessageActionPaymentSent{Data2: data2}
	}
}

func (m *TLMessageActionPaymentSent) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionPaymentSent
	return m.Data2
}

func (m *TLMessageActionPaymentSent) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSent) GetCurrency() string  { return m.Data2.Currency }

func (m *TLMessageActionPaymentSent) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSent) GetTotalAmount() int64  { return m.Data2.TotalAmount }

func (m *TLMessageActionPaymentSent) GetPredicateName() string {
	return Predicate_messageActionPaymentSent
}

func (m *TLMessageActionPaymentSent) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x40699cd0: func() []byte {
			x.UInt(0x40699cd0)

			x.String(m.GetCurrency())
			x.Long(m.GetTotalAmount())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionPaymentSent, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionPaymentSent, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionPaymentSent) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionPaymentSent) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x40699cd0: func() error {
			m.SetCurrency(dBuf.String())
			m.SetTotalAmount(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionPaymentSent) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionPhoneCall
func MakeTLMessageActionPhoneCall(data2 *MessageAction) *TLMessageActionPhoneCall {
	if data2 == nil {
		return &TLMessageActionPhoneCall{Data2: &MessageAction{
			PredicateName: Predicate_messageActionPhoneCall,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionPhoneCall
		return &TLMessageActionPhoneCall{Data2: data2}
	}
}

func (m *TLMessageActionPhoneCall) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionPhoneCall
	return m.Data2
}

//// flags
func (m *TLMessageActionPhoneCall) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLMessageActionPhoneCall) GetVideo() bool  { return m.Data2.Video }

func (m *TLMessageActionPhoneCall) SetCallId(v int64) { m.Data2.CallId = v }
func (m *TLMessageActionPhoneCall) GetCallId() int64  { return m.Data2.CallId }

func (m *TLMessageActionPhoneCall) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLMessageActionPhoneCall) GetReason() *PhoneCallDiscardReason  { return m.Data2.Reason }

func (m *TLMessageActionPhoneCall) SetDuration(v *types.Int32Value) { m.Data2.Duration = v }
func (m *TLMessageActionPhoneCall) GetDuration() *types.Int32Value  { return m.Data2.Duration }

func (m *TLMessageActionPhoneCall) GetPredicateName() string {
	return Predicate_messageActionPhoneCall
}

func (m *TLMessageActionPhoneCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x80e11a7f: func() []byte {
			x.UInt(0x80e11a7f)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetVideo() == true {
					flags |= 1 << 2
				}

				if m.GetReason() != nil {
					flags |= 1 << 0
				}
				if m.GetDuration() != nil {
					flags |= 1 << 1
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Long(m.GetCallId())
			if m.GetReason() != nil {
				x.Bytes(m.GetReason().Encode(layer))
			}

			if m.GetDuration() != nil {
				x.Int(m.GetDuration().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionPhoneCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionPhoneCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionPhoneCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionPhoneCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x80e11a7f: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 2)) != 0 {
				m.SetVideo(true)
			}
			m.SetCallId(dBuf.Long())
			if (flags & (1 << 0)) != 0 {
				m18 := &PhoneCallDiscardReason{}
				m18.Decode(dBuf)
				m.SetReason(m18)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetDuration(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionPhoneCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionScreenshotTaken
func MakeTLMessageActionScreenshotTaken(data2 *MessageAction) *TLMessageActionScreenshotTaken {
	if data2 == nil {
		return &TLMessageActionScreenshotTaken{Data2: &MessageAction{
			PredicateName: Predicate_messageActionScreenshotTaken,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionScreenshotTaken
		return &TLMessageActionScreenshotTaken{Data2: data2}
	}
}

func (m *TLMessageActionScreenshotTaken) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionScreenshotTaken
	return m.Data2
}

func (m *TLMessageActionScreenshotTaken) GetPredicateName() string {
	return Predicate_messageActionScreenshotTaken
}

func (m *TLMessageActionScreenshotTaken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x4792929b: func() []byte {
			x.UInt(0x4792929b)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionScreenshotTaken, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionScreenshotTaken, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionScreenshotTaken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionScreenshotTaken) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x4792929b: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionScreenshotTaken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionCustomAction
func MakeTLMessageActionCustomAction(data2 *MessageAction) *TLMessageActionCustomAction {
	if data2 == nil {
		return &TLMessageActionCustomAction{Data2: &MessageAction{
			PredicateName: Predicate_messageActionCustomAction,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionCustomAction
		return &TLMessageActionCustomAction{Data2: data2}
	}
}

func (m *TLMessageActionCustomAction) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionCustomAction
	return m.Data2
}

func (m *TLMessageActionCustomAction) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessageActionCustomAction) GetMessage() string  { return m.Data2.Message }

func (m *TLMessageActionCustomAction) GetPredicateName() string {
	return Predicate_messageActionCustomAction
}

func (m *TLMessageActionCustomAction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xfae69f56: func() []byte {
			x.UInt(0xfae69f56)

			x.String(m.GetMessage())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionCustomAction, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionCustomAction, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionCustomAction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionCustomAction) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xfae69f56: func() error {
			m.SetMessage(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionCustomAction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionBotAllowed
func MakeTLMessageActionBotAllowed(data2 *MessageAction) *TLMessageActionBotAllowed {
	if data2 == nil {
		return &TLMessageActionBotAllowed{Data2: &MessageAction{
			PredicateName: Predicate_messageActionBotAllowed,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionBotAllowed
		return &TLMessageActionBotAllowed{Data2: data2}
	}
}

func (m *TLMessageActionBotAllowed) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionBotAllowed
	return m.Data2
}

func (m *TLMessageActionBotAllowed) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLMessageActionBotAllowed) GetDomain() string  { return m.Data2.Domain }

func (m *TLMessageActionBotAllowed) GetPredicateName() string {
	return Predicate_messageActionBotAllowed
}

func (m *TLMessageActionBotAllowed) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xabe9affe: func() []byte {
			x.UInt(0xabe9affe)

			x.String(m.GetDomain())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionBotAllowed, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionBotAllowed, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionBotAllowed) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionBotAllowed) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xabe9affe: func() error {
			m.SetDomain(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionBotAllowed) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionSecureValuesSentMe
func MakeTLMessageActionSecureValuesSentMe(data2 *MessageAction) *TLMessageActionSecureValuesSentMe {
	if data2 == nil {
		return &TLMessageActionSecureValuesSentMe{Data2: &MessageAction{
			PredicateName: Predicate_messageActionSecureValuesSentMe,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionSecureValuesSentMe
		return &TLMessageActionSecureValuesSentMe{Data2: data2}
	}
}

func (m *TLMessageActionSecureValuesSentMe) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionSecureValuesSentMe
	return m.Data2
}

func (m *TLMessageActionSecureValuesSentMe) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLMessageActionSecureValuesSentMe) GetValues() []*SecureValue  { return m.Data2.Values }

func (m *TLMessageActionSecureValuesSentMe) SetCredentials(v *SecureCredentialsEncrypted) {
	m.Data2.Credentials = v
}
func (m *TLMessageActionSecureValuesSentMe) GetCredentials() *SecureCredentialsEncrypted {
	return m.Data2.Credentials
}

func (m *TLMessageActionSecureValuesSentMe) GetPredicateName() string {
	return Predicate_messageActionSecureValuesSentMe
}

func (m *TLMessageActionSecureValuesSentMe) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x1b287353: func() []byte {
			x.UInt(0x1b287353)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetValues())))
			for _, v := range m.GetValues() {
				x.Bytes((*v).Encode(layer))
			}

			x.Bytes(m.GetCredentials().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionSecureValuesSentMe, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionSecureValuesSentMe, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionSecureValuesSentMe) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionSecureValuesSentMe) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x1b287353: func() error {
			c22 := dBuf.Int()
			if c22 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 22, c22)
				return dBuf.GetError()
			}
			l22 := dBuf.Int()
			v22 := make([]*SecureValue, l22)
			for i := int32(0); i < l22; i++ {
				v22[i] = &SecureValue{}
				v22[i].Decode(dBuf)
			}
			m.SetValues(v22)

			m23 := &SecureCredentialsEncrypted{}
			m23.Decode(dBuf)
			m.SetCredentials(m23)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionSecureValuesSentMe) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionSecureValuesSent
func MakeTLMessageActionSecureValuesSent(data2 *MessageAction) *TLMessageActionSecureValuesSent {
	if data2 == nil {
		return &TLMessageActionSecureValuesSent{Data2: &MessageAction{
			PredicateName: Predicate_messageActionSecureValuesSent,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionSecureValuesSent
		return &TLMessageActionSecureValuesSent{Data2: data2}
	}
}

func (m *TLMessageActionSecureValuesSent) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionSecureValuesSent
	return m.Data2
}

func (m *TLMessageActionSecureValuesSent) SetTypes(v []*SecureValueType) { m.Data2.Types = v }
func (m *TLMessageActionSecureValuesSent) GetTypes() []*SecureValueType  { return m.Data2.Types }

func (m *TLMessageActionSecureValuesSent) GetPredicateName() string {
	return Predicate_messageActionSecureValuesSent
}

func (m *TLMessageActionSecureValuesSent) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xd95c6154: func() []byte {
			x.UInt(0xd95c6154)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetTypes())))
			for _, v := range m.GetTypes() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionSecureValuesSent, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionSecureValuesSent, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionSecureValuesSent) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionSecureValuesSent) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xd95c6154: func() error {
			c24 := dBuf.Int()
			if c24 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 24, c24)
				return dBuf.GetError()
			}
			l24 := dBuf.Int()
			v24 := make([]*SecureValueType, l24)
			for i := int32(0); i < l24; i++ {
				v24[i] = &SecureValueType{}
				v24[i].Decode(dBuf)
			}
			m.SetTypes(v24)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionSecureValuesSent) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionContactSignUp
func MakeTLMessageActionContactSignUp(data2 *MessageAction) *TLMessageActionContactSignUp {
	if data2 == nil {
		return &TLMessageActionContactSignUp{Data2: &MessageAction{
			PredicateName: Predicate_messageActionContactSignUp,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionContactSignUp
		return &TLMessageActionContactSignUp{Data2: data2}
	}
}

func (m *TLMessageActionContactSignUp) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionContactSignUp
	return m.Data2
}

func (m *TLMessageActionContactSignUp) GetPredicateName() string {
	return Predicate_messageActionContactSignUp
}

func (m *TLMessageActionContactSignUp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xf3f25f76: func() []byte {
			x.UInt(0xf3f25f76)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionContactSignUp, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionContactSignUp, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionContactSignUp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionContactSignUp) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xf3f25f76: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionContactSignUp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionGeoProximityReached
func MakeTLMessageActionGeoProximityReached(data2 *MessageAction) *TLMessageActionGeoProximityReached {
	if data2 == nil {
		return &TLMessageActionGeoProximityReached{Data2: &MessageAction{
			PredicateName: Predicate_messageActionGeoProximityReached,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionGeoProximityReached
		return &TLMessageActionGeoProximityReached{Data2: data2}
	}
}

func (m *TLMessageActionGeoProximityReached) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionGeoProximityReached
	return m.Data2
}

func (m *TLMessageActionGeoProximityReached) SetFromId(v *Peer) { m.Data2.FromId = v }
func (m *TLMessageActionGeoProximityReached) GetFromId() *Peer  { return m.Data2.FromId }

func (m *TLMessageActionGeoProximityReached) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessageActionGeoProximityReached) GetToId() *Peer  { return m.Data2.ToId }

func (m *TLMessageActionGeoProximityReached) SetDistance(v int32) { m.Data2.Distance = v }
func (m *TLMessageActionGeoProximityReached) GetDistance() int32  { return m.Data2.Distance }

func (m *TLMessageActionGeoProximityReached) GetPredicateName() string {
	return Predicate_messageActionGeoProximityReached
}

func (m *TLMessageActionGeoProximityReached) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x98e0d697: func() []byte {
			x.UInt(0x98e0d697)

			x.Bytes(m.GetFromId().Encode(layer))
			x.Bytes(m.GetToId().Encode(layer))
			x.Int(m.GetDistance())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionGeoProximityReached, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionGeoProximityReached, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionGeoProximityReached) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionGeoProximityReached) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x98e0d697: func() error {

			m25 := &Peer{}
			m25.Decode(dBuf)
			m.SetFromId(m25)

			m26 := &Peer{}
			m26.Decode(dBuf)
			m.SetToId(m26)

			m.SetDistance(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionGeoProximityReached) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionGroupCall
func MakeTLMessageActionGroupCall(data2 *MessageAction) *TLMessageActionGroupCall {
	if data2 == nil {
		return &TLMessageActionGroupCall{Data2: &MessageAction{
			PredicateName: Predicate_messageActionGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionGroupCall
		return &TLMessageActionGroupCall{Data2: data2}
	}
}

func (m *TLMessageActionGroupCall) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionGroupCall
	return m.Data2
}

//// flags
func (m *TLMessageActionGroupCall) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLMessageActionGroupCall) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLMessageActionGroupCall) SetDuration(v *types.Int32Value) { m.Data2.Duration = v }
func (m *TLMessageActionGroupCall) GetDuration() *types.Int32Value  { return m.Data2.Duration }

func (m *TLMessageActionGroupCall) GetPredicateName() string {
	return Predicate_messageActionGroupCall
}

func (m *TLMessageActionGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x7a0d7f42: func() []byte {
			x.UInt(0x7a0d7f42)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetDuration() != nil {
					flags |= 1 << 0
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			x.Bytes(m.GetCall().Encode(layer))
			if m.GetDuration() != nil {
				x.Int(m.GetDuration().Value)
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x7a0d7f42: func() error {
			var flags = dBuf.UInt()
			_ = flags

			m28 := &InputGroupCall{}
			m28.Decode(dBuf)
			m.SetCall(m28)

			if (flags & (1 << 0)) != 0 {
				m.SetDuration(&types.Int32Value{Value: dBuf.Int()})
			}

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionInviteToGroupCall
func MakeTLMessageActionInviteToGroupCall(data2 *MessageAction) *TLMessageActionInviteToGroupCall {
	if data2 == nil {
		return &TLMessageActionInviteToGroupCall{Data2: &MessageAction{
			PredicateName: Predicate_messageActionInviteToGroupCall,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionInviteToGroupCall
		return &TLMessageActionInviteToGroupCall{Data2: data2}
	}
}

func (m *TLMessageActionInviteToGroupCall) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionInviteToGroupCall
	return m.Data2
}

func (m *TLMessageActionInviteToGroupCall) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLMessageActionInviteToGroupCall) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLMessageActionInviteToGroupCall) SetUsers(v []int64) { m.Data2.Users = v }
func (m *TLMessageActionInviteToGroupCall) GetUsers() []int64  { return m.Data2.Users }

func (m *TLMessageActionInviteToGroupCall) GetPredicateName() string {
	return Predicate_messageActionInviteToGroupCall
}

func (m *TLMessageActionInviteToGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x502f92f7: func() []byte {
			x.UInt(0x502f92f7)

			x.Bytes(m.GetCall().Encode(layer))

			x.VectorLong(m.GetUsers())

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionInviteToGroupCall, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionInviteToGroupCall, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionInviteToGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionInviteToGroupCall) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x502f92f7: func() error {

			m28 := &InputGroupCall{}
			m28.Decode(dBuf)
			m.SetCall(m28)

			m.SetUsers(dBuf.VectorLong())

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionInviteToGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionSetMessagesTTL
func MakeTLMessageActionSetMessagesTTL(data2 *MessageAction) *TLMessageActionSetMessagesTTL {
	if data2 == nil {
		return &TLMessageActionSetMessagesTTL{Data2: &MessageAction{
			PredicateName: Predicate_messageActionSetMessagesTTL,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionSetMessagesTTL
		return &TLMessageActionSetMessagesTTL{Data2: data2}
	}
}

func (m *TLMessageActionSetMessagesTTL) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionSetMessagesTTL
	return m.Data2
}

func (m *TLMessageActionSetMessagesTTL) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLMessageActionSetMessagesTTL) GetPeriod() int32  { return m.Data2.Period }

func (m *TLMessageActionSetMessagesTTL) GetPredicateName() string {
	return Predicate_messageActionSetMessagesTTL
}

func (m *TLMessageActionSetMessagesTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaa1afbfd: func() []byte {
			x.UInt(0xaa1afbfd)

			x.Int(m.GetPeriod())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionSetMessagesTTL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionSetMessagesTTL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionSetMessagesTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionSetMessagesTTL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaa1afbfd: func() error {
			m.SetPeriod(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionSetMessagesTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionGroupCallScheduled
func MakeTLMessageActionGroupCallScheduled(data2 *MessageAction) *TLMessageActionGroupCallScheduled {
	if data2 == nil {
		return &TLMessageActionGroupCallScheduled{Data2: &MessageAction{
			PredicateName: Predicate_messageActionGroupCallScheduled,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionGroupCallScheduled
		return &TLMessageActionGroupCallScheduled{Data2: data2}
	}
}

func (m *TLMessageActionGroupCallScheduled) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionGroupCallScheduled
	return m.Data2
}

func (m *TLMessageActionGroupCallScheduled) SetCall(v *InputGroupCall) { m.Data2.Call = v }
func (m *TLMessageActionGroupCallScheduled) GetCall() *InputGroupCall  { return m.Data2.Call }

func (m *TLMessageActionGroupCallScheduled) SetScheduleDate(v int32) { m.Data2.ScheduleDate = v }
func (m *TLMessageActionGroupCallScheduled) GetScheduleDate() int32  { return m.Data2.ScheduleDate }

func (m *TLMessageActionGroupCallScheduled) GetPredicateName() string {
	return Predicate_messageActionGroupCallScheduled
}

func (m *TLMessageActionGroupCallScheduled) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xb3a07661: func() []byte {
			x.UInt(0xb3a07661)

			x.Bytes(m.GetCall().Encode(layer))
			x.Int(m.GetScheduleDate())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionGroupCallScheduled, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionGroupCallScheduled, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionGroupCallScheduled) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionGroupCallScheduled) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xb3a07661: func() error {

			m28 := &InputGroupCall{}
			m28.Decode(dBuf)
			m.SetCall(m28)

			m.SetScheduleDate(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionGroupCallScheduled) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionSetChatTheme
func MakeTLMessageActionSetChatTheme(data2 *MessageAction) *TLMessageActionSetChatTheme {
	if data2 == nil {
		return &TLMessageActionSetChatTheme{Data2: &MessageAction{
			PredicateName: Predicate_messageActionSetChatTheme,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionSetChatTheme
		return &TLMessageActionSetChatTheme{Data2: data2}
	}
}

func (m *TLMessageActionSetChatTheme) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionSetChatTheme
	return m.Data2
}

func (m *TLMessageActionSetChatTheme) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLMessageActionSetChatTheme) GetEmoticon() string  { return m.Data2.Emoticon }

func (m *TLMessageActionSetChatTheme) GetPredicateName() string {
	return Predicate_messageActionSetChatTheme
}

func (m *TLMessageActionSetChatTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xaa786345: func() []byte {
			x.UInt(0xaa786345)

			x.String(m.GetEmoticon())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionSetChatTheme, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionSetChatTheme, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionSetChatTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionSetChatTheme) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xaa786345: func() error {
			m.SetEmoticon(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionSetChatTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionChatJoinedByRequest
func MakeTLMessageActionChatJoinedByRequest(data2 *MessageAction) *TLMessageActionChatJoinedByRequest {
	if data2 == nil {
		return &TLMessageActionChatJoinedByRequest{Data2: &MessageAction{
			PredicateName: Predicate_messageActionChatJoinedByRequest,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionChatJoinedByRequest
		return &TLMessageActionChatJoinedByRequest{Data2: data2}
	}
}

func (m *TLMessageActionChatJoinedByRequest) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionChatJoinedByRequest
	return m.Data2
}

func (m *TLMessageActionChatJoinedByRequest) GetPredicateName() string {
	return Predicate_messageActionChatJoinedByRequest
}

func (m *TLMessageActionChatJoinedByRequest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xebbca3cb: func() []byte {
			x.UInt(0xebbca3cb)

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionChatJoinedByRequest, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionChatJoinedByRequest, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionChatJoinedByRequest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionChatJoinedByRequest) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xebbca3cb: func() error {
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionChatJoinedByRequest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// MakeTLMessageActionBizDataRaw
func MakeTLMessageActionBizDataRaw(data2 *MessageAction) *TLMessageActionBizDataRaw {
	if data2 == nil {
		return &TLMessageActionBizDataRaw{Data2: &MessageAction{
			PredicateName: Predicate_messageActionBizDataRaw,
		}}
	} else {
		data2.PredicateName = Predicate_messageActionBizDataRaw
		return &TLMessageActionBizDataRaw{Data2: data2}
	}
}

func (m *TLMessageActionBizDataRaw) To_MessageAction() *MessageAction {
	m.Data2.PredicateName = Predicate_messageActionBizDataRaw
	return m.Data2
}

func (m *TLMessageActionBizDataRaw) SetBizData(v *BizDataRaw) { m.Data2.BizData = v }
func (m *TLMessageActionBizDataRaw) GetBizData() *BizDataRaw  { return m.Data2.BizData }

func (m *TLMessageActionBizDataRaw) GetPredicateName() string {
	return Predicate_messageActionBizDataRaw
}

func (m *TLMessageActionBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x2ffdf1b7: func() []byte {
			x.UInt(0x2ffdf1b7)

			x.Bytes(m.GetBizData().Encode(layer))
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_messageActionBizDataRaw, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_messageActionBizDataRaw, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLMessageActionBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessageActionBizDataRaw) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x2ffdf1b7: func() error {

			m32 := &BizDataRaw{}
			m32.Decode(dBuf)
			m.SetBizData(m32)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLMessageActionBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ImportedContact <--
//  + TL_ImportedContact
//

func (m *ImportedContact) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_importedContact:
		t := m.To_ImportedContact()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ImportedContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *ImportedContact) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xc13e3c50:
		m2 := MakeTLImportedContact(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ImportedContact) DebugString() string {
	switch m.PredicateName {
	case Predicate_importedContact:
		t := m.To_ImportedContact()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ImportedContact
func (m *ImportedContact) To_ImportedContact() *TLImportedContact {
	m.PredicateName = Predicate_importedContact
	return &TLImportedContact{
		Data2: m,
	}
}

// MakeTLImportedContact
func MakeTLImportedContact(data2 *ImportedContact) *TLImportedContact {
	if data2 == nil {
		return &TLImportedContact{Data2: &ImportedContact{
			PredicateName: Predicate_importedContact,
		}}
	} else {
		data2.PredicateName = Predicate_importedContact
		return &TLImportedContact{Data2: data2}
	}
}

func (m *TLImportedContact) To_ImportedContact() *ImportedContact {
	m.Data2.PredicateName = Predicate_importedContact
	return m.Data2
}

func (m *TLImportedContact) SetUserId(v int64) { m.Data2.UserId = v }
func (m *TLImportedContact) GetUserId() int64  { return m.Data2.UserId }

func (m *TLImportedContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLImportedContact) GetClientId() int64  { return m.Data2.ClientId }

func (m *TLImportedContact) GetPredicateName() string {
	return Predicate_importedContact
}

func (m *TLImportedContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xc13e3c50: func() []byte {
			x.UInt(0xc13e3c50)

			x.Long(m.GetUserId())
			x.Long(m.GetClientId())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_importedContact, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_importedContact, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLImportedContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLImportedContact) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xc13e3c50: func() error {
			m.SetUserId(dBuf.Long())
			m.SetClientId(dBuf.Long())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLImportedContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Contacts_ImportedContacts <--
//  + TL_ContactsImportedContacts
//

func (m *Contacts_ImportedContacts) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_contacts_importedContacts:
		t := m.To_ContactsImportedContacts()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Contacts_ImportedContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *Contacts_ImportedContacts) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x77d01c3b:
		m2 := MakeTLContactsImportedContacts(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Contacts_ImportedContacts) DebugString() string {
	switch m.PredicateName {
	case Predicate_contacts_importedContacts:
		t := m.To_ContactsImportedContacts()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ContactsImportedContacts
func (m *Contacts_ImportedContacts) To_ContactsImportedContacts() *TLContactsImportedContacts {
	m.PredicateName = Predicate_contacts_importedContacts
	return &TLContactsImportedContacts{
		Data2: m,
	}
}

// MakeTLContactsImportedContacts
func MakeTLContactsImportedContacts(data2 *Contacts_ImportedContacts) *TLContactsImportedContacts {
	if data2 == nil {
		return &TLContactsImportedContacts{Data2: &Contacts_ImportedContacts{
			PredicateName: Predicate_contacts_importedContacts,
		}}
	} else {
		data2.PredicateName = Predicate_contacts_importedContacts
		return &TLContactsImportedContacts{Data2: data2}
	}
}

func (m *TLContactsImportedContacts) To_Contacts_ImportedContacts() *Contacts_ImportedContacts {
	m.Data2.PredicateName = Predicate_contacts_importedContacts
	return m.Data2
}

func (m *TLContactsImportedContacts) SetImported(v []*ImportedContact) { m.Data2.Imported = v }
func (m *TLContactsImportedContacts) GetImported() []*ImportedContact  { return m.Data2.Imported }

func (m *TLContactsImportedContacts) SetPopularInvites(v []*PopularContact) {
	m.Data2.PopularInvites = v
}
func (m *TLContactsImportedContacts) GetPopularInvites() []*PopularContact {
	return m.Data2.PopularInvites
}

func (m *TLContactsImportedContacts) SetRetryContacts(v []int64) { m.Data2.RetryContacts = v }
func (m *TLContactsImportedContacts) GetRetryContacts() []int64  { return m.Data2.RetryContacts }

func (m *TLContactsImportedContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsImportedContacts) GetUsers() []*User  { return m.Data2.Users }

func (m *TLContactsImportedContacts) GetPredicateName() string {
	return Predicate_contacts_importedContacts
}

func (m *TLContactsImportedContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x77d01c3b: func() []byte {
			x.UInt(0x77d01c3b)

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetImported())))
			for _, v := range m.GetImported() {
				x.Bytes((*v).Encode(layer))
			}

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetPopularInvites())))
			for _, v := range m.GetPopularInvites() {
				x.Bytes((*v).Encode(layer))
			}

			x.VectorLong(m.GetRetryContacts())

			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetUsers())))
			for _, v := range m.GetUsers() {
				x.Bytes((*v).Encode(layer))
			}

			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_contacts_importedContacts, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_contacts_importedContacts, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLContactsImportedContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsImportedContacts) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x77d01c3b: func() error {
			c0 := dBuf.Int()
			if c0 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 0, c0)
				return dBuf.GetError()
			}
			l0 := dBuf.Int()
			v0 := make([]*ImportedContact, l0)
			for i := int32(0); i < l0; i++ {
				v0[i] = &ImportedContact{}
				v0[i].Decode(dBuf)
			}
			m.SetImported(v0)

			c1 := dBuf.Int()
			if c1 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
				return dBuf.GetError()
			}
			l1 := dBuf.Int()
			v1 := make([]*PopularContact, l1)
			for i := int32(0); i < l1; i++ {
				v1[i] = &PopularContact{}
				v1[i].Decode(dBuf)
			}
			m.SetPopularInvites(v1)

			m.SetRetryContacts(dBuf.VectorLong())

			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*User, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &User{}
				v3[i].Decode(dBuf)
			}
			m.SetUsers(v3)

			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLContactsImportedContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// Account_TmpPassword <--
//  + TL_AccountTmpPassword
//

func (m *Account_TmpPassword) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_account_tmpPassword:
		t := m.To_AccountTmpPassword()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *Account_TmpPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *Account_TmpPassword) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0xdb64fd34:
		m2 := MakeTLAccountTmpPassword(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *Account_TmpPassword) DebugString() string {
	switch m.PredicateName {
	case Predicate_account_tmpPassword:
		t := m.To_AccountTmpPassword()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_AccountTmpPassword
func (m *Account_TmpPassword) To_AccountTmpPassword() *TLAccountTmpPassword {
	m.PredicateName = Predicate_account_tmpPassword
	return &TLAccountTmpPassword{
		Data2: m,
	}
}

// MakeTLAccountTmpPassword
func MakeTLAccountTmpPassword(data2 *Account_TmpPassword) *TLAccountTmpPassword {
	if data2 == nil {
		return &TLAccountTmpPassword{Data2: &Account_TmpPassword{
			PredicateName: Predicate_account_tmpPassword,
		}}
	} else {
		data2.PredicateName = Predicate_account_tmpPassword
		return &TLAccountTmpPassword{Data2: data2}
	}
}

func (m *TLAccountTmpPassword) To_Account_TmpPassword() *Account_TmpPassword {
	m.Data2.PredicateName = Predicate_account_tmpPassword
	return m.Data2
}

func (m *TLAccountTmpPassword) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLAccountTmpPassword) GetTmpPassword() []byte  { return m.Data2.TmpPassword }

func (m *TLAccountTmpPassword) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLAccountTmpPassword) GetValidUntil() int32  { return m.Data2.ValidUntil }

func (m *TLAccountTmpPassword) GetPredicateName() string {
	return Predicate_account_tmpPassword
}

func (m *TLAccountTmpPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0xdb64fd34: func() []byte {
			x.UInt(0xdb64fd34)

			x.StringBytes(m.GetTmpPassword())
			x.Int(m.GetValidUntil())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_account_tmpPassword, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_account_tmpPassword, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLAccountTmpPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountTmpPassword) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0xdb64fd34: func() error {
			m.SetTmpPassword(dBuf.StringBytes())
			m.SetValidUntil(dBuf.Int())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLAccountTmpPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// StatsURL <--
//  + TL_StatsURL
//

func (m *StatsURL) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_statsURL:
		t := m.To_StatsURL()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *StatsURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *StatsURL) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x47a971e0:
		m2 := MakeTLStatsURL(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *StatsURL) DebugString() string {
	switch m.PredicateName {
	case Predicate_statsURL:
		t := m.To_StatsURL()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_StatsURL
func (m *StatsURL) To_StatsURL() *TLStatsURL {
	m.PredicateName = Predicate_statsURL
	return &TLStatsURL{
		Data2: m,
	}
}

// MakeTLStatsURL
func MakeTLStatsURL(data2 *StatsURL) *TLStatsURL {
	if data2 == nil {
		return &TLStatsURL{Data2: &StatsURL{
			PredicateName: Predicate_statsURL,
		}}
	} else {
		data2.PredicateName = Predicate_statsURL
		return &TLStatsURL{Data2: data2}
	}
}

func (m *TLStatsURL) To_StatsURL() *StatsURL {
	m.Data2.PredicateName = Predicate_statsURL
	return m.Data2
}

func (m *TLStatsURL) SetUrl(v string) { m.Data2.Url = v }
func (m *TLStatsURL) GetUrl() string  { return m.Data2.Url }

func (m *TLStatsURL) GetPredicateName() string {
	return Predicate_statsURL
}

func (m *TLStatsURL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x47a971e0: func() []byte {
			x.UInt(0x47a971e0)

			x.String(m.GetUrl())
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_statsURL, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_statsURL, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLStatsURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsURL) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x47a971e0: func() error {
			m.SetUrl(dBuf.String())
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLStatsURL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

///////////////////////////////////////////////////////////////////////////////
// ChatAdminRights <--
//  + TL_ChatAdminRights
//

func (m *ChatAdminRights) Encode(layer int32) []byte {
	predicateName := m.PredicateName
	if predicateName == "" {
		if n, ok := clazzIdNameRegisters2[int32(m.Constructor)]; ok {
			predicateName = n
		}
	}

	var (
		xBuf []byte
	)

	switch predicateName {
	case Predicate_chatAdminRights:
		t := m.To_ChatAdminRights()
		xBuf = t.Encode(layer)

	default:
		// err := fmt.Errorf("invalid predicate error: %s",  m.PredicateName)
		// log.Errorf(err.Error())
		return []byte{}
	}

	return xBuf
}

func (m *ChatAdminRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *ChatAdminRights) Decode(dBuf *DecodeBuf) error {
	m.Constructor = TLConstructor(dBuf.Int())
	switch uint32(m.Constructor) {
	case 0x5fb224d5:
		m2 := MakeTLChatAdminRights(m)
		m2.Decode(dBuf)

	default:
		return fmt.Errorf("invalid constructorId: 0x%x", uint32(m.Constructor))
	}
	return dBuf.GetError()
}

func (m *ChatAdminRights) DebugString() string {
	switch m.PredicateName {
	case Predicate_chatAdminRights:
		t := m.To_ChatAdminRights()
		return t.DebugString()

	default:
		jsonm := &jsonpb.Marshaler{OrigName: true}
		dbgString, _ := jsonm.MarshalToString(m)
		return dbgString
	}
}

// To_ChatAdminRights
func (m *ChatAdminRights) To_ChatAdminRights() *TLChatAdminRights {
	m.PredicateName = Predicate_chatAdminRights
	return &TLChatAdminRights{
		Data2: m,
	}
}

// MakeTLChatAdminRights
func MakeTLChatAdminRights(data2 *ChatAdminRights) *TLChatAdminRights {
	if data2 == nil {
		return &TLChatAdminRights{Data2: &ChatAdminRights{
			PredicateName: Predicate_chatAdminRights,
		}}
	} else {
		data2.PredicateName = Predicate_chatAdminRights
		return &TLChatAdminRights{Data2: data2}
	}
}

func (m *TLChatAdminRights) To_ChatAdminRights() *ChatAdminRights {
	m.Data2.PredicateName = Predicate_chatAdminRights
	return m.Data2
}

//// flags
func (m *TLChatAdminRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChatAdminRights) GetChangeInfo() bool  { return m.Data2.ChangeInfo }

func (m *TLChatAdminRights) SetPostMessages(v bool) { m.Data2.PostMessages = v }
func (m *TLChatAdminRights) GetPostMessages() bool  { return m.Data2.PostMessages }

func (m *TLChatAdminRights) SetEditMessages(v bool) { m.Data2.EditMessages = v }
func (m *TLChatAdminRights) GetEditMessages() bool  { return m.Data2.EditMessages }

func (m *TLChatAdminRights) SetDeleteMessages(v bool) { m.Data2.DeleteMessages = v }
func (m *TLChatAdminRights) GetDeleteMessages() bool  { return m.Data2.DeleteMessages }

func (m *TLChatAdminRights) SetBanUsers(v bool) { m.Data2.BanUsers = v }
func (m *TLChatAdminRights) GetBanUsers() bool  { return m.Data2.BanUsers }

func (m *TLChatAdminRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChatAdminRights) GetInviteUsers() bool  { return m.Data2.InviteUsers }

func (m *TLChatAdminRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChatAdminRights) GetPinMessages() bool  { return m.Data2.PinMessages }

func (m *TLChatAdminRights) SetAddAdmins(v bool) { m.Data2.AddAdmins = v }
func (m *TLChatAdminRights) GetAddAdmins() bool  { return m.Data2.AddAdmins }

func (m *TLChatAdminRights) SetAnonymous(v bool) { m.Data2.Anonymous = v }
func (m *TLChatAdminRights) GetAnonymous() bool  { return m.Data2.Anonymous }

func (m *TLChatAdminRights) SetManageCall(v bool) { m.Data2.ManageCall = v }
func (m *TLChatAdminRights) GetManageCall() bool  { return m.Data2.ManageCall }

func (m *TLChatAdminRights) SetOther(v bool) { m.Data2.Other = v }
func (m *TLChatAdminRights) GetOther() bool  { return m.Data2.Other }

func (m *TLChatAdminRights) GetPredicateName() string {
	return Predicate_chatAdminRights
}

func (m *TLChatAdminRights) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)

	var encodeF = map[uint32]func() []byte{
		0x5fb224d5: func() []byte {
			x.UInt(0x5fb224d5)

			// set flags
			var getFlags = func() uint32 {
				var flags uint32 = 0

				if m.GetChangeInfo() == true {
					flags |= 1 << 0
				}
				if m.GetPostMessages() == true {
					flags |= 1 << 1
				}
				if m.GetEditMessages() == true {
					flags |= 1 << 2
				}
				if m.GetDeleteMessages() == true {
					flags |= 1 << 3
				}
				if m.GetBanUsers() == true {
					flags |= 1 << 4
				}
				if m.GetInviteUsers() == true {
					flags |= 1 << 5
				}
				if m.GetPinMessages() == true {
					flags |= 1 << 7
				}
				if m.GetAddAdmins() == true {
					flags |= 1 << 9
				}
				if m.GetAnonymous() == true {
					flags |= 1 << 10
				}
				if m.GetManageCall() == true {
					flags |= 1 << 11
				}
				if m.GetOther() == true {
					flags |= 1 << 12
				}

				return flags
			}

			// set flags
			var flags = getFlags()
			x.UInt(flags)
			return x.GetBuf()
		},
	}

	clazzId := GetClazzID(Predicate_chatAdminRights, int(layer))
	if f, ok := encodeF[uint32(clazzId)]; ok {
		return f()
	} else {
		// TODO(@benqi): handle error
		// log.Errorf("not found clazzId by (%s, %d)", Predicate_chatAdminRights, layer)
		return x.GetBuf()
	}

	return x.GetBuf()
}

func (m *TLChatAdminRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChatAdminRights) Decode(dBuf *DecodeBuf) error {
	var decodeF = map[uint32]func() error{
		0x5fb224d5: func() error {
			var flags = dBuf.UInt()
			_ = flags
			if (flags & (1 << 0)) != 0 {
				m.SetChangeInfo(true)
			}
			if (flags & (1 << 1)) != 0 {
				m.SetPostMessages(true)
			}
			if (flags & (1 << 2)) != 0 {
				m.SetEditMessages(true)
			}
			if (flags & (1 << 3)) != 0 {
				m.SetDeleteMessages(true)
			}
			if (flags & (1 << 4)) != 0 {
				m.SetBanUsers(true)
			}
			if (flags & (1 << 5)) != 0 {
				m.SetInviteUsers(true)
			}
			if (flags & (1 << 7)) != 0 {
				m.SetPinMessages(true)
			}
			if (flags & (1 << 9)) != 0 {
				m.SetAddAdmins(true)
			}
			if (flags & (1 << 10)) != 0 {
				m.SetAnonymous(true)
			}
			if (flags & (1 << 11)) != 0 {
				m.SetManageCall(true)
			}
			if (flags & (1 << 12)) != 0 {
				m.SetOther(true)
			}
			return dBuf.GetError()
		},
	}

	if f, ok := decodeF[uint32(m.Data2.Constructor)]; ok {
		return f()
	} else {
		return fmt.Errorf("invalid constructor: %x", uint32(m.Data2.Constructor))
	}
}

func (m *TLChatAdminRights) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

//----------------------------------------------------------------------------------------------------------------
// TLReqPq
///////////////////////////////////////////////////////////////////////////////
func (m *TLReqPq) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_req_pq))

	switch uint32(m.Constructor) {
	case 0x60469778:
		x.UInt(0x60469778)

		// no flags

		x.Bytes(m.GetNonce())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLReqPq) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReqPq) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x60469778:

		// not has flags

		m.Nonce = dBuf.Bytes(16)
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLReqPq) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLReqPqMulti
///////////////////////////////////////////////////////////////////////////////
func (m *TLReqPqMulti) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_req_pq_multi))

	switch uint32(m.Constructor) {
	case 0xbe7e8ef1:
		x.UInt(0xbe7e8ef1)

		// no flags

		x.Bytes(m.GetNonce())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLReqPqMulti) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReqPqMulti) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbe7e8ef1:

		// not has flags

		m.Nonce = dBuf.Bytes(16)
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLReqPqMulti) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLReq_DHParams
///////////////////////////////////////////////////////////////////////////////
func (m *TLReq_DHParams) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_req_DH_params))

	switch uint32(m.Constructor) {
	case 0xd712e4be:
		x.UInt(0xd712e4be)

		// no flags

		x.Bytes(m.GetNonce())
		x.Bytes(m.GetServerNonce())
		x.String(m.GetP())
		x.String(m.GetQ())
		x.Long(m.GetPublicKeyFingerprint())
		x.String(m.GetEncryptedData())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLReq_DHParams) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLReq_DHParams) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd712e4be:

		// not has flags

		m.Nonce = dBuf.Bytes(16)
		m.ServerNonce = dBuf.Bytes(16)
		m.P = dBuf.String()
		m.Q = dBuf.String()
		m.PublicKeyFingerprint = dBuf.Long()
		m.EncryptedData = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLReq_DHParams) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLSetClient_DHParams
///////////////////////////////////////////////////////////////////////////////
func (m *TLSetClient_DHParams) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_set_client_DH_params))

	switch uint32(m.Constructor) {
	case 0xf5045f1f:
		x.UInt(0xf5045f1f)

		// no flags

		x.Bytes(m.GetNonce())
		x.Bytes(m.GetServerNonce())
		x.String(m.GetEncryptedData())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLSetClient_DHParams) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLSetClient_DHParams) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf5045f1f:

		// not has flags

		m.Nonce = dBuf.Bytes(16)
		m.ServerNonce = dBuf.Bytes(16)
		m.EncryptedData = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLSetClient_DHParams) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLDestroyAuthKey
///////////////////////////////////////////////////////////////////////////////
func (m *TLDestroyAuthKey) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_destroy_auth_key))

	switch uint32(m.Constructor) {
	case 0xd1435160:
		x.UInt(0xd1435160)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLDestroyAuthKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroyAuthKey) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd1435160:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLDestroyAuthKey) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLRpcDropAnswer
///////////////////////////////////////////////////////////////////////////////
func (m *TLRpcDropAnswer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_rpc_drop_answer))

	switch uint32(m.Constructor) {
	case 0x58e4a740:
		x.UInt(0x58e4a740)

		// no flags

		x.Long(m.GetReqMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLRpcDropAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLRpcDropAnswer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x58e4a740:

		// not has flags

		m.ReqMsgId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLRpcDropAnswer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLGetFutureSalts
///////////////////////////////////////////////////////////////////////////////
func (m *TLGetFutureSalts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_get_future_salts))

	switch uint32(m.Constructor) {
	case 0xb921bd04:
		x.UInt(0xb921bd04)

		// no flags

		x.Int(m.GetNum())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLGetFutureSalts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLGetFutureSalts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb921bd04:

		// not has flags

		m.Num = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLGetFutureSalts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPing
///////////////////////////////////////////////////////////////////////////////
func (m *TLPing) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_ping))

	switch uint32(m.Constructor) {
	case 0x7abe77ec:
		x.UInt(0x7abe77ec)

		// no flags

		x.Long(m.GetPingId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPing) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPing) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7abe77ec:

		// not has flags

		m.PingId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPing) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPingDelayDisconnect
///////////////////////////////////////////////////////////////////////////////
func (m *TLPingDelayDisconnect) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_ping_delay_disconnect))

	switch uint32(m.Constructor) {
	case 0xf3427b8c:
		x.UInt(0xf3427b8c)

		// no flags

		x.Long(m.GetPingId())
		x.Int(m.GetDisconnectDelay())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPingDelayDisconnect) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPingDelayDisconnect) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf3427b8c:

		// not has flags

		m.PingId = dBuf.Long()
		m.DisconnectDelay = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPingDelayDisconnect) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLDestroySession
///////////////////////////////////////////////////////////////////////////////
func (m *TLDestroySession) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_destroy_session))

	switch uint32(m.Constructor) {
	case 0xe7512126:
		x.UInt(0xe7512126)

		// no flags

		x.Long(m.GetSessionId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLDestroySession) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLDestroySession) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe7512126:

		// not has flags

		m.SessionId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLDestroySession) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLTestUseError
///////////////////////////////////////////////////////////////////////////////
func (m *TLTestUseError) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_test_useError))

	switch uint32(m.Constructor) {
	case 0xee75af01:
		x.UInt(0xee75af01)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLTestUseError) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTestUseError) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xee75af01:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLTestUseError) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLTestUseConfigSimple
///////////////////////////////////////////////////////////////////////////////
func (m *TLTestUseConfigSimple) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_test_useConfigSimple))

	switch uint32(m.Constructor) {
	case 0xf9b7b23d:
		x.UInt(0xf9b7b23d)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLTestUseConfigSimple) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLTestUseConfigSimple) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf9b7b23d:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLTestUseConfigSimple) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeAfterMsg
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeAfterMsg) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeAfterMsg))

	switch uint32(m.Constructor) {
	case 0xcb9f372d:
		x.UInt(0xcb9f372d)

		// no flags

		x.Long(m.GetMsgId())
		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeAfterMsg) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeAfterMsg) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcb9f372d:

		// not has flags

		m.MsgId = dBuf.Long()
		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeAfterMsg) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeAfterMsgs
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeAfterMsgs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeAfterMsgs))

	switch uint32(m.Constructor) {
	case 0x3dc4b4f0:
		x.UInt(0x3dc4b4f0)

		// no flags

		x.VectorLong(m.GetMsgIds())

		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeAfterMsgs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeAfterMsgs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3dc4b4f0:

		// not has flags

		m.MsgIds = dBuf.VectorLong()

		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeAfterMsgs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInitConnection
///////////////////////////////////////////////////////////////////////////////
func (m *TLInitConnection) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_initConnection))

	switch uint32(m.Constructor) {
	case 0xc1cd5ea9:
		x.UInt(0xc1cd5ea9)

		// set flags
		var flags uint32 = 0

		if m.GetProxy() != nil {
			flags |= 1 << 0
		}
		if m.GetParams() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetApiId())
		x.String(m.GetDeviceModel())
		x.String(m.GetSystemVersion())
		x.String(m.GetAppVersion())
		x.String(m.GetSystemLangCode())
		x.String(m.GetLangPack())
		x.String(m.GetLangCode())
		if m.GetProxy() != nil {
			x.Bytes(m.GetProxy().Encode(layer))
		}

		if m.GetParams() != nil {
			x.Bytes(m.GetParams().Encode(layer))
		}

		x.Bytes(m.GetQuery())

	case 0x785188b8:
		x.UInt(0x785188b8)

		// set flags
		var flags uint32 = 0

		if m.GetProxy() != nil {
			flags |= 1 << 0
		}
		if m.GetParams() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetApiId())
		x.String(m.GetDeviceModel())
		x.String(m.GetSystemVersion())
		x.String(m.GetAppVersion())
		x.String(m.GetSystemLangCode())
		x.String(m.GetLangPack())
		x.String(m.GetLangCode())
		if m.GetProxy() != nil {
			x.Bytes(m.GetProxy().Encode(layer))
		}

		if m.GetParams() != nil {
			x.Bytes(m.GetParams().Encode(layer))
		}

		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInitConnection) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInitConnection) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc1cd5ea9:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.ApiId = dBuf.Int()
		m.DeviceModel = dBuf.String()
		m.SystemVersion = dBuf.String()
		m.AppVersion = dBuf.String()
		m.SystemLangCode = dBuf.String()
		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m9 := &InputClientProxy{}
			m9.Decode(dBuf)
			m.Proxy = m9
		}
		if (flags & (1 << 1)) != 0 {
			m10 := &JSONValue{}
			m10.Decode(dBuf)
			m.Params = m10
		}
		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()
	case 0x785188b8:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.ApiId = dBuf.Int()
		m.DeviceModel = dBuf.String()
		m.SystemVersion = dBuf.String()
		m.AppVersion = dBuf.String()
		m.SystemLangCode = dBuf.String()
		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m9 := &InputClientProxy{}
			m9.Decode(dBuf)
			m.Proxy = m9
		}
		if (flags & (1 << 1)) != 0 {
			m10 := &JSONValue{}
			m10.Decode(dBuf)
			m.Params = m10
		}
		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInitConnection) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeWithLayer
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeWithLayer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeWithLayer))

	switch uint32(m.Constructor) {
	case 0xda9b0d0d:
		x.UInt(0xda9b0d0d)

		// no flags

		x.Int(m.GetLayer())
		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeWithLayer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeWithLayer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xda9b0d0d:

		// not has flags

		m.Layer = dBuf.Int()
		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeWithLayer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeWithoutUpdates
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeWithoutUpdates) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeWithoutUpdates))

	switch uint32(m.Constructor) {
	case 0xbf9459b7:
		x.UInt(0xbf9459b7)

		// no flags

		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeWithoutUpdates) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeWithoutUpdates) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbf9459b7:

		// not has flags

		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeWithoutUpdates) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeWithMessagesRange
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeWithMessagesRange) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeWithMessagesRange))

	switch uint32(m.Constructor) {
	case 0x365275f2:
		x.UInt(0x365275f2)

		// no flags

		x.Bytes(m.GetRange().Encode(layer))
		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeWithMessagesRange) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeWithMessagesRange) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x365275f2:

		// not has flags

		m1 := &MessageRange{}
		m1.Decode(dBuf)
		m.Range = m1

		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeWithMessagesRange) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLInvokeWithTakeout
///////////////////////////////////////////////////////////////////////////////
func (m *TLInvokeWithTakeout) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_invokeWithTakeout))

	switch uint32(m.Constructor) {
	case 0xaca9fd2e:
		x.UInt(0xaca9fd2e)

		// no flags

		x.Long(m.GetTakeoutId())
		x.Bytes(m.GetQuery())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLInvokeWithTakeout) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLInvokeWithTakeout) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xaca9fd2e:

		// not has flags

		m.TakeoutId = dBuf.Long()
		m.Query = dBuf.Bytes(dBuf.GetSize() - dBuf.GetOffset())
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLInvokeWithTakeout) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthSendCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthSendCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_sendCode))

	switch uint32(m.Constructor) {
	case 0xa677244f:
		x.UInt(0xa677244f)

		// no flags

		x.String(m.GetPhoneNumber())
		x.Int(m.GetApiId())
		x.String(m.GetApiHash())
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthSendCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSendCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa677244f:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.ApiId = dBuf.Int()
		m.ApiHash = dBuf.String()

		m4 := &CodeSettings{}
		m4.Decode(dBuf)
		m.Settings = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthSendCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthSignUp
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthSignUp) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_signUp))

	switch uint32(m.Constructor) {
	case 0x80eee427:
		x.UInt(0x80eee427)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())
		x.String(m.GetFirstName())
		x.String(m.GetLastName())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthSignUp) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSignUp) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x80eee427:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		m.FirstName = dBuf.String()
		m.LastName = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthSignUp) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthSignIn
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthSignIn) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_signIn))

	switch uint32(m.Constructor) {
	case 0xbcd51581:
		x.UInt(0xbcd51581)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())
		x.String(m.GetPhoneCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthSignIn) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthSignIn) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbcd51581:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		m.PhoneCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthSignIn) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthLogOut3E72BA19
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthLogOut3E72BA19) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_logOut3E72BA19))

	switch uint32(m.Constructor) {
	case 0x3e72ba19:
		x.UInt(0x3e72ba19)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthLogOut3E72BA19) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLogOut3E72BA19) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3e72ba19:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthLogOut3E72BA19) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthResetAuthorizations
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthResetAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_resetAuthorizations))

	switch uint32(m.Constructor) {
	case 0x9fab0d1a:
		x.UInt(0x9fab0d1a)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthResetAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthResetAuthorizations) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9fab0d1a:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthResetAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthExportAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthExportAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_exportAuthorization))

	switch uint32(m.Constructor) {
	case 0xe5bfffcd:
		x.UInt(0xe5bfffcd)

		// no flags

		x.Int(m.GetDcId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthExportAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthExportAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe5bfffcd:

		// not has flags

		m.DcId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthExportAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthImportAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthImportAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_importAuthorization))

	switch uint32(m.Constructor) {
	case 0xa57a7dad:
		x.UInt(0xa57a7dad)

		// no flags

		x.Long(m.GetId())
		x.StringBytes(m.GetBytes())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthImportAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthImportAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa57a7dad:

		// not has flags

		m.Id = dBuf.Long()
		m.Bytes = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthImportAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthBindTempAuthKey
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthBindTempAuthKey) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_bindTempAuthKey))

	switch uint32(m.Constructor) {
	case 0xcdd42a05:
		x.UInt(0xcdd42a05)

		// no flags

		x.Long(m.GetPermAuthKeyId())
		x.Long(m.GetNonce())
		x.Int(m.GetExpiresAt())
		x.StringBytes(m.GetEncryptedMessage())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthBindTempAuthKey) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthBindTempAuthKey) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcdd42a05:

		// not has flags

		m.PermAuthKeyId = dBuf.Long()
		m.Nonce = dBuf.Long()
		m.ExpiresAt = dBuf.Int()
		m.EncryptedMessage = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthBindTempAuthKey) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthImportBotAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthImportBotAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_importBotAuthorization))

	switch uint32(m.Constructor) {
	case 0x67a3ff2c:
		x.UInt(0x67a3ff2c)

		// no flags

		x.Int(m.GetFlags())
		x.Int(m.GetApiId())
		x.String(m.GetApiHash())
		x.String(m.GetBotAuthToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthImportBotAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthImportBotAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x67a3ff2c:

		// not has flags

		m.Flags = dBuf.Int()
		m.ApiId = dBuf.Int()
		m.ApiHash = dBuf.String()
		m.BotAuthToken = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthImportBotAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthCheckPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthCheckPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_checkPassword))

	switch uint32(m.Constructor) {
	case 0xd18b4d16:
		x.UInt(0xd18b4d16)

		// no flags

		x.Bytes(m.GetPassword().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthCheckPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCheckPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd18b4d16:

		// not has flags

		m1 := &InputCheckPasswordSRP{}
		m1.Decode(dBuf)
		m.Password = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthCheckPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthRequestPasswordRecovery
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthRequestPasswordRecovery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_requestPasswordRecovery))

	switch uint32(m.Constructor) {
	case 0xd897bc66:
		x.UInt(0xd897bc66)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthRequestPasswordRecovery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthRequestPasswordRecovery) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd897bc66:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthRequestPasswordRecovery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthRecoverPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthRecoverPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_recoverPassword))

	switch uint32(m.Constructor) {
	case 0x37096c70:
		x.UInt(0x37096c70)

		// set flags
		var flags uint32 = 0

		if m.GetNewSettings() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetCode())
		if m.GetNewSettings() != nil {
			x.Bytes(m.GetNewSettings().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthRecoverPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthRecoverPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x37096c70:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Code = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m3 := &Account_PasswordInputSettings{}
			m3.Decode(dBuf)
			m.NewSettings = m3
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthRecoverPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthResendCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthResendCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_resendCode))

	switch uint32(m.Constructor) {
	case 0x3ef1a9bf:
		x.UInt(0x3ef1a9bf)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthResendCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthResendCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3ef1a9bf:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthResendCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthCancelCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthCancelCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_cancelCode))

	switch uint32(m.Constructor) {
	case 0x1f040578:
		x.UInt(0x1f040578)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthCancelCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCancelCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1f040578:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthCancelCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthDropTempAuthKeys
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthDropTempAuthKeys) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_dropTempAuthKeys))

	switch uint32(m.Constructor) {
	case 0x8e48a188:
		x.UInt(0x8e48a188)

		// no flags

		x.VectorLong(m.GetExceptAuthKeys())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthDropTempAuthKeys) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthDropTempAuthKeys) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8e48a188:

		// not has flags

		m.ExceptAuthKeys = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthDropTempAuthKeys) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthExportLoginToken
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthExportLoginToken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_exportLoginToken))

	switch uint32(m.Constructor) {
	case 0xb7e085fe:
		x.UInt(0xb7e085fe)

		// no flags

		x.Int(m.GetApiId())
		x.String(m.GetApiHash())

		x.VectorLong(m.GetExceptIds())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthExportLoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthExportLoginToken) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb7e085fe:

		// not has flags

		m.ApiId = dBuf.Int()
		m.ApiHash = dBuf.String()

		m.ExceptIds = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthExportLoginToken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthImportLoginToken
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthImportLoginToken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_importLoginToken))

	switch uint32(m.Constructor) {
	case 0x95ac5ce4:
		x.UInt(0x95ac5ce4)

		// no flags

		x.StringBytes(m.GetToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthImportLoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthImportLoginToken) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x95ac5ce4:

		// not has flags

		m.Token = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthImportLoginToken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthAcceptLoginToken
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthAcceptLoginToken) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_acceptLoginToken))

	switch uint32(m.Constructor) {
	case 0xe894ad4d:
		x.UInt(0xe894ad4d)

		// no flags

		x.StringBytes(m.GetToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthAcceptLoginToken) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthAcceptLoginToken) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe894ad4d:

		// not has flags

		m.Token = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthAcceptLoginToken) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthCheckRecoveryPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthCheckRecoveryPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_checkRecoveryPassword))

	switch uint32(m.Constructor) {
	case 0xd36bf79:
		x.UInt(0xd36bf79)

		// no flags

		x.String(m.GetCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthCheckRecoveryPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthCheckRecoveryPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd36bf79:

		// not has flags

		m.Code = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthCheckRecoveryPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountRegisterDevice
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountRegisterDevice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_registerDevice))

	switch uint32(m.Constructor) {
	case 0xec86017a:
		x.UInt(0xec86017a)

		// set flags
		var flags uint32 = 0

		if m.GetNoMuted() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetTokenType())
		x.String(m.GetToken())
		x.Bytes(m.GetAppSandbox().Encode(layer))
		x.StringBytes(m.GetSecret())

		x.VectorLong(m.GetOtherUids())

	case 0x637ea878:
		x.UInt(0x637ea878)

		// no flags

		x.Int(m.GetTokenType())
		x.String(m.GetToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountRegisterDevice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountRegisterDevice) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xec86017a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.NoMuted = true
		}
		m.TokenType = dBuf.Int()
		m.Token = dBuf.String()

		m5 := &Bool{}
		m5.Decode(dBuf)
		m.AppSandbox = m5

		m.Secret = dBuf.StringBytes()

		m.OtherUids = dBuf.VectorLong()

		return dBuf.GetError()
	case 0x637ea878:

		// not has flags

		m.TokenType = dBuf.Int()
		m.Token = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountRegisterDevice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUnregisterDevice
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUnregisterDevice) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_unregisterDevice))

	switch uint32(m.Constructor) {
	case 0x6a0d3206:
		x.UInt(0x6a0d3206)

		// no flags

		x.Int(m.GetTokenType())
		x.String(m.GetToken())

		x.VectorLong(m.GetOtherUids())

	case 0x65c55b40:
		x.UInt(0x65c55b40)

		// no flags

		x.Int(m.GetTokenType())
		x.String(m.GetToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUnregisterDevice) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUnregisterDevice) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6a0d3206:

		// not has flags

		m.TokenType = dBuf.Int()
		m.Token = dBuf.String()

		m.OtherUids = dBuf.VectorLong()

		return dBuf.GetError()
	case 0x65c55b40:

		// not has flags

		m.TokenType = dBuf.Int()
		m.Token = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUnregisterDevice) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateNotifySettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateNotifySettings))

	switch uint32(m.Constructor) {
	case 0x84be5b93:
		x.UInt(0x84be5b93)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateNotifySettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x84be5b93:

		// not has flags

		m1 := &InputNotifyPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputPeerNotifySettings{}
		m2.Decode(dBuf)
		m.Settings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetNotifySettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getNotifySettings))

	switch uint32(m.Constructor) {
	case 0x12b3ad31:
		x.UInt(0x12b3ad31)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetNotifySettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x12b3ad31:

		// not has flags

		m1 := &InputNotifyPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetNotifySettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetNotifySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetNotifySettings))

	switch uint32(m.Constructor) {
	case 0xdb7e1747:
		x.UInt(0xdb7e1747)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetNotifySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetNotifySettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdb7e1747:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetNotifySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateProfile
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateProfile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateProfile))

	switch uint32(m.Constructor) {
	case 0x78515775:
		x.UInt(0x78515775)

		// set flags
		var flags uint32 = 0

		if m.GetFirstName() != nil {
			flags |= 1 << 0
		}
		if m.GetLastName() != nil {
			flags |= 1 << 1
		}
		if m.GetAbout() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFirstName() != nil {
			x.String(m.GetFirstName().Value)
		}

		if m.GetLastName() != nil {
			x.String(m.GetLastName().Value)
		}

		if m.GetAbout() != nil {
			x.String(m.GetAbout().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateProfile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateProfile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x78515775:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.FirstName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.LastName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.About = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateProfile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateStatus
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateStatus) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateStatus))

	switch uint32(m.Constructor) {
	case 0x6628562c:
		x.UInt(0x6628562c)

		// no flags

		x.Bytes(m.GetOffline().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateStatus) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6628562c:

		// not has flags

		m1 := &Bool{}
		m1.Decode(dBuf)
		m.Offline = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateStatus) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetWallPapers
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetWallPapers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getWallPapers))

	switch uint32(m.Constructor) {
	case 0x7967d36:
		x.UInt(0x7967d36)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetWallPapers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetWallPapers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7967d36:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetWallPapers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountReportPeer
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountReportPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_reportPeer))

	switch uint32(m.Constructor) {
	case 0xc5ba3d86:
		x.UInt(0xc5ba3d86)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetReason().Encode(layer))
		x.String(m.GetMessage())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountReportPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountReportPeer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc5ba3d86:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &ReportReason{}
		m2.Decode(dBuf)
		m.Reason = m2

		m.Message = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountReportPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountCheckUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountCheckUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_checkUsername))

	switch uint32(m.Constructor) {
	case 0x2714d86c:
		x.UInt(0x2714d86c)

		// no flags

		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountCheckUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountCheckUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2714d86c:

		// not has flags

		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountCheckUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateUsername))

	switch uint32(m.Constructor) {
	case 0x3e0bdd7c:
		x.UInt(0x3e0bdd7c)

		// no flags

		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3e0bdd7c:

		// not has flags

		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetPrivacy
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetPrivacy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getPrivacy))

	switch uint32(m.Constructor) {
	case 0xdadbc950:
		x.UInt(0xdadbc950)

		// no flags

		x.Bytes(m.GetKey().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetPrivacy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetPrivacy) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdadbc950:

		// not has flags

		m1 := &InputPrivacyKey{}
		m1.Decode(dBuf)
		m.Key = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetPrivacy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetPrivacy
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetPrivacy) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setPrivacy))

	switch uint32(m.Constructor) {
	case 0xc9f81ce8:
		x.UInt(0xc9f81ce8)

		// no flags

		x.Bytes(m.GetKey().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetRules())))
		for _, v := range m.GetRules() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetPrivacy) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetPrivacy) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc9f81ce8:

		// not has flags

		m1 := &InputPrivacyKey{}
		m1.Decode(dBuf)
		m.Key = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*InputPrivacyRule, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &InputPrivacyRule{}
			v2[i].Decode(dBuf)
		}
		m.Rules = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetPrivacy) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountDeleteAccount
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountDeleteAccount) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_deleteAccount))

	switch uint32(m.Constructor) {
	case 0x418d4e0b:
		x.UInt(0x418d4e0b)

		// no flags

		x.String(m.GetReason())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountDeleteAccount) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountDeleteAccount) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x418d4e0b:

		// not has flags

		m.Reason = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountDeleteAccount) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetAccountTTL
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetAccountTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getAccountTTL))

	switch uint32(m.Constructor) {
	case 0x8fc711d:
		x.UInt(0x8fc711d)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetAccountTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetAccountTTL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8fc711d:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetAccountTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetAccountTTL
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetAccountTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setAccountTTL))

	switch uint32(m.Constructor) {
	case 0x2442485e:
		x.UInt(0x2442485e)

		// no flags

		x.Bytes(m.GetTtl().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetAccountTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetAccountTTL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2442485e:

		// not has flags

		m1 := &AccountDaysTTL{}
		m1.Decode(dBuf)
		m.Ttl = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetAccountTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSendChangePhoneCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSendChangePhoneCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_sendChangePhoneCode))

	switch uint32(m.Constructor) {
	case 0x82574ae5:
		x.UInt(0x82574ae5)

		// no flags

		x.String(m.GetPhoneNumber())
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSendChangePhoneCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSendChangePhoneCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x82574ae5:

		// not has flags

		m.PhoneNumber = dBuf.String()

		m2 := &CodeSettings{}
		m2.Decode(dBuf)
		m.Settings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSendChangePhoneCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountChangePhone
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountChangePhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_changePhone))

	switch uint32(m.Constructor) {
	case 0x70c32edb:
		x.UInt(0x70c32edb)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())
		x.String(m.GetPhoneCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountChangePhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountChangePhone) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x70c32edb:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		m.PhoneCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountChangePhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateDeviceLocked
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateDeviceLocked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateDeviceLocked))

	switch uint32(m.Constructor) {
	case 0x38df3532:
		x.UInt(0x38df3532)

		// no flags

		x.Int(m.GetPeriod())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateDeviceLocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateDeviceLocked) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x38df3532:

		// not has flags

		m.Period = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateDeviceLocked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetAuthorizations
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getAuthorizations))

	switch uint32(m.Constructor) {
	case 0xe320c158:
		x.UInt(0xe320c158)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetAuthorizations) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe320c158:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetAuthorization))

	switch uint32(m.Constructor) {
	case 0xdf77f3bc:
		x.UInt(0xdf77f3bc)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdf77f3bc:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getPassword))

	switch uint32(m.Constructor) {
	case 0x548a30f5:
		x.UInt(0x548a30f5)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x548a30f5:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetPasswordSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetPasswordSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getPasswordSettings))

	switch uint32(m.Constructor) {
	case 0x9cd4eaf9:
		x.UInt(0x9cd4eaf9)

		// no flags

		x.Bytes(m.GetPassword().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetPasswordSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetPasswordSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9cd4eaf9:

		// not has flags

		m1 := &InputCheckPasswordSRP{}
		m1.Decode(dBuf)
		m.Password = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetPasswordSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdatePasswordSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdatePasswordSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updatePasswordSettings))

	switch uint32(m.Constructor) {
	case 0xa59b102f:
		x.UInt(0xa59b102f)

		// no flags

		x.Bytes(m.GetPassword().Encode(layer))
		x.Bytes(m.GetNewSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdatePasswordSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdatePasswordSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa59b102f:

		// not has flags

		m1 := &InputCheckPasswordSRP{}
		m1.Decode(dBuf)
		m.Password = m1

		m2 := &Account_PasswordInputSettings{}
		m2.Decode(dBuf)
		m.NewSettings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdatePasswordSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSendConfirmPhoneCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSendConfirmPhoneCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_sendConfirmPhoneCode))

	switch uint32(m.Constructor) {
	case 0x1b3faa88:
		x.UInt(0x1b3faa88)

		// no flags

		x.String(m.GetHash())
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSendConfirmPhoneCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSendConfirmPhoneCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1b3faa88:

		// not has flags

		m.Hash = dBuf.String()

		m2 := &CodeSettings{}
		m2.Decode(dBuf)
		m.Settings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSendConfirmPhoneCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountConfirmPhone
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountConfirmPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_confirmPhone))

	switch uint32(m.Constructor) {
	case 0x5f2178c3:
		x.UInt(0x5f2178c3)

		// no flags

		x.String(m.GetPhoneCodeHash())
		x.String(m.GetPhoneCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountConfirmPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountConfirmPhone) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5f2178c3:

		// not has flags

		m.PhoneCodeHash = dBuf.String()
		m.PhoneCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountConfirmPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetTmpPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetTmpPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getTmpPassword))

	switch uint32(m.Constructor) {
	case 0x449e0b51:
		x.UInt(0x449e0b51)

		// no flags

		x.Bytes(m.GetPassword().Encode(layer))
		x.Int(m.GetPeriod())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetTmpPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetTmpPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x449e0b51:

		// not has flags

		m1 := &InputCheckPasswordSRP{}
		m1.Decode(dBuf)
		m.Password = m1

		m.Period = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetTmpPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetWebAuthorizations
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetWebAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getWebAuthorizations))

	switch uint32(m.Constructor) {
	case 0x182e6d6f:
		x.UInt(0x182e6d6f)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetWebAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetWebAuthorizations) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x182e6d6f:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetWebAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetWebAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetWebAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetWebAuthorization))

	switch uint32(m.Constructor) {
	case 0x2d01b9ef:
		x.UInt(0x2d01b9ef)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetWebAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetWebAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2d01b9ef:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetWebAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetWebAuthorizations
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetWebAuthorizations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetWebAuthorizations))

	switch uint32(m.Constructor) {
	case 0x682d2594:
		x.UInt(0x682d2594)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetWebAuthorizations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetWebAuthorizations) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x682d2594:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetWebAuthorizations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetAllSecureValues
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetAllSecureValues) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getAllSecureValues))

	switch uint32(m.Constructor) {
	case 0xb288bc7d:
		x.UInt(0xb288bc7d)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetAllSecureValues) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetAllSecureValues) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb288bc7d:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetAllSecureValues) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetSecureValue
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetSecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getSecureValue))

	switch uint32(m.Constructor) {
	case 0x73665bc2:
		x.UInt(0x73665bc2)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetTypes())))
		for _, v := range m.GetTypes() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetSecureValue) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x73665bc2:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*SecureValueType, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &SecureValueType{}
			v1[i].Decode(dBuf)
		}
		m.Types = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetSecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSaveSecureValue
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSaveSecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_saveSecureValue))

	switch uint32(m.Constructor) {
	case 0x899fe31d:
		x.UInt(0x899fe31d)

		// no flags

		x.Bytes(m.GetValue().Encode(layer))
		x.Long(m.GetSecureSecretId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSaveSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSaveSecureValue) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x899fe31d:

		// not has flags

		m1 := &InputSecureValue{}
		m1.Decode(dBuf)
		m.Value = m1

		m.SecureSecretId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSaveSecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountDeleteSecureValue
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountDeleteSecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_deleteSecureValue))

	switch uint32(m.Constructor) {
	case 0xb880bc4b:
		x.UInt(0xb880bc4b)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetTypes())))
		for _, v := range m.GetTypes() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountDeleteSecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountDeleteSecureValue) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb880bc4b:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*SecureValueType, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &SecureValueType{}
			v1[i].Decode(dBuf)
		}
		m.Types = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountDeleteSecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetAuthorizationForm
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetAuthorizationForm) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getAuthorizationForm))

	switch uint32(m.Constructor) {
	case 0xa929597a:
		x.UInt(0xa929597a)

		// no flags

		x.Long(m.GetBotId())
		x.String(m.GetScope())
		x.String(m.GetPublicKey())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetAuthorizationForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetAuthorizationForm) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa929597a:

		// not has flags

		m.BotId = dBuf.Long()
		m.Scope = dBuf.String()
		m.PublicKey = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetAuthorizationForm) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountAcceptAuthorization
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountAcceptAuthorization) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_acceptAuthorization))

	switch uint32(m.Constructor) {
	case 0xf3ed4c73:
		x.UInt(0xf3ed4c73)

		// no flags

		x.Long(m.GetBotId())
		x.String(m.GetScope())
		x.String(m.GetPublicKey())

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetValueHashes())))
		for _, v := range m.GetValueHashes() {
			x.Bytes((*v).Encode(layer))
		}

		x.Bytes(m.GetCredentials().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountAcceptAuthorization) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountAcceptAuthorization) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf3ed4c73:

		// not has flags

		m.BotId = dBuf.Long()
		m.Scope = dBuf.String()
		m.PublicKey = dBuf.String()
		c4 := dBuf.Int()
		if c4 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
			return dBuf.GetError()
		}
		l4 := dBuf.Int()
		v4 := make([]*SecureValueHash, l4)
		for i := int32(0); i < l4; i++ {
			v4[i] = &SecureValueHash{}
			v4[i].Decode(dBuf)
		}
		m.ValueHashes = v4

		m5 := &SecureCredentialsEncrypted{}
		m5.Decode(dBuf)
		m.Credentials = m5

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountAcceptAuthorization) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSendVerifyPhoneCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSendVerifyPhoneCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_sendVerifyPhoneCode))

	switch uint32(m.Constructor) {
	case 0xa5a356f9:
		x.UInt(0xa5a356f9)

		// no flags

		x.String(m.GetPhoneNumber())
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSendVerifyPhoneCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSendVerifyPhoneCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa5a356f9:

		// not has flags

		m.PhoneNumber = dBuf.String()

		m2 := &CodeSettings{}
		m2.Decode(dBuf)
		m.Settings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSendVerifyPhoneCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountVerifyPhone
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountVerifyPhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_verifyPhone))

	switch uint32(m.Constructor) {
	case 0x4dd3a7f6:
		x.UInt(0x4dd3a7f6)

		// no flags

		x.String(m.GetPhoneNumber())
		x.String(m.GetPhoneCodeHash())
		x.String(m.GetPhoneCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountVerifyPhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountVerifyPhone) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4dd3a7f6:

		// not has flags

		m.PhoneNumber = dBuf.String()
		m.PhoneCodeHash = dBuf.String()
		m.PhoneCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountVerifyPhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSendVerifyEmailCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSendVerifyEmailCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_sendVerifyEmailCode))

	switch uint32(m.Constructor) {
	case 0x7011509f:
		x.UInt(0x7011509f)

		// no flags

		x.String(m.GetEmail())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSendVerifyEmailCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSendVerifyEmailCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7011509f:

		// not has flags

		m.Email = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSendVerifyEmailCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountVerifyEmail
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountVerifyEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_verifyEmail))

	switch uint32(m.Constructor) {
	case 0xecba39db:
		x.UInt(0xecba39db)

		// no flags

		x.String(m.GetEmail())
		x.String(m.GetCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountVerifyEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountVerifyEmail) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xecba39db:

		// not has flags

		m.Email = dBuf.String()
		m.Code = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountVerifyEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountInitTakeoutSession
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountInitTakeoutSession) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_initTakeoutSession))

	switch uint32(m.Constructor) {
	case 0xf05b4804:
		x.UInt(0xf05b4804)

		// set flags
		var flags uint32 = 0

		if m.GetContacts() == true {
			flags |= 1 << 0
		}
		if m.GetMessageUsers() == true {
			flags |= 1 << 1
		}
		if m.GetMessageChats() == true {
			flags |= 1 << 2
		}
		if m.GetMessageMegagroups() == true {
			flags |= 1 << 3
		}
		if m.GetMessageChannels() == true {
			flags |= 1 << 4
		}
		if m.GetFiles() == true {
			flags |= 1 << 5
		}
		if m.GetFileMaxSize() != nil {
			flags |= 1 << 5
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFileMaxSize() != nil {
			x.Int(m.GetFileMaxSize().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountInitTakeoutSession) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountInitTakeoutSession) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf05b4804:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Contacts = true
		}
		if (flags & (1 << 1)) != 0 {
			m.MessageUsers = true
		}
		if (flags & (1 << 2)) != 0 {
			m.MessageChats = true
		}
		if (flags & (1 << 3)) != 0 {
			m.MessageMegagroups = true
		}
		if (flags & (1 << 4)) != 0 {
			m.MessageChannels = true
		}
		if (flags & (1 << 5)) != 0 {
			m.Files = true
		}
		if (flags & (1 << 5)) != 0 {
			m.FileMaxSize = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountInitTakeoutSession) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountFinishTakeoutSession
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountFinishTakeoutSession) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_finishTakeoutSession))

	switch uint32(m.Constructor) {
	case 0x1d2652ee:
		x.UInt(0x1d2652ee)

		// set flags
		var flags uint32 = 0

		if m.GetSuccess() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountFinishTakeoutSession) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountFinishTakeoutSession) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1d2652ee:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Success = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountFinishTakeoutSession) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountConfirmPasswordEmail
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountConfirmPasswordEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_confirmPasswordEmail))

	switch uint32(m.Constructor) {
	case 0x8fdf1920:
		x.UInt(0x8fdf1920)

		// no flags

		x.String(m.GetCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountConfirmPasswordEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountConfirmPasswordEmail) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8fdf1920:

		// not has flags

		m.Code = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountConfirmPasswordEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResendPasswordEmail
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResendPasswordEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resendPasswordEmail))

	switch uint32(m.Constructor) {
	case 0x7a7f2a15:
		x.UInt(0x7a7f2a15)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResendPasswordEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResendPasswordEmail) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7a7f2a15:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResendPasswordEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountCancelPasswordEmail
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountCancelPasswordEmail) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_cancelPasswordEmail))

	switch uint32(m.Constructor) {
	case 0xc1cbd5b6:
		x.UInt(0xc1cbd5b6)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountCancelPasswordEmail) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountCancelPasswordEmail) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc1cbd5b6:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountCancelPasswordEmail) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetContactSignUpNotification
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetContactSignUpNotification) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getContactSignUpNotification))

	switch uint32(m.Constructor) {
	case 0x9f07c728:
		x.UInt(0x9f07c728)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetContactSignUpNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetContactSignUpNotification) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9f07c728:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetContactSignUpNotification) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetContactSignUpNotification
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetContactSignUpNotification) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setContactSignUpNotification))

	switch uint32(m.Constructor) {
	case 0xcff43f61:
		x.UInt(0xcff43f61)

		// no flags

		x.Bytes(m.GetSilent().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetContactSignUpNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetContactSignUpNotification) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcff43f61:

		// not has flags

		m1 := &Bool{}
		m1.Decode(dBuf)
		m.Silent = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetContactSignUpNotification) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetNotifyExceptions
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetNotifyExceptions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getNotifyExceptions))

	switch uint32(m.Constructor) {
	case 0x53577479:
		x.UInt(0x53577479)

		// set flags
		var flags uint32 = 0

		if m.GetCompareSound() == true {
			flags |= 1 << 1
		}
		if m.GetPeer() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetPeer() != nil {
			x.Bytes(m.GetPeer().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetNotifyExceptions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetNotifyExceptions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x53577479:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.CompareSound = true
		}
		if (flags & (1 << 0)) != 0 {
			m3 := &InputNotifyPeer{}
			m3.Decode(dBuf)
			m.Peer = m3
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetNotifyExceptions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetWallPaper
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getWallPaper))

	switch uint32(m.Constructor) {
	case 0xfc8ddbea:
		x.UInt(0xfc8ddbea)

		// no flags

		x.Bytes(m.GetWallpaper().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetWallPaper) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xfc8ddbea:

		// not has flags

		m1 := &InputWallPaper{}
		m1.Decode(dBuf)
		m.Wallpaper = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUploadWallPaper
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUploadWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_uploadWallPaper))

	switch uint32(m.Constructor) {
	case 0xdd853661:
		x.UInt(0xdd853661)

		// no flags

		x.Bytes(m.GetFile().Encode(layer))
		x.String(m.GetMimeType())
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUploadWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUploadWallPaper) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdd853661:

		// not has flags

		m1 := &InputFile{}
		m1.Decode(dBuf)
		m.File = m1

		m.MimeType = dBuf.String()

		m3 := &WallPaperSettings{}
		m3.Decode(dBuf)
		m.Settings = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUploadWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSaveWallPaper
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSaveWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_saveWallPaper))

	switch uint32(m.Constructor) {
	case 0x6c5a5b37:
		x.UInt(0x6c5a5b37)

		// no flags

		x.Bytes(m.GetWallpaper().Encode(layer))
		x.Bytes(m.GetUnsave().Encode(layer))
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSaveWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSaveWallPaper) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6c5a5b37:

		// not has flags

		m1 := &InputWallPaper{}
		m1.Decode(dBuf)
		m.Wallpaper = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Unsave = m2

		m3 := &WallPaperSettings{}
		m3.Decode(dBuf)
		m.Settings = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSaveWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountInstallWallPaper
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountInstallWallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_installWallPaper))

	switch uint32(m.Constructor) {
	case 0xfeed5769:
		x.UInt(0xfeed5769)

		// no flags

		x.Bytes(m.GetWallpaper().Encode(layer))
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountInstallWallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountInstallWallPaper) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xfeed5769:

		// not has flags

		m1 := &InputWallPaper{}
		m1.Decode(dBuf)
		m.Wallpaper = m1

		m2 := &WallPaperSettings{}
		m2.Decode(dBuf)
		m.Settings = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountInstallWallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetWallPapers
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetWallPapers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetWallPapers))

	switch uint32(m.Constructor) {
	case 0xbb3b9804:
		x.UInt(0xbb3b9804)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetWallPapers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetWallPapers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbb3b9804:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetWallPapers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetAutoDownloadSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetAutoDownloadSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getAutoDownloadSettings))

	switch uint32(m.Constructor) {
	case 0x56da0b3f:
		x.UInt(0x56da0b3f)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetAutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetAutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x56da0b3f:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetAutoDownloadSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSaveAutoDownloadSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSaveAutoDownloadSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_saveAutoDownloadSettings))

	switch uint32(m.Constructor) {
	case 0x76f36233:
		x.UInt(0x76f36233)

		// set flags
		var flags uint32 = 0

		if m.GetLow() == true {
			flags |= 1 << 0
		}
		if m.GetHigh() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSaveAutoDownloadSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSaveAutoDownloadSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x76f36233:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Low = true
		}
		if (flags & (1 << 1)) != 0 {
			m.High = true
		}

		m4 := &AutoDownloadSettings{}
		m4.Decode(dBuf)
		m.Settings = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSaveAutoDownloadSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUploadTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUploadTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_uploadTheme))

	switch uint32(m.Constructor) {
	case 0x1c3db333:
		x.UInt(0x1c3db333)

		// set flags
		var flags uint32 = 0

		if m.GetThumb() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetFile().Encode(layer))
		if m.GetThumb() != nil {
			x.Bytes(m.GetThumb().Encode(layer))
		}

		x.String(m.GetFileName())
		x.String(m.GetMimeType())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUploadTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUploadTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1c3db333:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputFile{}
		m2.Decode(dBuf)
		m.File = m2

		if (flags & (1 << 0)) != 0 {
			m3 := &InputFile{}
			m3.Decode(dBuf)
			m.Thumb = m3
		}
		m.FileName = dBuf.String()
		m.MimeType = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUploadTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountCreateTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountCreateTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_createTheme))

	switch uint32(m.Constructor) {
	case 0x652e4400:
		x.UInt(0x652e4400)

		// set flags
		var flags uint32 = 0

		if m.GetDocument() != nil {
			flags |= 1 << 2
		}
		if m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetSlug())
		x.String(m.GetTitle())
		if m.GetDocument() != nil {
			x.Bytes(m.GetDocument().Encode(layer))
		}

		if m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS())))
			for _, v := range m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() {
				x.Bytes((*v).Encode(layer))
			}
		}

	case 0x8432c21f:
		x.UInt(0x8432c21f)

		// set flags
		var flags uint32 = 0

		if m.GetDocument() != nil {
			flags |= 1 << 2
		}
		if m.GetSettings_FLAGINPUTTHEMESETTINGS() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetSlug())
		x.String(m.GetTitle())
		if m.GetDocument() != nil {
			x.Bytes(m.GetDocument().Encode(layer))
		}

		if m.GetSettings_FLAGINPUTTHEMESETTINGS() != nil {
			x.Bytes(m.GetSettings_FLAGINPUTTHEMESETTINGS().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountCreateTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountCreateTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x652e4400:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Slug = dBuf.String()
		m.Title = dBuf.String()
		if (flags & (1 << 2)) != 0 {
			m4 := &InputDocument{}
			m4.Decode(dBuf)
			m.Document = m4
		}
		if (flags & (1 << 3)) != 0 {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*InputThemeSettings, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &InputThemeSettings{}
				v5[i].Decode(dBuf)
			}
			m.Settings_FLAGVECTORINPUTTHEMESETTINGS = v5
		}
		return dBuf.GetError()
	case 0x8432c21f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Slug = dBuf.String()
		m.Title = dBuf.String()
		if (flags & (1 << 2)) != 0 {
			m4 := &InputDocument{}
			m4.Decode(dBuf)
			m.Document = m4
		}
		if (flags & (1 << 3)) != 0 {
			m5 := &InputThemeSettings{}
			m5.Decode(dBuf)
			m.Settings_FLAGINPUTTHEMESETTINGS = m5
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountCreateTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateTheme))

	switch uint32(m.Constructor) {
	case 0x2bf40ccc:
		x.UInt(0x2bf40ccc)

		// set flags
		var flags uint32 = 0

		if m.GetSlug() != nil {
			flags |= 1 << 0
		}
		if m.GetTitle() != nil {
			flags |= 1 << 1
		}
		if m.GetDocument() != nil {
			flags |= 1 << 2
		}
		if m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetFormat())
		x.Bytes(m.GetTheme().Encode(layer))
		if m.GetSlug() != nil {
			x.String(m.GetSlug().Value)
		}

		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

		if m.GetDocument() != nil {
			x.Bytes(m.GetDocument().Encode(layer))
		}

		if m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS())))
			for _, v := range m.GetSettings_FLAGVECTORINPUTTHEMESETTINGS() {
				x.Bytes((*v).Encode(layer))
			}
		}

	case 0x5cb367d5:
		x.UInt(0x5cb367d5)

		// set flags
		var flags uint32 = 0

		if m.GetSlug() != nil {
			flags |= 1 << 0
		}
		if m.GetTitle() != nil {
			flags |= 1 << 1
		}
		if m.GetDocument() != nil {
			flags |= 1 << 2
		}
		if m.GetSettings_FLAGINPUTTHEMESETTINGS() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetFormat())
		x.Bytes(m.GetTheme().Encode(layer))
		if m.GetSlug() != nil {
			x.String(m.GetSlug().Value)
		}

		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

		if m.GetDocument() != nil {
			x.Bytes(m.GetDocument().Encode(layer))
		}

		if m.GetSettings_FLAGINPUTTHEMESETTINGS() != nil {
			x.Bytes(m.GetSettings_FLAGINPUTTHEMESETTINGS().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2bf40ccc:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Format = dBuf.String()

		m3 := &InputTheme{}
		m3.Decode(dBuf)
		m.Theme = m3

		if (flags & (1 << 0)) != 0 {
			m.Slug = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m6 := &InputDocument{}
			m6.Decode(dBuf)
			m.Document = m6
		}
		if (flags & (1 << 3)) != 0 {
			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*InputThemeSettings, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &InputThemeSettings{}
				v7[i].Decode(dBuf)
			}
			m.Settings_FLAGVECTORINPUTTHEMESETTINGS = v7
		}
		return dBuf.GetError()
	case 0x5cb367d5:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Format = dBuf.String()

		m3 := &InputTheme{}
		m3.Decode(dBuf)
		m.Theme = m3

		if (flags & (1 << 0)) != 0 {
			m.Slug = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m6 := &InputDocument{}
			m6.Decode(dBuf)
			m.Document = m6
		}
		if (flags & (1 << 3)) != 0 {
			m7 := &InputThemeSettings{}
			m7.Decode(dBuf)
			m.Settings_FLAGINPUTTHEMESETTINGS = m7
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSaveTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSaveTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_saveTheme))

	switch uint32(m.Constructor) {
	case 0xf257106c:
		x.UInt(0xf257106c)

		// no flags

		x.Bytes(m.GetTheme().Encode(layer))
		x.Bytes(m.GetUnsave().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSaveTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSaveTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf257106c:

		// not has flags

		m1 := &InputTheme{}
		m1.Decode(dBuf)
		m.Theme = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Unsave = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSaveTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountInstallTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountInstallTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_installTheme))

	switch uint32(m.Constructor) {
	case 0xc727bb3b:
		x.UInt(0xc727bb3b)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}
		if m.GetTheme() != nil {
			flags |= 1 << 1
		}
		if m.GetFormat() != nil {
			flags |= 1 << 2
		}
		if m.GetBaseTheme() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetTheme() != nil {
			x.Bytes(m.GetTheme().Encode(layer))
		}

		if m.GetFormat() != nil {
			x.String(m.GetFormat().Value)
		}

		if m.GetBaseTheme() != nil {
			x.Bytes(m.GetBaseTheme().Encode(layer))
		}

	case 0x7ae43737:
		x.UInt(0x7ae43737)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}
		if m.GetFormat() != nil {
			flags |= 1 << 1
		}
		if m.GetTheme() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFormat() != nil {
			x.String(m.GetFormat().Value)
		}

		if m.GetTheme() != nil {
			x.Bytes(m.GetTheme().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountInstallTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountInstallTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc727bb3b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}
		if (flags & (1 << 1)) != 0 {
			m3 := &InputTheme{}
			m3.Decode(dBuf)
			m.Theme = m3
		}
		if (flags & (1 << 2)) != 0 {
			m.Format = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 3)) != 0 {
			m5 := &BaseTheme{}
			m5.Decode(dBuf)
			m.BaseTheme = m5
		}
		return dBuf.GetError()
	case 0x7ae43737:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Format = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m4 := &InputTheme{}
			m4.Decode(dBuf)
			m.Theme = m4
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountInstallTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getTheme))

	switch uint32(m.Constructor) {
	case 0x8d9d742b:
		x.UInt(0x8d9d742b)

		// no flags

		x.String(m.GetFormat())
		x.Bytes(m.GetTheme().Encode(layer))
		x.Long(m.GetDocumentId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8d9d742b:

		// not has flags

		m.Format = dBuf.String()

		m2 := &InputTheme{}
		m2.Decode(dBuf)
		m.Theme = m2

		m.DocumentId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetThemes
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetThemes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getThemes))

	switch uint32(m.Constructor) {
	case 0x7206e458:
		x.UInt(0x7206e458)

		// no flags

		x.String(m.GetFormat())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetThemes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetThemes) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7206e458:

		// not has flags

		m.Format = dBuf.String()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetThemes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetContentSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetContentSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setContentSettings))

	switch uint32(m.Constructor) {
	case 0xb574b16b:
		x.UInt(0xb574b16b)

		// set flags
		var flags uint32 = 0

		if m.GetSensitiveEnabled() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetContentSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetContentSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb574b16b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.SensitiveEnabled = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetContentSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetContentSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetContentSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getContentSettings))

	switch uint32(m.Constructor) {
	case 0x8b9b4dae:
		x.UInt(0x8b9b4dae)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetContentSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetContentSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8b9b4dae:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetContentSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetMultiWallPapers
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetMultiWallPapers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getMultiWallPapers))

	switch uint32(m.Constructor) {
	case 0x65ad71dc:
		x.UInt(0x65ad71dc)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetWallpapers())))
		for _, v := range m.GetWallpapers() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetMultiWallPapers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetMultiWallPapers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x65ad71dc:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputWallPaper, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputWallPaper{}
			v1[i].Decode(dBuf)
		}
		m.Wallpapers = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetMultiWallPapers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetGlobalPrivacySettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetGlobalPrivacySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getGlobalPrivacySettings))

	switch uint32(m.Constructor) {
	case 0xeb2b4cf6:
		x.UInt(0xeb2b4cf6)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetGlobalPrivacySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetGlobalPrivacySettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xeb2b4cf6:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetGlobalPrivacySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetGlobalPrivacySettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetGlobalPrivacySettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setGlobalPrivacySettings))

	switch uint32(m.Constructor) {
	case 0x1edaaac2:
		x.UInt(0x1edaaac2)

		// no flags

		x.Bytes(m.GetSettings().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetGlobalPrivacySettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetGlobalPrivacySettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1edaaac2:

		// not has flags

		m1 := &GlobalPrivacySettings{}
		m1.Decode(dBuf)
		m.Settings = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetGlobalPrivacySettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountReportProfilePhoto
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountReportProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_reportProfilePhoto))

	switch uint32(m.Constructor) {
	case 0xfa8cc6f5:
		x.UInt(0xfa8cc6f5)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetPhotoId().Encode(layer))
		x.Bytes(m.GetReason().Encode(layer))
		x.String(m.GetMessage())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountReportProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountReportProfilePhoto) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xfa8cc6f5:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputPhoto{}
		m2.Decode(dBuf)
		m.PhotoId = m2

		m3 := &ReportReason{}
		m3.Decode(dBuf)
		m.Reason = m3

		m.Message = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountReportProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountResetPassword
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountResetPassword) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_resetPassword))

	switch uint32(m.Constructor) {
	case 0x9308ce1b:
		x.UInt(0x9308ce1b)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountResetPassword) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountResetPassword) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9308ce1b:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountResetPassword) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountDeclinePasswordReset
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountDeclinePasswordReset) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_declinePasswordReset))

	switch uint32(m.Constructor) {
	case 0x4c9409f6:
		x.UInt(0x4c9409f6)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountDeclinePasswordReset) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountDeclinePasswordReset) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4c9409f6:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountDeclinePasswordReset) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetChatThemesD638DE89
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetChatThemesD638DE89) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getChatThemesD638DE89))

	switch uint32(m.Constructor) {
	case 0xd638de89:
		x.UInt(0xd638de89)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetChatThemesD638DE89) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetChatThemesD638DE89) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd638de89:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetChatThemesD638DE89) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountSetAuthorizationTTL
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountSetAuthorizationTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_setAuthorizationTTL))

	switch uint32(m.Constructor) {
	case 0xbf899aa0:
		x.UInt(0xbf899aa0)

		// no flags

		x.Int(m.GetAuthorizationTtlDays())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountSetAuthorizationTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountSetAuthorizationTTL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbf899aa0:

		// not has flags

		m.AuthorizationTtlDays = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountSetAuthorizationTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountChangeAuthorizationSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountChangeAuthorizationSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_changeAuthorizationSettings))

	switch uint32(m.Constructor) {
	case 0x40f48462:
		x.UInt(0x40f48462)

		// set flags
		var flags uint32 = 0

		if m.GetEncryptedRequestsDisabled() != nil {
			flags |= 1 << 0
		}
		if m.GetCallRequestsDisabled() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetHash())
		if m.GetEncryptedRequestsDisabled() != nil {
			x.Bytes(m.GetEncryptedRequestsDisabled().Encode(layer))
		}

		if m.GetCallRequestsDisabled() != nil {
			x.Bytes(m.GetCallRequestsDisabled().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountChangeAuthorizationSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountChangeAuthorizationSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x40f48462:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Hash = dBuf.Long()
		if (flags & (1 << 0)) != 0 {
			m3 := &Bool{}
			m3.Decode(dBuf)
			m.EncryptedRequestsDisabled = m3
		}
		if (flags & (1 << 1)) != 0 {
			m4 := &Bool{}
			m4.Decode(dBuf)
			m.CallRequestsDisabled = m4
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountChangeAuthorizationSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUsersGetUsers
///////////////////////////////////////////////////////////////////////////////
func (m *TLUsersGetUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_users_getUsers))

	switch uint32(m.Constructor) {
	case 0xd91a548:
		x.UInt(0xd91a548)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId())))
		for _, v := range m.GetId() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUsersGetUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersGetUsers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd91a548:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputUser, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputUser{}
			v1[i].Decode(dBuf)
		}
		m.Id = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUsersGetUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUsersGetFullUserB60F5918
///////////////////////////////////////////////////////////////////////////////
func (m *TLUsersGetFullUserB60F5918) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_users_getFullUserB60F5918))

	switch uint32(m.Constructor) {
	case 0xb60f5918:
		x.UInt(0xb60f5918)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUsersGetFullUserB60F5918) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersGetFullUserB60F5918) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb60f5918:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUsersGetFullUserB60F5918) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUsersSetSecureValueErrors
///////////////////////////////////////////////////////////////////////////////
func (m *TLUsersSetSecureValueErrors) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_users_setSecureValueErrors))

	switch uint32(m.Constructor) {
	case 0x90c894b5:
		x.UInt(0x90c894b5)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetErrors())))
		for _, v := range m.GetErrors() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUsersSetSecureValueErrors) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersSetSecureValueErrors) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x90c894b5:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.Id = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*SecureValueError, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &SecureValueError{}
			v2[i].Decode(dBuf)
		}
		m.Errors = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUsersSetSecureValueErrors) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetContactIDs
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetContactIDs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getContactIDs))

	switch uint32(m.Constructor) {
	case 0x7adc669d:
		x.UInt(0x7adc669d)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetContactIDs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetContactIDs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7adc669d:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetContactIDs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetStatuses
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetStatuses) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getStatuses))

	switch uint32(m.Constructor) {
	case 0xc4a353ee:
		x.UInt(0xc4a353ee)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetStatuses) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetStatuses) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc4a353ee:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetStatuses) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetContacts
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getContacts))

	switch uint32(m.Constructor) {
	case 0x5dd69e12:
		x.UInt(0x5dd69e12)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetContacts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5dd69e12:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsImportContacts
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsImportContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_importContacts))

	switch uint32(m.Constructor) {
	case 0x2c800be5:
		x.UInt(0x2c800be5)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetContacts())))
		for _, v := range m.GetContacts() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsImportContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsImportContacts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2c800be5:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputContact, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputContact{}
			v1[i].Decode(dBuf)
		}
		m.Contacts = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsImportContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsDeleteContacts
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsDeleteContacts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_deleteContacts))

	switch uint32(m.Constructor) {
	case 0x96a0e00:
		x.UInt(0x96a0e00)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId())))
		for _, v := range m.GetId() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsDeleteContacts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsDeleteContacts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x96a0e00:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputUser, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputUser{}
			v1[i].Decode(dBuf)
		}
		m.Id = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsDeleteContacts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsDeleteByPhones
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsDeleteByPhones) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_deleteByPhones))

	switch uint32(m.Constructor) {
	case 0x1013fd9e:
		x.UInt(0x1013fd9e)

		// no flags

		x.VectorString(m.GetPhones())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsDeleteByPhones) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsDeleteByPhones) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1013fd9e:

		// not has flags

		m.Phones = dBuf.VectorString()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsDeleteByPhones) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsBlock
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsBlock) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_block))

	switch uint32(m.Constructor) {
	case 0x68cc1411:
		x.UInt(0x68cc1411)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsBlock) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsBlock) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x68cc1411:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsBlock) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsUnblock
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsUnblock) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_unblock))

	switch uint32(m.Constructor) {
	case 0xbea65d50:
		x.UInt(0xbea65d50)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsUnblock) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsUnblock) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbea65d50:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsUnblock) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetBlocked
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetBlocked) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getBlocked))

	switch uint32(m.Constructor) {
	case 0xf57c350f:
		x.UInt(0xf57c350f)

		// no flags

		x.Int(m.GetOffset())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetBlocked) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetBlocked) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf57c350f:

		// not has flags

		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetBlocked) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsSearch
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsSearch) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_search))

	switch uint32(m.Constructor) {
	case 0x11f812d8:
		x.UInt(0x11f812d8)

		// no flags

		x.String(m.GetQ())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsSearch) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsSearch) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x11f812d8:

		// not has flags

		m.Q = dBuf.String()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsSearch) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsResolveUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsResolveUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_resolveUsername))

	switch uint32(m.Constructor) {
	case 0xf93ccba3:
		x.UInt(0xf93ccba3)

		// no flags

		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsResolveUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsResolveUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf93ccba3:

		// not has flags

		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsResolveUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetTopPeers
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetTopPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getTopPeers))

	switch uint32(m.Constructor) {
	case 0x973478b6:
		x.UInt(0x973478b6)

		// set flags
		var flags uint32 = 0

		if m.GetCorrespondents() == true {
			flags |= 1 << 0
		}
		if m.GetBotsPm() == true {
			flags |= 1 << 1
		}
		if m.GetBotsInline() == true {
			flags |= 1 << 2
		}
		if m.GetPhoneCalls() == true {
			flags |= 1 << 3
		}
		if m.GetForwardUsers() == true {
			flags |= 1 << 4
		}
		if m.GetForwardChats() == true {
			flags |= 1 << 5
		}
		if m.GetGroups() == true {
			flags |= 1 << 10
		}
		if m.GetChannels() == true {
			flags |= 1 << 15
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetOffset())
		x.Int(m.GetLimit())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetTopPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetTopPeers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x973478b6:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Correspondents = true
		}
		if (flags & (1 << 1)) != 0 {
			m.BotsPm = true
		}
		if (flags & (1 << 2)) != 0 {
			m.BotsInline = true
		}
		if (flags & (1 << 3)) != 0 {
			m.PhoneCalls = true
		}
		if (flags & (1 << 4)) != 0 {
			m.ForwardUsers = true
		}
		if (flags & (1 << 5)) != 0 {
			m.ForwardChats = true
		}
		if (flags & (1 << 10)) != 0 {
			m.Groups = true
		}
		if (flags & (1 << 15)) != 0 {
			m.Channels = true
		}
		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetTopPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsResetTopPeerRating
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsResetTopPeerRating) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_resetTopPeerRating))

	switch uint32(m.Constructor) {
	case 0x1ae373ac:
		x.UInt(0x1ae373ac)

		// no flags

		x.Bytes(m.GetCategory().Encode(layer))
		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsResetTopPeerRating) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsResetTopPeerRating) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1ae373ac:

		// not has flags

		m1 := &TopPeerCategory{}
		m1.Decode(dBuf)
		m.Category = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsResetTopPeerRating) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsResetSaved
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsResetSaved) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_resetSaved))

	switch uint32(m.Constructor) {
	case 0x879537f1:
		x.UInt(0x879537f1)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsResetSaved) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsResetSaved) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x879537f1:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsResetSaved) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetSaved
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetSaved) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getSaved))

	switch uint32(m.Constructor) {
	case 0x82f1e39f:
		x.UInt(0x82f1e39f)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetSaved) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetSaved) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x82f1e39f:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetSaved) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsToggleTopPeers
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsToggleTopPeers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_toggleTopPeers))

	switch uint32(m.Constructor) {
	case 0x8514bdda:
		x.UInt(0x8514bdda)

		// no flags

		x.Bytes(m.GetEnabled().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsToggleTopPeers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsToggleTopPeers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8514bdda:

		// not has flags

		m1 := &Bool{}
		m1.Decode(dBuf)
		m.Enabled = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsToggleTopPeers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsAddContact
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsAddContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_addContact))

	switch uint32(m.Constructor) {
	case 0xe8f463d0:
		x.UInt(0xe8f463d0)

		// set flags
		var flags uint32 = 0

		if m.GetAddPhonePrivacyException() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetId().Encode(layer))
		x.String(m.GetFirstName())
		x.String(m.GetLastName())
		x.String(m.GetPhone())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsAddContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsAddContact) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe8f463d0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.AddPhonePrivacyException = true
		}

		m3 := &InputUser{}
		m3.Decode(dBuf)
		m.Id = m3

		m.FirstName = dBuf.String()
		m.LastName = dBuf.String()
		m.Phone = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsAddContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsAcceptContact
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsAcceptContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_acceptContact))

	switch uint32(m.Constructor) {
	case 0xf831a20f:
		x.UInt(0xf831a20f)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsAcceptContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsAcceptContact) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf831a20f:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsAcceptContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsGetLocated
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsGetLocated) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_getLocated))

	switch uint32(m.Constructor) {
	case 0xd348bc44:
		x.UInt(0xd348bc44)

		// set flags
		var flags uint32 = 0

		if m.GetBackground() == true {
			flags |= 1 << 1
		}

		if m.GetSelfExpires() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetGeoPoint().Encode(layer))
		if m.GetSelfExpires() != nil {
			x.Int(m.GetSelfExpires().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsGetLocated) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsGetLocated) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd348bc44:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.Background = true
		}

		m3 := &InputGeoPoint{}
		m3.Decode(dBuf)
		m.GeoPoint = m3

		if (flags & (1 << 0)) != 0 {
			m.SelfExpires = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsGetLocated) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsBlockFromReplies
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsBlockFromReplies) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_blockFromReplies))

	switch uint32(m.Constructor) {
	case 0x29a8962c:
		x.UInt(0x29a8962c)

		// set flags
		var flags uint32 = 0

		if m.GetDeleteMessage() == true {
			flags |= 1 << 0
		}
		if m.GetDeleteHistory() == true {
			flags |= 1 << 1
		}
		if m.GetReportSpam() == true {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsBlockFromReplies) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsBlockFromReplies) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x29a8962c:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.DeleteMessage = true
		}
		if (flags & (1 << 1)) != 0 {
			m.DeleteHistory = true
		}
		if (flags & (1 << 2)) != 0 {
			m.ReportSpam = true
		}
		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsBlockFromReplies) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLContactsResolvePhone
///////////////////////////////////////////////////////////////////////////////
func (m *TLContactsResolvePhone) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_contacts_resolvePhone))

	switch uint32(m.Constructor) {
	case 0x8af94344:
		x.UInt(0x8af94344)

		// no flags

		x.String(m.GetPhone())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLContactsResolvePhone) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLContactsResolvePhone) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8af94344:

		// not has flags

		m.Phone = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLContactsResolvePhone) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessages))

	switch uint32(m.Constructor) {
	case 0x63c66506:
		x.UInt(0x63c66506)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId_VECTORINPUTMESSAGE())))
		for _, v := range m.GetId_VECTORINPUTMESSAGE() {
			x.Bytes((*v).Encode(layer))
		}

	case 0x4222fa74:
		x.UInt(0x4222fa74)

		// no flags

		x.VectorInt(m.GetId_VECTORINT32())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x63c66506:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputMessage, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputMessage{}
			v1[i].Decode(dBuf)
		}
		m.Id_VECTORINPUTMESSAGE = v1

		return dBuf.GetError()
	case 0x4222fa74:

		// not has flags

		m.Id_VECTORINT32 = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDialogs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDialogs))

	switch uint32(m.Constructor) {
	case 0xa0f4cb4f:
		x.UInt(0xa0f4cb4f)

		// set flags
		var flags uint32 = 0

		if m.GetExcludePinned() == true {
			flags |= 1 << 0
		}
		if m.GetFolderId() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFolderId() != nil {
			x.Int(m.GetFolderId().Value)
		}

		x.Int(m.GetOffsetDate())
		x.Int(m.GetOffsetId())
		x.Bytes(m.GetOffsetPeer().Encode(layer))
		x.Int(m.GetLimit())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDialogs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa0f4cb4f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.ExcludePinned = true
		}
		if (flags & (1 << 1)) != 0 {
			m.FolderId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.OffsetDate = dBuf.Int()
		m.OffsetId = dBuf.Int()

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.OffsetPeer = m6

		m.Limit = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getHistory))

	switch uint32(m.Constructor) {
	case 0x4423e6c5:
		x.UInt(0x4423e6c5)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetOffsetDate())
		x.Int(m.GetAddOffset())
		x.Int(m.GetLimit())
		x.Int(m.GetMaxId())
		x.Int(m.GetMinId())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4423e6c5:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.OffsetId = dBuf.Int()
		m.OffsetDate = dBuf.Int()
		m.AddOffset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.MaxId = dBuf.Int()
		m.MinId = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSearch
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSearch) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_search))

	switch uint32(m.Constructor) {
	case 0xa0fda762:
		x.UInt(0xa0fda762)

		// set flags
		var flags uint32 = 0

		if m.GetFromId() != nil {
			flags |= 1 << 0
		}
		if m.GetTopMsgId() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetQ())
		if m.GetFromId() != nil {
			x.Bytes(m.GetFromId().Encode(layer))
		}

		if m.GetTopMsgId() != nil {
			x.Int(m.GetTopMsgId().Value)
		}

		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetMinDate())
		x.Int(m.GetMaxDate())
		x.Int(m.GetOffsetId())
		x.Int(m.GetAddOffset())
		x.Int(m.GetLimit())
		x.Int(m.GetMaxId())
		x.Int(m.GetMinId())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSearch) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearch) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa0fda762:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		m.Q = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m4 := &InputPeer{}
			m4.Decode(dBuf)
			m.FromId = m4
		}
		if (flags & (1 << 1)) != 0 {
			m.TopMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m6 := &MessagesFilter{}
		m6.Decode(dBuf)
		m.Filter = m6

		m.MinDate = dBuf.Int()
		m.MaxDate = dBuf.Int()
		m.OffsetId = dBuf.Int()
		m.AddOffset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.MaxId = dBuf.Int()
		m.MinId = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSearch) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readHistory))

	switch uint32(m.Constructor) {
	case 0xe306d3a:
		x.UInt(0xe306d3a)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe306d3a:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteHistory))

	switch uint32(m.Constructor) {
	case 0xb08f922a:
		x.UInt(0xb08f922a)

		// set flags
		var flags uint32 = 0

		if m.GetJustClear() == true {
			flags |= 1 << 0
		}
		if m.GetRevoke() == true {
			flags |= 1 << 1
		}

		if m.GetMinDate() != nil {
			flags |= 1 << 2
		}
		if m.GetMaxDate() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMaxId())
		if m.GetMinDate() != nil {
			x.Int(m.GetMinDate().Value)
		}

		if m.GetMaxDate() != nil {
			x.Int(m.GetMaxDate().Value)
		}

	case 0x1c015b09:
		x.UInt(0x1c015b09)

		// set flags
		var flags uint32 = 0

		if m.GetJustClear() == true {
			flags |= 1 << 0
		}
		if m.GetRevoke() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb08f922a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.JustClear = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Revoke = true
		}

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.Peer = m4

		m.MaxId = dBuf.Int()
		if (flags & (1 << 2)) != 0 {
			m.MinDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 3)) != 0 {
			m.MaxDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()
	case 0x1c015b09:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.JustClear = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Revoke = true
		}

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.Peer = m4

		m.MaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteMessages))

	switch uint32(m.Constructor) {
	case 0xe58e95d2:
		x.UInt(0xe58e95d2)

		// set flags
		var flags uint32 = 0

		if m.GetRevoke() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe58e95d2:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Revoke = true
		}

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReceivedMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReceivedMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_receivedMessages))

	switch uint32(m.Constructor) {
	case 0x5a954c0:
		x.UInt(0x5a954c0)

		// no flags

		x.Int(m.GetMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReceivedMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReceivedMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5a954c0:

		// not has flags

		m.MaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReceivedMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetTyping
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setTyping))

	switch uint32(m.Constructor) {
	case 0x58943ee2:
		x.UInt(0x58943ee2)

		// set flags
		var flags uint32 = 0

		if m.GetTopMsgId() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetTopMsgId() != nil {
			x.Int(m.GetTopMsgId().Value)
		}

		x.Bytes(m.GetAction().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetTyping) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x58943ee2:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		if (flags & (1 << 0)) != 0 {
			m.TopMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m4 := &SendMessageAction{}
		m4.Decode(dBuf)
		m.Action = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendMessage))

	switch uint32(m.Constructor) {
	case 0xd9d75a4:
		x.UInt(0xd9d75a4)

		// set flags
		var flags uint32 = 0

		if m.GetNoWebpage() == true {
			flags |= 1 << 1
		}
		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}
		if m.GetNoforwards() == true {
			flags |= 1 << 14
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}
		if m.GetSendAs() != nil {
			flags |= 1 << 13
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.String(m.GetMessage())
		x.Long(m.GetRandomId())
		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

		if m.GetSendAs() != nil {
			x.Bytes(m.GetSendAs().Encode(layer))
		}

	case 0x520c3870:
		x.UInt(0x520c3870)

		// set flags
		var flags uint32 = 0

		if m.GetNoWebpage() == true {
			flags |= 1 << 1
		}
		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.String(m.GetMessage())
		x.Long(m.GetRandomId())
		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd9d75a4:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.NoWebpage = true
		}
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}
		if (flags & (1 << 14)) != 0 {
			m.Noforwards = true
		}

		m7 := &InputPeer{}
		m7.Decode(dBuf)
		m.Peer = m7

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.Message = dBuf.String()
		m.RandomId = dBuf.Long()
		if (flags & (1 << 2)) != 0 {
			m11 := &ReplyMarkup{}
			m11.Decode(dBuf)
			m.ReplyMarkup = m11
		}
		if (flags & (1 << 3)) != 0 {
			c12 := dBuf.Int()
			if c12 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 12, c12)
				return dBuf.GetError()
			}
			l12 := dBuf.Int()
			v12 := make([]*MessageEntity, l12)
			for i := int32(0); i < l12; i++ {
				v12[i] = &MessageEntity{}
				v12[i].Decode(dBuf)
			}
			m.Entities = v12
		}
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 13)) != 0 {
			m14 := &InputPeer{}
			m14.Decode(dBuf)
			m.SendAs = m14
		}
		return dBuf.GetError()
	case 0x520c3870:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.NoWebpage = true
		}
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.Peer = m6

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.Message = dBuf.String()
		m.RandomId = dBuf.Long()
		if (flags & (1 << 2)) != 0 {
			m10 := &ReplyMarkup{}
			m10.Decode(dBuf)
			m.ReplyMarkup = m10
		}
		if (flags & (1 << 3)) != 0 {
			c11 := dBuf.Int()
			if c11 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 11, c11)
				return dBuf.GetError()
			}
			l11 := dBuf.Int()
			v11 := make([]*MessageEntity, l11)
			for i := int32(0); i < l11; i++ {
				v11[i] = &MessageEntity{}
				v11[i].Decode(dBuf)
			}
			m.Entities = v11
		}
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendMedia
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendMedia))

	switch uint32(m.Constructor) {
	case 0xe25ff8e0:
		x.UInt(0xe25ff8e0)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}
		if m.GetNoforwards() == true {
			flags |= 1 << 14
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}
		if m.GetSendAs() != nil {
			flags |= 1 << 13
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Bytes(m.GetMedia().Encode(layer))
		x.String(m.GetMessage())
		x.Long(m.GetRandomId())
		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

		if m.GetSendAs() != nil {
			x.Bytes(m.GetSendAs().Encode(layer))
		}

	case 0x3491eba9:
		x.UInt(0x3491eba9)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Bytes(m.GetMedia().Encode(layer))
		x.String(m.GetMessage())
		x.Long(m.GetRandomId())
		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendMedia) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe25ff8e0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}
		if (flags & (1 << 14)) != 0 {
			m.Noforwards = true
		}

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.Peer = m6

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m8 := &InputMedia{}
		m8.Decode(dBuf)
		m.Media = m8

		m.Message = dBuf.String()
		m.RandomId = dBuf.Long()
		if (flags & (1 << 2)) != 0 {
			m11 := &ReplyMarkup{}
			m11.Decode(dBuf)
			m.ReplyMarkup = m11
		}
		if (flags & (1 << 3)) != 0 {
			c12 := dBuf.Int()
			if c12 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 12, c12)
				return dBuf.GetError()
			}
			l12 := dBuf.Int()
			v12 := make([]*MessageEntity, l12)
			for i := int32(0); i < l12; i++ {
				v12[i] = &MessageEntity{}
				v12[i].Decode(dBuf)
			}
			m.Entities = v12
		}
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 13)) != 0 {
			m14 := &InputPeer{}
			m14.Decode(dBuf)
			m.SendAs = m14
		}
		return dBuf.GetError()
	case 0x3491eba9:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}

		m5 := &InputPeer{}
		m5.Decode(dBuf)
		m.Peer = m5

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m7 := &InputMedia{}
		m7.Decode(dBuf)
		m.Media = m7

		m.Message = dBuf.String()
		m.RandomId = dBuf.Long()
		if (flags & (1 << 2)) != 0 {
			m10 := &ReplyMarkup{}
			m10.Decode(dBuf)
			m.ReplyMarkup = m10
		}
		if (flags & (1 << 3)) != 0 {
			c11 := dBuf.Int()
			if c11 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 11, c11)
				return dBuf.GetError()
			}
			l11 := dBuf.Int()
			v11 := make([]*MessageEntity, l11)
			for i := int32(0); i < l11; i++ {
				v11[i] = &MessageEntity{}
				v11[i].Decode(dBuf)
			}
			m.Entities = v11
		}
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesForwardMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesForwardMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_forwardMessages))

	switch uint32(m.Constructor) {
	case 0xcc30290b:
		x.UInt(0xcc30290b)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetWithMyScore() == true {
			flags |= 1 << 8
		}
		if m.GetDropAuthor() == true {
			flags |= 1 << 11
		}
		if m.GetDropMediaCaptions() == true {
			flags |= 1 << 12
		}
		if m.GetNoforwards() == true {
			flags |= 1 << 14
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}
		if m.GetSendAs() != nil {
			flags |= 1 << 13
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetFromPeer().Encode(layer))

		x.VectorInt(m.GetId())

		x.VectorLong(m.GetRandomId())

		x.Bytes(m.GetToPeer().Encode(layer))
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

		if m.GetSendAs() != nil {
			x.Bytes(m.GetSendAs().Encode(layer))
		}

	case 0xd9fee60e:
		x.UInt(0xd9fee60e)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetWithMyScore() == true {
			flags |= 1 << 8
		}
		if m.GetDropAuthor() == true {
			flags |= 1 << 11
		}
		if m.GetDropMediaCaptions() == true {
			flags |= 1 << 12
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetFromPeer().Encode(layer))

		x.VectorInt(m.GetId())

		x.VectorLong(m.GetRandomId())

		x.Bytes(m.GetToPeer().Encode(layer))
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesForwardMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesForwardMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcc30290b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 8)) != 0 {
			m.WithMyScore = true
		}
		if (flags & (1 << 11)) != 0 {
			m.DropAuthor = true
		}
		if (flags & (1 << 12)) != 0 {
			m.DropMediaCaptions = true
		}
		if (flags & (1 << 14)) != 0 {
			m.Noforwards = true
		}

		m8 := &InputPeer{}
		m8.Decode(dBuf)
		m.FromPeer = m8

		m.Id = dBuf.VectorInt()

		m.RandomId = dBuf.VectorLong()

		m11 := &InputPeer{}
		m11.Decode(dBuf)
		m.ToPeer = m11

		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 13)) != 0 {
			m13 := &InputPeer{}
			m13.Decode(dBuf)
			m.SendAs = m13
		}
		return dBuf.GetError()
	case 0xd9fee60e:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 8)) != 0 {
			m.WithMyScore = true
		}
		if (flags & (1 << 11)) != 0 {
			m.DropAuthor = true
		}
		if (flags & (1 << 12)) != 0 {
			m.DropMediaCaptions = true
		}

		m7 := &InputPeer{}
		m7.Decode(dBuf)
		m.FromPeer = m7

		m.Id = dBuf.VectorInt()

		m.RandomId = dBuf.VectorLong()

		m10 := &InputPeer{}
		m10.Decode(dBuf)
		m.ToPeer = m10

		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesForwardMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReportSpam
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReportSpam) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_reportSpam))

	switch uint32(m.Constructor) {
	case 0xcf1592db:
		x.UInt(0xcf1592db)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReportSpam) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReportSpam) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcf1592db:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReportSpam) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPeerSettingsEFD9A6A2
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPeerSettingsEFD9A6A2) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPeerSettingsEFD9A6A2))

	switch uint32(m.Constructor) {
	case 0xefd9a6a2:
		x.UInt(0xefd9a6a2)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPeerSettingsEFD9A6A2) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPeerSettingsEFD9A6A2) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xefd9a6a2:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPeerSettingsEFD9A6A2) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReport
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_report))

	switch uint32(m.Constructor) {
	case 0x8953ab4e:
		x.UInt(0x8953ab4e)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

		x.Bytes(m.GetReason().Encode(layer))
		x.String(m.GetMessage())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReport) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8953ab4e:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		m3 := &ReportReason{}
		m3.Decode(dBuf)
		m.Reason = m3

		m.Message = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetChats
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getChats))

	switch uint32(m.Constructor) {
	case 0x49e9528f:
		x.UInt(0x49e9528f)

		// no flags

		x.VectorLong(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetChats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x49e9528f:

		// not has flags

		m.Id = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetFullChat
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetFullChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getFullChat))

	switch uint32(m.Constructor) {
	case 0xaeb00b34:
		x.UInt(0xaeb00b34)

		// no flags

		x.Long(m.GetChatId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetFullChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetFullChat) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xaeb00b34:

		// not has flags

		m.ChatId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetFullChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditChatTitle
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditChatTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editChatTitle))

	switch uint32(m.Constructor) {
	case 0x73783ffd:
		x.UInt(0x73783ffd)

		// no flags

		x.Long(m.GetChatId())
		x.String(m.GetTitle())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditChatTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditChatTitle) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x73783ffd:

		// not has flags

		m.ChatId = dBuf.Long()
		m.Title = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditChatTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditChatPhoto
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditChatPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editChatPhoto))

	switch uint32(m.Constructor) {
	case 0x35ddd674:
		x.UInt(0x35ddd674)

		// no flags

		x.Long(m.GetChatId())
		x.Bytes(m.GetPhoto().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditChatPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditChatPhoto) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x35ddd674:

		// not has flags

		m.ChatId = dBuf.Long()

		m2 := &InputChatPhoto{}
		m2.Decode(dBuf)
		m.Photo = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditChatPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesAddChatUser
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesAddChatUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_addChatUser))

	switch uint32(m.Constructor) {
	case 0xf24753e3:
		x.UInt(0xf24753e3)

		// no flags

		x.Long(m.GetChatId())
		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetFwdLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesAddChatUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAddChatUser) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf24753e3:

		// not has flags

		m.ChatId = dBuf.Long()

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		m.FwdLimit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesAddChatUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteChatUser
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteChatUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteChatUser))

	switch uint32(m.Constructor) {
	case 0xa2185cab:
		x.UInt(0xa2185cab)

		// set flags
		var flags uint32 = 0

		if m.GetRevokeHistory() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetChatId())
		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteChatUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteChatUser) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa2185cab:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.RevokeHistory = true
		}
		m.ChatId = dBuf.Long()

		m4 := &InputUser{}
		m4.Decode(dBuf)
		m.UserId = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteChatUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesCreateChat
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesCreateChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_createChat))

	switch uint32(m.Constructor) {
	case 0x9cb126e:
		x.UInt(0x9cb126e)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetUsers())))
		for _, v := range m.GetUsers() {
			x.Bytes((*v).Encode(layer))
		}

		x.String(m.GetTitle())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesCreateChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesCreateChat) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9cb126e:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputUser, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputUser{}
			v1[i].Decode(dBuf)
		}
		m.Users = v1

		m.Title = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesCreateChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDhConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDhConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDhConfig))

	switch uint32(m.Constructor) {
	case 0x26cf8950:
		x.UInt(0x26cf8950)

		// no flags

		x.Int(m.GetVersion())
		x.Int(m.GetRandomLength())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDhConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDhConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x26cf8950:

		// not has flags

		m.Version = dBuf.Int()
		m.RandomLength = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDhConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesRequestEncryption
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesRequestEncryption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_requestEncryption))

	switch uint32(m.Constructor) {
	case 0xf64daf43:
		x.UInt(0xf64daf43)

		// no flags

		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetRandomId())
		x.StringBytes(m.GetGA())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesRequestEncryption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesRequestEncryption) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf64daf43:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.UserId = m1

		m.RandomId = dBuf.Int()
		m.GA = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesRequestEncryption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesAcceptEncryption
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesAcceptEncryption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_acceptEncryption))

	switch uint32(m.Constructor) {
	case 0x3dbc0415:
		x.UInt(0x3dbc0415)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.StringBytes(m.GetGB())
		x.Long(m.GetKeyFingerprint())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesAcceptEncryption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAcceptEncryption) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3dbc0415:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.GB = dBuf.StringBytes()
		m.KeyFingerprint = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesAcceptEncryption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDiscardEncryption
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDiscardEncryption) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_discardEncryption))

	switch uint32(m.Constructor) {
	case 0xf393aea0:
		x.UInt(0xf393aea0)

		// set flags
		var flags uint32 = 0

		if m.GetDeleteHistory() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetChatId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDiscardEncryption) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDiscardEncryption) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf393aea0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.DeleteHistory = true
		}
		m.ChatId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDiscardEncryption) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetEncryptedTyping
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetEncryptedTyping) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setEncryptedTyping))

	switch uint32(m.Constructor) {
	case 0x791451ed:
		x.UInt(0x791451ed)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetTyping().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetEncryptedTyping) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetEncryptedTyping) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x791451ed:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Typing = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetEncryptedTyping) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadEncryptedHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadEncryptedHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readEncryptedHistory))

	switch uint32(m.Constructor) {
	case 0x7f4b690a:
		x.UInt(0x7f4b690a)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMaxDate())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadEncryptedHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadEncryptedHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7f4b690a:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MaxDate = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadEncryptedHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendEncrypted
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendEncrypted) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendEncrypted))

	switch uint32(m.Constructor) {
	case 0x44fa7a15:
		x.UInt(0x44fa7a15)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetRandomId())
		x.StringBytes(m.GetData())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendEncrypted) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendEncrypted) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x44fa7a15:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Silent = true
		}

		m3 := &InputEncryptedChat{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.RandomId = dBuf.Long()
		m.Data = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendEncrypted) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendEncryptedFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendEncryptedFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendEncryptedFile))

	switch uint32(m.Constructor) {
	case 0x5559481d:
		x.UInt(0x5559481d)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetRandomId())
		x.StringBytes(m.GetData())
		x.Bytes(m.GetFile().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendEncryptedFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5559481d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Silent = true
		}

		m3 := &InputEncryptedChat{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.RandomId = dBuf.Long()
		m.Data = dBuf.StringBytes()

		m6 := &InputEncryptedFile{}
		m6.Decode(dBuf)
		m.File = m6

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendEncryptedFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendEncryptedService
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendEncryptedService) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendEncryptedService))

	switch uint32(m.Constructor) {
	case 0x32d439a4:
		x.UInt(0x32d439a4)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetRandomId())
		x.StringBytes(m.GetData())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendEncryptedService) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendEncryptedService) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x32d439a4:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.RandomId = dBuf.Long()
		m.Data = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendEncryptedService) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReceivedQueue
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReceivedQueue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_receivedQueue))

	switch uint32(m.Constructor) {
	case 0x55a5bb66:
		x.UInt(0x55a5bb66)

		// no flags

		x.Int(m.GetMaxQts())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReceivedQueue) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReceivedQueue) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x55a5bb66:

		// not has flags

		m.MaxQts = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReceivedQueue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReportEncryptedSpam
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReportEncryptedSpam) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_reportEncryptedSpam))

	switch uint32(m.Constructor) {
	case 0x4b0c8c0f:
		x.UInt(0x4b0c8c0f)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReportEncryptedSpam) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReportEncryptedSpam) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4b0c8c0f:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReportEncryptedSpam) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadMessageContents
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadMessageContents) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readMessageContents))

	switch uint32(m.Constructor) {
	case 0x36a73f77:
		x.UInt(0x36a73f77)

		// no flags

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadMessageContents) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadMessageContents) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x36a73f77:

		// not has flags

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadMessageContents) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getStickers))

	switch uint32(m.Constructor) {
	case 0xd5a5d3a1:
		x.UInt(0xd5a5d3a1)

		// no flags

		x.String(m.GetEmoticon())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd5a5d3a1:

		// not has flags

		m.Emoticon = dBuf.String()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAllStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAllStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAllStickers))

	switch uint32(m.Constructor) {
	case 0xb8a0a1a8:
		x.UInt(0xb8a0a1a8)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAllStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAllStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb8a0a1a8:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAllStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetWebPagePreview
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetWebPagePreview) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getWebPagePreview))

	switch uint32(m.Constructor) {
	case 0x8b68b0cc:
		x.UInt(0x8b68b0cc)

		// set flags
		var flags uint32 = 0

		if m.GetEntities() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetMessage())
		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetWebPagePreview) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetWebPagePreview) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8b68b0cc:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Message = dBuf.String()
		if (flags & (1 << 3)) != 0 {
			c3 := dBuf.Int()
			if c3 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
				return dBuf.GetError()
			}
			l3 := dBuf.Int()
			v3 := make([]*MessageEntity, l3)
			for i := int32(0); i < l3; i++ {
				v3[i] = &MessageEntity{}
				v3[i].Decode(dBuf)
			}
			m.Entities = v3
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetWebPagePreview) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesExportChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesExportChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_exportChatInvite))

	switch uint32(m.Constructor) {
	case 0xa02ce5d5:
		x.UInt(0xa02ce5d5)

		// set flags
		var flags uint32 = 0

		if m.GetLegacyRevokePermanent() == true {
			flags |= 1 << 2
		}
		if m.GetRequestNeeded() == true {
			flags |= 1 << 3
		}

		if m.GetExpireDate() != nil {
			flags |= 1 << 0
		}
		if m.GetUsageLimit() != nil {
			flags |= 1 << 1
		}
		if m.GetTitle() != nil {
			flags |= 1 << 4
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetExpireDate() != nil {
			x.Int(m.GetExpireDate().Value)
		}

		if m.GetUsageLimit() != nil {
			x.Int(m.GetUsageLimit().Value)
		}

		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

	case 0x14b9bcd7:
		x.UInt(0x14b9bcd7)

		// set flags
		var flags uint32 = 0

		if m.GetLegacyRevokePermanent() == true {
			flags |= 1 << 2
		}

		if m.GetExpireDate() != nil {
			flags |= 1 << 0
		}
		if m.GetUsageLimit() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetExpireDate() != nil {
			x.Int(m.GetExpireDate().Value)
		}

		if m.GetUsageLimit() != nil {
			x.Int(m.GetUsageLimit().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesExportChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesExportChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa02ce5d5:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 2)) != 0 {
			m.LegacyRevokePermanent = true
		}
		if (flags & (1 << 3)) != 0 {
			m.RequestNeeded = true
		}

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.Peer = m4

		if (flags & (1 << 0)) != 0 {
			m.ExpireDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.UsageLimit = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 4)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()
	case 0x14b9bcd7:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 2)) != 0 {
			m.LegacyRevokePermanent = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		if (flags & (1 << 0)) != 0 {
			m.ExpireDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.UsageLimit = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesExportChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesCheckChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesCheckChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_checkChatInvite))

	switch uint32(m.Constructor) {
	case 0x3eadb1bb:
		x.UInt(0x3eadb1bb)

		// no flags

		x.String(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesCheckChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesCheckChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3eadb1bb:

		// not has flags

		m.Hash = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesCheckChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesImportChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesImportChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_importChatInvite))

	switch uint32(m.Constructor) {
	case 0x6c50051c:
		x.UInt(0x6c50051c)

		// no flags

		x.String(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesImportChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesImportChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6c50051c:

		// not has flags

		m.Hash = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesImportChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetStickerSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getStickerSet))

	switch uint32(m.Constructor) {
	case 0xc8a0ec74:
		x.UInt(0xc8a0ec74)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))
		x.Int(m.GetHash())

	case 0x2619a90e:
		x.UInt(0x2619a90e)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetStickerSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc8a0ec74:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		m.Hash = dBuf.Int()
		return dBuf.GetError()
	case 0x2619a90e:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesInstallStickerSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesInstallStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_installStickerSet))

	switch uint32(m.Constructor) {
	case 0xc78fe460:
		x.UInt(0xc78fe460)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))
		x.Bytes(m.GetArchived().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesInstallStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesInstallStickerSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc78fe460:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Archived = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesInstallStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUninstallStickerSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUninstallStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_uninstallStickerSet))

	switch uint32(m.Constructor) {
	case 0xf96e55de:
		x.UInt(0xf96e55de)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUninstallStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUninstallStickerSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf96e55de:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUninstallStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesStartBot
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesStartBot) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_startBot))

	switch uint32(m.Constructor) {
	case 0xe6df7378:
		x.UInt(0xe6df7378)

		// no flags

		x.Bytes(m.GetBot().Encode(layer))
		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetRandomId())
		x.String(m.GetStartParam())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesStartBot) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStartBot) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe6df7378:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.Bot = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		m.RandomId = dBuf.Long()
		m.StartParam = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesStartBot) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessagesViews
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessagesViews) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessagesViews))

	switch uint32(m.Constructor) {
	case 0x5784d3e1:
		x.UInt(0x5784d3e1)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

		x.Bytes(m.GetIncrement().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessagesViews) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessagesViews) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5784d3e1:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		m3 := &Bool{}
		m3.Decode(dBuf)
		m.Increment = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessagesViews) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditChatAdmin
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditChatAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editChatAdmin))

	switch uint32(m.Constructor) {
	case 0xa85bd1c2:
		x.UInt(0xa85bd1c2)

		// no flags

		x.Long(m.GetChatId())
		x.Bytes(m.GetUserId().Encode(layer))
		x.Bytes(m.GetIsAdmin().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditChatAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditChatAdmin) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa85bd1c2:

		// not has flags

		m.ChatId = dBuf.Long()

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		m3 := &Bool{}
		m3.Decode(dBuf)
		m.IsAdmin = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditChatAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesMigrateChat
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesMigrateChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_migrateChat))

	switch uint32(m.Constructor) {
	case 0xa2875319:
		x.UInt(0xa2875319)

		// no flags

		x.Long(m.GetChatId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesMigrateChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMigrateChat) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa2875319:

		// not has flags

		m.ChatId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesMigrateChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSearchGlobal
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSearchGlobal) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_searchGlobal))

	switch uint32(m.Constructor) {
	case 0x4bc6589a:
		x.UInt(0x4bc6589a)

		// set flags
		var flags uint32 = 0

		if m.GetFolderId() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFolderId() != nil {
			x.Int(m.GetFolderId().Value)
		}

		x.String(m.GetQ())
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetMinDate())
		x.Int(m.GetMaxDate())
		x.Int(m.GetOffsetRate())
		x.Bytes(m.GetOffsetPeer().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchGlobal) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchGlobal) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4bc6589a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.FolderId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.Q = dBuf.String()

		m4 := &MessagesFilter{}
		m4.Decode(dBuf)
		m.Filter = m4

		m.MinDate = dBuf.Int()
		m.MaxDate = dBuf.Int()
		m.OffsetRate = dBuf.Int()

		m8 := &InputPeer{}
		m8.Decode(dBuf)
		m.OffsetPeer = m8

		m.OffsetId = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSearchGlobal) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReorderStickerSets
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReorderStickerSets) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_reorderStickerSets))

	switch uint32(m.Constructor) {
	case 0x78337739:
		x.UInt(0x78337739)

		// set flags
		var flags uint32 = 0

		if m.GetMasks() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

		x.VectorLong(m.GetOrder())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReorderStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReorderStickerSets) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x78337739:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Masks = true
		}

		m.Order = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReorderStickerSets) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDocumentByHash
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDocumentByHash) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDocumentByHash))

	switch uint32(m.Constructor) {
	case 0x338e2464:
		x.UInt(0x338e2464)

		// no flags

		x.StringBytes(m.GetSha256())
		x.Int(m.GetSize2())
		x.String(m.GetMimeType())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDocumentByHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDocumentByHash) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x338e2464:

		// not has flags

		m.Sha256 = dBuf.StringBytes()
		m.Size2 = dBuf.Int()
		m.MimeType = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDocumentByHash) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSavedGifs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSavedGifs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSavedGifs))

	switch uint32(m.Constructor) {
	case 0x5cf09635:
		x.UInt(0x5cf09635)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSavedGifs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSavedGifs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5cf09635:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSavedGifs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSaveGif
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSaveGif) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_saveGif))

	switch uint32(m.Constructor) {
	case 0x327a30cb:
		x.UInt(0x327a30cb)

		// no flags

		x.Bytes(m.GetId().Encode(layer))
		x.Bytes(m.GetUnsave().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSaveGif) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSaveGif) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x327a30cb:

		// not has flags

		m1 := &InputDocument{}
		m1.Decode(dBuf)
		m.Id = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Unsave = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSaveGif) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetInlineBotResults
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetInlineBotResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getInlineBotResults))

	switch uint32(m.Constructor) {
	case 0x514e999d:
		x.UInt(0x514e999d)

		// set flags
		var flags uint32 = 0

		if m.GetGeoPoint() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetBot().Encode(layer))
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetGeoPoint() != nil {
			x.Bytes(m.GetGeoPoint().Encode(layer))
		}

		x.String(m.GetQuery())
		x.String(m.GetOffset())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetInlineBotResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetInlineBotResults) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x514e999d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.Bot = m2

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		if (flags & (1 << 0)) != 0 {
			m4 := &InputGeoPoint{}
			m4.Decode(dBuf)
			m.GeoPoint = m4
		}
		m.Query = dBuf.String()
		m.Offset = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetInlineBotResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetInlineBotResults
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetInlineBotResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setInlineBotResults))

	switch uint32(m.Constructor) {
	case 0xeb5ea206:
		x.UInt(0xeb5ea206)

		// set flags
		var flags uint32 = 0

		if m.GetGallery() == true {
			flags |= 1 << 0
		}
		if m.GetPrivate() == true {
			flags |= 1 << 1
		}

		if m.GetNextOffset() != nil {
			flags |= 1 << 2
		}
		if m.GetSwitchPm() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetQueryId())

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetResults())))
		for _, v := range m.GetResults() {
			x.Bytes((*v).Encode(layer))
		}

		x.Int(m.GetCacheTime())
		if m.GetNextOffset() != nil {
			x.String(m.GetNextOffset().Value)
		}

		if m.GetSwitchPm() != nil {
			x.Bytes(m.GetSwitchPm().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetInlineBotResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetInlineBotResults) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xeb5ea206:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Gallery = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Private = true
		}
		m.QueryId = dBuf.Long()
		c5 := dBuf.Int()
		if c5 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
			return dBuf.GetError()
		}
		l5 := dBuf.Int()
		v5 := make([]*InputBotInlineResult, l5)
		for i := int32(0); i < l5; i++ {
			v5[i] = &InputBotInlineResult{}
			v5[i].Decode(dBuf)
		}
		m.Results = v5

		m.CacheTime = dBuf.Int()
		if (flags & (1 << 2)) != 0 {
			m.NextOffset = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 3)) != 0 {
			m8 := &InlineBotSwitchPM{}
			m8.Decode(dBuf)
			m.SwitchPm = m8
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetInlineBotResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendInlineBotResult
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendInlineBotResult) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendInlineBotResult))

	switch uint32(m.Constructor) {
	case 0x7aa11297:
		x.UInt(0x7aa11297)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}
		if m.GetHideVia() == true {
			flags |= 1 << 11
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}
		if m.GetSendAs() != nil {
			flags |= 1 << 13
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Long(m.GetRandomId())
		x.Long(m.GetQueryId())
		x.String(m.GetId())
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

		if m.GetSendAs() != nil {
			x.Bytes(m.GetSendAs().Encode(layer))
		}

	case 0x220815b0:
		x.UInt(0x220815b0)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}
		if m.GetHideVia() == true {
			flags |= 1 << 11
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Long(m.GetRandomId())
		x.Long(m.GetQueryId())
		x.String(m.GetId())
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendInlineBotResult) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendInlineBotResult) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7aa11297:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}
		if (flags & (1 << 11)) != 0 {
			m.HideVia = true
		}

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.Peer = m6

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.RandomId = dBuf.Long()
		m.QueryId = dBuf.Long()
		m.Id = dBuf.String()
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 13)) != 0 {
			m12 := &InputPeer{}
			m12.Decode(dBuf)
			m.SendAs = m12
		}
		return dBuf.GetError()
	case 0x220815b0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}
		if (flags & (1 << 11)) != 0 {
			m.HideVia = true
		}

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.Peer = m6

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m.RandomId = dBuf.Long()
		m.QueryId = dBuf.Long()
		m.Id = dBuf.String()
		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendInlineBotResult) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessageEditData
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessageEditData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessageEditData))

	switch uint32(m.Constructor) {
	case 0xfda68d36:
		x.UInt(0xfda68d36)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessageEditData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessageEditData) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xfda68d36:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessageEditData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editMessage))

	switch uint32(m.Constructor) {
	case 0x48f71778:
		x.UInt(0x48f71778)

		// set flags
		var flags uint32 = 0

		if m.GetNoWebpage() == true {
			flags |= 1 << 1
		}

		if m.GetMessage() != nil {
			flags |= 1 << 11
		}
		if m.GetMedia() != nil {
			flags |= 1 << 14
		}
		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 15
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())
		if m.GetMessage() != nil {
			x.String(m.GetMessage().Value)
		}

		if m.GetMedia() != nil {
			x.Bytes(m.GetMedia().Encode(layer))
		}

		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}
		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x48f71778:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.NoWebpage = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Id = dBuf.Int()
		if (flags & (1 << 11)) != 0 {
			m.Message = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 14)) != 0 {
			m6 := &InputMedia{}
			m6.Decode(dBuf)
			m.Media = m6
		}
		if (flags & (1 << 2)) != 0 {
			m7 := &ReplyMarkup{}
			m7.Decode(dBuf)
			m.ReplyMarkup = m7
		}
		if (flags & (1 << 3)) != 0 {
			c8 := dBuf.Int()
			if c8 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
				return dBuf.GetError()
			}
			l8 := dBuf.Int()
			v8 := make([]*MessageEntity, l8)
			for i := int32(0); i < l8; i++ {
				v8[i] = &MessageEntity{}
				v8[i].Decode(dBuf)
			}
			m.Entities = v8
		}
		if (flags & (1 << 15)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditInlineBotMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditInlineBotMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editInlineBotMessage))

	switch uint32(m.Constructor) {
	case 0x83557dba:
		x.UInt(0x83557dba)

		// set flags
		var flags uint32 = 0

		if m.GetNoWebpage() == true {
			flags |= 1 << 1
		}

		if m.GetMessage() != nil {
			flags |= 1 << 11
		}
		if m.GetMedia() != nil {
			flags |= 1 << 14
		}
		if m.GetReplyMarkup() != nil {
			flags |= 1 << 2
		}
		if m.GetEntities() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetId().Encode(layer))
		if m.GetMessage() != nil {
			x.String(m.GetMessage().Value)
		}

		if m.GetMedia() != nil {
			x.Bytes(m.GetMedia().Encode(layer))
		}

		if m.GetReplyMarkup() != nil {
			x.Bytes(m.GetReplyMarkup().Encode(layer))
		}

		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditInlineBotMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditInlineBotMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x83557dba:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.NoWebpage = true
		}

		m3 := &InputBotInlineMessageID{}
		m3.Decode(dBuf)
		m.Id = m3

		if (flags & (1 << 11)) != 0 {
			m.Message = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 14)) != 0 {
			m5 := &InputMedia{}
			m5.Decode(dBuf)
			m.Media = m5
		}
		if (flags & (1 << 2)) != 0 {
			m6 := &ReplyMarkup{}
			m6.Decode(dBuf)
			m.ReplyMarkup = m6
		}
		if (flags & (1 << 3)) != 0 {
			c7 := dBuf.Int()
			if c7 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
				return dBuf.GetError()
			}
			l7 := dBuf.Int()
			v7 := make([]*MessageEntity, l7)
			for i := int32(0); i < l7; i++ {
				v7[i] = &MessageEntity{}
				v7[i].Decode(dBuf)
			}
			m.Entities = v7
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditInlineBotMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetBotCallbackAnswer
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetBotCallbackAnswer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getBotCallbackAnswer))

	switch uint32(m.Constructor) {
	case 0x9342ca07:
		x.UInt(0x9342ca07)

		// set flags
		var flags uint32 = 0

		if m.GetGame() == true {
			flags |= 1 << 1
		}

		if m.GetData() != nil {
			flags |= 1 << 0
		}
		if m.GetPassword() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		if m.GetData() != nil {
			x.StringBytes(m.GetData())
		}

		if m.GetPassword() != nil {
			x.Bytes(m.GetPassword().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetBotCallbackAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetBotCallbackAnswer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9342ca07:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.Game = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.MsgId = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.Data = dBuf.StringBytes()
		}

		if (flags & (1 << 2)) != 0 {
			m6 := &InputCheckPasswordSRP{}
			m6.Decode(dBuf)
			m.Password = m6
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetBotCallbackAnswer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetBotCallbackAnswer
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetBotCallbackAnswer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setBotCallbackAnswer))

	switch uint32(m.Constructor) {
	case 0xd58f130a:
		x.UInt(0xd58f130a)

		// set flags
		var flags uint32 = 0

		if m.GetAlert() == true {
			flags |= 1 << 1
		}

		if m.GetMessage() != nil {
			flags |= 1 << 0
		}
		if m.GetUrl() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetQueryId())
		if m.GetMessage() != nil {
			x.String(m.GetMessage().Value)
		}

		if m.GetUrl() != nil {
			x.String(m.GetUrl().Value)
		}

		x.Int(m.GetCacheTime())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetBotCallbackAnswer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetBotCallbackAnswer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd58f130a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.Alert = true
		}
		m.QueryId = dBuf.Long()
		if (flags & (1 << 0)) != 0 {
			m.Message = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.Url = &types.StringValue{Value: dBuf.String()}
		}

		m.CacheTime = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetBotCallbackAnswer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPeerDialogs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPeerDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPeerDialogs))

	switch uint32(m.Constructor) {
	case 0xe470bcfd:
		x.UInt(0xe470bcfd)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetPeers())))
		for _, v := range m.GetPeers() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPeerDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPeerDialogs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe470bcfd:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputDialogPeer, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputDialogPeer{}
			v1[i].Decode(dBuf)
		}
		m.Peers = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPeerDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSaveDraft
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSaveDraft) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_saveDraft))

	switch uint32(m.Constructor) {
	case 0xbc39e14b:
		x.UInt(0xbc39e14b)

		// set flags
		var flags uint32 = 0

		if m.GetNoWebpage() == true {
			flags |= 1 << 1
		}
		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetEntities() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetMessage())
		if m.GetEntities() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetEntities())))
			for _, v := range m.GetEntities() {
				x.Bytes((*v).Encode(layer))
			}
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSaveDraft) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSaveDraft) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbc39e14b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.NoWebpage = true
		}
		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.Peer = m4

		m.Message = dBuf.String()
		if (flags & (1 << 3)) != 0 {
			c6 := dBuf.Int()
			if c6 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 6, c6)
				return dBuf.GetError()
			}
			l6 := dBuf.Int()
			v6 := make([]*MessageEntity, l6)
			for i := int32(0); i < l6; i++ {
				v6[i] = &MessageEntity{}
				v6[i].Decode(dBuf)
			}
			m.Entities = v6
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSaveDraft) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAllDrafts
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAllDrafts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAllDrafts))

	switch uint32(m.Constructor) {
	case 0x6a3f8d65:
		x.UInt(0x6a3f8d65)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAllDrafts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAllDrafts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6a3f8d65:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAllDrafts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetFeaturedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetFeaturedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getFeaturedStickers))

	switch uint32(m.Constructor) {
	case 0x64780b14:
		x.UInt(0x64780b14)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetFeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetFeaturedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x64780b14:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetFeaturedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadFeaturedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadFeaturedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readFeaturedStickers))

	switch uint32(m.Constructor) {
	case 0x5b118126:
		x.UInt(0x5b118126)

		// no flags

		x.VectorLong(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadFeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadFeaturedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5b118126:

		// not has flags

		m.Id = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadFeaturedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetRecentStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetRecentStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getRecentStickers))

	switch uint32(m.Constructor) {
	case 0x9da9403b:
		x.UInt(0x9da9403b)

		// set flags
		var flags uint32 = 0

		if m.GetAttached() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetRecentStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetRecentStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9da9403b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Attached = true
		}
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetRecentStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSaveRecentSticker
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSaveRecentSticker) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_saveRecentSticker))

	switch uint32(m.Constructor) {
	case 0x392718f8:
		x.UInt(0x392718f8)

		// set flags
		var flags uint32 = 0

		if m.GetAttached() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetId().Encode(layer))
		x.Bytes(m.GetUnsave().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSaveRecentSticker) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSaveRecentSticker) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x392718f8:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Attached = true
		}

		m3 := &InputDocument{}
		m3.Decode(dBuf)
		m.Id = m3

		m4 := &Bool{}
		m4.Decode(dBuf)
		m.Unsave = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSaveRecentSticker) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesClearRecentStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesClearRecentStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_clearRecentStickers))

	switch uint32(m.Constructor) {
	case 0x8999602d:
		x.UInt(0x8999602d)

		// set flags
		var flags uint32 = 0

		if m.GetAttached() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesClearRecentStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesClearRecentStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8999602d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Attached = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesClearRecentStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetArchivedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetArchivedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getArchivedStickers))

	switch uint32(m.Constructor) {
	case 0x57f17692:
		x.UInt(0x57f17692)

		// set flags
		var flags uint32 = 0

		if m.GetMasks() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetOffsetId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetArchivedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetArchivedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x57f17692:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Masks = true
		}
		m.OffsetId = dBuf.Long()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetArchivedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMaskStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMaskStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMaskStickers))

	switch uint32(m.Constructor) {
	case 0x640f82b8:
		x.UInt(0x640f82b8)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMaskStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMaskStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x640f82b8:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMaskStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAttachedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAttachedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAttachedStickers))

	switch uint32(m.Constructor) {
	case 0xcc5b67cc:
		x.UInt(0xcc5b67cc)

		// no flags

		x.Bytes(m.GetMedia().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAttachedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAttachedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcc5b67cc:

		// not has flags

		m1 := &InputStickeredMedia{}
		m1.Decode(dBuf)
		m.Media = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAttachedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetGameScore
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetGameScore) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setGameScore))

	switch uint32(m.Constructor) {
	case 0x8ef8ecc0:
		x.UInt(0x8ef8ecc0)

		// set flags
		var flags uint32 = 0

		if m.GetEditMessage() == true {
			flags |= 1 << 0
		}
		if m.GetForce() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())
		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetScore())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetGameScore) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetGameScore) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8ef8ecc0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.EditMessage = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Force = true
		}

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.Peer = m4

		m.Id = dBuf.Int()

		m6 := &InputUser{}
		m6.Decode(dBuf)
		m.UserId = m6

		m.Score = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetGameScore) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetInlineGameScore
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetInlineGameScore) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setInlineGameScore))

	switch uint32(m.Constructor) {
	case 0x15ad9f64:
		x.UInt(0x15ad9f64)

		// set flags
		var flags uint32 = 0

		if m.GetEditMessage() == true {
			flags |= 1 << 0
		}
		if m.GetForce() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetId().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetScore())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetInlineGameScore) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetInlineGameScore) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x15ad9f64:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.EditMessage = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Force = true
		}

		m4 := &InputBotInlineMessageID{}
		m4.Decode(dBuf)
		m.Id = m4

		m5 := &InputUser{}
		m5.Decode(dBuf)
		m.UserId = m5

		m.Score = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetInlineGameScore) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetGameHighScores
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetGameHighScores) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getGameHighScores))

	switch uint32(m.Constructor) {
	case 0xe822649d:
		x.UInt(0xe822649d)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())
		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetGameHighScores) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetGameHighScores) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe822649d:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.Int()

		m3 := &InputUser{}
		m3.Decode(dBuf)
		m.UserId = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetGameHighScores) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetInlineGameHighScores
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetInlineGameHighScores) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getInlineGameHighScores))

	switch uint32(m.Constructor) {
	case 0xf635e1b:
		x.UInt(0xf635e1b)

		// no flags

		x.Bytes(m.GetId().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetInlineGameHighScores) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetInlineGameHighScores) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf635e1b:

		// not has flags

		m1 := &InputBotInlineMessageID{}
		m1.Decode(dBuf)
		m.Id = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetInlineGameHighScores) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetCommonChats
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetCommonChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getCommonChats))

	switch uint32(m.Constructor) {
	case 0xe40ca104:
		x.UInt(0xe40ca104)

		// no flags

		x.Bytes(m.GetUserId().Encode(layer))
		x.Long(m.GetMaxId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetCommonChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetCommonChats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe40ca104:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.UserId = m1

		m.MaxId = dBuf.Long()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetCommonChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAllChats
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAllChats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAllChats))

	switch uint32(m.Constructor) {
	case 0x875f74be:
		x.UInt(0x875f74be)

		// no flags

		x.VectorLong(m.GetExceptIds())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAllChats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAllChats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x875f74be:

		// not has flags

		m.ExceptIds = dBuf.VectorLong()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAllChats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetWebPage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetWebPage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getWebPage))

	switch uint32(m.Constructor) {
	case 0x32ca8f91:
		x.UInt(0x32ca8f91)

		// no flags

		x.String(m.GetUrl())
		x.Int(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetWebPage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetWebPage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x32ca8f91:

		// not has flags

		m.Url = dBuf.String()
		m.Hash = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetWebPage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesToggleDialogPin
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesToggleDialogPin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_toggleDialogPin))

	switch uint32(m.Constructor) {
	case 0xa731e257:
		x.UInt(0xa731e257)

		// set flags
		var flags uint32 = 0

		if m.GetPinned() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesToggleDialogPin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesToggleDialogPin) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa731e257:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Pinned = true
		}

		m3 := &InputDialogPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesToggleDialogPin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReorderPinnedDialogs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReorderPinnedDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_reorderPinnedDialogs))

	switch uint32(m.Constructor) {
	case 0x3b1adf37:
		x.UInt(0x3b1adf37)

		// set flags
		var flags uint32 = 0

		if m.GetForce() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetFolderId())

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetOrder())))
		for _, v := range m.GetOrder() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReorderPinnedDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReorderPinnedDialogs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3b1adf37:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Force = true
		}
		m.FolderId = dBuf.Int()
		c4 := dBuf.Int()
		if c4 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
			return dBuf.GetError()
		}
		l4 := dBuf.Int()
		v4 := make([]*InputDialogPeer, l4)
		for i := int32(0); i < l4; i++ {
			v4[i] = &InputDialogPeer{}
			v4[i].Decode(dBuf)
		}
		m.Order = v4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReorderPinnedDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPinnedDialogs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPinnedDialogs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPinnedDialogs))

	switch uint32(m.Constructor) {
	case 0xd6b94df2:
		x.UInt(0xd6b94df2)

		// no flags

		x.Int(m.GetFolderId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPinnedDialogs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPinnedDialogs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd6b94df2:

		// not has flags

		m.FolderId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPinnedDialogs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetBotShippingResults
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetBotShippingResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setBotShippingResults))

	switch uint32(m.Constructor) {
	case 0xe5f672fa:
		x.UInt(0xe5f672fa)

		// set flags
		var flags uint32 = 0

		if m.GetError() != nil {
			flags |= 1 << 0
		}
		if m.GetShippingOptions() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetQueryId())
		if m.GetError() != nil {
			x.String(m.GetError().Value)
		}

		if m.GetShippingOptions() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetShippingOptions())))
			for _, v := range m.GetShippingOptions() {
				x.Bytes((*v).Encode(layer))
			}
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetBotShippingResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetBotShippingResults) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe5f672fa:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.QueryId = dBuf.Long()
		if (flags & (1 << 0)) != 0 {
			m.Error = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			c4 := dBuf.Int()
			if c4 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 4, c4)
				return dBuf.GetError()
			}
			l4 := dBuf.Int()
			v4 := make([]*ShippingOption, l4)
			for i := int32(0); i < l4; i++ {
				v4[i] = &ShippingOption{}
				v4[i].Decode(dBuf)
			}
			m.ShippingOptions = v4
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetBotShippingResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetBotPrecheckoutResults
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetBotPrecheckoutResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setBotPrecheckoutResults))

	switch uint32(m.Constructor) {
	case 0x9c2dd95:
		x.UInt(0x9c2dd95)

		// set flags
		var flags uint32 = 0

		if m.GetSuccess() == true {
			flags |= 1 << 1
		}

		if m.GetError() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetQueryId())
		if m.GetError() != nil {
			x.String(m.GetError().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetBotPrecheckoutResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetBotPrecheckoutResults) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9c2dd95:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.Success = true
		}
		m.QueryId = dBuf.Long()
		if (flags & (1 << 0)) != 0 {
			m.Error = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetBotPrecheckoutResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUploadMedia
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUploadMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_uploadMedia))

	switch uint32(m.Constructor) {
	case 0x519bc2b1:
		x.UInt(0x519bc2b1)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetMedia().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUploadMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUploadMedia) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x519bc2b1:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputMedia{}
		m2.Decode(dBuf)
		m.Media = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUploadMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendScreenshotNotification
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendScreenshotNotification) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendScreenshotNotification))

	switch uint32(m.Constructor) {
	case 0xc97df020:
		x.UInt(0xc97df020)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetReplyToMsgId())
		x.Long(m.GetRandomId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendScreenshotNotification) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendScreenshotNotification) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc97df020:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.ReplyToMsgId = dBuf.Int()
		m.RandomId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendScreenshotNotification) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetFavedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetFavedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getFavedStickers))

	switch uint32(m.Constructor) {
	case 0x4f1aaa9:
		x.UInt(0x4f1aaa9)

		// no flags

		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetFavedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetFavedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4f1aaa9:

		// not has flags

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetFavedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesFaveSticker
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesFaveSticker) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_faveSticker))

	switch uint32(m.Constructor) {
	case 0xb9ffc55b:
		x.UInt(0xb9ffc55b)

		// no flags

		x.Bytes(m.GetId().Encode(layer))
		x.Bytes(m.GetUnfave().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesFaveSticker) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesFaveSticker) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb9ffc55b:

		// not has flags

		m1 := &InputDocument{}
		m1.Decode(dBuf)
		m.Id = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Unfave = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesFaveSticker) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetUnreadMentions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetUnreadMentions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getUnreadMentions))

	switch uint32(m.Constructor) {
	case 0x46578472:
		x.UInt(0x46578472)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetAddOffset())
		x.Int(m.GetLimit())
		x.Int(m.GetMaxId())
		x.Int(m.GetMinId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetUnreadMentions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetUnreadMentions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x46578472:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.OffsetId = dBuf.Int()
		m.AddOffset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.MaxId = dBuf.Int()
		m.MinId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetUnreadMentions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadMentions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadMentions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readMentions))

	switch uint32(m.Constructor) {
	case 0xf0189d3:
		x.UInt(0xf0189d3)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadMentions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadMentions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf0189d3:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadMentions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetRecentLocations
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetRecentLocations) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getRecentLocations))

	switch uint32(m.Constructor) {
	case 0x702a40e0:
		x.UInt(0x702a40e0)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetLimit())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetRecentLocations) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetRecentLocations) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x702a40e0:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Limit = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetRecentLocations) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendMultiMedia
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendMultiMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendMultiMedia))

	switch uint32(m.Constructor) {
	case 0xf803138f:
		x.UInt(0xf803138f)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}
		if m.GetNoforwards() == true {
			flags |= 1 << 14
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}
		if m.GetSendAs() != nil {
			flags |= 1 << 13
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetMultiMedia())))
		for _, v := range m.GetMultiMedia() {
			x.Bytes((*v).Encode(layer))
		}

		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

		if m.GetSendAs() != nil {
			x.Bytes(m.GetSendAs().Encode(layer))
		}

	case 0xcc0110cb:
		x.UInt(0xcc0110cb)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 5
		}
		if m.GetBackground() == true {
			flags |= 1 << 6
		}
		if m.GetClearDraft() == true {
			flags |= 1 << 7
		}

		if m.GetReplyToMsgId() != nil {
			flags |= 1 << 0
		}

		if m.GetScheduleDate() != nil {
			flags |= 1 << 10
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetReplyToMsgId() != nil {
			x.Int(m.GetReplyToMsgId().Value)
		}

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetMultiMedia())))
		for _, v := range m.GetMultiMedia() {
			x.Bytes((*v).Encode(layer))
		}

		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendMultiMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendMultiMedia) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf803138f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}
		if (flags & (1 << 14)) != 0 {
			m.Noforwards = true
		}

		m6 := &InputPeer{}
		m6.Decode(dBuf)
		m.Peer = m6

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		c8 := dBuf.Int()
		if c8 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 8, c8)
			return dBuf.GetError()
		}
		l8 := dBuf.Int()
		v8 := make([]*InputSingleMedia, l8)
		for i := int32(0); i < l8; i++ {
			v8[i] = &InputSingleMedia{}
			v8[i].Decode(dBuf)
		}
		m.MultiMedia = v8

		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 13)) != 0 {
			m10 := &InputPeer{}
			m10.Decode(dBuf)
			m.SendAs = m10
		}
		return dBuf.GetError()
	case 0xcc0110cb:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 5)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 6)) != 0 {
			m.Background = true
		}
		if (flags & (1 << 7)) != 0 {
			m.ClearDraft = true
		}

		m5 := &InputPeer{}
		m5.Decode(dBuf)
		m.Peer = m5

		if (flags & (1 << 0)) != 0 {
			m.ReplyToMsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		c7 := dBuf.Int()
		if c7 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 7, c7)
			return dBuf.GetError()
		}
		l7 := dBuf.Int()
		v7 := make([]*InputSingleMedia, l7)
		for i := int32(0); i < l7; i++ {
			v7[i] = &InputSingleMedia{}
			v7[i].Decode(dBuf)
		}
		m.MultiMedia = v7

		if (flags & (1 << 10)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendMultiMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUploadEncryptedFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUploadEncryptedFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_uploadEncryptedFile))

	switch uint32(m.Constructor) {
	case 0x5057c497:
		x.UInt(0x5057c497)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetFile().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUploadEncryptedFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUploadEncryptedFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5057c497:

		// not has flags

		m1 := &InputEncryptedChat{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputEncryptedFile{}
		m2.Decode(dBuf)
		m.File = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUploadEncryptedFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSearchStickerSets
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSearchStickerSets) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_searchStickerSets))

	switch uint32(m.Constructor) {
	case 0x35705b8a:
		x.UInt(0x35705b8a)

		// set flags
		var flags uint32 = 0

		if m.GetExcludeFeatured() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetQ())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchStickerSets) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x35705b8a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.ExcludeFeatured = true
		}
		m.Q = dBuf.String()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSearchStickerSets) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSplitRanges
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSplitRanges) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSplitRanges))

	switch uint32(m.Constructor) {
	case 0x1cff7e08:
		x.UInt(0x1cff7e08)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSplitRanges) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSplitRanges) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1cff7e08:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSplitRanges) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesMarkDialogUnread
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesMarkDialogUnread) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_markDialogUnread))

	switch uint32(m.Constructor) {
	case 0xc286d98f:
		x.UInt(0xc286d98f)

		// set flags
		var flags uint32 = 0

		if m.GetUnread() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesMarkDialogUnread) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesMarkDialogUnread) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc286d98f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Unread = true
		}

		m3 := &InputDialogPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesMarkDialogUnread) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDialogUnreadMarks
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDialogUnreadMarks) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDialogUnreadMarks))

	switch uint32(m.Constructor) {
	case 0x22e24e22:
		x.UInt(0x22e24e22)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDialogUnreadMarks) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDialogUnreadMarks) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x22e24e22:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDialogUnreadMarks) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesClearAllDrafts
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesClearAllDrafts) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_clearAllDrafts))

	switch uint32(m.Constructor) {
	case 0x7e58ee9c:
		x.UInt(0x7e58ee9c)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesClearAllDrafts) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesClearAllDrafts) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7e58ee9c:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesClearAllDrafts) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUpdatePinnedMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUpdatePinnedMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_updatePinnedMessage))

	switch uint32(m.Constructor) {
	case 0xd2aaf7ec:
		x.UInt(0xd2aaf7ec)

		// set flags
		var flags uint32 = 0

		if m.GetSilent() == true {
			flags |= 1 << 0
		}
		if m.GetUnpin() == true {
			flags |= 1 << 1
		}
		if m.GetPmOneside() == true {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUpdatePinnedMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUpdatePinnedMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd2aaf7ec:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Silent = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Unpin = true
		}
		if (flags & (1 << 2)) != 0 {
			m.PmOneside = true
		}

		m5 := &InputPeer{}
		m5.Decode(dBuf)
		m.Peer = m5

		m.Id = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUpdatePinnedMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendVote
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendVote) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendVote))

	switch uint32(m.Constructor) {
	case 0x10ea6184:
		x.UInt(0x10ea6184)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())

		x.VectorBytes(m.GetOptions())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendVote) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendVote) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x10ea6184:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()

		m.Options = dBuf.VectorBytes()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendVote) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPollResults
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPollResults) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPollResults))

	switch uint32(m.Constructor) {
	case 0x73bb643b:
		x.UInt(0x73bb643b)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPollResults) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPollResults) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x73bb643b:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPollResults) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetOnlines
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetOnlines) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getOnlines))

	switch uint32(m.Constructor) {
	case 0x6e2be050:
		x.UInt(0x6e2be050)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetOnlines) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetOnlines) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6e2be050:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetOnlines) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditChatAbout
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditChatAbout) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editChatAbout))

	switch uint32(m.Constructor) {
	case 0xdef60797:
		x.UInt(0xdef60797)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetAbout())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditChatAbout) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditChatAbout) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdef60797:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.About = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditChatAbout) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditChatDefaultBannedRights
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditChatDefaultBannedRights) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editChatDefaultBannedRights))

	switch uint32(m.Constructor) {
	case 0xa5866b41:
		x.UInt(0xa5866b41)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetBannedRights().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditChatDefaultBannedRights) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditChatDefaultBannedRights) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa5866b41:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &ChatBannedRights{}
		m2.Decode(dBuf)
		m.BannedRights = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditChatDefaultBannedRights) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetEmojiKeywords
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetEmojiKeywords) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getEmojiKeywords))

	switch uint32(m.Constructor) {
	case 0x35a0e062:
		x.UInt(0x35a0e062)

		// no flags

		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetEmojiKeywords) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetEmojiKeywords) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x35a0e062:

		// not has flags

		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetEmojiKeywords) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetEmojiKeywordsDifference
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetEmojiKeywordsDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getEmojiKeywordsDifference))

	switch uint32(m.Constructor) {
	case 0x1508b6af:
		x.UInt(0x1508b6af)

		// no flags

		x.String(m.GetLangCode())
		x.Int(m.GetFromVersion())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetEmojiKeywordsDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetEmojiKeywordsDifference) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1508b6af:

		// not has flags

		m.LangCode = dBuf.String()
		m.FromVersion = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetEmojiKeywordsDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetEmojiKeywordsLanguages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetEmojiKeywordsLanguages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getEmojiKeywordsLanguages))

	switch uint32(m.Constructor) {
	case 0x4e9963b2:
		x.UInt(0x4e9963b2)

		// no flags

		x.VectorString(m.GetLangCodes())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetEmojiKeywordsLanguages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetEmojiKeywordsLanguages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4e9963b2:

		// not has flags

		m.LangCodes = dBuf.VectorString()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetEmojiKeywordsLanguages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetEmojiURL
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetEmojiURL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getEmojiURL))

	switch uint32(m.Constructor) {
	case 0xd5b10c26:
		x.UInt(0xd5b10c26)

		// no flags

		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetEmojiURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetEmojiURL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd5b10c26:

		// not has flags

		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetEmojiURL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSearchCounters
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSearchCounters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSearchCounters))

	switch uint32(m.Constructor) {
	case 0x732eef00:
		x.UInt(0x732eef00)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetFilters())))
		for _, v := range m.GetFilters() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSearchCounters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSearchCounters) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x732eef00:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*MessagesFilter, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &MessagesFilter{}
			v2[i].Decode(dBuf)
		}
		m.Filters = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSearchCounters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesRequestUrlAuth
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesRequestUrlAuth) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_requestUrlAuth))

	switch uint32(m.Constructor) {
	case 0x198fb446:
		x.UInt(0x198fb446)

		// set flags
		var flags uint32 = 0

		if m.GetPeer() != nil {
			flags |= 1 << 1
		}
		if m.GetMsgId() != nil {
			flags |= 1 << 1
		}
		if m.GetButtonId() != nil {
			flags |= 1 << 1
		}
		if m.GetUrl() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetPeer() != nil {
			x.Bytes(m.GetPeer().Encode(layer))
		}

		if m.GetMsgId() != nil {
			x.Int(m.GetMsgId().Value)
		}

		if m.GetButtonId() != nil {
			x.Int(m.GetButtonId().Value)
		}

		if m.GetUrl() != nil {
			x.String(m.GetUrl().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesRequestUrlAuth) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesRequestUrlAuth) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x198fb446:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m2 := &InputPeer{}
			m2.Decode(dBuf)
			m.Peer = m2
		}
		if (flags & (1 << 1)) != 0 {
			m.MsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.ButtonId = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 2)) != 0 {
			m.Url = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesRequestUrlAuth) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesAcceptUrlAuth
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesAcceptUrlAuth) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_acceptUrlAuth))

	switch uint32(m.Constructor) {
	case 0xb12c7125:
		x.UInt(0xb12c7125)

		// set flags
		var flags uint32 = 0

		if m.GetWriteAllowed() == true {
			flags |= 1 << 0
		}
		if m.GetPeer() != nil {
			flags |= 1 << 1
		}
		if m.GetMsgId() != nil {
			flags |= 1 << 1
		}
		if m.GetButtonId() != nil {
			flags |= 1 << 1
		}
		if m.GetUrl() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetPeer() != nil {
			x.Bytes(m.GetPeer().Encode(layer))
		}

		if m.GetMsgId() != nil {
			x.Int(m.GetMsgId().Value)
		}

		if m.GetButtonId() != nil {
			x.Int(m.GetButtonId().Value)
		}

		if m.GetUrl() != nil {
			x.String(m.GetUrl().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesAcceptUrlAuth) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesAcceptUrlAuth) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb12c7125:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.WriteAllowed = true
		}
		if (flags & (1 << 1)) != 0 {
			m3 := &InputPeer{}
			m3.Decode(dBuf)
			m.Peer = m3
		}
		if (flags & (1 << 1)) != 0 {
			m.MsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.ButtonId = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 2)) != 0 {
			m.Url = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesAcceptUrlAuth) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesHidePeerSettingsBar
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesHidePeerSettingsBar) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_hidePeerSettingsBar))

	switch uint32(m.Constructor) {
	case 0x4facb138:
		x.UInt(0x4facb138)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesHidePeerSettingsBar) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHidePeerSettingsBar) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4facb138:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesHidePeerSettingsBar) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetScheduledHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetScheduledHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getScheduledHistory))

	switch uint32(m.Constructor) {
	case 0xf516760b:
		x.UInt(0xf516760b)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetScheduledHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetScheduledHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf516760b:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetScheduledHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetScheduledMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetScheduledMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getScheduledMessages))

	switch uint32(m.Constructor) {
	case 0xbdbb0464:
		x.UInt(0xbdbb0464)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetScheduledMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetScheduledMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbdbb0464:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetScheduledMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendScheduledMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendScheduledMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendScheduledMessages))

	switch uint32(m.Constructor) {
	case 0xbd38850a:
		x.UInt(0xbd38850a)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendScheduledMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendScheduledMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbd38850a:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendScheduledMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteScheduledMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteScheduledMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteScheduledMessages))

	switch uint32(m.Constructor) {
	case 0x59ae2b16:
		x.UInt(0x59ae2b16)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteScheduledMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteScheduledMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x59ae2b16:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteScheduledMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPollVotes
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPollVotes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPollVotes))

	switch uint32(m.Constructor) {
	case 0xb86e380e:
		x.UInt(0xb86e380e)

		// set flags
		var flags uint32 = 0

		if m.GetOption() != nil {
			flags |= 1 << 0
		}
		if m.GetOffset() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())
		if m.GetOption() != nil {
			x.StringBytes(m.GetOption())
		}

		if m.GetOffset() != nil {
			x.String(m.GetOffset().Value)
		}

		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPollVotes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPollVotes) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb86e380e:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		m.Id = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.Option = dBuf.StringBytes()
		}

		if (flags & (1 << 1)) != 0 {
			m.Offset = &types.StringValue{Value: dBuf.String()}
		}

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPollVotes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesToggleStickerSets
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesToggleStickerSets) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_toggleStickerSets))

	switch uint32(m.Constructor) {
	case 0xb5052fea:
		x.UInt(0xb5052fea)

		// set flags
		var flags uint32 = 0

		if m.GetUninstall() == true {
			flags |= 1 << 0
		}
		if m.GetArchive() == true {
			flags |= 1 << 1
		}
		if m.GetUnarchive() == true {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetStickersets())))
		for _, v := range m.GetStickersets() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesToggleStickerSets) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesToggleStickerSets) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb5052fea:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Uninstall = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Archive = true
		}
		if (flags & (1 << 2)) != 0 {
			m.Unarchive = true
		}
		c5 := dBuf.Int()
		if c5 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
			return dBuf.GetError()
		}
		l5 := dBuf.Int()
		v5 := make([]*InputStickerSet, l5)
		for i := int32(0); i < l5; i++ {
			v5[i] = &InputStickerSet{}
			v5[i].Decode(dBuf)
		}
		m.Stickersets = v5

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesToggleStickerSets) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDialogFilters
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDialogFilters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDialogFilters))

	switch uint32(m.Constructor) {
	case 0xf19ed96d:
		x.UInt(0xf19ed96d)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDialogFilters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDialogFilters) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf19ed96d:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDialogFilters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSuggestedDialogFilters
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSuggestedDialogFilters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSuggestedDialogFilters))

	switch uint32(m.Constructor) {
	case 0xa29cd42c:
		x.UInt(0xa29cd42c)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSuggestedDialogFilters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSuggestedDialogFilters) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa29cd42c:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSuggestedDialogFilters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUpdateDialogFilter
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUpdateDialogFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_updateDialogFilter))

	switch uint32(m.Constructor) {
	case 0x1ad4a04a:
		x.UInt(0x1ad4a04a)

		// set flags
		var flags uint32 = 0

		if m.GetFilter() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetId())
		if m.GetFilter() != nil {
			x.Bytes(m.GetFilter().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUpdateDialogFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUpdateDialogFilter) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1ad4a04a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Id = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m3 := &DialogFilter{}
			m3.Decode(dBuf)
			m.Filter = m3
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUpdateDialogFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUpdateDialogFiltersOrder
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUpdateDialogFiltersOrder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_updateDialogFiltersOrder))

	switch uint32(m.Constructor) {
	case 0xc563c1e4:
		x.UInt(0xc563c1e4)

		// no flags

		x.VectorInt(m.GetOrder())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUpdateDialogFiltersOrder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUpdateDialogFiltersOrder) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc563c1e4:

		// not has flags

		m.Order = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUpdateDialogFiltersOrder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetOldFeaturedStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetOldFeaturedStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getOldFeaturedStickers))

	switch uint32(m.Constructor) {
	case 0x7ed094a1:
		x.UInt(0x7ed094a1)

		// no flags

		x.Int(m.GetOffset())
		x.Int(m.GetLimit())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetOldFeaturedStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetOldFeaturedStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7ed094a1:

		// not has flags

		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetOldFeaturedStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetReplies
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetReplies) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getReplies))

	switch uint32(m.Constructor) {
	case 0x22ddd30c:
		x.UInt(0x22ddd30c)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		x.Int(m.GetOffsetId())
		x.Int(m.GetOffsetDate())
		x.Int(m.GetAddOffset())
		x.Int(m.GetLimit())
		x.Int(m.GetMaxId())
		x.Int(m.GetMinId())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetReplies) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetReplies) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x22ddd30c:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		m.OffsetId = dBuf.Int()
		m.OffsetDate = dBuf.Int()
		m.AddOffset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.MaxId = dBuf.Int()
		m.MinId = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetReplies) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetDiscussionMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetDiscussionMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getDiscussionMessage))

	switch uint32(m.Constructor) {
	case 0x446972fd:
		x.UInt(0x446972fd)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetDiscussionMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetDiscussionMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x446972fd:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetDiscussionMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadDiscussion
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadDiscussion) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readDiscussion))

	switch uint32(m.Constructor) {
	case 0xf731a9f4:
		x.UInt(0xf731a9f4)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		x.Int(m.GetReadMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadDiscussion) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadDiscussion) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf731a9f4:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		m.ReadMaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadDiscussion) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUnpinAllMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUnpinAllMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_unpinAllMessages))

	switch uint32(m.Constructor) {
	case 0xf025bc8b:
		x.UInt(0xf025bc8b)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUnpinAllMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUnpinAllMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf025bc8b:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUnpinAllMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteChat
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteChat) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteChat))

	switch uint32(m.Constructor) {
	case 0x5bd0ee50:
		x.UInt(0x5bd0ee50)

		// no flags

		x.Long(m.GetChatId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteChat) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteChat) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5bd0ee50:

		// not has flags

		m.ChatId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteChat) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeletePhoneCallHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeletePhoneCallHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deletePhoneCallHistory))

	switch uint32(m.Constructor) {
	case 0xf9cbe409:
		x.UInt(0xf9cbe409)

		// set flags
		var flags uint32 = 0

		if m.GetRevoke() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeletePhoneCallHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeletePhoneCallHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf9cbe409:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Revoke = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeletePhoneCallHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesCheckHistoryImport
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesCheckHistoryImport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_checkHistoryImport))

	switch uint32(m.Constructor) {
	case 0x43fe19f3:
		x.UInt(0x43fe19f3)

		// no flags

		x.String(m.GetImportHead())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesCheckHistoryImport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesCheckHistoryImport) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x43fe19f3:

		// not has flags

		m.ImportHead = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesCheckHistoryImport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesInitHistoryImport
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesInitHistoryImport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_initHistoryImport))

	switch uint32(m.Constructor) {
	case 0x34090c3b:
		x.UInt(0x34090c3b)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetFile().Encode(layer))
		x.Int(m.GetMediaCount())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesInitHistoryImport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesInitHistoryImport) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x34090c3b:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputFile{}
		m2.Decode(dBuf)
		m.File = m2

		m.MediaCount = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesInitHistoryImport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesUploadImportedMedia
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesUploadImportedMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_uploadImportedMedia))

	switch uint32(m.Constructor) {
	case 0x2a862092:
		x.UInt(0x2a862092)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetImportId())
		x.String(m.GetFileName())
		x.Bytes(m.GetMedia().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesUploadImportedMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesUploadImportedMedia) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2a862092:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.ImportId = dBuf.Long()
		m.FileName = dBuf.String()

		m4 := &InputMedia{}
		m4.Decode(dBuf)
		m.Media = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesUploadImportedMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesStartHistoryImport
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesStartHistoryImport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_startHistoryImport))

	switch uint32(m.Constructor) {
	case 0xb43df344:
		x.UInt(0xb43df344)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Long(m.GetImportId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesStartHistoryImport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesStartHistoryImport) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb43df344:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.ImportId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesStartHistoryImport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetExportedChatInvites
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetExportedChatInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getExportedChatInvites))

	switch uint32(m.Constructor) {
	case 0xa2b5a3f6:
		x.UInt(0xa2b5a3f6)

		// set flags
		var flags uint32 = 0

		if m.GetRevoked() == true {
			flags |= 1 << 3
		}

		if m.GetOffsetDate() != nil {
			flags |= 1 << 2
		}
		if m.GetOffsetLink() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetAdminId().Encode(layer))
		if m.GetOffsetDate() != nil {
			x.Int(m.GetOffsetDate().Value)
		}

		if m.GetOffsetLink() != nil {
			x.String(m.GetOffsetLink().Value)
		}

		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetExportedChatInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetExportedChatInvites) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa2b5a3f6:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 3)) != 0 {
			m.Revoked = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m4 := &InputUser{}
		m4.Decode(dBuf)
		m.AdminId = m4

		if (flags & (1 << 2)) != 0 {
			m.OffsetDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 2)) != 0 {
			m.OffsetLink = &types.StringValue{Value: dBuf.String()}
		}

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetExportedChatInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetExportedChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetExportedChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getExportedChatInvite))

	switch uint32(m.Constructor) {
	case 0x73746f5c:
		x.UInt(0x73746f5c)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetLink())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x73746f5c:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Link = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetExportedChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesEditExportedChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesEditExportedChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_editExportedChatInvite))

	switch uint32(m.Constructor) {
	case 0xbdca2f75:
		x.UInt(0xbdca2f75)

		// set flags
		var flags uint32 = 0

		if m.GetRevoked() == true {
			flags |= 1 << 2
		}

		if m.GetExpireDate() != nil {
			flags |= 1 << 0
		}
		if m.GetUsageLimit() != nil {
			flags |= 1 << 1
		}
		if m.GetRequestNeeded() != nil {
			flags |= 1 << 3
		}
		if m.GetTitle() != nil {
			flags |= 1 << 4
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetLink())
		if m.GetExpireDate() != nil {
			x.Int(m.GetExpireDate().Value)
		}

		if m.GetUsageLimit() != nil {
			x.Int(m.GetUsageLimit().Value)
		}

		if m.GetRequestNeeded() != nil {
			x.Bytes(m.GetRequestNeeded().Encode(layer))
		}

		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

	case 0x2e4ffbe:
		x.UInt(0x2e4ffbe)

		// set flags
		var flags uint32 = 0

		if m.GetRevoked() == true {
			flags |= 1 << 2
		}

		if m.GetExpireDate() != nil {
			flags |= 1 << 0
		}
		if m.GetUsageLimit() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetLink())
		if m.GetExpireDate() != nil {
			x.Int(m.GetExpireDate().Value)
		}

		if m.GetUsageLimit() != nil {
			x.Int(m.GetUsageLimit().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesEditExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesEditExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbdca2f75:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 2)) != 0 {
			m.Revoked = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Link = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.ExpireDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.UsageLimit = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 3)) != 0 {
			m7 := &Bool{}
			m7.Decode(dBuf)
			m.RequestNeeded = m7
		}
		if (flags & (1 << 4)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()
	case 0x2e4ffbe:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 2)) != 0 {
			m.Revoked = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Link = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.ExpireDate = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.UsageLimit = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesEditExportedChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteRevokedExportedChatInvites
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteRevokedExportedChatInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteRevokedExportedChatInvites))

	switch uint32(m.Constructor) {
	case 0x56987bd5:
		x.UInt(0x56987bd5)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetAdminId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteRevokedExportedChatInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteRevokedExportedChatInvites) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x56987bd5:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.AdminId = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteRevokedExportedChatInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesDeleteExportedChatInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesDeleteExportedChatInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_deleteExportedChatInvite))

	switch uint32(m.Constructor) {
	case 0xd464a42b:
		x.UInt(0xd464a42b)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetLink())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesDeleteExportedChatInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesDeleteExportedChatInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd464a42b:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Link = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesDeleteExportedChatInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAdminsWithInvites
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAdminsWithInvites) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAdminsWithInvites))

	switch uint32(m.Constructor) {
	case 0x3920e6ef:
		x.UInt(0x3920e6ef)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAdminsWithInvites) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAdminsWithInvites) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3920e6ef:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAdminsWithInvites) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetChatInviteImporters
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetChatInviteImporters) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getChatInviteImporters))

	switch uint32(m.Constructor) {
	case 0xdf04dd4e:
		x.UInt(0xdf04dd4e)

		// set flags
		var flags uint32 = 0

		if m.GetRequested() == true {
			flags |= 1 << 0
		}

		if m.GetLink_FLAGSTRING() != nil {
			flags |= 1 << 1
		}
		if m.GetQ() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetLink_FLAGSTRING() != nil {
			x.String(m.GetLink_FLAGSTRING().Value)
		}

		if m.GetQ() != nil {
			x.String(m.GetQ().Value)
		}

		x.Int(m.GetOffsetDate())
		x.Bytes(m.GetOffsetUser().Encode(layer))
		x.Int(m.GetLimit())

	case 0x26fb7289:
		x.UInt(0x26fb7289)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetLink_STRING())
		x.Int(m.GetOffsetDate())
		x.Bytes(m.GetOffsetUser().Encode(layer))
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetChatInviteImporters) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetChatInviteImporters) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdf04dd4e:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Requested = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		if (flags & (1 << 1)) != 0 {
			m.Link_FLAGSTRING = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.Q = &types.StringValue{Value: dBuf.String()}
		}

		m.OffsetDate = dBuf.Int()

		m7 := &InputUser{}
		m7.Decode(dBuf)
		m.OffsetUser = m7

		m.Limit = dBuf.Int()
		return dBuf.GetError()
	case 0x26fb7289:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Link_STRING = dBuf.String()
		m.OffsetDate = dBuf.Int()

		m4 := &InputUser{}
		m4.Decode(dBuf)
		m.OffsetUser = m4

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetChatInviteImporters) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetHistoryTTL
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetHistoryTTL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setHistoryTTL))

	switch uint32(m.Constructor) {
	case 0xb80e5fe4:
		x.UInt(0xb80e5fe4)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetPeriod())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetHistoryTTL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetHistoryTTL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb80e5fe4:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Period = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetHistoryTTL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesCheckHistoryImportPeer
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesCheckHistoryImportPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_checkHistoryImportPeer))

	switch uint32(m.Constructor) {
	case 0x5dc60f03:
		x.UInt(0x5dc60f03)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesCheckHistoryImportPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesCheckHistoryImportPeer) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5dc60f03:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesCheckHistoryImportPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetChatTheme
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetChatTheme) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setChatTheme))

	switch uint32(m.Constructor) {
	case 0xe63be13f:
		x.UInt(0xe63be13f)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetEmoticon())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetChatTheme) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetChatTheme) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe63be13f:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Emoticon = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetChatTheme) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessageReadParticipants
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessageReadParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessageReadParticipants))

	switch uint32(m.Constructor) {
	case 0x2c6f97b7:
		x.UInt(0x2c6f97b7)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessageReadParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessageReadParticipants) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2c6f97b7:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessageReadParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSearchResultsCalendar
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSearchResultsCalendar) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSearchResultsCalendar))

	switch uint32(m.Constructor) {
	case 0x49f0bde9:
		x.UInt(0x49f0bde9)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetOffsetDate())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSearchResultsCalendar) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSearchResultsCalendar) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x49f0bde9:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &MessagesFilter{}
		m2.Decode(dBuf)
		m.Filter = m2

		m.OffsetId = dBuf.Int()
		m.OffsetDate = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSearchResultsCalendar) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetSearchResultsPositions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetSearchResultsPositions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getSearchResultsPositions))

	switch uint32(m.Constructor) {
	case 0x6e9583a3:
		x.UInt(0x6e9583a3)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetSearchResultsPositions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetSearchResultsPositions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6e9583a3:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &MessagesFilter{}
		m2.Decode(dBuf)
		m.Filter = m2

		m.OffsetId = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetSearchResultsPositions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesHideChatJoinRequest
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesHideChatJoinRequest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_hideChatJoinRequest))

	switch uint32(m.Constructor) {
	case 0x7fe7e815:
		x.UInt(0x7fe7e815)

		// set flags
		var flags uint32 = 0

		if m.GetApproved() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesHideChatJoinRequest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHideChatJoinRequest) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7fe7e815:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Approved = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m4 := &InputUser{}
		m4.Decode(dBuf)
		m.UserId = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesHideChatJoinRequest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesHideAllChatJoinRequests
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesHideAllChatJoinRequests) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_hideAllChatJoinRequests))

	switch uint32(m.Constructor) {
	case 0xe085f4ea:
		x.UInt(0xe085f4ea)

		// set flags
		var flags uint32 = 0

		if m.GetApproved() == true {
			flags |= 1 << 0
		}

		if m.GetLink() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		if m.GetLink() != nil {
			x.String(m.GetLink().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesHideAllChatJoinRequests) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesHideAllChatJoinRequests) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe085f4ea:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Approved = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		if (flags & (1 << 1)) != 0 {
			m.Link = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesHideAllChatJoinRequests) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesToggleNoForwards
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesToggleNoForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_toggleNoForwards))

	switch uint32(m.Constructor) {
	case 0xb11eafa2:
		x.UInt(0xb11eafa2)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetEnabled().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesToggleNoForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesToggleNoForwards) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb11eafa2:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Enabled = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesToggleNoForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSaveDefaultSendAs
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSaveDefaultSendAs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_saveDefaultSendAs))

	switch uint32(m.Constructor) {
	case 0xccfddf96:
		x.UInt(0xccfddf96)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetSendAs().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSaveDefaultSendAs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSaveDefaultSendAs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xccfddf96:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.SendAs = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSaveDefaultSendAs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSendReaction
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSendReaction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_sendReaction))

	switch uint32(m.Constructor) {
	case 0x25690ce4:
		x.UInt(0x25690ce4)

		// set flags
		var flags uint32 = 0

		if m.GetBig() == true {
			flags |= 1 << 1
		}

		if m.GetReaction() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		if m.GetReaction() != nil {
			x.String(m.GetReaction().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSendReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSendReaction) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x25690ce4:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.Big = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.MsgId = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.Reaction = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSendReaction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessagesReactions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessagesReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessagesReactions))

	switch uint32(m.Constructor) {
	case 0x8bba90e6:
		x.UInt(0x8bba90e6)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessagesReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessagesReactions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8bba90e6:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessagesReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetMessageReactionsList
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetMessageReactionsList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getMessageReactionsList))

	switch uint32(m.Constructor) {
	case 0xe0ee6b77:
		x.UInt(0xe0ee6b77)

		// set flags
		var flags uint32 = 0

		if m.GetReaction() != nil {
			flags |= 1 << 0
		}
		if m.GetOffset() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetId())
		if m.GetReaction() != nil {
			x.String(m.GetReaction().Value)
		}

		if m.GetOffset() != nil {
			x.String(m.GetOffset().Value)
		}

		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetMessageReactionsList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetMessageReactionsList) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe0ee6b77:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		m.Id = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.Reaction = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.Offset = &types.StringValue{Value: dBuf.String()}
		}

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetMessageReactionsList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetChatAvailableReactions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetChatAvailableReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setChatAvailableReactions))

	switch uint32(m.Constructor) {
	case 0x14050ea6:
		x.UInt(0x14050ea6)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

		x.VectorString(m.GetAvailableReactions())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetChatAvailableReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetChatAvailableReactions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x14050ea6:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.AvailableReactions = dBuf.VectorString()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetChatAvailableReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetAvailableReactions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetAvailableReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getAvailableReactions))

	switch uint32(m.Constructor) {
	case 0x18dea0ac:
		x.UInt(0x18dea0ac)

		// no flags

		x.Int(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetAvailableReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetAvailableReactions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x18dea0ac:

		// not has flags

		m.Hash = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetAvailableReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSetDefaultReaction
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSetDefaultReaction) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_setDefaultReaction))

	switch uint32(m.Constructor) {
	case 0xd960c4d4:
		x.UInt(0xd960c4d4)

		// no flags

		x.String(m.GetReaction())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSetDefaultReaction) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSetDefaultReaction) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd960c4d4:

		// not has flags

		m.Reaction = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSetDefaultReaction) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesTranslateText
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesTranslateText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_translateText))

	switch uint32(m.Constructor) {
	case 0x24ce6dee:
		x.UInt(0x24ce6dee)

		// set flags
		var flags uint32 = 0

		if m.GetPeer() != nil {
			flags |= 1 << 0
		}
		if m.GetMsgId() != nil {
			flags |= 1 << 0
		}
		if m.GetText() != nil {
			flags |= 1 << 1
		}
		if m.GetFromLang() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetPeer() != nil {
			x.Bytes(m.GetPeer().Encode(layer))
		}

		if m.GetMsgId() != nil {
			x.Int(m.GetMsgId().Value)
		}

		if m.GetText() != nil {
			x.String(m.GetText().Value)
		}

		if m.GetFromLang() != nil {
			x.String(m.GetFromLang().Value)
		}

		x.String(m.GetToLang())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesTranslateText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesTranslateText) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x24ce6dee:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m2 := &InputPeer{}
			m2.Decode(dBuf)
			m.Peer = m2
		}
		if (flags & (1 << 0)) != 0 {
			m.MsgId = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.Text = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.FromLang = &types.StringValue{Value: dBuf.String()}
		}

		m.ToLang = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesTranslateText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetUnreadReactions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetUnreadReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getUnreadReactions))

	switch uint32(m.Constructor) {
	case 0xe85bae1a:
		x.UInt(0xe85bae1a)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetAddOffset())
		x.Int(m.GetLimit())
		x.Int(m.GetMaxId())
		x.Int(m.GetMinId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetUnreadReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetUnreadReactions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe85bae1a:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.OffsetId = dBuf.Int()
		m.AddOffset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.MaxId = dBuf.Int()
		m.MinId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetUnreadReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesReadReactions
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesReadReactions) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_readReactions))

	switch uint32(m.Constructor) {
	case 0x82e251d7:
		x.UInt(0x82e251d7)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesReadReactions) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesReadReactions) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x82e251d7:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesReadReactions) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesSearchSentMedia
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesSearchSentMedia) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_searchSentMedia))

	switch uint32(m.Constructor) {
	case 0x107e31a0:
		x.UInt(0x107e31a0)

		// no flags

		x.String(m.GetQ())
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesSearchSentMedia) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesSearchSentMedia) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x107e31a0:

		// not has flags

		m.Q = dBuf.String()

		m2 := &MessagesFilter{}
		m2.Decode(dBuf)
		m.Filter = m2

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesSearchSentMedia) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUpdatesGetState
///////////////////////////////////////////////////////////////////////////////
func (m *TLUpdatesGetState) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_updates_getState))

	switch uint32(m.Constructor) {
	case 0xedd4882a:
		x.UInt(0xedd4882a)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUpdatesGetState) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesGetState) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xedd4882a:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUpdatesGetState) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUpdatesGetDifference
///////////////////////////////////////////////////////////////////////////////
func (m *TLUpdatesGetDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_updates_getDifference))

	switch uint32(m.Constructor) {
	case 0x25939651:
		x.UInt(0x25939651)

		// set flags
		var flags uint32 = 0

		if m.GetPtsTotalLimit() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Int(m.GetPts())
		if m.GetPtsTotalLimit() != nil {
			x.Int(m.GetPtsTotalLimit().Value)
		}

		x.Int(m.GetDate())
		x.Int(m.GetQts())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUpdatesGetDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesGetDifference) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x25939651:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Pts = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.PtsTotalLimit = &types.Int32Value{Value: dBuf.Int()}
		}

		m.Date = dBuf.Int()
		m.Qts = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUpdatesGetDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUpdatesGetChannelDifference
///////////////////////////////////////////////////////////////////////////////
func (m *TLUpdatesGetChannelDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_updates_getChannelDifference))

	switch uint32(m.Constructor) {
	case 0x3173d78:
		x.UInt(0x3173d78)

		// set flags
		var flags uint32 = 0

		if m.GetForce() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetPts())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUpdatesGetChannelDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUpdatesGetChannelDifference) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3173d78:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Force = true
		}

		m3 := &InputChannel{}
		m3.Decode(dBuf)
		m.Channel = m3

		m4 := &ChannelMessagesFilter{}
		m4.Decode(dBuf)
		m.Filter = m4

		m.Pts = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUpdatesGetChannelDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhotosUpdateProfilePhoto
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhotosUpdateProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_photos_updateProfilePhoto))

	switch uint32(m.Constructor) {
	case 0x72d4742c:
		x.UInt(0x72d4742c)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhotosUpdateProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosUpdateProfilePhoto) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x72d4742c:

		// not has flags

		m1 := &InputPhoto{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhotosUpdateProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhotosUploadProfilePhoto
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhotosUploadProfilePhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_photos_uploadProfilePhoto))

	switch uint32(m.Constructor) {
	case 0x89f30f69:
		x.UInt(0x89f30f69)

		// set flags
		var flags uint32 = 0

		if m.GetFile() != nil {
			flags |= 1 << 0
		}
		if m.GetVideo() != nil {
			flags |= 1 << 1
		}
		if m.GetVideoStartTs() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		if m.GetFile() != nil {
			x.Bytes(m.GetFile().Encode(layer))
		}

		if m.GetVideo() != nil {
			x.Bytes(m.GetVideo().Encode(layer))
		}

		if m.GetVideoStartTs() != nil {
			x.Double(m.GetVideoStartTs().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhotosUploadProfilePhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosUploadProfilePhoto) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x89f30f69:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m2 := &InputFile{}
			m2.Decode(dBuf)
			m.File = m2
		}
		if (flags & (1 << 1)) != 0 {
			m3 := &InputFile{}
			m3.Decode(dBuf)
			m.Video = m3
		}
		if (flags & (1 << 2)) != 0 {
			m.VideoStartTs = &types.DoubleValue{Value: dBuf.Double()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhotosUploadProfilePhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhotosDeletePhotos
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhotosDeletePhotos) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_photos_deletePhotos))

	switch uint32(m.Constructor) {
	case 0x87cf7f2f:
		x.UInt(0x87cf7f2f)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId())))
		for _, v := range m.GetId() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhotosDeletePhotos) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosDeletePhotos) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x87cf7f2f:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputPhoto, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputPhoto{}
			v1[i].Decode(dBuf)
		}
		m.Id = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhotosDeletePhotos) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhotosGetUserPhotos
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhotosGetUserPhotos) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_photos_getUserPhotos))

	switch uint32(m.Constructor) {
	case 0x91cd32a8:
		x.UInt(0x91cd32a8)

		// no flags

		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetOffset())
		x.Long(m.GetMaxId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhotosGetUserPhotos) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhotosGetUserPhotos) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x91cd32a8:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.UserId = m1

		m.Offset = dBuf.Int()
		m.MaxId = dBuf.Long()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhotosGetUserPhotos) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadSaveFilePart
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadSaveFilePart) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_saveFilePart))

	switch uint32(m.Constructor) {
	case 0xb304a621:
		x.UInt(0xb304a621)

		// no flags

		x.Long(m.GetFileId())
		x.Int(m.GetFilePart())
		x.StringBytes(m.GetBytes())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadSaveFilePart) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadSaveFilePart) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb304a621:

		// not has flags

		m.FileId = dBuf.Long()
		m.FilePart = dBuf.Int()
		m.Bytes = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadSaveFilePart) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadGetFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadGetFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_getFile))

	switch uint32(m.Constructor) {
	case 0xb15a9afc:
		x.UInt(0xb15a9afc)

		// set flags
		var flags uint32 = 0

		if m.GetPrecise() == true {
			flags |= 1 << 0
		}
		if m.GetCdnSupported() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetLocation().Encode(layer))
		x.Int(m.GetOffset())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadGetFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadGetFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb15a9afc:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Precise = true
		}
		if (flags & (1 << 1)) != 0 {
			m.CdnSupported = true
		}

		m4 := &InputFileLocation{}
		m4.Decode(dBuf)
		m.Location = m4

		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadGetFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadSaveBigFilePart
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadSaveBigFilePart) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_saveBigFilePart))

	switch uint32(m.Constructor) {
	case 0xde7b673d:
		x.UInt(0xde7b673d)

		// no flags

		x.Long(m.GetFileId())
		x.Int(m.GetFilePart())
		x.Int(m.GetFileTotalParts())
		x.StringBytes(m.GetBytes())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadSaveBigFilePart) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadSaveBigFilePart) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xde7b673d:

		// not has flags

		m.FileId = dBuf.Long()
		m.FilePart = dBuf.Int()
		m.FileTotalParts = dBuf.Int()
		m.Bytes = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadSaveBigFilePart) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadGetWebFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadGetWebFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_getWebFile))

	switch uint32(m.Constructor) {
	case 0x24e6818d:
		x.UInt(0x24e6818d)

		// no flags

		x.Bytes(m.GetLocation().Encode(layer))
		x.Int(m.GetOffset())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadGetWebFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadGetWebFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x24e6818d:

		// not has flags

		m1 := &InputWebFileLocation{}
		m1.Decode(dBuf)
		m.Location = m1

		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadGetWebFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadGetCdnFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadGetCdnFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_getCdnFile))

	switch uint32(m.Constructor) {
	case 0x2000bcc3:
		x.UInt(0x2000bcc3)

		// no flags

		x.StringBytes(m.GetFileToken())
		x.Int(m.GetOffset())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadGetCdnFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadGetCdnFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2000bcc3:

		// not has flags

		m.FileToken = dBuf.StringBytes()
		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadGetCdnFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadReuploadCdnFile
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadReuploadCdnFile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_reuploadCdnFile))

	switch uint32(m.Constructor) {
	case 0x9b2754a8:
		x.UInt(0x9b2754a8)

		// no flags

		x.StringBytes(m.GetFileToken())
		x.StringBytes(m.GetRequestToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadReuploadCdnFile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadReuploadCdnFile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9b2754a8:

		// not has flags

		m.FileToken = dBuf.StringBytes()
		m.RequestToken = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadReuploadCdnFile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadGetCdnFileHashes
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadGetCdnFileHashes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_getCdnFileHashes))

	switch uint32(m.Constructor) {
	case 0x4da54231:
		x.UInt(0x4da54231)

		// no flags

		x.StringBytes(m.GetFileToken())
		x.Int(m.GetOffset())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadGetCdnFileHashes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadGetCdnFileHashes) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4da54231:

		// not has flags

		m.FileToken = dBuf.StringBytes()
		m.Offset = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadGetCdnFileHashes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUploadGetFileHashes
///////////////////////////////////////////////////////////////////////////////
func (m *TLUploadGetFileHashes) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_upload_getFileHashes))

	switch uint32(m.Constructor) {
	case 0xc7025931:
		x.UInt(0xc7025931)

		// no flags

		x.Bytes(m.GetLocation().Encode(layer))
		x.Int(m.GetOffset())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUploadGetFileHashes) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUploadGetFileHashes) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc7025931:

		// not has flags

		m1 := &InputFileLocation{}
		m1.Decode(dBuf)
		m.Location = m1

		m.Offset = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUploadGetFileHashes) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getConfig))

	switch uint32(m.Constructor) {
	case 0xc4f9186b:
		x.UInt(0xc4f9186b)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc4f9186b:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetNearestDc
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetNearestDc) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getNearestDc))

	switch uint32(m.Constructor) {
	case 0x1fb33026:
		x.UInt(0x1fb33026)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetNearestDc) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetNearestDc) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1fb33026:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetNearestDc) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetAppUpdate
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetAppUpdate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getAppUpdate))

	switch uint32(m.Constructor) {
	case 0x522d5a7d:
		x.UInt(0x522d5a7d)

		// no flags

		x.String(m.GetSource())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetAppUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetAppUpdate) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x522d5a7d:

		// not has flags

		m.Source = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetAppUpdate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetInviteText
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetInviteText) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getInviteText))

	switch uint32(m.Constructor) {
	case 0x4d392343:
		x.UInt(0x4d392343)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetInviteText) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetInviteText) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4d392343:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetInviteText) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetSupport
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetSupport) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getSupport))

	switch uint32(m.Constructor) {
	case 0x9cdf08cd:
		x.UInt(0x9cdf08cd)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetSupport) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetSupport) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9cdf08cd:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetSupport) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetAppChangelog
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetAppChangelog) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getAppChangelog))

	switch uint32(m.Constructor) {
	case 0x9010ef6f:
		x.UInt(0x9010ef6f)

		// no flags

		x.String(m.GetPrevAppVersion())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetAppChangelog) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetAppChangelog) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9010ef6f:

		// not has flags

		m.PrevAppVersion = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetAppChangelog) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpSetBotUpdatesStatus
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpSetBotUpdatesStatus) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_setBotUpdatesStatus))

	switch uint32(m.Constructor) {
	case 0xec22cfcd:
		x.UInt(0xec22cfcd)

		// no flags

		x.Int(m.GetPendingUpdatesCount())
		x.String(m.GetMessage())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpSetBotUpdatesStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpSetBotUpdatesStatus) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xec22cfcd:

		// not has flags

		m.PendingUpdatesCount = dBuf.Int()
		m.Message = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpSetBotUpdatesStatus) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetCdnConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetCdnConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getCdnConfig))

	switch uint32(m.Constructor) {
	case 0x52029342:
		x.UInt(0x52029342)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetCdnConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetCdnConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x52029342:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetCdnConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetRecentMeUrls
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetRecentMeUrls) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getRecentMeUrls))

	switch uint32(m.Constructor) {
	case 0x3dc0f114:
		x.UInt(0x3dc0f114)

		// no flags

		x.String(m.GetReferer())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetRecentMeUrls) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetRecentMeUrls) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3dc0f114:

		// not has flags

		m.Referer = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetRecentMeUrls) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetTermsOfServiceUpdate
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetTermsOfServiceUpdate) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getTermsOfServiceUpdate))

	switch uint32(m.Constructor) {
	case 0x2ca51fd1:
		x.UInt(0x2ca51fd1)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetTermsOfServiceUpdate) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetTermsOfServiceUpdate) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2ca51fd1:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetTermsOfServiceUpdate) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpAcceptTermsOfService
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpAcceptTermsOfService) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_acceptTermsOfService))

	switch uint32(m.Constructor) {
	case 0xee72f79a:
		x.UInt(0xee72f79a)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpAcceptTermsOfService) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpAcceptTermsOfService) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xee72f79a:

		// not has flags

		m1 := &DataJSON{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpAcceptTermsOfService) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetDeepLinkInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetDeepLinkInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getDeepLinkInfo))

	switch uint32(m.Constructor) {
	case 0x3fedc75f:
		x.UInt(0x3fedc75f)

		// no flags

		x.String(m.GetPath())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetDeepLinkInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetDeepLinkInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3fedc75f:

		// not has flags

		m.Path = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetDeepLinkInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetAppConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetAppConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getAppConfig))

	switch uint32(m.Constructor) {
	case 0x98914110:
		x.UInt(0x98914110)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetAppConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetAppConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x98914110:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetAppConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpSaveAppLog
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpSaveAppLog) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_saveAppLog))

	switch uint32(m.Constructor) {
	case 0x6f02f748:
		x.UInt(0x6f02f748)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetEvents())))
		for _, v := range m.GetEvents() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpSaveAppLog) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpSaveAppLog) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6f02f748:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputAppEvent, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputAppEvent{}
			v1[i].Decode(dBuf)
		}
		m.Events = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpSaveAppLog) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetPassportConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetPassportConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getPassportConfig))

	switch uint32(m.Constructor) {
	case 0xc661ad08:
		x.UInt(0xc661ad08)

		// no flags

		x.Int(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetPassportConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetPassportConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc661ad08:

		// not has flags

		m.Hash = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetPassportConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetSupportName
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetSupportName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getSupportName))

	switch uint32(m.Constructor) {
	case 0xd360e72c:
		x.UInt(0xd360e72c)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetSupportName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetSupportName) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd360e72c:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetSupportName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetUserInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetUserInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getUserInfo))

	switch uint32(m.Constructor) {
	case 0x38a08d3:
		x.UInt(0x38a08d3)

		// no flags

		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetUserInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetUserInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x38a08d3:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.UserId = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetUserInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpEditUserInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpEditUserInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_editUserInfo))

	switch uint32(m.Constructor) {
	case 0x66b91b70:
		x.UInt(0x66b91b70)

		// no flags

		x.Bytes(m.GetUserId().Encode(layer))
		x.String(m.GetMessage())

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetEntities())))
		for _, v := range m.GetEntities() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpEditUserInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpEditUserInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x66b91b70:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.UserId = m1

		m.Message = dBuf.String()
		c3 := dBuf.Int()
		if c3 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
			return dBuf.GetError()
		}
		l3 := dBuf.Int()
		v3 := make([]*MessageEntity, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &MessageEntity{}
			v3[i].Decode(dBuf)
		}
		m.Entities = v3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpEditUserInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetPromoData
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetPromoData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getPromoData))

	switch uint32(m.Constructor) {
	case 0xc0977421:
		x.UInt(0xc0977421)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetPromoData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetPromoData) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc0977421:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetPromoData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpHidePromoData
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpHidePromoData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_hidePromoData))

	switch uint32(m.Constructor) {
	case 0x1e251c95:
		x.UInt(0x1e251c95)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpHidePromoData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpHidePromoData) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1e251c95:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpHidePromoData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpDismissSuggestion
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpDismissSuggestion) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_dismissSuggestion))

	switch uint32(m.Constructor) {
	case 0xf50dbaa1:
		x.UInt(0xf50dbaa1)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetSuggestion())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpDismissSuggestion) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpDismissSuggestion) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf50dbaa1:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Suggestion = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpDismissSuggestion) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpGetCountriesList
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpGetCountriesList) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_getCountriesList))

	switch uint32(m.Constructor) {
	case 0x735787a8:
		x.UInt(0x735787a8)

		// no flags

		x.String(m.GetLangCode())
		x.Int(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpGetCountriesList) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpGetCountriesList) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x735787a8:

		// not has flags

		m.LangCode = dBuf.String()
		m.Hash = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpGetCountriesList) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsReadHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsReadHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_readHistory))

	switch uint32(m.Constructor) {
	case 0xcc104937:
		x.UInt(0xcc104937)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsReadHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsReadHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcc104937:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.MaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsReadHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsDeleteMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsDeleteMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_deleteMessages))

	switch uint32(m.Constructor) {
	case 0x84c1fd4e:
		x.UInt(0x84c1fd4e)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsDeleteMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsDeleteMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x84c1fd4e:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsDeleteMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsReportSpam
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsReportSpam) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_reportSpam))

	switch uint32(m.Constructor) {
	case 0xf44a8315:
		x.UInt(0xf44a8315)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetParticipant().Encode(layer))

		x.VectorInt(m.GetId())

	case 0xfe087810:
		x.UInt(0xfe087810)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsReportSpam) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsReportSpam) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf44a8315:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Participant = m2

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()
	case 0xfe087810:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsReportSpam) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getMessages))

	switch uint32(m.Constructor) {
	case 0xad8c9a23:
		x.UInt(0xad8c9a23)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId())))
		for _, v := range m.GetId() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xad8c9a23:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*InputMessage, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &InputMessage{}
			v2[i].Decode(dBuf)
		}
		m.Id = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetParticipants
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getParticipants))

	switch uint32(m.Constructor) {
	case 0x77ced9d0:
		x.UInt(0x77ced9d0)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetFilter().Encode(layer))
		x.Int(m.GetOffset())
		x.Int(m.GetLimit())
		x.Long(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetParticipants) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x77ced9d0:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &ChannelParticipantsFilter{}
		m2.Decode(dBuf)
		m.Filter = m2

		m.Offset = dBuf.Int()
		m.Limit = dBuf.Int()
		m.Hash = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetParticipant
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getParticipant))

	switch uint32(m.Constructor) {
	case 0xa0ab6cc6:
		x.UInt(0xa0ab6cc6)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetParticipant().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetParticipant) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa0ab6cc6:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Participant = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetChannels
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getChannels))

	switch uint32(m.Constructor) {
	case 0xa7f6bbb:
		x.UInt(0xa7f6bbb)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetId())))
		for _, v := range m.GetId() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetChannels) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa7f6bbb:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputChannel, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputChannel{}
			v1[i].Decode(dBuf)
		}
		m.Id = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetFullChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetFullChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getFullChannel))

	switch uint32(m.Constructor) {
	case 0x8736a09:
		x.UInt(0x8736a09)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetFullChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetFullChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8736a09:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetFullChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsCreateChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsCreateChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_createChannel))

	switch uint32(m.Constructor) {
	case 0x3d5fb10f:
		x.UInt(0x3d5fb10f)

		// set flags
		var flags uint32 = 0

		if m.GetBroadcast() == true {
			flags |= 1 << 0
		}
		if m.GetMegagroup() == true {
			flags |= 1 << 1
		}
		if m.GetForImport() == true {
			flags |= 1 << 3
		}

		if m.GetGeoPoint() != nil {
			flags |= 1 << 2
		}
		if m.GetAddress() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetTitle())
		x.String(m.GetAbout())
		if m.GetGeoPoint() != nil {
			x.Bytes(m.GetGeoPoint().Encode(layer))
		}

		if m.GetAddress() != nil {
			x.String(m.GetAddress().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsCreateChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsCreateChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3d5fb10f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Broadcast = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Megagroup = true
		}
		if (flags & (1 << 3)) != 0 {
			m.ForImport = true
		}
		m.Title = dBuf.String()
		m.About = dBuf.String()
		if (flags & (1 << 2)) != 0 {
			m7 := &InputGeoPoint{}
			m7.Decode(dBuf)
			m.GeoPoint = m7
		}
		if (flags & (1 << 2)) != 0 {
			m.Address = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsCreateChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditAdmin
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditAdmin) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editAdmin))

	switch uint32(m.Constructor) {
	case 0xd33c8902:
		x.UInt(0xd33c8902)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))
		x.Bytes(m.GetAdminRights().Encode(layer))
		x.String(m.GetRank())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditAdmin) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditAdmin) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd33c8902:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		m3 := &ChatAdminRights{}
		m3.Decode(dBuf)
		m.AdminRights = m3

		m.Rank = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditAdmin) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditTitle
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editTitle))

	switch uint32(m.Constructor) {
	case 0x566decd0:
		x.UInt(0x566decd0)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.String(m.GetTitle())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditTitle) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x566decd0:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Title = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditPhoto
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditPhoto) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editPhoto))

	switch uint32(m.Constructor) {
	case 0xf12e57c9:
		x.UInt(0xf12e57c9)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetPhoto().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditPhoto) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditPhoto) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf12e57c9:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputChatPhoto{}
		m2.Decode(dBuf)
		m.Photo = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditPhoto) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsCheckUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsCheckUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_checkUsername))

	switch uint32(m.Constructor) {
	case 0x10e6bd2c:
		x.UInt(0x10e6bd2c)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsCheckUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsCheckUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x10e6bd2c:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsCheckUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsUpdateUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsUpdateUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_updateUsername))

	switch uint32(m.Constructor) {
	case 0x3514b3de:
		x.UInt(0x3514b3de)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsUpdateUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsUpdateUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3514b3de:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsUpdateUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsJoinChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsJoinChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_joinChannel))

	switch uint32(m.Constructor) {
	case 0x24b524c5:
		x.UInt(0x24b524c5)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsJoinChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsJoinChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x24b524c5:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsJoinChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsLeaveChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsLeaveChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_leaveChannel))

	switch uint32(m.Constructor) {
	case 0xf836aa95:
		x.UInt(0xf836aa95)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsLeaveChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsLeaveChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf836aa95:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsLeaveChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsInviteToChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsInviteToChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_inviteToChannel))

	switch uint32(m.Constructor) {
	case 0x199f3a6c:
		x.UInt(0x199f3a6c)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetUsers())))
		for _, v := range m.GetUsers() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsInviteToChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsInviteToChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x199f3a6c:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*InputUser, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &InputUser{}
			v2[i].Decode(dBuf)
		}
		m.Users = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsInviteToChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsDeleteChannel
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsDeleteChannel) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_deleteChannel))

	switch uint32(m.Constructor) {
	case 0xc0111fe3:
		x.UInt(0xc0111fe3)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsDeleteChannel) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsDeleteChannel) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc0111fe3:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsDeleteChannel) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsExportMessageLink
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsExportMessageLink) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_exportMessageLink))

	switch uint32(m.Constructor) {
	case 0xe63fadeb:
		x.UInt(0xe63fadeb)

		// set flags
		var flags uint32 = 0

		if m.GetGrouped() == true {
			flags |= 1 << 0
		}
		if m.GetThread() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsExportMessageLink) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsExportMessageLink) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe63fadeb:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Grouped = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Thread = true
		}

		m4 := &InputChannel{}
		m4.Decode(dBuf)
		m.Channel = m4

		m.Id = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsExportMessageLink) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsToggleSignatures
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsToggleSignatures) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_toggleSignatures))

	switch uint32(m.Constructor) {
	case 0x1f69b606:
		x.UInt(0x1f69b606)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetEnabled().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsToggleSignatures) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsToggleSignatures) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1f69b606:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Enabled = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsToggleSignatures) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetAdminedPublicChannels
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetAdminedPublicChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getAdminedPublicChannels))

	switch uint32(m.Constructor) {
	case 0xf8b036af:
		x.UInt(0xf8b036af)

		// set flags
		var flags uint32 = 0

		if m.GetByLocation() == true {
			flags |= 1 << 0
		}
		if m.GetCheckLimit() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetAdminedPublicChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetAdminedPublicChannels) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf8b036af:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.ByLocation = true
		}
		if (flags & (1 << 1)) != 0 {
			m.CheckLimit = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetAdminedPublicChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditBanned
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditBanned) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editBanned))

	switch uint32(m.Constructor) {
	case 0x96e6cd81:
		x.UInt(0x96e6cd81)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetParticipant().Encode(layer))
		x.Bytes(m.GetBannedRights().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditBanned) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditBanned) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x96e6cd81:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Participant = m2

		m3 := &ChatBannedRights{}
		m3.Decode(dBuf)
		m.BannedRights = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditBanned) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetAdminLog
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetAdminLog) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getAdminLog))

	switch uint32(m.Constructor) {
	case 0x33ddf480:
		x.UInt(0x33ddf480)

		// set flags
		var flags uint32 = 0

		if m.GetEventsFilter() != nil {
			flags |= 1 << 0
		}
		if m.GetAdmins() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))
		x.String(m.GetQ())
		if m.GetEventsFilter() != nil {
			x.Bytes(m.GetEventsFilter().Encode(layer))
		}

		if m.GetAdmins() != nil {
			x.Int(int32(CRC32_vector))
			x.Int(int32(len(m.GetAdmins())))
			for _, v := range m.GetAdmins() {
				x.Bytes((*v).Encode(layer))
			}
		}
		x.Long(m.GetMaxId())
		x.Long(m.GetMinId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetAdminLog) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetAdminLog) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x33ddf480:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputChannel{}
		m2.Decode(dBuf)
		m.Channel = m2

		m.Q = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m4 := &ChannelAdminLogEventsFilter{}
			m4.Decode(dBuf)
			m.EventsFilter = m4
		}
		if (flags & (1 << 1)) != 0 {
			c5 := dBuf.Int()
			if c5 != int32(CRC32_vector) {
				// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 5, c5)
				return dBuf.GetError()
			}
			l5 := dBuf.Int()
			v5 := make([]*InputUser, l5)
			for i := int32(0); i < l5; i++ {
				v5[i] = &InputUser{}
				v5[i].Decode(dBuf)
			}
			m.Admins = v5
		}
		m.MaxId = dBuf.Long()
		m.MinId = dBuf.Long()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetAdminLog) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsSetStickers
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsSetStickers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_setStickers))

	switch uint32(m.Constructor) {
	case 0xea8ca4f9:
		x.UInt(0xea8ca4f9)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetStickerset().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsSetStickers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsSetStickers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xea8ca4f9:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputStickerSet{}
		m2.Decode(dBuf)
		m.Stickerset = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsSetStickers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsReadMessageContents
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsReadMessageContents) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_readMessageContents))

	switch uint32(m.Constructor) {
	case 0xeab5dc38:
		x.UInt(0xeab5dc38)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

		x.VectorInt(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsReadMessageContents) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsReadMessageContents) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xeab5dc38:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Id = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsReadMessageContents) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsDeleteHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsDeleteHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_deleteHistory))

	switch uint32(m.Constructor) {
	case 0xaf369d42:
		x.UInt(0xaf369d42)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetMaxId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsDeleteHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsDeleteHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xaf369d42:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.MaxId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsDeleteHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsTogglePreHistoryHidden
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsTogglePreHistoryHidden) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_togglePreHistoryHidden))

	switch uint32(m.Constructor) {
	case 0xeabbb94c:
		x.UInt(0xeabbb94c)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetEnabled().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsTogglePreHistoryHidden) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsTogglePreHistoryHidden) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xeabbb94c:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Enabled = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsTogglePreHistoryHidden) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetLeftChannels
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetLeftChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getLeftChannels))

	switch uint32(m.Constructor) {
	case 0x8341ecc0:
		x.UInt(0x8341ecc0)

		// no flags

		x.Int(m.GetOffset())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetLeftChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetLeftChannels) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8341ecc0:

		// not has flags

		m.Offset = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetLeftChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetGroupsForDiscussion
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetGroupsForDiscussion) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getGroupsForDiscussion))

	switch uint32(m.Constructor) {
	case 0xf5dad378:
		x.UInt(0xf5dad378)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetGroupsForDiscussion) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetGroupsForDiscussion) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf5dad378:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetGroupsForDiscussion) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsSetDiscussionGroup
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsSetDiscussionGroup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_setDiscussionGroup))

	switch uint32(m.Constructor) {
	case 0x40582bb2:
		x.UInt(0x40582bb2)

		// no flags

		x.Bytes(m.GetBroadcast().Encode(layer))
		x.Bytes(m.GetGroup().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsSetDiscussionGroup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsSetDiscussionGroup) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x40582bb2:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Broadcast = m1

		m2 := &InputChannel{}
		m2.Decode(dBuf)
		m.Group = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsSetDiscussionGroup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditCreator
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditCreator) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editCreator))

	switch uint32(m.Constructor) {
	case 0x8f38cd1f:
		x.UInt(0x8f38cd1f)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))
		x.Bytes(m.GetPassword().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditCreator) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditCreator) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8f38cd1f:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		m3 := &InputCheckPasswordSRP{}
		m3.Decode(dBuf)
		m.Password = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditCreator) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsEditLocation
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsEditLocation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_editLocation))

	switch uint32(m.Constructor) {
	case 0x58e63f6d:
		x.UInt(0x58e63f6d)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetGeoPoint().Encode(layer))
		x.String(m.GetAddress())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsEditLocation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsEditLocation) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x58e63f6d:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputGeoPoint{}
		m2.Decode(dBuf)
		m.GeoPoint = m2

		m.Address = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsEditLocation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsToggleSlowMode
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsToggleSlowMode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_toggleSlowMode))

	switch uint32(m.Constructor) {
	case 0xedd49ef0:
		x.UInt(0xedd49ef0)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetSeconds())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsToggleSlowMode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsToggleSlowMode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xedd49ef0:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.Seconds = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsToggleSlowMode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetInactiveChannels
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetInactiveChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getInactiveChannels))

	switch uint32(m.Constructor) {
	case 0x11e831ee:
		x.UInt(0x11e831ee)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetInactiveChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetInactiveChannels) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x11e831ee:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetInactiveChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsConvertToGigagroup
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsConvertToGigagroup) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_convertToGigagroup))

	switch uint32(m.Constructor) {
	case 0xb290c69:
		x.UInt(0xb290c69)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsConvertToGigagroup) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsConvertToGigagroup) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb290c69:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsConvertToGigagroup) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsViewSponsoredMessage
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsViewSponsoredMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_viewSponsoredMessage))

	switch uint32(m.Constructor) {
	case 0xbeaedb94:
		x.UInt(0xbeaedb94)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.StringBytes(m.GetRandomId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsViewSponsoredMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsViewSponsoredMessage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xbeaedb94:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.RandomId = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsViewSponsoredMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetSponsoredMessages
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetSponsoredMessages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getSponsoredMessages))

	switch uint32(m.Constructor) {
	case 0xec210fbf:
		x.UInt(0xec210fbf)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetSponsoredMessages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetSponsoredMessages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xec210fbf:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetSponsoredMessages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsGetSendAs
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsGetSendAs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_getSendAs))

	switch uint32(m.Constructor) {
	case 0xdc770ee:
		x.UInt(0xdc770ee)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsGetSendAs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsGetSendAs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdc770ee:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsGetSendAs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsDeleteParticipantHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsDeleteParticipantHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_deleteParticipantHistory))

	switch uint32(m.Constructor) {
	case 0x367544db:
		x.UInt(0x367544db)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetParticipant().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsDeleteParticipantHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsDeleteParticipantHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x367544db:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Participant = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsDeleteParticipantHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBotsSendCustomRequest
///////////////////////////////////////////////////////////////////////////////
func (m *TLBotsSendCustomRequest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_bots_sendCustomRequest))

	switch uint32(m.Constructor) {
	case 0xaa2769ed:
		x.UInt(0xaa2769ed)

		// no flags

		x.String(m.GetCustomMethod())
		x.Bytes(m.GetParams().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBotsSendCustomRequest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotsSendCustomRequest) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xaa2769ed:

		// not has flags

		m.CustomMethod = dBuf.String()

		m2 := &DataJSON{}
		m2.Decode(dBuf)
		m.Params = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBotsSendCustomRequest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBotsAnswerWebhookJSONQuery
///////////////////////////////////////////////////////////////////////////////
func (m *TLBotsAnswerWebhookJSONQuery) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_bots_answerWebhookJSONQuery))

	switch uint32(m.Constructor) {
	case 0xe6213f4d:
		x.UInt(0xe6213f4d)

		// no flags

		x.Long(m.GetQueryId())
		x.Bytes(m.GetData().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBotsAnswerWebhookJSONQuery) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotsAnswerWebhookJSONQuery) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe6213f4d:

		// not has flags

		m.QueryId = dBuf.Long()

		m2 := &DataJSON{}
		m2.Decode(dBuf)
		m.Data = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBotsAnswerWebhookJSONQuery) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBotsSetBotCommands
///////////////////////////////////////////////////////////////////////////////
func (m *TLBotsSetBotCommands) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_bots_setBotCommands))

	switch uint32(m.Constructor) {
	case 0x517165a:
		x.UInt(0x517165a)

		// no flags

		x.Bytes(m.GetScope().Encode(layer))
		x.String(m.GetLangCode())

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetCommands())))
		for _, v := range m.GetCommands() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBotsSetBotCommands) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotsSetBotCommands) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x517165a:

		// not has flags

		m1 := &BotCommandScope{}
		m1.Decode(dBuf)
		m.Scope = m1

		m.LangCode = dBuf.String()
		c3 := dBuf.Int()
		if c3 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 3, c3)
			return dBuf.GetError()
		}
		l3 := dBuf.Int()
		v3 := make([]*BotCommand, l3)
		for i := int32(0); i < l3; i++ {
			v3[i] = &BotCommand{}
			v3[i].Decode(dBuf)
		}
		m.Commands = v3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBotsSetBotCommands) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBotsResetBotCommands
///////////////////////////////////////////////////////////////////////////////
func (m *TLBotsResetBotCommands) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_bots_resetBotCommands))

	switch uint32(m.Constructor) {
	case 0x3d8de0f9:
		x.UInt(0x3d8de0f9)

		// no flags

		x.Bytes(m.GetScope().Encode(layer))
		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBotsResetBotCommands) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotsResetBotCommands) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3d8de0f9:

		// not has flags

		m1 := &BotCommandScope{}
		m1.Decode(dBuf)
		m.Scope = m1

		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBotsResetBotCommands) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBotsGetBotCommands
///////////////////////////////////////////////////////////////////////////////
func (m *TLBotsGetBotCommands) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_bots_getBotCommands))

	switch uint32(m.Constructor) {
	case 0xe34c0dd6:
		x.UInt(0xe34c0dd6)

		// no flags

		x.Bytes(m.GetScope().Encode(layer))
		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBotsGetBotCommands) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBotsGetBotCommands) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe34c0dd6:

		// not has flags

		m1 := &BotCommandScope{}
		m1.Decode(dBuf)
		m.Scope = m1

		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBotsGetBotCommands) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsGetPaymentForm
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsGetPaymentForm) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_getPaymentForm))

	switch uint32(m.Constructor) {
	case 0x8a333c8d:
		x.UInt(0x8a333c8d)

		// set flags
		var flags uint32 = 0

		if m.GetThemeParams() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		if m.GetThemeParams() != nil {
			x.Bytes(m.GetThemeParams().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsGetPaymentForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsGetPaymentForm) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8a333c8d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.Peer = m2

		m.MsgId = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m4 := &DataJSON{}
			m4.Decode(dBuf)
			m.ThemeParams = m4
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsGetPaymentForm) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsGetPaymentReceipt
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsGetPaymentReceipt) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_getPaymentReceipt))

	switch uint32(m.Constructor) {
	case 0x2478d1cc:
		x.UInt(0x2478d1cc)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsGetPaymentReceipt) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsGetPaymentReceipt) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2478d1cc:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsGetPaymentReceipt) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsValidateRequestedInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsValidateRequestedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_validateRequestedInfo))

	switch uint32(m.Constructor) {
	case 0xdb103170:
		x.UInt(0xdb103170)

		// set flags
		var flags uint32 = 0

		if m.GetSave() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		x.Bytes(m.GetInfo().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsValidateRequestedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsValidateRequestedInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdb103170:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Save = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.MsgId = dBuf.Int()

		m5 := &PaymentRequestedInfo{}
		m5.Decode(dBuf)
		m.Info = m5

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsValidateRequestedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsSendPaymentForm
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsSendPaymentForm) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_sendPaymentForm))

	switch uint32(m.Constructor) {
	case 0x30c3bc9d:
		x.UInt(0x30c3bc9d)

		// set flags
		var flags uint32 = 0

		if m.GetRequestedInfoId() != nil {
			flags |= 1 << 0
		}
		if m.GetShippingOptionId() != nil {
			flags |= 1 << 1
		}

		if m.GetTipAmount() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetFormId())
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetMsgId())
		if m.GetRequestedInfoId() != nil {
			x.String(m.GetRequestedInfoId().Value)
		}

		if m.GetShippingOptionId() != nil {
			x.String(m.GetShippingOptionId().Value)
		}

		x.Bytes(m.GetCredentials().Encode(layer))
		if m.GetTipAmount() != nil {
			x.Long(m.GetTipAmount().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsSendPaymentForm) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsSendPaymentForm) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x30c3bc9d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.FormId = dBuf.Long()

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.MsgId = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.RequestedInfoId = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.ShippingOptionId = &types.StringValue{Value: dBuf.String()}
		}

		m7 := &InputPaymentCredentials{}
		m7.Decode(dBuf)
		m.Credentials = m7

		if (flags & (1 << 2)) != 0 {
			m.TipAmount = &types.Int64Value{Value: dBuf.Long()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsSendPaymentForm) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsGetSavedInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsGetSavedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_getSavedInfo))

	switch uint32(m.Constructor) {
	case 0x227d824b:
		x.UInt(0x227d824b)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsGetSavedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsGetSavedInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x227d824b:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsGetSavedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsClearSavedInfo
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsClearSavedInfo) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_clearSavedInfo))

	switch uint32(m.Constructor) {
	case 0xd83d70c1:
		x.UInt(0xd83d70c1)

		// set flags
		var flags uint32 = 0

		if m.GetCredentials() == true {
			flags |= 1 << 0
		}
		if m.GetInfo() == true {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsClearSavedInfo) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsClearSavedInfo) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd83d70c1:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Credentials = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Info = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsClearSavedInfo) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPaymentsGetBankCardData
///////////////////////////////////////////////////////////////////////////////
func (m *TLPaymentsGetBankCardData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_payments_getBankCardData))

	switch uint32(m.Constructor) {
	case 0x2e79d779:
		x.UInt(0x2e79d779)

		// no flags

		x.String(m.GetNumber())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPaymentsGetBankCardData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPaymentsGetBankCardData) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2e79d779:

		// not has flags

		m.Number = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPaymentsGetBankCardData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersCreateStickerSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersCreateStickerSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_createStickerSet))

	switch uint32(m.Constructor) {
	case 0x9021ab67:
		x.UInt(0x9021ab67)

		// set flags
		var flags uint32 = 0

		if m.GetMasks() == true {
			flags |= 1 << 0
		}
		if m.GetAnimated() == true {
			flags |= 1 << 1
		}
		if m.GetVideos() == true {
			flags |= 1 << 4
		}

		if m.GetThumb() != nil {
			flags |= 1 << 2
		}

		if m.GetSoftware() != nil {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetUserId().Encode(layer))
		x.String(m.GetTitle())
		x.String(m.GetShortName())
		if m.GetThumb() != nil {
			x.Bytes(m.GetThumb().Encode(layer))
		}

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetStickers())))
		for _, v := range m.GetStickers() {
			x.Bytes((*v).Encode(layer))
		}

		if m.GetSoftware() != nil {
			x.String(m.GetSoftware().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersCreateStickerSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersCreateStickerSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9021ab67:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Masks = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Animated = true
		}
		if (flags & (1 << 4)) != 0 {
			m.Videos = true
		}

		m5 := &InputUser{}
		m5.Decode(dBuf)
		m.UserId = m5

		m.Title = dBuf.String()
		m.ShortName = dBuf.String()
		if (flags & (1 << 2)) != 0 {
			m8 := &InputDocument{}
			m8.Decode(dBuf)
			m.Thumb = m8
		}
		c9 := dBuf.Int()
		if c9 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 9, c9)
			return dBuf.GetError()
		}
		l9 := dBuf.Int()
		v9 := make([]*InputStickerSetItem, l9)
		for i := int32(0); i < l9; i++ {
			v9[i] = &InputStickerSetItem{}
			v9[i].Decode(dBuf)
		}
		m.Stickers = v9

		if (flags & (1 << 3)) != 0 {
			m.Software = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersCreateStickerSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersRemoveStickerFromSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersRemoveStickerFromSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_removeStickerFromSet))

	switch uint32(m.Constructor) {
	case 0xf7760f51:
		x.UInt(0xf7760f51)

		// no flags

		x.Bytes(m.GetSticker().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersRemoveStickerFromSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersRemoveStickerFromSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf7760f51:

		// not has flags

		m1 := &InputDocument{}
		m1.Decode(dBuf)
		m.Sticker = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersRemoveStickerFromSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersChangeStickerPosition
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersChangeStickerPosition) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_changeStickerPosition))

	switch uint32(m.Constructor) {
	case 0xffb6d4ca:
		x.UInt(0xffb6d4ca)

		// no flags

		x.Bytes(m.GetSticker().Encode(layer))
		x.Int(m.GetPosition())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersChangeStickerPosition) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersChangeStickerPosition) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xffb6d4ca:

		// not has flags

		m1 := &InputDocument{}
		m1.Decode(dBuf)
		m.Sticker = m1

		m.Position = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersChangeStickerPosition) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersAddStickerToSet
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersAddStickerToSet) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_addStickerToSet))

	switch uint32(m.Constructor) {
	case 0x8653febe:
		x.UInt(0x8653febe)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))
		x.Bytes(m.GetSticker().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersAddStickerToSet) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersAddStickerToSet) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x8653febe:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		m2 := &InputStickerSetItem{}
		m2.Decode(dBuf)
		m.Sticker = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersAddStickerToSet) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersSetStickerSetThumb
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersSetStickerSetThumb) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_setStickerSetThumb))

	switch uint32(m.Constructor) {
	case 0x9a364e30:
		x.UInt(0x9a364e30)

		// no flags

		x.Bytes(m.GetStickerset().Encode(layer))
		x.Bytes(m.GetThumb().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersSetStickerSetThumb) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersSetStickerSetThumb) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x9a364e30:

		// not has flags

		m1 := &InputStickerSet{}
		m1.Decode(dBuf)
		m.Stickerset = m1

		m2 := &InputDocument{}
		m2.Decode(dBuf)
		m.Thumb = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersSetStickerSetThumb) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersCheckShortName
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersCheckShortName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_checkShortName))

	switch uint32(m.Constructor) {
	case 0x284b3639:
		x.UInt(0x284b3639)

		// no flags

		x.String(m.GetShortName())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersCheckShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersCheckShortName) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x284b3639:

		// not has flags

		m.ShortName = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersCheckShortName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStickersSuggestShortName
///////////////////////////////////////////////////////////////////////////////
func (m *TLStickersSuggestShortName) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stickers_suggestShortName))

	switch uint32(m.Constructor) {
	case 0x4dafc503:
		x.UInt(0x4dafc503)

		// no flags

		x.String(m.GetTitle())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStickersSuggestShortName) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStickersSuggestShortName) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x4dafc503:

		// not has flags

		m.Title = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStickersSuggestShortName) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetCallConfig
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetCallConfig) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getCallConfig))

	switch uint32(m.Constructor) {
	case 0x55451fa9:
		x.UInt(0x55451fa9)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetCallConfig) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetCallConfig) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x55451fa9:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetCallConfig) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneRequestCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneRequestCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_requestCall))

	switch uint32(m.Constructor) {
	case 0x42ff96ed:
		x.UInt(0x42ff96ed)

		// set flags
		var flags uint32 = 0

		if m.GetVideo() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetUserId().Encode(layer))
		x.Int(m.GetRandomId())
		x.StringBytes(m.GetGAHash())
		x.Bytes(m.GetProtocol().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneRequestCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneRequestCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x42ff96ed:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Video = true
		}

		m3 := &InputUser{}
		m3.Decode(dBuf)
		m.UserId = m3

		m.RandomId = dBuf.Int()
		m.GAHash = dBuf.StringBytes()

		m6 := &PhoneCallProtocol{}
		m6.Decode(dBuf)
		m.Protocol = m6

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneRequestCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneAcceptCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneAcceptCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_acceptCall))

	switch uint32(m.Constructor) {
	case 0x3bd2b4a0:
		x.UInt(0x3bd2b4a0)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.StringBytes(m.GetGB())
		x.Bytes(m.GetProtocol().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneAcceptCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneAcceptCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3bd2b4a0:

		// not has flags

		m1 := &InputPhoneCall{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.GB = dBuf.StringBytes()

		m3 := &PhoneCallProtocol{}
		m3.Decode(dBuf)
		m.Protocol = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneAcceptCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneConfirmCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneConfirmCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_confirmCall))

	switch uint32(m.Constructor) {
	case 0x2efe1722:
		x.UInt(0x2efe1722)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.StringBytes(m.GetGA())
		x.Long(m.GetKeyFingerprint())
		x.Bytes(m.GetProtocol().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneConfirmCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneConfirmCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2efe1722:

		// not has flags

		m1 := &InputPhoneCall{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.GA = dBuf.StringBytes()
		m.KeyFingerprint = dBuf.Long()

		m4 := &PhoneCallProtocol{}
		m4.Decode(dBuf)
		m.Protocol = m4

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneConfirmCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneReceivedCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneReceivedCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_receivedCall))

	switch uint32(m.Constructor) {
	case 0x17d54f61:
		x.UInt(0x17d54f61)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneReceivedCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneReceivedCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x17d54f61:

		// not has flags

		m1 := &InputPhoneCall{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneReceivedCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneDiscardCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneDiscardCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_discardCall))

	switch uint32(m.Constructor) {
	case 0xb2cbc1c0:
		x.UInt(0xb2cbc1c0)

		// set flags
		var flags uint32 = 0

		if m.GetVideo() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetDuration())
		x.Bytes(m.GetReason().Encode(layer))
		x.Long(m.GetConnectionId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneDiscardCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneDiscardCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb2cbc1c0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Video = true
		}

		m3 := &InputPhoneCall{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Duration = dBuf.Int()

		m5 := &PhoneCallDiscardReason{}
		m5.Decode(dBuf)
		m.Reason = m5

		m.ConnectionId = dBuf.Long()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneDiscardCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneSetCallRating
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneSetCallRating) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_setCallRating))

	switch uint32(m.Constructor) {
	case 0x59ead627:
		x.UInt(0x59ead627)

		// set flags
		var flags uint32 = 0

		if m.GetUserInitiative() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetRating())
		x.String(m.GetComment())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneSetCallRating) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneSetCallRating) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x59ead627:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.UserInitiative = true
		}

		m3 := &InputPhoneCall{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Rating = dBuf.Int()
		m.Comment = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneSetCallRating) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneSaveCallDebug
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneSaveCallDebug) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_saveCallDebug))

	switch uint32(m.Constructor) {
	case 0x277add7e:
		x.UInt(0x277add7e)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetDebug().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneSaveCallDebug) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneSaveCallDebug) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x277add7e:

		// not has flags

		m1 := &InputPhoneCall{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &DataJSON{}
		m2.Decode(dBuf)
		m.Debug = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneSaveCallDebug) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneSendSignalingData
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneSendSignalingData) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_sendSignalingData))

	switch uint32(m.Constructor) {
	case 0xff7a9383:
		x.UInt(0xff7a9383)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.StringBytes(m.GetData())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneSendSignalingData) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneSendSignalingData) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xff7a9383:

		// not has flags

		m1 := &InputPhoneCall{}
		m1.Decode(dBuf)
		m.Peer = m1

		m.Data = dBuf.StringBytes()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneSendSignalingData) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneCreateGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneCreateGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_createGroupCall))

	switch uint32(m.Constructor) {
	case 0x48cdc6d8:
		x.UInt(0x48cdc6d8)

		// set flags
		var flags uint32 = 0

		if m.GetRtmpStream() == true {
			flags |= 1 << 2
		}

		if m.GetTitle() != nil {
			flags |= 1 << 0
		}
		if m.GetScheduleDate() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.Int(m.GetRandomId())
		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

		if m.GetScheduleDate() != nil {
			x.Int(m.GetScheduleDate().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneCreateGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCreateGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x48cdc6d8:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 2)) != 0 {
			m.RtmpStream = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.RandomId = dBuf.Int()
		if (flags & (1 << 0)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.ScheduleDate = &types.Int32Value{Value: dBuf.Int()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneCreateGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneJoinGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneJoinGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_joinGroupCall))

	switch uint32(m.Constructor) {
	case 0xb132ff7b:
		x.UInt(0xb132ff7b)

		// set flags
		var flags uint32 = 0

		if m.GetMuted() == true {
			flags |= 1 << 0
		}
		if m.GetVideoStopped() == true {
			flags |= 1 << 2
		}

		if m.GetInviteHash() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetCall().Encode(layer))
		x.Bytes(m.GetJoinAs().Encode(layer))
		if m.GetInviteHash() != nil {
			x.String(m.GetInviteHash().Value)
		}

		x.Bytes(m.GetParams().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneJoinGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneJoinGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb132ff7b:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Muted = true
		}
		if (flags & (1 << 2)) != 0 {
			m.VideoStopped = true
		}

		m4 := &InputGroupCall{}
		m4.Decode(dBuf)
		m.Call = m4

		m5 := &InputPeer{}
		m5.Decode(dBuf)
		m.JoinAs = m5

		if (flags & (1 << 1)) != 0 {
			m.InviteHash = &types.StringValue{Value: dBuf.String()}
		}

		m7 := &DataJSON{}
		m7.Decode(dBuf)
		m.Params = m7

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneJoinGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneLeaveGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneLeaveGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_leaveGroupCall))

	switch uint32(m.Constructor) {
	case 0x500377f9:
		x.UInt(0x500377f9)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))
		x.Int(m.GetSource())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneLeaveGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneLeaveGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x500377f9:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m.Source = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneLeaveGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneInviteToGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneInviteToGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_inviteToGroupCall))

	switch uint32(m.Constructor) {
	case 0x7b393160:
		x.UInt(0x7b393160)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetUsers())))
		for _, v := range m.GetUsers() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneInviteToGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneInviteToGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7b393160:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*InputUser, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &InputUser{}
			v2[i].Decode(dBuf)
		}
		m.Users = v2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneInviteToGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneDiscardGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneDiscardGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_discardGroupCall))

	switch uint32(m.Constructor) {
	case 0x7a777135:
		x.UInt(0x7a777135)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneDiscardGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneDiscardGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x7a777135:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneDiscardGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneToggleGroupCallSettings
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneToggleGroupCallSettings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_toggleGroupCallSettings))

	switch uint32(m.Constructor) {
	case 0x74bbb43d:
		x.UInt(0x74bbb43d)

		// set flags
		var flags uint32 = 0

		if m.GetResetInviteHash() == true {
			flags |= 1 << 1
		}

		if m.GetJoinMuted() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetCall().Encode(layer))
		if m.GetJoinMuted() != nil {
			x.Bytes(m.GetJoinMuted().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneToggleGroupCallSettings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneToggleGroupCallSettings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x74bbb43d:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 1)) != 0 {
			m.ResetInviteHash = true
		}

		m3 := &InputGroupCall{}
		m3.Decode(dBuf)
		m.Call = m3

		if (flags & (1 << 0)) != 0 {
			m4 := &Bool{}
			m4.Decode(dBuf)
			m.JoinMuted = m4
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneToggleGroupCallSettings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getGroupCall))

	switch uint32(m.Constructor) {
	case 0x41845db:
		x.UInt(0x41845db)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x41845db:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetGroupParticipants
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetGroupParticipants) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getGroupParticipants))

	switch uint32(m.Constructor) {
	case 0xc558d8ab:
		x.UInt(0xc558d8ab)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetIds())))
		for _, v := range m.GetIds() {
			x.Bytes((*v).Encode(layer))
		}

		x.VectorInt(m.GetSources())

		x.String(m.GetOffset())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetGroupParticipants) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetGroupParticipants) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc558d8ab:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		c2 := dBuf.Int()
		if c2 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 2, c2)
			return dBuf.GetError()
		}
		l2 := dBuf.Int()
		v2 := make([]*InputPeer, l2)
		for i := int32(0); i < l2; i++ {
			v2[i] = &InputPeer{}
			v2[i].Decode(dBuf)
		}
		m.Ids = v2

		m.Sources = dBuf.VectorInt()

		m.Offset = dBuf.String()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetGroupParticipants) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneCheckGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneCheckGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_checkGroupCall))

	switch uint32(m.Constructor) {
	case 0xb59cf977:
		x.UInt(0xb59cf977)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

		x.VectorInt(m.GetSources())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneCheckGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneCheckGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb59cf977:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m.Sources = dBuf.VectorInt()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneCheckGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneToggleGroupCallRecord
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneToggleGroupCallRecord) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_toggleGroupCallRecord))

	switch uint32(m.Constructor) {
	case 0xf128c708:
		x.UInt(0xf128c708)

		// set flags
		var flags uint32 = 0

		if m.GetStart() == true {
			flags |= 1 << 0
		}
		if m.GetVideo() == true {
			flags |= 1 << 2
		}

		if m.GetTitle() != nil {
			flags |= 1 << 1
		}
		if m.GetVideoPortrait() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetCall().Encode(layer))
		if m.GetTitle() != nil {
			x.String(m.GetTitle().Value)
		}

		if m.GetVideoPortrait() != nil {
			x.Bytes(m.GetVideoPortrait().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneToggleGroupCallRecord) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneToggleGroupCallRecord) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf128c708:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Start = true
		}
		if (flags & (1 << 2)) != 0 {
			m.Video = true
		}

		m4 := &InputGroupCall{}
		m4.Decode(dBuf)
		m.Call = m4

		if (flags & (1 << 1)) != 0 {
			m.Title = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m6 := &Bool{}
			m6.Decode(dBuf)
			m.VideoPortrait = m6
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneToggleGroupCallRecord) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneEditGroupCallParticipant
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneEditGroupCallParticipant) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_editGroupCallParticipant))

	switch uint32(m.Constructor) {
	case 0xa5273abf:
		x.UInt(0xa5273abf)

		// set flags
		var flags uint32 = 0

		if m.GetMuted() != nil {
			flags |= 1 << 0
		}
		if m.GetVolume() != nil {
			flags |= 1 << 1
		}
		if m.GetRaiseHand() != nil {
			flags |= 1 << 2
		}
		if m.GetVideoStopped() != nil {
			flags |= 1 << 3
		}
		if m.GetVideoPaused() != nil {
			flags |= 1 << 4
		}
		if m.GetPresentationPaused() != nil {
			flags |= 1 << 5
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetCall().Encode(layer))
		x.Bytes(m.GetParticipant().Encode(layer))
		if m.GetMuted() != nil {
			x.Bytes(m.GetMuted().Encode(layer))
		}

		if m.GetVolume() != nil {
			x.Int(m.GetVolume().Value)
		}

		if m.GetRaiseHand() != nil {
			x.Bytes(m.GetRaiseHand().Encode(layer))
		}

		if m.GetVideoStopped() != nil {
			x.Bytes(m.GetVideoStopped().Encode(layer))
		}

		if m.GetVideoPaused() != nil {
			x.Bytes(m.GetVideoPaused().Encode(layer))
		}

		if m.GetPresentationPaused() != nil {
			x.Bytes(m.GetPresentationPaused().Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneEditGroupCallParticipant) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneEditGroupCallParticipant) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xa5273abf:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi

		m2 := &InputGroupCall{}
		m2.Decode(dBuf)
		m.Call = m2

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Participant = m3

		if (flags & (1 << 0)) != 0 {
			m4 := &Bool{}
			m4.Decode(dBuf)
			m.Muted = m4
		}
		if (flags & (1 << 1)) != 0 {
			m.Volume = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 2)) != 0 {
			m6 := &Bool{}
			m6.Decode(dBuf)
			m.RaiseHand = m6
		}
		if (flags & (1 << 3)) != 0 {
			m7 := &Bool{}
			m7.Decode(dBuf)
			m.VideoStopped = m7
		}
		if (flags & (1 << 4)) != 0 {
			m8 := &Bool{}
			m8.Decode(dBuf)
			m.VideoPaused = m8
		}
		if (flags & (1 << 5)) != 0 {
			m9 := &Bool{}
			m9.Decode(dBuf)
			m.PresentationPaused = m9
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneEditGroupCallParticipant) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneEditGroupCallTitle
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneEditGroupCallTitle) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_editGroupCallTitle))

	switch uint32(m.Constructor) {
	case 0x1ca6ac0a:
		x.UInt(0x1ca6ac0a)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))
		x.String(m.GetTitle())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneEditGroupCallTitle) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneEditGroupCallTitle) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1ca6ac0a:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m.Title = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneEditGroupCallTitle) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetGroupCallJoinAs
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetGroupCallJoinAs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getGroupCallJoinAs))

	switch uint32(m.Constructor) {
	case 0xef7c213a:
		x.UInt(0xef7c213a)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetGroupCallJoinAs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetGroupCallJoinAs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xef7c213a:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetGroupCallJoinAs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneExportGroupCallInvite
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneExportGroupCallInvite) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_exportGroupCallInvite))

	switch uint32(m.Constructor) {
	case 0xe6aa647f:
		x.UInt(0xe6aa647f)

		// set flags
		var flags uint32 = 0

		if m.GetCanSelfUnmute() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetCall().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneExportGroupCallInvite) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneExportGroupCallInvite) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe6aa647f:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.CanSelfUnmute = true
		}

		m3 := &InputGroupCall{}
		m3.Decode(dBuf)
		m.Call = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneExportGroupCallInvite) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneToggleGroupCallStartSubscription
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneToggleGroupCallStartSubscription) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_toggleGroupCallStartSubscription))

	switch uint32(m.Constructor) {
	case 0x219c34e6:
		x.UInt(0x219c34e6)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))
		x.Bytes(m.GetSubscribed().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneToggleGroupCallStartSubscription) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneToggleGroupCallStartSubscription) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x219c34e6:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Subscribed = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneToggleGroupCallStartSubscription) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneStartScheduledGroupCall
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneStartScheduledGroupCall) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_startScheduledGroupCall))

	switch uint32(m.Constructor) {
	case 0x5680e342:
		x.UInt(0x5680e342)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneStartScheduledGroupCall) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneStartScheduledGroupCall) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5680e342:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneStartScheduledGroupCall) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneSaveDefaultGroupCallJoinAs
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneSaveDefaultGroupCallJoinAs) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_saveDefaultGroupCallJoinAs))

	switch uint32(m.Constructor) {
	case 0x575e1f8c:
		x.UInt(0x575e1f8c)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetJoinAs().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneSaveDefaultGroupCallJoinAs) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneSaveDefaultGroupCallJoinAs) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x575e1f8c:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &InputPeer{}
		m2.Decode(dBuf)
		m.JoinAs = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneSaveDefaultGroupCallJoinAs) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneJoinGroupCallPresentation
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneJoinGroupCallPresentation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_joinGroupCallPresentation))

	switch uint32(m.Constructor) {
	case 0xcbea6bc4:
		x.UInt(0xcbea6bc4)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))
		x.Bytes(m.GetParams().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneJoinGroupCallPresentation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneJoinGroupCallPresentation) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcbea6bc4:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		m2 := &DataJSON{}
		m2.Decode(dBuf)
		m.Params = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneJoinGroupCallPresentation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneLeaveGroupCallPresentation
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneLeaveGroupCallPresentation) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_leaveGroupCallPresentation))

	switch uint32(m.Constructor) {
	case 0x1c50d144:
		x.UInt(0x1c50d144)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneLeaveGroupCallPresentation) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneLeaveGroupCallPresentation) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1c50d144:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneLeaveGroupCallPresentation) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetGroupCallStreamChannels
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetGroupCallStreamChannels) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getGroupCallStreamChannels))

	switch uint32(m.Constructor) {
	case 0x1ab21940:
		x.UInt(0x1ab21940)

		// no flags

		x.Bytes(m.GetCall().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetGroupCallStreamChannels) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetGroupCallStreamChannels) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1ab21940:

		// not has flags

		m1 := &InputGroupCall{}
		m1.Decode(dBuf)
		m.Call = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetGroupCallStreamChannels) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPhoneGetGroupCallStreamRtmpUrl
///////////////////////////////////////////////////////////////////////////////
func (m *TLPhoneGetGroupCallStreamRtmpUrl) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_phone_getGroupCallStreamRtmpUrl))

	switch uint32(m.Constructor) {
	case 0xdeb3abbf:
		x.UInt(0xdeb3abbf)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))
		x.Bytes(m.GetRevoke().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPhoneGetGroupCallStreamRtmpUrl) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPhoneGetGroupCallStreamRtmpUrl) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdeb3abbf:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		m2 := &Bool{}
		m2.Decode(dBuf)
		m.Revoke = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPhoneGetGroupCallStreamRtmpUrl) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLLangpackGetLangPack
///////////////////////////////////////////////////////////////////////////////
func (m *TLLangpackGetLangPack) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_langpack_getLangPack))

	switch uint32(m.Constructor) {
	case 0xf2f2330a:
		x.UInt(0xf2f2330a)

		// no flags

		x.String(m.GetLangPack())
		x.String(m.GetLangCode())

	case 0x9ab5c58e:
		x.UInt(0x9ab5c58e)

		// no flags

		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLLangpackGetLangPack) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangpackGetLangPack) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xf2f2330a:

		// not has flags

		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()
		return dBuf.GetError()
	case 0x9ab5c58e:

		// not has flags

		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLLangpackGetLangPack) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLLangpackGetStrings
///////////////////////////////////////////////////////////////////////////////
func (m *TLLangpackGetStrings) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_langpack_getStrings))

	switch uint32(m.Constructor) {
	case 0xefea3803:
		x.UInt(0xefea3803)

		// no flags

		x.String(m.GetLangPack())
		x.String(m.GetLangCode())

		x.VectorString(m.GetKeys())

	case 0x2e1ee318:
		x.UInt(0x2e1ee318)

		// no flags

		x.String(m.GetLangCode())

		x.VectorString(m.GetKeys())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLLangpackGetStrings) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangpackGetStrings) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xefea3803:

		// not has flags

		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()

		m.Keys = dBuf.VectorString()

		return dBuf.GetError()
	case 0x2e1ee318:

		// not has flags

		m.LangCode = dBuf.String()

		m.Keys = dBuf.VectorString()

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLLangpackGetStrings) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLLangpackGetDifference
///////////////////////////////////////////////////////////////////////////////
func (m *TLLangpackGetDifference) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_langpack_getDifference))

	switch uint32(m.Constructor) {
	case 0xcd984aa5:
		x.UInt(0xcd984aa5)

		// no flags

		x.String(m.GetLangPack())
		x.String(m.GetLangCode())
		x.Int(m.GetFromVersion())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLLangpackGetDifference) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangpackGetDifference) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xcd984aa5:

		// not has flags

		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()
		m.FromVersion = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLLangpackGetDifference) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLLangpackGetLanguages
///////////////////////////////////////////////////////////////////////////////
func (m *TLLangpackGetLanguages) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_langpack_getLanguages))

	switch uint32(m.Constructor) {
	case 0x42c6978f:
		x.UInt(0x42c6978f)

		// no flags

		x.String(m.GetLangPack())

	case 0x800fd57d:
		x.UInt(0x800fd57d)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLLangpackGetLanguages) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangpackGetLanguages) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x42c6978f:

		// not has flags

		m.LangPack = dBuf.String()
		return dBuf.GetError()
	case 0x800fd57d:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLLangpackGetLanguages) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLLangpackGetLanguage
///////////////////////////////////////////////////////////////////////////////
func (m *TLLangpackGetLanguage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_langpack_getLanguage))

	switch uint32(m.Constructor) {
	case 0x6a596502:
		x.UInt(0x6a596502)

		// no flags

		x.String(m.GetLangPack())
		x.String(m.GetLangCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLLangpackGetLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLLangpackGetLanguage) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6a596502:

		// not has flags

		m.LangPack = dBuf.String()
		m.LangCode = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLLangpackGetLanguage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLFoldersEditPeerFolders
///////////////////////////////////////////////////////////////////////////////
func (m *TLFoldersEditPeerFolders) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_folders_editPeerFolders))

	switch uint32(m.Constructor) {
	case 0x6847d0ab:
		x.UInt(0x6847d0ab)

		// no flags

		x.Int(int32(CRC32_vector))
		x.Int(int32(len(m.GetFolderPeers())))
		for _, v := range m.GetFolderPeers() {
			x.Bytes((*v).Encode(layer))
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLFoldersEditPeerFolders) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFoldersEditPeerFolders) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x6847d0ab:

		// not has flags

		c1 := dBuf.Int()
		if c1 != int32(CRC32_vector) {
			// dBuf.err = fmt.Errorf("invalid CRC32_vector, c%d: %d", 1, c1)
			return dBuf.GetError()
		}
		l1 := dBuf.Int()
		v1 := make([]*InputFolderPeer, l1)
		for i := int32(0); i < l1; i++ {
			v1[i] = &InputFolderPeer{}
			v1[i].Decode(dBuf)
		}
		m.FolderPeers = v1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLFoldersEditPeerFolders) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLFoldersDeleteFolder
///////////////////////////////////////////////////////////////////////////////
func (m *TLFoldersDeleteFolder) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_folders_deleteFolder))

	switch uint32(m.Constructor) {
	case 0x1c295881:
		x.UInt(0x1c295881)

		// no flags

		x.Int(m.GetFolderId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLFoldersDeleteFolder) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLFoldersDeleteFolder) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x1c295881:

		// not has flags

		m.FolderId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLFoldersDeleteFolder) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStatsGetBroadcastStats
///////////////////////////////////////////////////////////////////////////////
func (m *TLStatsGetBroadcastStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stats_getBroadcastStats))

	switch uint32(m.Constructor) {
	case 0xab42441a:
		x.UInt(0xab42441a)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStatsGetBroadcastStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGetBroadcastStats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xab42441a:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}

		m3 := &InputChannel{}
		m3.Decode(dBuf)
		m.Channel = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStatsGetBroadcastStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStatsLoadAsyncGraph
///////////////////////////////////////////////////////////////////////////////
func (m *TLStatsLoadAsyncGraph) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stats_loadAsyncGraph))

	switch uint32(m.Constructor) {
	case 0x621d5fa0:
		x.UInt(0x621d5fa0)

		// set flags
		var flags uint32 = 0

		if m.GetX() != nil {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetToken())
		if m.GetX() != nil {
			x.Long(m.GetX().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStatsLoadAsyncGraph) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsLoadAsyncGraph) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x621d5fa0:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Token = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.X = &types.Int64Value{Value: dBuf.Long()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStatsLoadAsyncGraph) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStatsGetMegagroupStats
///////////////////////////////////////////////////////////////////////////////
func (m *TLStatsGetMegagroupStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stats_getMegagroupStats))

	switch uint32(m.Constructor) {
	case 0xdcdf8607:
		x.UInt(0xdcdf8607)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStatsGetMegagroupStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGetMegagroupStats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xdcdf8607:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}

		m3 := &InputChannel{}
		m3.Decode(dBuf)
		m.Channel = m3

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStatsGetMegagroupStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStatsGetMessagePublicForwards
///////////////////////////////////////////////////////////////////////////////
func (m *TLStatsGetMessagePublicForwards) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stats_getMessagePublicForwards))

	switch uint32(m.Constructor) {
	case 0x5630281b:
		x.UInt(0x5630281b)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetMsgId())
		x.Int(m.GetOffsetRate())
		x.Bytes(m.GetOffsetPeer().Encode(layer))
		x.Int(m.GetOffsetId())
		x.Int(m.GetLimit())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStatsGetMessagePublicForwards) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGetMessagePublicForwards) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5630281b:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m.MsgId = dBuf.Int()
		m.OffsetRate = dBuf.Int()

		m4 := &InputPeer{}
		m4.Decode(dBuf)
		m.OffsetPeer = m4

		m.OffsetId = dBuf.Int()
		m.Limit = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStatsGetMessagePublicForwards) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLStatsGetMessageStats
///////////////////////////////////////////////////////////////////////////////
func (m *TLStatsGetMessageStats) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_stats_getMessageStats))

	switch uint32(m.Constructor) {
	case 0xb6e0a3f5:
		x.UInt(0xb6e0a3f5)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetChannel().Encode(layer))
		x.Int(m.GetMsgId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLStatsGetMessageStats) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLStatsGetMessageStats) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xb6e0a3f5:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}

		m3 := &InputChannel{}
		m3.Decode(dBuf)
		m.Channel = m3

		m.MsgId = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLStatsGetMessageStats) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthLogOut5717DA40
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthLogOut5717DA40) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_logOut5717DA40))

	switch uint32(m.Constructor) {
	case 0x5717da40:
		x.UInt(0x5717da40)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthLogOut5717DA40) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthLogOut5717DA40) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5717da40:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthLogOut5717DA40) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUsersGetFullUserCA30A5B1
///////////////////////////////////////////////////////////////////////////////
func (m *TLUsersGetFullUserCA30A5B1) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_users_getFullUserCA30A5B1))

	switch uint32(m.Constructor) {
	case 0xca30a5b1:
		x.UInt(0xca30a5b1)

		// no flags

		x.Bytes(m.GetId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUsersGetFullUserCA30A5B1) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersGetFullUserCA30A5B1) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xca30a5b1:

		// not has flags

		m1 := &InputUser{}
		m1.Decode(dBuf)
		m.Id = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUsersGetFullUserCA30A5B1) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetPeerSettings3672E09C
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetPeerSettings3672E09C) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getPeerSettings3672E09C))

	switch uint32(m.Constructor) {
	case 0x3672e09c:
		x.UInt(0x3672e09c)

		// no flags

		x.Bytes(m.GetPeer().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetPeerSettings3672E09C) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetPeerSettings3672E09C) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3672e09c:

		// not has flags

		m1 := &InputPeer{}
		m1.Decode(dBuf)
		m.Peer = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetPeerSettings3672E09C) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLChannelsDeleteUserHistory
///////////////////////////////////////////////////////////////////////////////
func (m *TLChannelsDeleteUserHistory) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_channels_deleteUserHistory))

	switch uint32(m.Constructor) {
	case 0xd10dd71b:
		x.UInt(0xd10dd71b)

		// no flags

		x.Bytes(m.GetChannel().Encode(layer))
		x.Bytes(m.GetUserId().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLChannelsDeleteUserHistory) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLChannelsDeleteUserHistory) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd10dd71b:

		// not has flags

		m1 := &InputChannel{}
		m1.Decode(dBuf)
		m.Channel = m1

		m2 := &InputUser{}
		m2.Decode(dBuf)
		m.UserId = m2

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLChannelsDeleteUserHistory) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountGetChatThemesD6D71D7B
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountGetChatThemesD6D71D7B) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_getChatThemesD6D71D7B))

	switch uint32(m.Constructor) {
	case 0xd6d71d7b:
		x.UInt(0xd6d71d7b)

		// no flags

		x.Int(m.GetHash())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountGetChatThemesD6D71D7B) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountGetChatThemesD6D71D7B) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xd6d71d7b:

		// not has flags

		m.Hash = dBuf.Int()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountGetChatThemesD6D71D7B) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLMessagesGetStatsURL
///////////////////////////////////////////////////////////////////////////////
func (m *TLMessagesGetStatsURL) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_messages_getStatsURL))

	switch uint32(m.Constructor) {
	case 0x812c2ae6:
		x.UInt(0x812c2ae6)

		// set flags
		var flags uint32 = 0

		if m.GetDark() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Bytes(m.GetPeer().Encode(layer))
		x.String(m.GetParams())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLMessagesGetStatsURL) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLMessagesGetStatsURL) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x812c2ae6:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		if (flags & (1 << 0)) != 0 {
			m.Dark = true
		}

		m3 := &InputPeer{}
		m3.Decode(dBuf)
		m.Peer = m3

		m.Params = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLMessagesGetStatsURL) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLHelpTest
///////////////////////////////////////////////////////////////////////////////
func (m *TLHelpTest) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_help_test))

	switch uint32(m.Constructor) {
	case 0xc0e202f7:
		x.UInt(0xc0e202f7)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLHelpTest) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLHelpTest) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xc0e202f7:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLHelpTest) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedCreatePredefinedUser
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedCreatePredefinedUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_createPredefinedUser))

	switch uint32(m.Constructor) {
	case 0x23e2e31e:
		x.UInt(0x23e2e31e)

		// set flags
		var flags uint32 = 0

		if m.GetFirstName() != nil {
			flags |= 1 << 0
		}
		if m.GetLastName() != nil {
			flags |= 1 << 1
		}
		if m.GetUsername() != nil {
			flags |= 1 << 2
		}

		if m.GetVerified() == true {
			flags |= 1 << 3
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetPhone())
		if m.GetFirstName() != nil {
			x.String(m.GetFirstName().Value)
		}

		if m.GetLastName() != nil {
			x.String(m.GetLastName().Value)
		}

		if m.GetUsername() != nil {
			x.String(m.GetUsername().Value)
		}

		x.String(m.GetCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedCreatePredefinedUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedCreatePredefinedUser) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x23e2e31e:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Phone = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.FirstName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.LastName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.Username = &types.StringValue{Value: dBuf.String()}
		}

		m.Code = dBuf.String()
		if (flags & (1 << 3)) != 0 {
			m.Verified = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedCreatePredefinedUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedUpdatePredefinedUsername
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedUpdatePredefinedUsername) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_updatePredefinedUsername))

	switch uint32(m.Constructor) {
	case 0x12dc0d3a:
		x.UInt(0x12dc0d3a)

		// no flags

		x.String(m.GetPhone())
		x.String(m.GetUsername())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedUpdatePredefinedUsername) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedUpdatePredefinedUsername) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x12dc0d3a:

		// not has flags

		m.Phone = dBuf.String()
		m.Username = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedUpdatePredefinedUsername) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedUpdatePredefinedProfile
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedUpdatePredefinedProfile) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_updatePredefinedProfile))

	switch uint32(m.Constructor) {
	case 0x2cdcf945:
		x.UInt(0x2cdcf945)

		// set flags
		var flags uint32 = 0

		if m.GetFirstName() != nil {
			flags |= 1 << 0
		}
		if m.GetLastName() != nil {
			flags |= 1 << 1
		}
		if m.GetAbout() != nil {
			flags |= 1 << 2
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetPhone())
		if m.GetFirstName() != nil {
			x.String(m.GetFirstName().Value)
		}

		if m.GetLastName() != nil {
			x.String(m.GetLastName().Value)
		}

		if m.GetAbout() != nil {
			x.String(m.GetAbout().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedUpdatePredefinedProfile) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedUpdatePredefinedProfile) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x2cdcf945:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Phone = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.FirstName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 1)) != 0 {
			m.LastName = &types.StringValue{Value: dBuf.String()}
		}

		if (flags & (1 << 2)) != 0 {
			m.About = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedUpdatePredefinedProfile) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedUpdatePredefinedVerified
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedUpdatePredefinedVerified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_updatePredefinedVerified))

	switch uint32(m.Constructor) {
	case 0x3f3528a9:
		x.UInt(0x3f3528a9)

		// set flags
		var flags uint32 = 0

		if m.GetVerified() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetPhone())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedUpdatePredefinedVerified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedUpdatePredefinedVerified) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x3f3528a9:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Phone = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.Verified = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedUpdatePredefinedVerified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedUpdatePredefinedCode
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedUpdatePredefinedCode) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_updatePredefinedCode))

	switch uint32(m.Constructor) {
	case 0xe5361587:
		x.UInt(0xe5361587)

		// no flags

		x.String(m.GetPhone())
		x.String(m.GetCode())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedUpdatePredefinedCode) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedUpdatePredefinedCode) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe5361587:

		// not has flags

		m.Phone = dBuf.String()
		m.Code = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedUpdatePredefinedCode) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedGetPredefinedUser
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedGetPredefinedUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_getPredefinedUser))

	switch uint32(m.Constructor) {
	case 0x5202a415:
		x.UInt(0x5202a415)

		// no flags

		x.String(m.GetPhone())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedGetPredefinedUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedGetPredefinedUser) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5202a415:

		// not has flags

		m.Phone = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedGetPredefinedUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLPredefinedGetPredefinedUsers
///////////////////////////////////////////////////////////////////////////////
func (m *TLPredefinedGetPredefinedUsers) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_predefined_getPredefinedUsers))

	switch uint32(m.Constructor) {
	case 0x29981ac4:
		x.UInt(0x29981ac4)

		// no flags

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLPredefinedGetPredefinedUsers) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLPredefinedGetPredefinedUsers) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x29981ac4:

		// not has flags

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLPredefinedGetPredefinedUsers) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLUsersGetMe
///////////////////////////////////////////////////////////////////////////////
func (m *TLUsersGetMe) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_users_getMe))

	switch uint32(m.Constructor) {
	case 0x31345712:
		x.UInt(0x31345712)

		// no flags

		x.Long(m.GetId())
		x.String(m.GetToken())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLUsersGetMe) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLUsersGetMe) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x31345712:

		// not has flags

		m.Id = dBuf.Long()
		m.Token = dBuf.String()
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLUsersGetMe) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAccountUpdateVerified
///////////////////////////////////////////////////////////////////////////////
func (m *TLAccountUpdateVerified) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_account_updateVerified))

	switch uint32(m.Constructor) {
	case 0x15140971:
		x.UInt(0x15140971)

		// set flags
		var flags uint32 = 0

		if m.GetVerified() == true {
			flags |= 1 << 0
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.Long(m.GetId())

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAccountUpdateVerified) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAccountUpdateVerified) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x15140971:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Id = dBuf.Long()
		if (flags & (1 << 0)) != 0 {
			m.Verified = true
		}
		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAccountUpdateVerified) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLAuthToggleBan
///////////////////////////////////////////////////////////////////////////////
func (m *TLAuthToggleBan) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_auth_toggleBan))

	switch uint32(m.Constructor) {
	case 0xe21f7938:
		x.UInt(0xe21f7938)

		// set flags
		var flags uint32 = 0

		if m.GetPredefined() == true {
			flags |= 1 << 0
		}
		if m.GetExpires() != nil {
			flags |= 1 << 1
		}
		if m.GetReason() != nil {
			flags |= 1 << 1
		}

		x.UInt(flags)

		// flags Debug by @benqi
		x.String(m.GetPhone())
		if m.GetExpires() != nil {
			x.Int(m.GetExpires().Value)
		}

		if m.GetReason() != nil {
			x.String(m.GetReason().Value)
		}

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLAuthToggleBan) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLAuthToggleBan) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0xe21f7938:

		flags := dBuf.UInt()
		_ = flags

		// flags Debug by @benqi
		m.Phone = dBuf.String()
		if (flags & (1 << 0)) != 0 {
			m.Predefined = true
		}
		if (flags & (1 << 1)) != 0 {
			m.Expires = &types.Int32Value{Value: dBuf.Int()}
		}

		if (flags & (1 << 1)) != 0 {
			m.Reason = &types.StringValue{Value: dBuf.String()}
		}

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLAuthToggleBan) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// TLBizInvokeBizDataRaw
///////////////////////////////////////////////////////////////////////////////
func (m *TLBizInvokeBizDataRaw) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	// x.Int(int32(CRC32_biz_invokeBizDataRaw))

	switch uint32(m.Constructor) {
	case 0x5a191146:
		x.UInt(0x5a191146)

		// no flags

		x.Bytes(m.GetBizData().Encode(layer))

	default:
		// log.Errorf("")
	}

	return x.GetBuf()
}

func (m *TLBizInvokeBizDataRaw) CalcByteSize(layer int32) int {
	return 0
}

func (m *TLBizInvokeBizDataRaw) Decode(dBuf *DecodeBuf) error {
	switch uint32(m.Constructor) {
	case 0x5a191146:

		// not has flags

		m1 := &BizDataRaw{}
		m1.Decode(dBuf)
		m.BizData = m1

		return dBuf.GetError()

	default:
		// log.Errorf("")
	}
	return dBuf.GetError()
}

func (m *TLBizInvokeBizDataRaw) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

//----------------------------------------------------------------------------------------------------------------
// Vector_SecureValue
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_SecureValue) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_SecureValue) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*SecureValue, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(SecureValue)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_SecureValue) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_SecureValue) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_WallPaper
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_WallPaper) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_WallPaper) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*WallPaper, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(WallPaper)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_WallPaper) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_WallPaper) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_User
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_User) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_User) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*User, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(User)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_User) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_User) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_Int
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_Int) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.VectorInt(m.Datas)

	return x.GetBuf()
}

func (m *Vector_Int) Decode(dBuf *DecodeBuf) error {
	m.Datas = dBuf.VectorInt()

	return dBuf.GetError()
}

func (m *Vector_Int) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_Int) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_ContactStatus
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_ContactStatus) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_ContactStatus) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*ContactStatus, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(ContactStatus)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_ContactStatus) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_ContactStatus) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_SavedContact
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_SavedContact) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_SavedContact) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*SavedContact, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(SavedContact)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_SavedContact) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_SavedContact) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_ReceivedNotifyMessage
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_ReceivedNotifyMessage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_ReceivedNotifyMessage) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*ReceivedNotifyMessage, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(ReceivedNotifyMessage)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_ReceivedNotifyMessage) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_ReceivedNotifyMessage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_Long
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_Long) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.VectorLong(m.Datas)

	return x.GetBuf()
}

func (m *Vector_Long) Decode(dBuf *DecodeBuf) error {
	m.Datas = dBuf.VectorLong()

	return dBuf.GetError()
}

func (m *Vector_Long) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_Long) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_StickerSetCovered
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_StickerSetCovered) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_StickerSetCovered) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*StickerSetCovered, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(StickerSetCovered)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_StickerSetCovered) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_StickerSetCovered) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_MessageRange
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_MessageRange) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_MessageRange) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*MessageRange, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(MessageRange)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_MessageRange) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_MessageRange) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_DialogPeer
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_DialogPeer) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_DialogPeer) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*DialogPeer, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(DialogPeer)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_DialogPeer) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_DialogPeer) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_EmojiLanguage
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_EmojiLanguage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_EmojiLanguage) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*EmojiLanguage, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(EmojiLanguage)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_EmojiLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_EmojiLanguage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_Messages_SearchCounter
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_Messages_SearchCounter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_Messages_SearchCounter) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*Messages_SearchCounter, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(Messages_SearchCounter)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_Messages_SearchCounter) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_Messages_SearchCounter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_DialogFilter
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_DialogFilter) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_DialogFilter) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*DialogFilter, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(DialogFilter)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_DialogFilter) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_DialogFilter) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_DialogFilterSuggested
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_DialogFilterSuggested) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_DialogFilterSuggested) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*DialogFilterSuggested, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(DialogFilterSuggested)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_DialogFilterSuggested) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_DialogFilterSuggested) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_FileHash
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_FileHash) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_FileHash) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*FileHash, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(FileHash)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_FileHash) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_FileHash) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_BotCommand
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_BotCommand) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_BotCommand) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*BotCommand, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(BotCommand)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_BotCommand) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_BotCommand) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_LangPackString
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_LangPackString) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_LangPackString) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*LangPackString, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(LangPackString)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_LangPackString) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_LangPackString) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_LangPackLanguage
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_LangPackLanguage) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_LangPackLanguage) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*LangPackLanguage, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(LangPackLanguage)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_LangPackLanguage) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_LangPackLanguage) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}

// Vector_PredefinedUser
///////////////////////////////////////////////////////////////////////////////
func (m *Vector_PredefinedUser) Encode(layer int32) []byte {
	x := NewEncodeBuf(512)
	x.Int(int32(CRC32_vector))
	x.Int(int32(len(m.Datas)))
	for _, v := range m.Datas {
		x.Bytes((*v).Encode(layer))
	}

	return x.GetBuf()
}

func (m *Vector_PredefinedUser) Decode(dBuf *DecodeBuf) error {
	dBuf.Int() // TODO(@benqi): Check crc32 invalid
	l1 := dBuf.Int()
	m.Datas = make([]*PredefinedUser, l1)
	for i := int32(0); i < l1; i++ {
		m.Datas[i] = new(PredefinedUser)
		(*m.Datas[i]).Decode(dBuf)
	}

	return dBuf.GetError()
}

func (m *Vector_PredefinedUser) CalcByteSize(layer int32) int {
	return 0
}

func (m *Vector_PredefinedUser) DebugString() string {
	jsonm := &jsonpb.Marshaler{OrigName: true}
	dbgString, _ := jsonm.MarshalToString(m)
	return dbgString
}
